<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\mangling\swift-sd.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAS_MAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_MAIN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IFDBG</name></cpp:macro> <cpp:value>if(0)</cpp:value></cpp:define>

<struct>struct <name>Type</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>Type</name></name></type> <name><name>types</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"Sb"</literal></expr>, <expr><literal type="string">"Bool"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SS"</literal></expr>, <expr><literal type="string">"String"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"FS"</literal></expr>, <expr><literal type="string">"String"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"GV"</literal></expr>, <expr><literal type="string">"mutableAddressor"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="string">"Ss"</literal></expr>, <expr><literal type="string">"generic"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="string">"S_"</literal></expr>, <expr><literal type="string">"Generic"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="string">"TF"</literal></expr>, <expr><literal type="string">"GenericSpec"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="string">"Ts"</literal></expr>, <expr><literal type="string">"String"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="string">"Sa"</literal></expr>, <expr><literal type="string">"Array"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Si"</literal></expr>, <expr><literal type="string">"Swift.Int"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Sf"</literal></expr>, <expr><literal type="string">"Float"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Sb"</literal></expr>, <expr><literal type="string">"Bool"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Su"</literal></expr>, <expr><literal type="string">"UInt"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SQ"</literal></expr>, <expr><literal type="string">"ImplicitlyUnwrappedOptional"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Sc"</literal></expr>, <expr><literal type="string">"UnicodeScalar"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Sd"</literal></expr>, <expr><literal type="string">"Double"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SS"</literal></expr>, <expr><literal type="string">"String"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="string">"Bi1"</literal></expr>, <expr><literal type="string">"Builtin.Int1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Bp"</literal></expr>, <expr><literal type="string">"Builtin.RawPointer"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Bw"</literal></expr>, <expr><literal type="string">"Builtin.Word"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>Type</name></name></type> <name><name>metas</name> <index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"FC"</literal></expr>, <expr><literal type="string">"ClassFunc"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"S0_FT"</literal></expr>, <expr><literal type="string">"?"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"RxC"</literal></expr>, <expr><literal type="string">".."</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"S0"</literal></expr>, <expr><literal type="string">"self"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"U__FQ_T_"</literal></expr>, <expr><literal type="string">"&lt;A&gt;(A)"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ToFC"</literal></expr>, <expr><literal type="string">"@objc class func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ToF"</literal></expr>, <expr><literal type="string">"@objc func"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>Type</name></name></type> <name><name>flags</name> <index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"setter"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"getter"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"method"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"destructor"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"D"</literal></expr>, <expr><literal type="string">"deallocator"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"constructor"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"C"</literal></expr>, <expr><literal type="string">"allocator"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> , <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getnum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>n</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>n</name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>n</name> <operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>numpos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>n</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name><name>n</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>n</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getstring</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>len</name></expr></argument> &gt;</argument_list></name> <sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="string">""</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>resolve</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Type</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>foo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>bar</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name> <operator>||</operator> <operator>!</operator><name>foo</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>foo</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>code</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>foo</name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>code</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bar</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>bar</name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>foo</name> <operator>+</operator> <name>len</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>have_swift_demangle</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>swift_demangle_cmd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>swift_demangle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>have_swift_demangle</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>swift_demangle</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>have_swift_demangle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>swift_demangle</name> <operator>=</operator> <call><name>r_file_path</name> <argument_list>(<argument><expr><literal type="string">"swift-demangle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>swift_demangle</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>swift_demangle</name></expr></argument>, <argument><expr><literal type="string">"swift-demangle"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xcrun</name> <init>= <expr><call><name>r_file_path</name> <argument_list>(<argument><expr><literal type="string">"xcrun"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>xcrun</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>xcrun</name></expr></argument>, <argument><expr><literal type="string">"xcrun"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>swift_demangle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>swift_demangle</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s swift-demangle"</literal></expr></argument>, <argument><expr><name>xcrun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>have_swift_demangle</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>xcrun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>swift_demangle</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_sys_cmd_strf</name> <argument_list>(<argument><expr><literal type="string">"%s -compact '%s'"</literal></expr></argument>,

<argument><expr><name>swift_demangle</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_str_trim</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>swift_demangle_lib</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__UNIX__</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>haveSwiftCore</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>swift_demangle</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>symlen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>haveSwiftCore</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>lib</name> <init>= <expr><call><name>r_lib_dl_open</name> <argument_list>(<argument><expr><literal type="string">"/usr/lib/swift/libswiftCore.dylib"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lib</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>swift_demangle</name> <operator>=</operator> <call><name>r_lib_dl_sym</name> <argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"swift_demangle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>haveSwiftCore</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>swift_demangle</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>swift_demangle</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_demangle_swift</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>syscmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRCAT_BOUNDS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (((x) + 2 + strlen (out)) &gt; sizeof (out)) break;</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name></type> <name><name>out</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>is_generic</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_first</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retmode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"imp."</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"reloc."</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'T'</literal> <operator>&amp;&amp;</operator> <call><name>strncmp</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"_T"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strncmp</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__T"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"$s"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"__"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

const char *element[] = {

"module", "class", "method", NULL

};

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>swift_demangle_lib</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q_end</name> <init>= <expr><name>p</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q_start</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>syscmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>swift_demangle_cmd</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tail</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'W'</literal></expr>:</case>

<switch>switch <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <literal type="string">"..protocol"</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'F'</literal></expr>:</case>

<switch>switch <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <literal type="string">"..extension"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'M'</literal></expr>:</case>

<switch>switch <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <literal type="string">"..accessor.metadata"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <literal type="string">"..override"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <literal type="string">"..metaclass"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'L'</literal></expr>:</case>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <literal type="string">"..lazy.metadata"</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <literal type="string">"..metadata"</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'I'</literal></expr>:</case> 

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tail</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_DIGIT</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'v'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'I'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'o'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'T'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'V'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'M'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'C'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'F'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'W'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"SS"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"Swift.String.init ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"vdv"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <literal type="string">"..field"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"oFC"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <literal type="string">"..init.witnesstable"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (!strncmp (p+1, "C", 2)) {

strcat (out, "class ");

p += 3;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>numpos</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>len</name> <operator>&amp;&amp;</operator> <name>q</name> <operator>&lt;</operator> <name>q_end</name></expr>;</condition> <incr><expr><name>q</name> <operator>+=</operator> <name>len</name></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>getstring</name> <argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"ee"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"Swift"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

printf ("%s %d %s\n", element[i],

len, getstring (q, len));

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STRCAT_BOUNDS</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>getstring</name> <argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&gt;</operator> <name>q_end</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>resolve</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">'U'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">'R'</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>resolve</name> <argument_list>(<argument><expr><name>metas</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>resolve</name> <argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name>q</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>getstring</name> <argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (name &amp;&amp; *name) {

printf ("Field Name: %s\n", name);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>resolve</name> <argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>q</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>resolve</name> <argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT_BOUNDS</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>attr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT_BOUNDS</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>attr2</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>attr2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT_BOUNDS</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>attr2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>attr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" -&gt; ()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>q</name> <operator>&amp;&amp;</operator> <name>q</name> <operator>&lt;</operator> <name>q_end</name> <operator>&amp;&amp;</operator> <name>q</name> <operator>&gt;=</operator> <name>q_start</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">'f'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>q</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Q</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name>q</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>getstring</name> <argument_list>(<argument><expr><name>Q</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>Q</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"uRxs"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Q</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name>q</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>getstring</name> <argument_list>(<argument><expr><name>Q</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>Q</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'S'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'0'</literal></expr>:</case>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" (self) -&gt; ()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name> <operator>=</operator> <name>q</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"__String"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'_'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Q</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name>q</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>getstring</name> <argument_list>(<argument><expr><name>Q</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>Q</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'B'</literal></expr>:</case>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>

<case>case <expr><literal type="char">'I'</literal></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>resolve</name> <argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>q</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <call><name>IS_DIGIT</name> <argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'F'</literal></expr>:</case>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" ()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>resolve</name> <argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>?</condition><then> <expr><name>q</name> <operator>+</operator> <literal type="number">3</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><literal type="char">'G'</literal></expr>:</case>

<expr_stmt><expr><name>q</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"_V"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>resolve</name> <argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><literal type="char">'V'</literal></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>resolve</name> <argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>q</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><literal type="char">'_'</literal></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>resolve</name> <argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>q</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>resolve</name> <argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"generic"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_generic</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>retmode</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>q_end</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" -&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT_BOUNDS</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>resolve</name> <argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>q</name></expr>?</condition><then> <expr><name>q</name> <operator>+</operator> <literal type="number">1</literal></expr></then><else>: <expr><name>q</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" -&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT_BOUNDS</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>retmode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>len</name></expr></argument> &gt;</argument_list></name> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <operator>(</operator><name>q_end</name> <operator>-</operator> <name>q</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>q</name><index>[<expr><name>len</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>getstring</name> <argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_first</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_generic</name></expr>?</condition><then><expr><literal type="string">"&lt;"</literal></expr></then><else>:<expr><literal type="string">"("</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>is_last</name> <operator>=</operator> <name><name>q</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCAT_BOUNDS</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STRCAT_BOUNDS</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_last</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_generic</name></expr>?</condition><then><expr><literal type="string">"&gt;"</literal></expr></then><else>:<expr><literal type="string">")"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_first</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'_'</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_generic</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_first</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" -&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT_BOUNDS</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" -&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT_BOUNDS</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>q</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>q</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"__"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>out</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tail</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>outstr</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>outstr</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">")("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>outstr</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXMAIN</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAS_MAIN</name></expr></cpp:if>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sym</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dem</name></decl>;</decl_stmt>

}</block></struct></type> <name>Test</name>;</typedef>

<decl_stmt><decl><type><name>Test</name></type> <name><name>swift_tests</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><literal type="string">"_TWPu0_Rq_Ss14CollectionType_GVSs17MapCollectionViewq_q0__Ss23_CollectionDefaultsTypeSs_8"</literal></expr>,

<expr><literal type="string">"&lt;generic _CollectionDefaultsType&gt;"</literal></expr>

}</block></expr>,

<expr><block>{

<expr><literal type="string">"_TWPurGVSs15CollectionOfOneq__Ss14CollectionTypeSs_248"</literal></expr>,

<expr><literal type="string">"CollectionOfOne&lt;generic CollectionType&gt;&lt;generic S&gt;"</literal></expr>

}</block></expr>,

<expr><block>{

<expr><literal type="string">"_TFSSCfT21_builtinStringLiteralBp8byteSizeBw7isASCIIBi1__SS"</literal></expr>

,<expr><literal type="string">"Swift.String.init (_builtinStringLiteral(Builtin.RawPointer byteSize__Builtin.Word isASCII__Builtin.Int1 _) -&gt; String"</literal></expr>

}</block></expr>,<expr><block>{

<expr><literal type="string">"_TFC10swifthello5Hellog5WorldSS"</literal></expr> 

,<expr><literal type="string">"swifthello.Hello.World.getter__String"</literal></expr>

}</block></expr>,<expr><block>{

<expr><literal type="string">"_TFC10swifthello5Hellom5WorldSS"</literal></expr> 

,<expr><literal type="string">"swifthello.Hello.World.method__String"</literal></expr>

}</block></expr>,<expr><block>{

<expr><literal type="string">"_TFC10swifthello5Hellos5WorldSS"</literal></expr> 

,<expr><literal type="string">"swifthello.Hello.World.setter__String"</literal></expr>

}</block></expr>,<expr><block>{

<expr><literal type="string">"_TFSSCfMSSFT21_builtinStringLiteralBp8byteSizeBw7isASCIIBi1__SS"</literal></expr>

,<expr><literal type="string">"Swift.String.init (_builtinStringLiteral(Builtin.RawPointer byteSize__Builtin.Word isASCII__Builtin.Int1 _) -&gt; String"</literal></expr>

}</block></expr>,<expr><block>{

<expr><literal type="string">"_TF10swifthello3norFT_Si"</literal></expr>

,<expr><literal type="string">"swifthello.nor () -&gt; Swift.Int"</literal></expr>

}</block></expr>,<expr><block>{

<expr><literal type="string">"_TFSs7printlnU__FQ_T_"</literal></expr>

,<expr><literal type="string">"println.&lt;A&gt;(A) -&gt; ()"</literal></expr>

}</block></expr>,<expr><block>{

<expr><literal type="string">"_TFSsa6C_ARGVGVSs20UnsafeMutablePointerGS_VSs4Int8__"</literal></expr>

,<expr><literal type="string">"C_ARGV&lt;generic UnsafeMutablePointer&gt;&lt;generic Int8&gt;"</literal></expr>

}</block></expr>,<expr><block>{

<expr><literal type="string">"_TFC10FlappyBird9GameScene10resetScenefS0_FT_T_"</literal></expr>

,<expr><literal type="string">"FlappyBird.GameScene.resetScene (self) -&gt; (__ _) ()"</literal></expr> 

}</block></expr>,<expr><block>{

<expr><literal type="string">"__TFC4main8BarClass8sayHellofT_T_"</literal></expr>

,<expr><literal type="string">"main.BarClass.sayHello"</literal></expr>

}</block></expr>,<expr><block>{

<expr><literal type="string">"__TFC4main4TostCfT_S0_"</literal></expr>

,<expr><literal type="string">"main.Tost.allocator"</literal></expr>

}</block></expr>,<expr><block>{

<expr><literal type="string">"__TFC4main4TostD"</literal></expr>

,<expr><literal type="string">"main.Tost.deallocator"</literal></expr>

}</block></expr>,<expr><block>{

<expr><literal type="string">"__TFC4main4TostcfT_S0_"</literal></expr>

,<expr><literal type="string">"main.Tost.constructor"</literal></expr>

}</block></expr>,<expr><block>{

<expr><literal type="string">"__TF4main4moinFT_Si"</literal></expr>

,<expr><literal type="string">"main.moin () -&gt; Swift.Int"</literal></expr>

}</block></expr>,<expr><block>{

<expr><literal type="string">"__TFC4main4Tostg3msgSS"</literal></expr>

,<expr><literal type="string">"main.Tost.msg.getter__String"</literal></expr>

}</block></expr>,<expr><block>{

<expr><literal type="string">"__TMC4main4Tost"</literal></expr>

,<expr><literal type="string">"main.Tost..metadata"</literal></expr>

}</block></expr>,<expr><block>{

<expr><literal type="string">"__TMLC4main4Tost"</literal></expr>

,<expr><literal type="string">"main.Tost..lazy.metadata"</literal></expr>

}</block></expr>,<expr><block>{

<expr><literal type="string">"__TMaC4main4Tost"</literal></expr>

,<expr><literal type="string">"main.Tost..accessor.metadata"</literal></expr>

}</block></expr>,<expr><block>{

<expr><literal type="string">"__TMmC4main4Tost"</literal></expr>

,<expr><literal type="string">"main.Tost..metaclass"</literal></expr>

}</block></expr>,<expr><block>{

<expr><literal type="string">"__TFV4main7Balanceg5widthSd"</literal></expr>

,<expr><literal type="string">"main.Balance.width.getter__Double"</literal></expr>

}</block></expr>,<expr><block>{

<expr><literal type="string">"__TWoFC4main4TostCfT_S0_"</literal></expr>

,<expr><literal type="string">"Tost.allocator..init.witnesstable"</literal></expr>

}</block></expr>,<expr><block>{

<expr><literal type="string">"__TMBi256_"</literal></expr>

,<expr><literal type="string">"_..metadata"</literal></expr>

}</block></expr>,<expr><block>{

<expr><literal type="string">"__TWvdvC4main4Tost3msgSS"</literal></expr>

,<expr><literal type="string">"main.Tost.msg__String..field"</literal></expr>

}</block></expr>,<expr><block>{

<expr><literal type="string">"__TIFC10Moscapsule10MQTTClient11unsubscribeFTSS17requestCompletionGSqFTOS_10MosqResultSi_T___T_A0_"</literal></expr>

,<expr><literal type="string">"Moscapsule.MQTTClient.unsubscribe ()"</literal></expr>

}</block></expr>,<expr><block>{

<expr><literal type="string">"__TWaC4main8FooClassS_9FoodClassS_"</literal></expr>

,<expr><literal type="string">"main.FooClass..FoodClass..protocol"</literal></expr>

}</block></expr>,<expr><block>{

<expr><literal type="string">"__TFe4mainRxCS_8FooClassxS_9FoodClassrS1_8sayHellofT_T_"</literal></expr>

,<expr><literal type="string">"main..FooClass..FoodClass..sayHello..extension"</literal></expr>

}</block></expr>,<expr><block>{

<expr><literal type="string">"_TTSg5P____TFs27_allocateUninitializedArrayurFBwTGSax_Bp_"</literal></expr>,

<expr><literal type="string">"P____(GenericSpec F)_allocateUninitializedArray -&gt; Builtin.RawPointer"</literal></expr> 

}</block></expr>,<expr><block>{

<expr><literal type="string">"_TIFs5printFTGSaP__9separatorSS10terminatorSS_T_A0_"</literal></expr>,

<expr><literal type="string">"print (__Array P)"</literal></expr>, 

}</block></expr>,<expr><block>{

<expr><literal type="string">"__TZFsoi2eeuRxs9EquatablerFTGSqx_GSqx__Sb"</literal></expr>,

<expr><literal type="string">"Swift..Equatable () -&gt; Bool"</literal></expr>

}</block></expr>,<expr><block>{

<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>

}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_bin_demangle_swift</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>swift_tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sym</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Test</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><operator>&amp;</operator><name><name>swift_tests</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"[&gt;&gt;] %s\n"</literal></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>sym</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_bin_demangle_swift</name> <argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>sym</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>test</name><operator>-&gt;</operator><name>dem</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>dem</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><name>Color_GREEN</name><literal type="string">"[OK]"</literal><name>Color_RESET</name><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><name>Color_RED</name><literal type="string">"[XX]"</literal><name>Color_RESET</name><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><name>Color_YELLOW</name><literal type="string">"[MUSTBE]"</literal><name>Color_RESET</name><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>dem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><name>Color_RED</name><literal type="string">"[XX]"</literal><name>Color_RESET</name><literal type="string">" \"(null)\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><name>Color_YELLOW</name><literal type="string">"[MUSTBE]"</literal><name>Color_RESET</name><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>dem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
