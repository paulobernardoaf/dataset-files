<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\format\xnu\r_cf_dict.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_list.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yxml.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_cf_dict.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMLBUFSIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{

<decl><name>R_CF_STATE_ROOT</name></decl>,

<decl><name>R_CF_STATE_IN_DICT</name></decl>,

<decl><name>R_CF_STATE_IN_ARRAY</name></decl>,

<decl><name>R_CF_STATE_IN_KEY</name></decl>,

<decl><name>R_CF_STATE_IN_SCALAR</name></decl>,

<decl><name>R_CF_STATE_IN_IGNORE</name></decl>,

}</block></enum></type> <name>RCFParsePhase</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_RCFParseState</name> <block>{

<decl_stmt><decl><type><name>RCFParsePhase</name></type> <name>phase</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCFValueType</name></type> <name>value_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCFValueDict</name> <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCFValueArray</name> <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>

}</block></struct></type> <name>RCFParseState</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>RCFParseState</name> <modifier>*</modifier></type><name>r_cf_parse_state_new</name><parameter_list>(<parameter><decl><type><name>RCFParsePhase</name></type> <name>phase</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_parse_state_free</name><parameter_list>(<parameter><decl><type><name>RCFParseState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RCFKeyValue</name> <modifier>*</modifier></type><name>r_cf_key_value_new</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>RCFValue</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_key_value_free</name><parameter_list>(<parameter><decl><type><name>RCFKeyValue</name> <modifier>*</modifier></type><name>key_value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RCFValueDict</name> <modifier>*</modifier></type><name>r_cf_value_dict_new</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_dict_add</name><parameter_list>(<parameter><decl><type><name>RCFValueDict</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>RCFKeyValue</name> <modifier>*</modifier></type><name>key_value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_dict_print</name><parameter_list>(<parameter><decl><type><name>RCFValueDict</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RCFValueArray</name> <modifier>*</modifier></type><name>r_cf_value_array_new</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_array_free</name><parameter_list>(<parameter><decl><type><name>RCFValueArray</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_array_add</name><parameter_list>(<parameter><decl><type><name>RCFValueArray</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>RCFValue</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_array_print</name><parameter_list>(<parameter><decl><type><name>RCFValueArray</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RCFValueString</name> <modifier>*</modifier></type><name>r_cf_value_string_new</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_string_free</name><parameter_list>(<parameter><decl><type><name>RCFValueString</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_string_print</name><parameter_list>(<parameter><decl><type><name>RCFValueString</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RCFValueInteger</name> <modifier>*</modifier></type><name>r_cf_value_integer_new</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_integer_free</name><parameter_list>(<parameter><decl><type><name>RCFValueInteger</name> <modifier>*</modifier></type><name>integer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_integer_print</name><parameter_list>(<parameter><decl><type><name>RCFValueInteger</name> <modifier>*</modifier></type><name>integer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RCFValueData</name> <modifier>*</modifier></type><name>r_cf_value_data_new</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_data_free</name><parameter_list>(<parameter><decl><type><name>RCFValueData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_data_print</name><parameter_list>(<parameter><decl><type><name>RCFValueData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RCFValueNULL</name> <modifier>*</modifier></type><name>r_cf_value_null_new</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_null_free</name><parameter_list>(<parameter><decl><type><name>RCFValueNULL</name> <modifier>*</modifier></type><name>null</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_null_print</name><parameter_list>(<parameter><decl><type><name>RCFValueNULL</name> <modifier>*</modifier></type><name>null</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RCFValueBool</name> <modifier>*</modifier></type><name>r_cf_value_bool_new</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_bool_free</name><parameter_list>(<parameter><decl><type><name>RCFValueBool</name> <modifier>*</modifier></type><name>bool_value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_bool_print</name><parameter_list>(<parameter><decl><type><name>RCFValueBool</name> <modifier>*</modifier></type><name>bool_value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_free</name><parameter_list>(<parameter><decl><type><name>RCFValue</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>RCFValueDict</name> <modifier>*</modifier></type><name>r_cf_value_dict_parse</name> <parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>file_buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCFValueDict</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yxml_t</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>content</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>xml_buf</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>XMLBUFSIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xml_buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>yxml_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>xml_buf</name></expr></argument>, <argument><expr><name>XMLBUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>stack</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><operator>&amp;</operator><name>r_cf_parse_state_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stack</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><call><name>r_cf_parse_state_new</name> <argument_list>(<argument><expr><name>R_CF_STATE_ROOT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>doc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>file_buf</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>doc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>doc</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>yxml_ret_t</name></type> <name>r</name> <init>= <expr><call><name>yxml_parse</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Parsing error at :%"</literal> <name>PRIu32</name> <literal type="string">":%"</literal> <name>PRIu64</name> <literal type="string">" byte offset %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name><name>x</name><operator>.</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>byte</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>YXML_ELEMSTART</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>RCFParseState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator><name>RCFParseState</name> <operator>*</operator><operator>)</operator><call><name>r_list_get_top</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCFParseState</name> <modifier>*</modifier></type><name>next_state</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>elem</name></name></expr></argument>, <argument><expr><literal type="string">"dict"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next_state</name> <operator>=</operator> <call><name>r_cf_parse_state_new</name> <argument_list>(<argument><expr><name>R_CF_STATE_IN_DICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next_state</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>next_state</name><operator>-&gt;</operator><name>dict</name></name> <operator>=</operator> <call><name>r_cf_value_dict_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>elem</name></name></expr></argument>, <argument><expr><literal type="string">"array"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next_state</name> <operator>=</operator> <call><name>r_cf_parse_state_new</name> <argument_list>(<argument><expr><name>R_CF_STATE_IN_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next_state</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>next_state</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <call><name>r_cf_value_array_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>elem</name></name></expr></argument>, <argument><expr><literal type="string">"key"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>phase</name></name> <operator>==</operator> <name>R_CF_STATE_IN_DICT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next_state</name> <operator>=</operator> <call><name>r_cf_parse_state_new</name> <argument_list>(<argument><expr><name>R_CF_STATE_IN_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next_state</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>next_state</name><operator>-&gt;</operator><name>dict</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>dict</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>elem</name></name></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next_state</name> <operator>=</operator> <call><name>r_cf_parse_state_new</name> <argument_list>(<argument><expr><name>R_CF_STATE_IN_SCALAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next_state</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>next_state</name><operator>-&gt;</operator><name>value_type</name></name> <operator>=</operator> <name>R_CF_STRING</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>elem</name></name></expr></argument>, <argument><expr><literal type="string">"integer"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next_state</name> <operator>=</operator> <call><name>r_cf_parse_state_new</name> <argument_list>(<argument><expr><name>R_CF_STATE_IN_SCALAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next_state</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>next_state</name><operator>-&gt;</operator><name>value_type</name></name> <operator>=</operator> <name>R_CF_INTEGER</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>elem</name></name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>R_CF_OPTION_SKIP_NSDATA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next_state</name> <operator>=</operator> <call><name>r_cf_parse_state_new</name> <argument_list>(<argument><expr><name>R_CF_STATE_IN_IGNORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>next_state</name> <operator>=</operator> <call><name>r_cf_parse_state_new</name> <argument_list>(<argument><expr><name>R_CF_STATE_IN_SCALAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next_state</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>next_state</name><operator>-&gt;</operator><name>value_type</name></name> <operator>=</operator> <name>R_CF_DATA</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>elem</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next_state</name> <operator>=</operator> <call><name>r_cf_parse_state_new</name> <argument_list>(<argument><expr><name>R_CF_STATE_IN_SCALAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next_state</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>next_state</name><operator>-&gt;</operator><name>value_type</name></name> <operator>=</operator> <name>R_CF_TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>elem</name></name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next_state</name> <operator>=</operator> <call><name>r_cf_parse_state_new</name> <argument_list>(<argument><expr><name>R_CF_STATE_IN_SCALAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next_state</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>next_state</name><operator>-&gt;</operator><name>value_type</name></name> <operator>=</operator> <name>R_CF_FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>next_state</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>next_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Missing next state for elem: %s phase: %d\n"</literal></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>elem</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>phase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>depth</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>YXML_ELEMEND</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>RCFParseState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator><name>RCFParseState</name> <operator>*</operator><operator>)</operator><call><name>r_list_pop</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCFParseState</name> <modifier>*</modifier></type><name>next_state</name> <init>= <expr><operator>(</operator><name>RCFParseState</name> <operator>*</operator><operator>)</operator><call><name>r_list_get_top</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>state</name> <operator>||</operator> <operator>!</operator><name>next_state</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>next_state</name><operator>-&gt;</operator><name>phase</name></name> <operator>==</operator> <name>R_CF_STATE_ROOT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>phase</name></name> <operator>==</operator> <name>R_CF_STATE_IN_DICT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>dict</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cf_parse_state_free</name> <argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Root element is not a dict\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>next_state</name><operator>-&gt;</operator><name>phase</name></name> <operator>==</operator> <name>R_CF_STATE_IN_DICT</name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>phase</name></name> <operator>==</operator> <name>R_CF_STATE_IN_KEY</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>content</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"NULL key not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>next_state</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>content</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>phase</name></name> <operator>!=</operator> <name>R_CF_STATE_IN_KEY</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RCFValue</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>phase</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_CF_STATE_IN_DICT</name></expr>:</case>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>RCFValue</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>dict</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CF_STATE_IN_ARRAY</name></expr>:</case>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>RCFValue</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>array</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CF_STATE_IN_SCALAR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>content</name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>value_type</name></name> <operator>!=</operator> <name>R_CF_FALSE</name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>value_type</name></name> <operator>!=</operator> <name>R_CF_TRUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>RCFValue</name> <operator>*</operator><operator>)</operator><call><name>r_cf_value_null_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<switch>switch <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>value_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_CF_STRING</name></expr>:</case>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>RCFValue</name> <operator>*</operator><operator>)</operator><call><name>r_cf_value_string_new</name> <argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CF_INTEGER</name></expr>:</case>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>RCFValue</name> <operator>*</operator><operator>)</operator><call><name>r_cf_value_integer_new</name> <argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CF_DATA</name></expr>:</case>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>RCFValue</name> <operator>*</operator><operator>)</operator><call><name>r_cf_value_data_new</name> <argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CF_TRUE</name></expr>:</case>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>RCFValue</name> <operator>*</operator><operator>)</operator><call><name>r_cf_value_bool_new</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CF_FALSE</name></expr>:</case>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>RCFValue</name> <operator>*</operator><operator>)</operator><call><name>r_cf_value_bool_new</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>next_state</name><operator>-&gt;</operator><name>phase</name></name> <operator>==</operator> <name>R_CF_STATE_IN_DICT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RCFKeyValue</name> <modifier>*</modifier></type><name>key_value</name> <init>= <expr><call><name>r_cf_key_value_new</name> <argument_list>(<argument><expr><name><name>next_state</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cf_value_dict_add</name> <argument_list>(<argument><expr><name><name>next_state</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>, <argument><expr><name>key_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>phase</name></name> <operator>!=</operator> <name>R_CF_STATE_IN_IGNORE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Missing value for key %s\n"</literal></expr></argument>, <argument><expr><name><name>next_state</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cf_value_free</name> <argument_list>(<argument><expr><operator>(</operator><name>RCFValue</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>next_state</name><operator>-&gt;</operator><name>phase</name></name> <operator>==</operator> <name>R_CF_STATE_IN_ARRAY</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cf_value_array_add</name> <argument_list>(<argument><expr><name><name>next_state</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>phase</name></name> <operator>!=</operator> <name>R_CF_STATE_IN_IGNORE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Missing value for array\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cf_value_free</name> <argument_list>(<argument><expr><operator>(</operator><name>RCFValue</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>depth</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>content</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cf_parse_state_free</name> <argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>YXML_CONTENT</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>RCFParseState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator><name>RCFParseState</name> <operator>*</operator><operator>)</operator><call><name>r_list_get_top</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>phase</name></name> <operator>==</operator> <name>R_CF_STATE_IN_IGNORE</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>content</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>content</name> <operator>=</operator> <call><name>r_str_new</name> <argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>content</name> <operator>=</operator> <call><name>r_str_append</name> <argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>yxml_ret_t</name></type> <name>r</name> <init>= <expr><call><name>yxml_eof</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid xml\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>xml_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stack</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RCFParseState</name> <modifier>*</modifier></type><name>r_cf_parse_state_new</name><parameter_list>(<parameter><decl><type><name>RCFParsePhase</name></type> <name>phase</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCFParseState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RCFParseState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>phase</name></name> <operator>=</operator> <name>phase</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>state</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_parse_state_free</name><parameter_list>(<parameter><decl><type><name>RCFParseState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RCFKeyValue</name> <modifier>*</modifier></type><name>r_cf_key_value_new</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>RCFValue</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCFKeyValue</name> <modifier>*</modifier></type><name>key_value</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RCFKeyValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key_value</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>key_value</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key_value</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<return>return <expr><name>key_value</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_key_value_free</name><parameter_list>(<parameter><decl><type><name>RCFKeyValue</name> <modifier>*</modifier></type><name>key_value</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key_value</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key_value</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>key_value</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key_value</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cf_value_free</name> <argument_list>(<argument><expr><name><name>key_value</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key_value</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>key_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RCFValueDict</name> <modifier>*</modifier></type><name>r_cf_value_dict_new</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCFValueDict</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RCFValueDict</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dict</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_CF_DICT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>pairs</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><operator>&amp;</operator><name>r_cf_key_value_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dict</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>r_cf_value_dict_free</name> <parameter_list>(<parameter><decl><type><name>RCFValueDict</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>pairs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>pairs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>pairs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_CF_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_dict_add</name><parameter_list>(<parameter><decl><type><name>RCFValueDict</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>RCFKeyValue</name> <modifier>*</modifier></type><name>key_value</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dict</name> <operator>||</operator> <operator>!</operator><name><name>dict</name><operator>-&gt;</operator><name>pairs</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>pairs</name></name></expr></argument>, <argument><expr><name>key_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_dict_print</name><parameter_list>(<parameter><decl><type><name>RCFValueDict</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCFKeyValue</name> <modifier>*</modifier></type><name>key_value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>pairs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>dict-&gt;pairs</argument>, <argument>iter</argument>, <argument>key_value</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\"%s\":"</literal></expr></argument>, <argument><expr><name><name>key_value</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cf_value_print</name> <argument_list>(<argument><expr><name><name>key_value</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name><operator>++</operator> <operator>&lt;</operator> <name>length</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RCFValueArray</name> <modifier>*</modifier></type><name>r_cf_value_array_new</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCFValueArray</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RCFValueArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>array</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_CF_ARRAY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><operator>&amp;</operator><name>r_cf_value_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>array</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_array_free</name><parameter_list>(<parameter><decl><type><name>RCFValueArray</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>array</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>array</name><operator>-&gt;</operator><name>values</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_CF_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_array_add</name><parameter_list>(<parameter><decl><type><name>RCFValueArray</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>RCFValue</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>array</name> <operator>||</operator> <operator>!</operator><name><name>array</name><operator>-&gt;</operator><name>values</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_array_print</name><parameter_list>(<parameter><decl><type><name>RCFValueArray</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCFValue</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>array-&gt;values</argument>, <argument>iter</argument>, <argument>value</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_cf_value_print</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name><operator>++</operator> <operator>&lt;</operator> <name>length</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RCFValueString</name> <modifier>*</modifier></type><name>r_cf_value_string_new</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCFValueString</name> <modifier>*</modifier></type><name>value_string</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RCFValueString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value_string</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>value_string</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_CF_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>value_string</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>

<return>return <expr><name>value_string</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_string_free</name><parameter_list>(<parameter><decl><type><name>RCFValueString</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>string</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>string</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>string</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_CF_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_string_print</name><parameter_list>(<parameter><decl><type><name>RCFValueString</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>escaped</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>escaped</name> <operator>=</operator> <call><name>r_str_replace</name> <argument_list>(<argument><expr><name>escaped</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><literal type="string">"\\\""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RCFValueInteger</name> <modifier>*</modifier></type><name>r_cf_value_integer_new</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCFValueInteger</name> <modifier>*</modifier></type><name>integer</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RCFValueInteger</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>integer</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>integer</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_CF_INTEGER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>integer</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>integer</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_integer_free</name><parameter_list>(<parameter><decl><type><name>RCFValueInteger</name> <modifier>*</modifier></type><name>integer</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>integer</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>integer</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_CF_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>integer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_integer_print</name><parameter_list>(<parameter><decl><type><name>RCFValueInteger</name> <modifier>*</modifier></type><name>integer</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%llu"</literal></expr></argument>, <argument><expr><name><name>integer</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RCFValueData</name> <modifier>*</modifier></type><name>r_cf_value_data_new</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCFValueData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RCFValueData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>out_len</name> <init>= <expr><name>len</name> <operator>/</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut8</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>out_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_base64_decode</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_CF_DATA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>r_buf_new_with_pointers</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_len</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>data</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_data_free</name><parameter_list>(<parameter><decl><type><name>RCFValueData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_CF_INVALID</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_data_print</name><parameter_list>(<parameter><decl><type><name>RCFValueData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\"...\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RCFValueNULL</name> <modifier>*</modifier></type><name>r_cf_value_null_new</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCFValueNULL</name> <modifier>*</modifier></type><name>null</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RCFValueNULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>null</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>null</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_CF_NULL</name></expr>;</expr_stmt>

<return>return <expr><name>null</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_null_free</name><parameter_list>(<parameter><decl><type><name>RCFValueNULL</name> <modifier>*</modifier></type><name>null</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>null</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>null</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_CF_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_null_print</name><parameter_list>(<parameter><decl><type><name>RCFValueNULL</name> <modifier>*</modifier></type><name>null</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RCFValueBool</name> <modifier>*</modifier></type><name>r_cf_value_bool_new</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCFValueBool</name> <modifier>*</modifier></type><name>bool_value</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RCFValueBool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bool_value</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bool_value</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>R_CF_TRUE</name></expr> </then><else>: <expr><name>R_CF_FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>bool_value</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_bool_free</name><parameter_list>(<parameter><decl><type><name>RCFValueBool</name> <modifier>*</modifier></type><name>bool_value</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bool_value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bool_value</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_CF_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>bool_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_bool_print</name><parameter_list>(<parameter><decl><type><name>RCFValueBool</name> <modifier>*</modifier></type><name>bool_value</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bool_value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_CF_TRUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_cf_value_free</name><parameter_list>(<parameter><decl><type><name>RCFValue</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_CF_DICT</name></expr>:</case>

<expr_stmt><expr><call><name>r_cf_value_dict_free</name> <argument_list>(<argument><expr><operator>(</operator><name>RCFValueDict</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CF_ARRAY</name></expr>:</case>

<expr_stmt><expr><call><name>r_cf_value_array_free</name> <argument_list>(<argument><expr><operator>(</operator><name>RCFValueArray</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CF_STRING</name></expr>:</case>

<expr_stmt><expr><call><name>r_cf_value_string_free</name> <argument_list>(<argument><expr><operator>(</operator><name>RCFValueString</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CF_INTEGER</name></expr>:</case>

<expr_stmt><expr><call><name>r_cf_value_integer_free</name> <argument_list>(<argument><expr><operator>(</operator><name>RCFValueInteger</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CF_DATA</name></expr>:</case>

<expr_stmt><expr><call><name>r_cf_value_data_free</name> <argument_list>(<argument><expr><operator>(</operator><name>RCFValueData</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CF_NULL</name></expr>:</case>

<expr_stmt><expr><call><name>r_cf_value_null_free</name> <argument_list>(<argument><expr><operator>(</operator><name>RCFValueNULL</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CF_TRUE</name></expr>:</case>

<case>case <expr><name>R_CF_FALSE</name></expr>:</case>

<expr_stmt><expr><call><name>r_cf_value_bool_free</name> <argument_list>(<argument><expr><operator>(</operator><name>RCFValueBool</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>r_cf_value_print</name> <parameter_list>(<parameter><decl><type><name>RCFValue</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_CF_DICT</name></expr>:</case>

<expr_stmt><expr><call><name>r_cf_value_dict_print</name> <argument_list>(<argument><expr><operator>(</operator><name>RCFValueDict</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CF_ARRAY</name></expr>:</case>

<expr_stmt><expr><call><name>r_cf_value_array_print</name> <argument_list>(<argument><expr><operator>(</operator><name>RCFValueArray</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CF_STRING</name></expr>:</case>

<expr_stmt><expr><call><name>r_cf_value_string_print</name> <argument_list>(<argument><expr><operator>(</operator><name>RCFValueString</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CF_INTEGER</name></expr>:</case>

<expr_stmt><expr><call><name>r_cf_value_integer_print</name> <argument_list>(<argument><expr><operator>(</operator><name>RCFValueInteger</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CF_DATA</name></expr>:</case>

<expr_stmt><expr><call><name>r_cf_value_data_print</name> <argument_list>(<argument><expr><operator>(</operator><name>RCFValueData</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CF_NULL</name></expr>:</case>

<expr_stmt><expr><call><name>r_cf_value_null_print</name> <argument_list>(<argument><expr><operator>(</operator><name>RCFValueNULL</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_CF_TRUE</name></expr>:</case>

<case>case <expr><name>R_CF_FALSE</name></expr>:</case>

<expr_stmt><expr><call><name>r_cf_value_bool_print</name> <argument_list>(<argument><expr><operator>(</operator><name>RCFValueBool</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

</unit>
