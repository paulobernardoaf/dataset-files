<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\format\xbe\xbe.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XBE_MAGIC</name></cpp:macro> <cpp:value>0x48454258</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XBE_EP_RETAIL</name></cpp:macro> <cpp:value>0xA8FC57AB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XBE_EP_DEBUG</name></cpp:macro> <cpp:value>0x94859D4B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XBE_KP_RETAIL</name></cpp:macro> <cpp:value>0x5b6d40b6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XBE_KP_DEBUG</name></cpp:macro> <cpp:value>0xefb1f152</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XBE_EP_CHIHIRO</name></cpp:macro> <cpp:value>0x40B5C16E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XBE_KP_CHIHIRO</name></cpp:macro> <cpp:value>0x2290059D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XBE_MAX_THUNK</name></cpp:macro> <cpp:value>378</cpp:value></cpp:define>

<macro><name>R_PACKED</name><argument_list>(

<argument>typedef struct {

ut32 magic;

ut8 signature[<literal type="number">0x100</literal>];

ut32 base;

ut32 headers_size;

ut32 image_size;

ut32 image_header_size;

ut32 timestamp;

ut32 cert_addr;

ut32 sections;

ut32 sechdr_addr;

ut32 init_flags;

ut32 ep;

ut32 tls_addr;

ut32 pe_shit[<literal type="number">7</literal>];

ut32 debug_path_addr;

ut32 debug_name_addr;

ut32 debug_uname_addr;

ut32 kernel_thunk_addr;

ut32 nonkernel_import_dir_addr;

ut32 lib_versions;

ut32 lib_versions_addr;

ut32 kernel_lib_addr;

ut32 xapi_lib_addr;

ut32 shit[<literal type="number">2</literal>];

}</argument>)</argument_list></macro> <expr_stmt><expr><name>xbe_header</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECT_FLAG_X</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECT_FLAG_W</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<macro><name>R_PACKED</name> <argument_list>(

<argument>typedef struct {

ut32 flags;

ut32 vaddr;

ut32 vsize;

ut32 offset;

ut32 size;

ut32 name_addr;

ut32 refcount;

ut32 shit[<literal type="number">2</literal>];

ut8 digest[<literal type="number">20</literal>];

}</argument>)</argument_list></macro> <expr_stmt><expr><name>xbe_section</name></expr>;</expr_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>typedef struct {

ut8 name[<literal type="number">8</literal>];

ut16 major;

ut16 minor;

ut16 build;

ut16 flags;

}</argument>)</argument_list></macro> <expr_stmt><expr><name>xbe_lib</name></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>xbe_header</name></type> <name>header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>kt_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ep_key</name></decl>;</decl_stmt>

}</block></struct></type> <name>r_bin_xbe_obj_t</name>;</typedef> 

</unit>
