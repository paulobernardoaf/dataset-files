<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\format\nin\nin.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<enum>enum<block>{

<decl><name>GB_SGB</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>

,<decl><name>GB_GBC</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>

}</block>;</enum>

<enum>enum<block>{

<decl><name>GB_ROM</name></decl>

,<decl><name>GB_ROM_MBC1</name></decl>

,<decl><name>GB_ROM_MBC1_RAM</name></decl>

,<decl><name>GB_ROM_MBC1_RAM_BAT</name></decl>

,<decl><name>GB_ROM_MBC2</name> <init>= <expr><literal type="number">0x5</literal></expr></init></decl>

,<decl><name>GB_ROM_MBC2_BAT</name></decl>

,<decl><name>GB_ROM_RAM</name> <init>= <expr><literal type="number">0x8</literal></expr></init></decl>

,<decl><name>GB_ROM_RAM_BAT</name></decl>

,<decl><name>GB_ROM_MMM0</name> <init>= <expr><literal type="number">0xb</literal></expr></init></decl>

,<decl><name>GB_ROM_MMM0_SRAM</name></decl>

,<decl><name>GB_ROM_MMM0_SRAM_BAT</name></decl>

,<decl><name>GB_ROM_MBC3_TIMER_BAT</name> <init>= <expr><literal type="number">0xf</literal></expr></init></decl>

,<decl><name>GB_ROM_MBC3_TIMER_RAM_BAT</name></decl>

,<decl><name>GB_ROM_MBC3</name></decl>

,<decl><name>GB_ROM_MBC3_RAM</name></decl>

,<decl><name>GB_ROM_MBC3_RAM_BAT</name></decl>

,<decl><name>GB_ROM_MBC5</name> <init>= <expr><literal type="number">0x19</literal></expr></init></decl>

,<decl><name>GB_ROM_MBC5_RAM</name></decl>

,<decl><name>GB_ROM_MBC5_RAM_BAT</name></decl>

,<decl><name>GB_ROM_MBC5_RMBL</name></decl>

,<decl><name>GB_ROM_MBC5_RMBL_SRAM</name></decl>

,<decl><name>GB_ROM_MBC5_RMBL_SRAM_BAT</name></decl>

,<decl><name>GB_CAM</name></decl>

,<decl><name>GB_TAMA5</name> <init>= <expr><literal type="number">0xfd</literal></expr></init></decl>

,<decl><name>GB_HUC3</name></decl>

,<decl><name>GB_HUC1</name></decl>

}</block>;</enum>

<enum>enum<block>{

<decl><name>GB_ROM_BANKS_2</name></decl>

,<decl><name>GB_ROM_BANKS_4</name></decl>

,<decl><name>GB_ROM_BANKS_8</name></decl>

,<decl><name>GB_ROM_BANKS_16</name></decl>

,<decl><name>GB_ROM_BANKS_32</name></decl>

,<decl><name>GB_ROM_BANKS_64</name></decl>

,<decl><name>GB_ROM_BANKS_128</name></decl>

,<decl><name>GB_ROM_BANKS_72</name> <init>= <expr><literal type="number">0x52</literal></expr></init></decl>

,<decl><name>GB_ROM_BANKS_80</name></decl>

,<decl><name>GB_ROM_BANKS_96</name></decl>

}</block>;</enum>

<enum>enum<block>{

<decl><name>GB_NO_RAM</name></decl>

,<decl><name>GB_RAM_2</name></decl>

,<decl><name>GB_RAM_8</name></decl>

,<decl><name>GB_RAM_32</name></decl>

,<decl><name>GB_RAM_128</name></decl>

}</block>;</enum>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name></type> <name><name>lic</name><index>[]</index></name><init>=<expr><block>{

<expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x89</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xbb</literal></expr>,

<expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x9f</literal></expr>,

<expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x3e</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>gb_card_type_str</name><index>[]</index></name><init>=<expr><block>{

<expr><literal type="string">"ROM"</literal></expr>,

<expr><literal type="string">"ROM+MBC1"</literal></expr>,

<expr><literal type="string">"ROM+MBC1+RAM"</literal></expr>,

<expr><literal type="string">"ROM+MBC1+RAM+BAT"</literal></expr>,

<expr><literal type="string">"XXX"</literal></expr>,

<expr><literal type="string">"ROM+MBC2"</literal></expr>,

<expr><literal type="string">"ROM+MBC2+BAT"</literal></expr>,

<expr><literal type="string">"XXX"</literal></expr>,

<expr><literal type="string">"ROM+RAM"</literal></expr>,

<expr><literal type="string">"ROM+RAM+BAT"</literal></expr>,

<expr><literal type="string">"XXX"</literal></expr>,

<expr><literal type="string">"ROM+MMM0"</literal></expr>,

<expr><literal type="string">"ROM+MMM0+SRAM"</literal></expr>,

<expr><literal type="string">"ROM+MMM0+SRAM+BAT"</literal></expr>,

<expr><literal type="string">"XXX"</literal></expr>,

<expr><literal type="string">"ROM+MBC3+TIMER+BAT"</literal></expr>,

<expr><literal type="string">"ROM+MBC3+TIMER+RAM+BAT"</literal></expr>,

<expr><literal type="string">"ROM+MBC3"</literal></expr>,

<expr><literal type="string">"ROM+MBC3+RAM"</literal></expr>,

<expr><literal type="string">"ROM+MBC3+RAM+BAT"</literal></expr>,

<expr><literal type="string">"TAMA5"</literal></expr>,

<expr><literal type="string">"HUC3"</literal></expr>,

<expr><literal type="string">"HUC1"</literal></expr>,

<expr><literal type="string">"XXX"</literal></expr>, 

<expr><literal type="string">"XXX"</literal></expr>,

<expr><literal type="string">"ROM+MBC5"</literal></expr>,

<expr><literal type="string">"ROM+MBC5+RAM"</literal></expr>,

<expr><literal type="string">"ROM+MBC5+RAM+BAT"</literal></expr>,

<expr><literal type="string">"ROM+MBC5+RUMBLE"</literal></expr>,

<expr><literal type="string">"ROM+MBC5+RUMBLE+SRAM"</literal></expr>,

<expr><literal type="string">"ROM+MBC5+RUMBLE+SRAM+BAT"</literal></expr>,

<expr><literal type="string">"CAM"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>gb_add_cardtype</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>cardcode</name></decl></parameter>)</parameter_list><block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>type</name></expr></argument>,<argument><expr><literal type="string">"\ncard\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>cardcode</name></expr>)</condition><block>{<block_content>

<case>case <expr><name>GB_TAMA5</name></expr>:</case>

<case>case <expr><name>GB_HUC3</name></expr>:</case>

<case>case <expr><name>GB_HUC1</name></expr>:</case>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>type</name></expr></argument>,<argument><expr><name><name>gb_card_type_str</name><index>[<expr><name>cardcode</name><operator>-</operator><literal type="number">240</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x15</literal></expr>:</case>

<case>case <expr><literal type="number">0x16</literal></expr>:</case>

<case>case <expr><literal type="number">0x17</literal></expr>:</case>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>type</name></expr></argument>,<argument><expr><literal type="string">"XXX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>cardcode</name><operator>&gt;</operator><name>GB_CAM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>type</name></expr></argument>,<argument><expr><literal type="string">"XXX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>type</name></expr></argument>,<argument><expr><name><name>gb_card_type_str</name><index>[<expr><name>cardcode</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>gb_get_rombanks</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>id</name></decl></parameter>)</parameter_list><block>{<block_content>

<switch>switch <condition>(<expr><name>id</name></expr>)</condition><block>{<block_content>

<case>case <expr><name>GB_ROM_BANKS_2</name></expr>:</case>

<return>return <expr><literal type="number">2</literal></expr>;</return>

<case>case <expr><name>GB_ROM_BANKS_4</name></expr>:</case>

<return>return <expr><literal type="number">4</literal></expr>;</return>

<case>case <expr><name>GB_ROM_BANKS_8</name></expr>:</case>

<return>return <expr><literal type="number">8</literal></expr>;</return>

<case>case <expr><name>GB_ROM_BANKS_16</name></expr>:</case>

<return>return <expr><literal type="number">16</literal></expr>;</return>

<case>case <expr><name>GB_ROM_BANKS_32</name></expr>:</case>

<return>return <expr><literal type="number">32</literal></expr>;</return>

<case>case <expr><name>GB_ROM_BANKS_64</name></expr>:</case>

<return>return <expr><literal type="number">64</literal></expr>;</return>

<case>case <expr><name>GB_ROM_BANKS_128</name></expr>:</case>

<return>return <expr><literal type="number">128</literal></expr>;</return>

<case>case <expr><name>GB_ROM_BANKS_72</name></expr>:</case>

<return>return <expr><literal type="number">72</literal></expr>;</return>

<case>case <expr><name>GB_ROM_BANKS_80</name></expr>:</case>

<return>return <expr><literal type="number">80</literal></expr>;</return>

<case>case <expr><name>GB_ROM_BANKS_96</name></expr>:</case>

<return>return <expr><literal type="number">96</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>gb_get_gbtype</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>foo</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>bar</name></decl></parameter>)</parameter_list><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>foo</name><operator>==</operator><name>GB_SGB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"SuperGameboy-Rom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bar</name><operator>==</operator><name>GB_GBC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"GameboyColor-Rom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"Gameboy-Rom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

</unit>
