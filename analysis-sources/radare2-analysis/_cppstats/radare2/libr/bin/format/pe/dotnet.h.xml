<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\format\pe\dotnet.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pe_specs.h"</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>push</name><name>,</name> <name>1</name><name>)</name></cpp:pragma>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fits_in_pe</name><parameter_list>(<parameter><type><name>pe</name></type></parameter>, <parameter><type><name>pointer</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((size_t) size &lt;= pe-&gt;data_size &amp;&amp; (uint8_t*) (pointer) &gt;= pe-&gt;data &amp;&amp; (uint8_t*) (pointer) &lt;= pe-&gt;data + pe-&gt;data_size - size)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>struct_fits_in_pe</name><parameter_list>(<parameter><type><name>pe</name></type></parameter>, <parameter><type><name>pointer</name></type></parameter>, <parameter><type><name>struct_type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fits_in_pe(pe, pointer, sizeof(struct_type))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_CLI_HEADER</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>Size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>WORD</name></type> <name>MajorRuntimeVersion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>MinorRuntimeVersion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMAGE_DATA_DIRECTORY</name></type> <name>MetaData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>EntryPointToken</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMAGE_DATA_DIRECTORY</name></type> <name>Resources</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMAGE_DATA_DIRECTORY</name></type> <name>StrongNameSignature</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONGLONG</name></type> <name>CodeManagerTable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMAGE_DATA_DIRECTORY</name></type> <name>VTableFixups</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONGLONG</name></type> <name>ExportAddressTableJumps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONGLONG</name></type> <name>ManagedNativeHeader</name></decl>;</decl_stmt>

}</block></struct></type> <name>CLI_HEADER</name><operator>,</operator> *<name>PCLI_HEADER</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NET_METADATA_MAGIC</name></cpp:macro> <cpp:value>0x424a5342</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_NET_METADATA</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>Magic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>MajorVersion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>MinorVersion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Reserved</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>Version</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>NET_METADATA</name><operator>,</operator> *<name>PNET_METADATA</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOTNET_STREAM_NAME_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_STREAM_HEADER</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>Offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>Name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>STREAM_HEADER</name><operator>,</operator> *<name>PSTREAM_HEADER</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_TILDE_HEADER</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>Reserved1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name>MajorVersion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name>MinorVersion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name>HeapSizes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name>Reserved2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONGLONG</name></type> <name>Valid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONGLONG</name></type> <name>Sorted</name></decl>;</decl_stmt>

}</block></struct></type> <name>TILDE_HEADER</name><operator>,</operator> *<name>PTILDE_HEADER</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_MODULE</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_TYPEREF</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_TYPEDEF</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_FIELDPTR</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_FIELD</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_METHODDEFPTR</name></cpp:macro> <cpp:value>0x05</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_METHODDEF</name></cpp:macro> <cpp:value>0x06</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_PARAMPTR</name></cpp:macro> <cpp:value>0x07</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_PARAM</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_INTERFACEIMPL</name></cpp:macro> <cpp:value>0x09</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_MEMBERREF</name></cpp:macro> <cpp:value>0x0A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_CONSTANT</name></cpp:macro> <cpp:value>0x0B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_CUSTOMATTRIBUTE</name></cpp:macro> <cpp:value>0x0C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_FIELDMARSHAL</name></cpp:macro> <cpp:value>0x0D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DECLSECURITY</name></cpp:macro> <cpp:value>0x0E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_CLASSLAYOUT</name></cpp:macro> <cpp:value>0x0F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_FIELDLAYOUT</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_STANDALONESIG</name></cpp:macro> <cpp:value>0x11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_EVENTMAP</name></cpp:macro> <cpp:value>0x12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_EVENTPTR</name></cpp:macro> <cpp:value>0x13</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_EVENT</name></cpp:macro> <cpp:value>0x14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_PROPERTYMAP</name></cpp:macro> <cpp:value>0x15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_PROPERTYPTR</name></cpp:macro> <cpp:value>0x16</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_PROPERTY</name></cpp:macro> <cpp:value>0x17</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_METHODSEMANTICS</name></cpp:macro> <cpp:value>0x18</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_METHODIMPL</name></cpp:macro> <cpp:value>0x19</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_MODULEREF</name></cpp:macro> <cpp:value>0x1A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_TYPESPEC</name></cpp:macro> <cpp:value>0x1B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_IMPLMAP</name></cpp:macro> <cpp:value>0x1C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_FIELDRVA</name></cpp:macro> <cpp:value>0x1D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_ENCLOG</name></cpp:macro> <cpp:value>0x1E</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_ENCMAP</name></cpp:macro> <cpp:value>0x1F</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_ASSEMBLY</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_ASSEMBLYPROCESSOR</name></cpp:macro> <cpp:value>0x21</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_ASSEMBLYOS</name></cpp:macro> <cpp:value>0x22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_ASSEMBLYREF</name></cpp:macro> <cpp:value>0x23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_ASSEMBLYREFPROCESSOR</name></cpp:macro> <cpp:value>0x24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_ASSEMBLYREFOS</name></cpp:macro> <cpp:value>0x25</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_FILE</name></cpp:macro> <cpp:value>0x26</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_EXPORTEDTYPE</name></cpp:macro> <cpp:value>0x27</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_MANIFESTRESOURCE</name></cpp:macro> <cpp:value>0x28</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_NESTEDCLASS</name></cpp:macro> <cpp:value>0x29</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_GENERICPARAM</name></cpp:macro> <cpp:value>0x2A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_METHODSPEC</name></cpp:macro> <cpp:value>0x2B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_GENERICPARAMCONSTRAINT</name></cpp:macro> <cpp:value>0x2C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELEMENT_TYPE_STRING</name></cpp:macro> <cpp:value>0x0E</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TYPELIB_SIZE</name></cpp:macro> <cpp:value>0xFF</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_MODULE_TABLE</name> <block>{

<decl_stmt><decl><type><name>WORD</name></type> <name>Generation</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name>WORD</name></type> <name>Name_Short</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Name_Long</name></decl>;</decl_stmt>

}</block> <decl><name>Name</name></decl>;</union>

<union>union <block>{

<decl_stmt><decl><type><name>WORD</name></type> <name>Mvid_Short</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Mvid_Long</name></decl>;</decl_stmt>

}</block> <decl><name>Mvid</name></decl>;</union>

<union>union <block>{

<decl_stmt><decl><type><name>WORD</name></type> <name>EncId_Short</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>EncId_Long</name></decl>;</decl_stmt>

}</block> <decl><name>EncId</name></decl>;</union>

<union>union <block>{

<decl_stmt><decl><type><name>WORD</name></type> <name>EncBaseId_Short</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>EncBaseId_Long</name></decl>;</decl_stmt>

}</block> <decl><name>EncBaseId</name></decl>;</union>

}</block></struct></type> <name>MODULE_TABLE</name><operator>,</operator> *<name>PMODULE_TABLE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_ASSEMBLY_TABLE</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>HashAlgId</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>MajorVersion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>MinorVersion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>BuildNumber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>RevisionNumber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Flags</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name>WORD</name></type> <name>PublicKey_Short</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>PublicKey_Long</name></decl>;</decl_stmt>

}</block> <decl><name>PublicKey</name></decl>;</union>

<union>union <block>{

<decl_stmt><decl><type><name>WORD</name></type> <name>Name_Short</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Name_Long</name></decl>;</decl_stmt>

}</block> <decl><name>Name</name></decl>;</union>

}</block></struct></type> <name>ASSEMBLY_TABLE</name><operator>,</operator> *<name>PASSEMBLY_TABLE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_ASSEMBLYREF_TABLE</name> <block>{

<decl_stmt><decl><type><name>WORD</name></type> <name>MajorVersion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>MinorVersion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>BuildNumber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>RevisionNumber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Flags</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name>WORD</name></type> <name>PublicKeyOrToken_Short</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>PublicKeyOrToken_Long</name></decl>;</decl_stmt>

}</block> <decl><name>PublicKeyOrToken</name></decl>;</union>

<union>union <block>{

<decl_stmt><decl><type><name>WORD</name></type> <name>Name_Short</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Name_Long</name></decl>;</decl_stmt>

}</block> <decl><name>Name</name></decl>;</union>

}</block></struct></type> <name>ASSEMBLYREF_TABLE</name><operator>,</operator> *<name>PASSEMBLYREF_TABLE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_MANIFESTRESOURCE_TABLE</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>Offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Flags</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name>WORD</name></type> <name>Name_Short</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Name_Long</name></decl>;</decl_stmt>

}</block> <decl><name>Name</name></decl>;</union>

<union>union <block>{

<decl_stmt><decl><type><name>WORD</name></type> <name>Implementation_Short</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Implementation_Long</name></decl>;</decl_stmt>

}</block> <decl><name>Implementation</name></decl>;</union>

}</block></struct></type> <name>MANIFESTRESOURCE_TABLE</name><operator>,</operator> *<name>PMANIFESTRESOURCE_TABLE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_MODULEREF_TABLE</name> <block>{

<union>union <block>{

<decl_stmt><decl><type><name>WORD</name></type> <name>Name_Short</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Name_Long</name></decl>;</decl_stmt>

}</block> <decl><name>Name</name></decl>;</union>

}</block></struct></type> <name>MODULEREF_TABLE</name><operator>,</operator> *<name>PMODULEREF_TABLE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_CUSTOMATTRIBUTE_TABLE</name> <block>{

<union>union <block>{

<decl_stmt><decl><type><name>WORD</name></type> <name>Parent_Short</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Parent_Long</name></decl>;</decl_stmt>

}</block> <decl><name>Parent</name></decl>;</union>

<union>union <block>{

<decl_stmt><decl><type><name>WORD</name></type> <name>Type_Short</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Type_Long</name></decl>;</decl_stmt>

}</block> <decl><name>Type</name></decl>;</union>

<union>union <block>{

<decl_stmt><decl><type><name>WORD</name></type> <name>Value_Short</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Value_Long</name></decl>;</decl_stmt>

}</block> <decl><name>Value</name></decl>;</union>

}</block></struct></type> <name>CUSTOMATTRIBUTE_TABLE</name><operator>,</operator> *<name>PCUSTOMATTRIBUTE_TABLE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_CONSTANT_TABLE</name> <block>{

<decl_stmt><decl><type><name>WORD</name></type> <name>Type</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name>WORD</name></type> <name>Parent_Short</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Parent_Long</name></decl>;</decl_stmt>

}</block> <decl><name>Parent</name></decl>;</union>

<union>union <block>{

<decl_stmt><decl><type><name>WORD</name></type> <name>Value_Short</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Value_Long</name></decl>;</decl_stmt>

}</block> <decl><name>Value</name></decl>;</union>

}</block></struct></type> <name>CONSTANT_TABLE</name><operator>,</operator> *<name>PCONSTANT_TABLE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_STREAMS</name> <block>{

<decl_stmt><decl><type><name>PSTREAM_HEADER</name></type> <name>guid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PSTREAM_HEADER</name></type> <name>tilde</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PSTREAM_HEADER</name></type> <name>string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PSTREAM_HEADER</name></type> <name>blob</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PSTREAM_HEADER</name></type> <name>us</name></decl>;</decl_stmt>

}</block></struct></type> <name>STREAMS</name><operator>,</operator> *<name>PSTREAMS</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_BLOB_PARSE_RESULT</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>DWORD</name></type> <name>length</name></decl>;</decl_stmt> 

}</block></struct></type> <name>BLOB_PARSE_RESULT</name><operator>,</operator> *<name>PBLOB_PARSE_RESULT</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_ROWS</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>module</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>moduleref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>assemblyref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>typeref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>methoddef</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>memberref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>typedef_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>typespec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>field</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>property</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>interfaceimpl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>standalonesig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>assembly</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>exportedtype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>manifestresource</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>genericparam</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>genericparamconstraint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>methodspec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>assemblyrefprocessor</name></decl>;</decl_stmt>

}</block></struct></type> <name>ROWS</name><operator>,</operator> *<name>PROWS</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_INDEX_SIZES</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>guid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>blob</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>field</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>methoddef</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>memberref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>typedef_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>property</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>moduleref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>assemblyrefprocessor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>assemblyref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>genericparam</name></decl>;</decl_stmt>

}</block></struct></type> <name>INDEX_SIZES</name><operator>,</operator> *<name>PINDEX_SIZES</name>;</typedef>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

</unit>
