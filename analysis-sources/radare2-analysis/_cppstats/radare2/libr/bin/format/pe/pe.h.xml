<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\format\pe\pe.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pe_specs.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BIN_PE_SCN_IS_SHAREABLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x &amp; PE_IMAGE_SCN_MEM_SHARED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BIN_PE_SCN_IS_EXECUTABLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x &amp; PE_IMAGE_SCN_MEM_EXECUTE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BIN_PE_SCN_IS_READABLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x &amp; PE_IMAGE_SCN_MEM_READ</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BIN_PE_SCN_IS_WRITABLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x &amp; PE_IMAGE_SCN_MEM_WRITE</cpp:value></cpp:define>

<struct>struct <name>r_bin_pe_addr_t</name> <block>{

<decl_stmt><decl><type><name>ut64</name></type> <name>vaddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>paddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>haddr</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>r_bin_pe_section_t</name> <block>{

<decl_stmt><decl><type><name>ut8</name></type> <name><name>name</name><index>[<expr><name>PE_IMAGE_SIZEOF_SHORT_NAME</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>vsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>vaddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>paddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>perm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>r_bin_pe_import_t</name> <block>{

<decl_stmt><decl><type><name>ut8</name></type> <name><name>name</name><index>[<expr><name>PE_NAME_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>libname</name><index>[<expr><name>PE_NAME_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>vaddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>paddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>hint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>ordinal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>r_bin_pe_export_t</name> <block>{

<decl_stmt><decl><type><name>ut8</name></type> <name><name>name</name><index>[<expr><name>PE_NAME_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>libname</name><index>[<expr><name>PE_NAME_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>forwarder</name><index>[<expr><name>PE_NAME_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>vaddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>paddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>ordinal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>r_bin_pe_string_t</name> <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>string</name><index>[<expr><name>PE_STRING_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>vaddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>paddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>r_bin_pe_lib_t</name> <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>PE_STRING_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct <name>_PE_RESOURCE</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>timestr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>language</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Pe_image_resource_data_entry</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

}</block></struct></type> <name>r_pe_resource</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUIDSTR_LEN</name></cpp:macro> <cpp:value>41</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBG_FILE_NAME_LEN</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>SDebugInfo</name> <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>guidstr</name><index>[<expr><name>GUIDSTR_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>file_name</name><index>[<expr><name>DBG_FILE_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>SDebugInfo</name>;</typedef>

<function><type><name><name>struct</name> <name>PE_</name></name></type>(<name>r_bin_pe_obj_t</name>) <block>{<block_content>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_dos_header</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>dos_header</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_nt_headers</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>nt_headers</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_optional_header</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>optional_header</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_data_directory</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>data_directory</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_section_header</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>section_header</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_export_directory</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>export_directory</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_import_directory</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>import_directory</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_tls_directory</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>tls_directory</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Pe_image_resource_directory</name><modifier>*</modifier></type> <name>resource_directory</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_delay_import_directory</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>delay_import_directory</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Pe_image_security_directory</name> <modifier>*</modifier></type> <name>security_directory</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_clr_header</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>clr_hdr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_metadata_header</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>metadata_header</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_metadata_stream</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>*</operator><name>streams</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_section_t</name></name> <modifier>*</modifier></type><name>sections</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>rich_header_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>nt_header_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>section_header_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>import_directory_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>export_directory_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>resource_directory_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>delay_import_directory_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>import_directory_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_sections</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>endian</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>verbose</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>big_endian</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name><modifier>*</modifier></type> <name>rich_entries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name><modifier>*</modifier></type> <name>relocs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name><modifier>*</modifier></type> <name>resources</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBuffer</name><modifier>*</modifier></type> <name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCMS</name><modifier>*</modifier></type> <name>cms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SpcIndirectDataContent</name> <modifier>*</modifier></type><name>spcinfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>authentihash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_authhash_valid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_signed</name></decl>;</decl_stmt>

</block_content>}</block></function><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>void</name> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_store_all_resource_version_info</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_arch</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_addr_t</name></name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_entrypoint</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_addr_t</name></name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_main_vaddr</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_export_t</name></name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_exports</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_file_alignment</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_image_base</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_import_t</name></name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_imports</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_lib_t</name></name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_libs</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_image_size</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_machine</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_os</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_class</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_bits</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_section_alignment</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_subsystem</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_is_dll</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_is_big_endian</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_is_stripped_relocs</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_is_stripped_line_nums</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_is_stripped_local_syms</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_is_stripped_debug</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_free</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>PE_</name></name></type><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list><modifier>*</modifier> <name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_new</name></expr></argument>)</argument_list><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>file</name></expr></argument>, <argument><expr><name>bool</name> <name>verbose</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>PE_</name></name></type><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list><modifier>*</modifier> <name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_new_buf</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RBuffer</name><operator>*</operator> <name>buf</name></expr></argument>, <argument><expr><name>bool</name> <name>verbose</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_debug_data</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>, <argument><expr>struct <name>SDebugInfo</name><operator>*</operator> <name>res</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>bin_pe_get_claimed_checksum</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>bin_pe_get_actual_checksum</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>bin_pe_compute_authentihash</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>bin_pe_is_authhash_valid</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>bin_pe_get_overlay</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>, <argument><expr><name>ut64</name><operator>*</operator> <name>size</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_check_sections</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>, <argument><expr>struct <name>r_bin_pe_section_t</name><operator>*</operator><operator>*</operator> <name>sects</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_addr_t</name></name> <modifier>*</modifier><name>PE_</name></type><argument_list>(<argument><expr><name>check_unknow</name></expr></argument>)</argument_list> <argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_addr_t</name></name> <modifier>*</modifier><name>PE_</name></type><argument_list>(<argument><expr><name>check_msvcseh</name></expr></argument>)</argument_list> <argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_addr_t</name></name> <modifier>*</modifier><name>PE_</name></type><argument_list>(<argument><expr><name>check_mingw</name></expr></argument>)</argument_list> <argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>bool</name> <name>PE_</name></type>(<name>r_bin_pe_section_perms</name>)<parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perms</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>R_API</name> <name>void</name> <name>PE_</name></type><argument_list>(<argument><expr><name>bin_pe_parse_resource</name></expr></argument>)</argument_list> <argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</unit>
