<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\format\pe\pe.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_hash.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sdb/ht_uu.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_IMAGE_FILE_MACHINE_RPI2</name></cpp:macro> <cpp:value>452</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_METADATA_STRING_LENGTH</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bprintf</name></cpp:macro> <cpp:value>if (bin-&gt;verbose) eprintf</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COFF_SYMBOL_SIZE</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>

<struct_decl>struct <name>SCV_NB10_HEADER</name>;</struct_decl>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>ut8</name></type> <name><name>signature</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>age</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier></type> <name>file_name</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>free</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SCV_NB10_HEADER</name></name><modifier>*</modifier></type> <name>cv_nb10_header</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>SCV_NB10_HEADER</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>ut32</name></type> <name>data1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>data2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>data3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>data4</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>SGUID</name>;</typedef>

<struct_decl>struct <name>SCV_RSDS_HEADER</name>;</struct_decl>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>ut8</name></type> <name><name>signature</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SGUID</name></type> <name>guid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>age</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier></type> <name>file_name</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>free</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SCV_RSDS_HEADER</name></name><modifier>*</modifier></type> <name>rsds_hdr</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>SCV_RSDS_HEADER</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_thumb</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>AddressOfEntryPoint</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_arm</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>Machine</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_RPI2</name></expr>:</case> 

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_ARM</name></expr>:</case>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_THUMB</name></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_addr_t</name></name> <modifier>*</modifier><name>PE_</name></type><argument_list>(<argument><expr><name>check_msvcseh</name></expr></argument>)</argument_list> <argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_addr_t</name></name><modifier>*</modifier></type> <name>entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>b</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0LL</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_get_entrypoint</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ZERO_FILL</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Cannot read entry at 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xe8</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xe9</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>st32</name></type> <name>jmp_dst</name> <init>= <expr><call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name>jmp_dst</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name>jmp_dst</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>imageBase</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>ImageBase</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>tmp_imgbase</name> <init>= <expr><call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x68</literal> <operator>&amp;&amp;</operator> <name>tmp_imgbase</name> <operator>==</operator> <name>imageBase</name> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xe8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>st32</name></type> <name>call_dst</name> <init>= <expr><call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name>call_dst</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name>call_dst</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>entry</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>b</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x50</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xe8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>st32</name></type> <name>call_dst</name> <init>= <expr><call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name>call_dst</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name>call_dst</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>entry</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>b</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x50</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">13</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xe8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>st32</name></type> <name>call_dst</name> <init>= <expr><call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">13</literal> <operator>+</operator> <name>call_dst</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">13</literal> <operator>+</operator> <name>call_dst</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>entry</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>b</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x50</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x57</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xe8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>st32</name></type> <name>call_dst</name> <init>= <expr><call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>call_dst</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>call_dst</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>entry</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xe8</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xe9</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>st32</name></type> <name>jmp_dst</name> <init>= <expr><call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>+</operator> <literal type="number">13</literal> <operator>+</operator> <name>jmp_dst</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>+</operator> <literal type="number">13</literal> <operator>+</operator> <name>jmp_dst</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">13</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>b</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x4c</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x48</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x8b</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xe8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>st32</name></type> <name>call_dst</name> <init>= <expr><call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>call_dst</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>call_dst</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>entry</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><index>[<expr><literal type="number">188</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x50</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><literal type="number">201</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xe8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>st32</name></type> <name>call_dst</name> <init>= <expr><call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <literal type="number">202</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+=</operator> <operator>(</operator><literal type="number">201</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name>call_dst</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+=</operator> <operator>(</operator><literal type="number">201</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name>call_dst</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>entry</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><index>[<expr><literal type="number">292</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x50</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><literal type="number">303</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xe8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>st32</name></type> <name>call_dst</name> <init>= <expr><call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <literal type="number">304</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+=</operator> <operator>(</operator><literal type="number">303</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name>call_dst</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+=</operator> <operator>(</operator><literal type="number">303</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name>call_dst</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>entry</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_addr_t</name></name> <modifier>*</modifier><name>PE_</name></type><argument_list>(<argument><expr><name>check_mingw</name></expr></argument>)</argument_list> <argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_addr_t</name></name><modifier>*</modifier></type> <name>entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sw</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>b</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0LL</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_get_entrypoint</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ZERO_FILL</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Cannot read entry at 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x55</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x89</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x83</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xc7</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xe8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>st32</name></type> <name>jmp_dst</name> <init>= <expr><operator>(</operator><name>st32</name><operator>)</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>+</operator> <literal type="number">19</literal> <operator>+</operator> <name>jmp_dst</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>+</operator> <literal type="number">19</literal> <operator>+</operator> <name>jmp_dst</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sw</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x83</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xc7</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xe8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>st32</name></type> <name>jmp_dst</name> <init>= <expr><operator>(</operator><name>st32</name><operator>)</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <name>jmp_dst</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <name>jmp_dst</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sw</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x83</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xc7</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xe8</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x83</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xe9</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>st32</name></type> <name>jmp_dst</name> <init>= <expr><operator>(</operator><name>st32</name><operator>)</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>+</operator> <literal type="number">21</literal> <operator>+</operator> <name>jmp_dst</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>+</operator> <literal type="number">21</literal> <operator>+</operator> <name>jmp_dst</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sw</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sw</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>b</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <literal type="number">0xa1</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x89</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xe8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>st32</name></type> <name>call_dst</name> <init>= <expr><operator>(</operator><name>st32</name><operator>)</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>call_dst</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>call_dst</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>entry</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_addr_t</name></name> <modifier>*</modifier><name>PE_</name></type><argument_list>(<argument><expr><name>check_unknow</name></expr></argument>)</argument_list> <argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_addr_t</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0LL</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><call><name>PE_</name> <argument_list>(<argument><expr><name>r_bin_pe_get_entrypoint</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Cannot read entry at 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><index>[<expr><literal type="number">367</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xe8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>st32</name></type> <name>jmp_dst</name> <init>= <expr><operator>(</operator><name>st32</name><operator>)</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><index>[<expr><literal type="number">368</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+=</operator> <literal type="number">367</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name>jmp_dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+=</operator> <literal type="number">367</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name>jmp_dst</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>entry</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">512</literal> <operator>-</operator> <literal type="number">16</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"\xff\x15"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>b</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x50</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>b</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xe8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>st32</name></type> <name>call_dst</name> <init>= <expr><operator>(</operator><name>st32</name><operator>)</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>-</operator> <name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <operator>(</operator><name>long</name><operator>)</operator><name>call_dst</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+=</operator> <name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>entry</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_addr_t</name></name> <modifier>*</modifier><name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_main_vaddr</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_addr_t</name></name> <modifier>*</modifier></type><name>winmain</name> <init>= <expr><call><call><name>PE_</name><argument_list>(<argument><expr><name>check_msvcseh</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>winmain</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>winmain</name> <operator>=</operator> <call><call><name>PE_</name><argument_list>(<argument><expr><name>check_mingw</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>winmain</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>winmain</name> <operator>=</operator> <call><call><name>PE_</name><argument_list>(<argument><expr><name>check_unknow</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>winmain</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBinPEObj</name></cpp:macro> <cpp:value>struct PE_(r_bin_pe_obj_t)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PE_DWord</name></type> <name>bin_pe_rva_to_paddr</name><parameter_list>(<parameter><decl><type><name>RBinPEObj</name><modifier>*</modifier></type> <name>bin</name></decl></parameter>, <parameter><decl><type><name>PE_DWord</name></type> <name>rva</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>section_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>section_size</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>num_sections</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>section_base</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vaddr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>section_size</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vsize</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rva</name> <operator>&gt;=</operator> <name>section_base</name> <operator>&amp;&amp;</operator> <name>rva</name> <operator>&lt;</operator> <name>section_base</name> <operator>+</operator> <name>section_size</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>paddr</name> <operator>+</operator> <operator>(</operator><name>rva</name> <operator>-</operator> <name>section_base</name><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>rva</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>ut64</name> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_image_base</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>imageBase</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0LL</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>imageBase</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>ImageBase</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>imageBase</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>imageBase</name> <operator>=</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>imageBase</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>PE_DWord</name></type> <name>bin_pe_rva_to_va</name><parameter_list>(<parameter><decl><type><name>RBinPEObj</name><modifier>*</modifier></type> <name>bin</name></decl></parameter>, <parameter><decl><type><name>PE_DWord</name></type> <name>rva</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_get_image_base</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>rva</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PE_DWord</name></type> <name>bin_pe_va_to_rva</name><parameter_list>(<parameter><decl><type><name>RBinPEObj</name><modifier>*</modifier></type> <name>bin</name></decl></parameter>, <parameter><decl><type><name>PE_DWord</name></type> <name>va</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>imageBase</name> <init>= <expr><call><call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_get_image_base</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>va</name> <operator>&lt;</operator> <name>imageBase</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>va</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>va</name> <operator>-</operator> <name>imageBase</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>resolveModuleOrdinal</name><parameter_list>(<parameter><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>sdb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>module</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ordinal</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>db</name> <init>= <expr><name>sdb</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>foo</name> <init>= <expr><call><name>sdb_get</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>ordinal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>foo</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>foo</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>foo</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>bin_pe_parse_imports</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>,

<argument><expr>struct <name>r_bin_pe_import_t</name><operator>*</operator><operator>*</operator> <name>importp</name></expr></argument>, <argument><expr><name>int</name><operator>*</operator> <name>nimp</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>dll_name</name></expr></argument>,

<argument><expr><name>PE_DWord</name> <name>OriginalFirstThunk</name></expr></argument>,

<argument><expr><name>PE_DWord</name> <name>FirstThunk</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>import_name</name><index>[<expr><name>PE_NAME_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>PE_NAME_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PE_Word</name></type> <name>import_hint</name></decl>, <decl><type ref="prev"/><name>import_ordinal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>import_table</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>sdb_module</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>symname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>symdllname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dll_name</name> <operator>||</operator> <operator>*</operator><name>dll_name</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>off</name> <operator>=</operator> <call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>OriginalFirstThunk</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name>off</name> <operator>=</operator> <call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>FirstThunk</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>import_ordinal</name> <operator>&gt;=</operator> <name>UT16_MAX</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_DWord</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>PE_DWord</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>import_table</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>PE_DWord</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>PE_DWord</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (import table)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>import_table</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>import_table</name> <operator>&amp;</operator> <name>ILT_MASK1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>import_ordinal</name> <operator>=</operator> <name>import_table</name> <operator>&amp;</operator> <name>ILT_MASK2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>import_hint</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>import_name</name></expr></argument>, <argument><expr><name>PE_NAME_LENGTH</name></expr></argument>, <argument><expr><literal type="string">"Ordinal_%i"</literal></expr></argument>, <argument><expr><name>import_ordinal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>symdllname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>dll_name</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>symdllname</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>symdllname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name>symdllname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>?</condition><then> <expr><literal type="number">0</literal></expr></then><else>: <expr><name>len</name> <operator>-</operator> <literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>symdllname</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sdb_module</name> <operator>||</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>symdllname</name></expr></argument>, <argument><expr><name>sdb_module</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>db</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>db</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sdb_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sdb_module</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>symdllname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s.sdb"</literal></expr></argument>, <argument><expr><name>symdllname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_file_exists</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>sdb_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirPrefix</name> <init>= <expr><call><name>r_sys_prefix</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><call><name>R_JOIN_4_PATHS</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>R2_SDB_FORMAT</name></expr></argument>, <argument><expr><literal type="string">"dll"</literal></expr></argument>, <argument><expr><literal type="string">"%s.sdb"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>dirPrefix</name></expr></argument>, <argument><expr><name>symdllname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_file_exists</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>sdb_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>db</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>symname</name> <operator>=</operator> <call><name>resolveModuleOrdinal</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>symdllname</name></expr></argument>, <argument><expr><name>import_ordinal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>symname</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>import_name</name></expr></argument>, <argument><expr><name>PE_NAME_LENGTH</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>symname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>symname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot find %s\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>import_ordinal</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>off</name> <init>= <expr><call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>import_table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <operator>(</operator><name>off</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>PE_Word</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: off &gt; bin-&gt;size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>import_hint</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>PE_Word</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>PE_Word</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read import hint at 0x%08"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_Word</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>name</name></expr></argument>, <argument><expr><name>PE_NAME_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (import name)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><name>PE_NAME_LENGTH</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>import_name</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>import_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument> , <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>import_name</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Import name '%s' has been truncated.\n"</literal></expr></argument>, <argument><expr><name>import_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_import_t</name></name> <modifier>*</modifier></type><name>new_importp</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><operator>*</operator><name>importp</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>nimp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>r_bin_pe_import_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_importp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"realloc (import)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>importp</name> <operator>=</operator> <name>new_importp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>importp</name><operator>)</operator><index>[<expr><operator>*</operator><name>nimp</name></expr>]</index><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>import_name</name></expr></argument>, <argument><expr><name>PE_NAME_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>importp</name><operator>)</operator><index>[<expr><operator>*</operator><name>nimp</name></expr>]</index><operator>.</operator><name><name>name</name><index>[<expr><name>PE_NAME_LENGTH</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>importp</name><operator>)</operator><index>[<expr><operator>*</operator><name>nimp</name></expr>]</index><operator>.</operator><name>libname</name></expr></argument>, <argument><expr><name>dll_name</name></expr></argument>, <argument><expr><name>PE_NAME_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>importp</name><operator>)</operator><index>[<expr><operator>*</operator><name>nimp</name></expr>]</index><operator>.</operator><name><name>libname</name><index>[<expr><name>PE_NAME_LENGTH</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>importp</name><operator>)</operator><index>[<expr><operator>*</operator><name>nimp</name></expr>]</index><operator>.</operator><name>vaddr</name> <operator>=</operator> <call><name>bin_pe_rva_to_va</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>FirstThunk</name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>PE_DWord</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>importp</name><operator>)</operator><index>[<expr><operator>*</operator><name>nimp</name></expr>]</index><operator>.</operator><name>paddr</name> <operator>=</operator> <call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>FirstThunk</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_DWord</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>importp</name><operator>)</operator><index>[<expr><operator>*</operator><name>nimp</name></expr>]</index><operator>.</operator><name>hint</name> <operator>=</operator> <name>import_hint</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>importp</name><operator>)</operator><index>[<expr><operator>*</operator><name>nimp</name></expr>]</index><operator>.</operator><name>ordinal</name> <operator>=</operator> <name>import_ordinal</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>importp</name><operator>)</operator><index>[<expr><operator>*</operator><name>nimp</name></expr>]</index><operator>.</operator><name>last</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>nimp</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>import_table</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>db</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>db</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>symdllname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sdb_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>db</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>db</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>symdllname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sdb_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>bin_pe_init_hdr</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>dos_header</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_dos_header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"malloc (dos header)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name><name>bin</name><operator>-&gt;</operator><name>dos_header</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_dos_header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (dos header)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"pe_dos_header.offset"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"pe_dos_header.format"</literal></expr></argument>, <argument><expr><literal type="string">"[2]zwwwwwwwwwwwww[4]www[10]wx"</literal>

<literal type="string">" e_magic e_cblp e_cp e_crlc e_cparhdr e_minalloc e_maxalloc"</literal>

<literal type="string">" e_ss e_sp e_csum e_ip e_cs e_lfarlc e_ovno e_res e_oemid"</literal>

<literal type="string">" e_oeminfo e_res2 e_lfanew"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>dos_header</name><operator>-&gt;</operator><name>e_lfanew</name></name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid e_lfanew field\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_nt_headers</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"malloc (nt header)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_header_offset</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>dos_header</name><operator>-&gt;</operator><name>e_lfanew</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>dos_header</name><operator>-&gt;</operator><name>e_lfanew</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_nt_headers</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (dos header)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"pe_magic.cparse"</literal></expr></argument>, <argument><expr><literal type="string">"enum pe_magic { IMAGE_NT_OPTIONAL_HDR32_MAGIC=0x10b, IMAGE_NT_OPTIONAL_HDR64_MAGIC=0x20b, IMAGE_ROM_OPTIONAL_HDR_MAGIC=0x107 };"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"pe_subsystem.cparse"</literal></expr></argument>, <argument><expr><literal type="string">"enum pe_subsystem { IMAGE_SUBSYSTEM_UNKNOWN=0, IMAGE_SUBSYSTEM_NATIVE=1, IMAGE_SUBSYSTEM_WINDOWS_GUI=2, "</literal>

<literal type="string">" IMAGE_SUBSYSTEM_WINDOWS_CUI=3, IMAGE_SUBSYSTEM_OS2_CUI=5, IMAGE_SUBSYSTEM_POSIX_CUI=7, IMAGE_SUBSYSTEM_WINDOWS_CE_GUI=9, "</literal>

<literal type="string">" IMAGE_SUBSYSTEM_EFI_APPLICATION=10, IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER=11, IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER=12, "</literal>

<literal type="string">" IMAGE_SUBSYSTEM_EFI_ROM=13, IMAGE_SUBSYSTEM_XBOX=14, IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION=16 };"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"pe_dllcharacteristics.cparse"</literal></expr></argument>, <argument><expr><literal type="string">"enum pe_dllcharacteristics { IMAGE_LIBRARY_PROCESS_INIT=0x0001, IMAGE_LIBRARY_PROCESS_TERM=0x0002, "</literal>

<literal type="string">" IMAGE_LIBRARY_THREAD_INIT=0x0004, IMAGE_LIBRARY_THREAD_TERM=0x0008, IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA=0x0020, "</literal>

<literal type="string">" IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE=0x0040, IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY=0x0080, "</literal>

<literal type="string">" IMAGE_DLLCHARACTERISTICS_NX_COMPAT=0x0100, IMAGE_DLLCHARACTERISTICS_NO_ISOLATION=0x0200,IMAGE_DLLCHARACTERISTICS_NO_SEH=0x0400, "</literal>

<literal type="string">" IMAGE_DLLCHARACTERISTICS_NO_BIND=0x0800, IMAGE_DLLCHARACTERISTICS_APPCONTAINER=0x1000, IMAGE_DLLCHARACTERISTICS_WDM_DRIVER=0x2000, "</literal>

<literal type="string">" IMAGE_DLLCHARACTERISTICS_GUARD_CF=0x4000, IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE=0x8000};"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_BIN_PE64</name></expr></cpp:if>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"pe_nt_image_headers64.offset"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>dos_header</name><operator>-&gt;</operator><name>e_lfanew</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"pe_nt_image_headers64.format"</literal></expr></argument>, <argument><expr><literal type="string">"[4]z?? signature (pe_image_file_header)fileHeader (pe_image_optional_header64)optionalHeader"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"pe_image_optional_header64.format"</literal></expr></argument>, <argument><expr><literal type="string">"[2]Ebbxxxxxqxxwwwwwwxxxx[2]E[2]Bqqqqxx[16]?"</literal>

<literal type="string">" (pe_magic)magic majorLinkerVersion minorLinkerVersion sizeOfCode sizeOfInitializedData"</literal>

<literal type="string">" sizeOfUninitializedData addressOfEntryPoint baseOfCode imageBase"</literal>

<literal type="string">" sectionAlignment fileAlignment majorOperatingSystemVersion minorOperatingSystemVersion"</literal>

<literal type="string">" majorImageVersion minorImageVersion majorSubsystemVersion minorSubsystemVersion"</literal>

<literal type="string">" win32VersionValue sizeOfImage sizeOfHeaders checkSum (pe_subsystem)subsystem (pe_dllcharacteristics)dllCharacteristics"</literal>

<literal type="string">" sizeOfStackReserve sizeOfStackCommit sizeOfHeapReserve sizeOfHeapCommit loaderFlags"</literal>

<literal type="string">" numberOfRvaAndSizes (pe_image_data_directory)dataDirectory"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"pe_nt_image_headers32.offset"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>dos_header</name><operator>-&gt;</operator><name>e_lfanew</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"pe_nt_image_headers32.format"</literal></expr></argument>, <argument><expr><literal type="string">"[4]z?? signature (pe_image_file_header)fileHeader (pe_image_optional_header32)optionalHeader"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"pe_image_optional_header32.format"</literal></expr></argument>, <argument><expr><literal type="string">"[2]Ebbxxxxxxxxxwwwwwwxxxx[2]E[2]Bxxxxxx[16]?"</literal>

<literal type="string">" (pe_magic)magic majorLinkerVersion minorLinkerVersion sizeOfCode sizeOfInitializedData"</literal>

<literal type="string">" sizeOfUninitializedData addressOfEntryPoint baseOfCode baseOfData imageBase"</literal>

<literal type="string">" sectionAlignment fileAlignment majorOperatingSystemVersion minorOperatingSystemVersion"</literal>

<literal type="string">" majorImageVersion minorImageVersion majorSubsystemVersion minorSubsystemVersion"</literal>

<literal type="string">" win32VersionValue sizeOfImage sizeOfHeaders checkSum (pe_subsystem)subsystem (pe_dllcharacteristics)dllCharacteristics"</literal>

<literal type="string">" sizeOfStackReserve sizeOfStackCommit sizeOfHeapReserve sizeOfHeapCommit loaderFlags numberOfRvaAndSizes"</literal>

<literal type="string">" (pe_image_data_directory)dataDirectory"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"pe_machine.cparse"</literal></expr></argument>, <argument><expr><literal type="string">"enum pe_machine { IMAGE_FILE_MACHINE_I386=0x014c, IMAGE_FILE_MACHINE_IA64=0x0200, IMAGE_FILE_MACHINE_AMD64=0x8664 };"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"pe_characteristics.cparse"</literal></expr></argument>, <argument><expr><literal type="string">"enum pe_characteristics { "</literal>

<literal type="string">" IMAGE_FILE_RELOCS_STRIPPED=0x0001, IMAGE_FILE_EXECUTABLE_IMAGE=0x0002, IMAGE_FILE_LINE_NUMS_STRIPPED=0x0004, "</literal>

<literal type="string">" IMAGE_FILE_LOCAL_SYMS_STRIPPED=0x0008, IMAGE_FILE_AGGRESIVE_WS_TRIM=0x0010, IMAGE_FILE_LARGE_ADDRESS_AWARE=0x0020, "</literal>

<literal type="string">" IMAGE_FILE_BYTES_REVERSED_LO=0x0080, IMAGE_FILE_32BIT_MACHINE=0x0100, IMAGE_FILE_DEBUG_STRIPPED=0x0200, "</literal>

<literal type="string">" IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP=0x0400, IMAGE_FILE_NET_RUN_FROM_SWAP=0x0800, IMAGE_FILE_SYSTEM=0x1000, "</literal>

<literal type="string">" IMAGE_FILE_DLL=0x2000, IMAGE_FILE_UP_SYSTEM_ONLY=0x4000, IMAGE_FILE_BYTES_REVERSED_HI=0x8000 };"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"pe_image_file_header.format"</literal></expr></argument>, <argument><expr><literal type="string">"[2]Ewtxxw[2]B"</literal>

<literal type="string">" (pe_machine)machine numberOfSections timeDateStamp pointerToSymbolTable"</literal>

<literal type="string">" numberOfSymbols sizeOfOptionalHeader (pe_characteristics)characteristics"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"pe_image_data_directory.format"</literal></expr></argument>, <argument><expr><literal type="string">"xx virtualAddress size"</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"image_file_header.TimeDateStamp"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>TimeDateStamp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>timestr</name> <init>= <expr><call><name>r_time_stamp_to_str</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>TimeDateStamp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sdb_set_owned</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"image_file_header.TimeDateStamp_string"</literal></expr></argument>, <argument><expr><name>timestr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>optional_header</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>data_directory</name></name> <operator>=</operator> <operator>(</operator><call><name>PE_</name><argument_list>(<argument><expr><name>image_data_directory</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <name><name>bin</name><operator>-&gt;</operator><name>optional_header</name><operator>-&gt;</operator><name>DataDirectory</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>dos_header</name><operator>-&gt;</operator><name>e_magic</name></name></expr></argument>, <argument><expr><literal type="string">"MZ"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>(</operator><call><name>strncmp</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>Signature</name></name></expr></argument>, <argument><expr><literal type="string">"PE"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>strncmp</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>Signature</name></name></expr></argument>, <argument><expr><literal type="string">"PL"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>ut64</name></type> <name>shortname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>secnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>symtype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>symclass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>numaux</name></decl>;</decl_stmt>

}</block></struct></type> <name>SymbolRecord</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>r_bin_pe_export_t</name></name><modifier>*</modifier></type> <name>parse_symbol_table</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>, <argument><expr>struct <name>r_bin_pe_export_t</name><operator>*</operator> <name>exports</name></expr></argument>, <argument><expr><name>int</name> <name>sz</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>sym_tbl_off</name></decl>, <decl><type ref="prev"/><name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>srsz</name> <init>= <expr><name>COFF_SYMBOL_SIZE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_section_t</name></name><modifier>*</modifier></type> <name>sections</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_export_t</name></name><modifier>*</modifier></type> <name>exp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_export_t</name></name><modifier>*</modifier></type> <name>new_exports</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>export_t_sz</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>r_bin_pe_export_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bufsz</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>shsz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SymbolRecord</name></type> <name>sr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>text_off</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>text_rva</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>textn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>exports_sz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>symctr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sym_tbl_off</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>PointerToSymbolTable</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>NumberOfSymbols</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>shsz</name> <operator>=</operator> <name>bufsz</name> <operator>=</operator> <name>num</name> <operator>*</operator> <name>srsz</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bufsz</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>bufsz</name></expr></argument> &gt;</argument_list></name> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>srsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>exports_sz</name> <operator>=</operator> <name>export_t_sz</name> <operator>*</operator> <name>num</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>exports</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>osz</name> <init>= <expr><name>sz</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sz</name> <operator>+=</operator> <name>exports_sz</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_exports</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>exports</name></expr></argument>, <argument><expr><name>sz</name> <operator>+</operator> <name>export_t_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_exports</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>exports</name> <operator>=</operator> <name>new_exports</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_exports</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>exp</name> <operator>=</operator> <operator>(</operator>struct <name>r_bin_pe_export_t</name><operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator> <name>exports</name><operator>)</operator> <operator>+</operator> <name>osz</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <name>exports_sz</name></expr>;</expr_stmt>

<expr_stmt><expr><name>exports</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>sz</name> <operator>+</operator> <name>export_t_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>exp</name> <operator>=</operator> <name>exports</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>sections</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>sections</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>num_sections</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">".text"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>text_rva</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vaddr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>text_off</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>paddr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>textn</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>symctr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>sym_tbl_off</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><name>bufsz</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>shsz</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>srsz</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>sr</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <name>bufsz</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sr</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>sr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sr</name><operator>.</operator><name>secnum</name></name> <operator>==</operator> <name>textn</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sr</name><operator>.</operator><name>symtype</name></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>shortname</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>shortname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sr</name><operator>.</operator><name>shortname</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shortname</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>shortname</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>exp</name><index>[<expr><name>symctr</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>shortname</name></expr></argument>, <argument><expr><name>PE_NAME_LENGTH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>longname</name></decl>, <decl><type ref="prev"/><name><name>name</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>idx</name> <init>= <expr><call><name>r_read_le32</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>sym_tbl_off</name> <operator>+</operator> <name>idx</name> <operator>+</operator> <name>shsz</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>name</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>longname</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>exp</name><index>[<expr><name>symctr</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>longname</name></expr></argument>, <argument><expr><name>PE_NAME_LENGTH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>exp</name><index>[<expr><name>symctr</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"unk_%d"</literal></expr></argument>, <argument><expr><name>symctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>exp</name><index>[<expr><name>symctr</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><name>PE_NAME_LENGTH</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><index>[<expr><name>symctr</name></expr>]</index></name><operator>.</operator><name><name>libname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><index>[<expr><name>symctr</name></expr>]</index></name><operator>.</operator><name>vaddr</name> <operator>=</operator> <call><name>bin_pe_rva_to_va</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>text_rva</name> <operator>+</operator> <name><name>sr</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><index>[<expr><name>symctr</name></expr>]</index></name><operator>.</operator><name>paddr</name> <operator>=</operator> <name>text_off</name> <operator>+</operator> <name><name>sr</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><index>[<expr><name>symctr</name></expr>]</index></name><operator>.</operator><name>ordinal</name> <operator>=</operator> <name>symctr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><index>[<expr><name>symctr</name></expr>]</index></name><operator>.</operator><name><name>forwarder</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp</name><index>[<expr><name>symctr</name></expr>]</index></name><operator>.</operator><name>last</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>symctr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for> 

</block_content>}</block></if></if_stmt> 

<expr_stmt><expr><name><name>exp</name><index>[<expr><name>symctr</name></expr>]</index></name><operator>.</operator><name>last</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>exports</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>r_bin_pe_section_t</name></name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_sections</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>bin_pe_init_sections</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>num_sections</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>NumberOfSections</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>num_sections</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sections_size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_section_header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>bin</name><operator>-&gt;</operator><name>num_sections</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sections_size</name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sections_size</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>num_sections</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_section_header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>section_header</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>sections_size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"malloc (section header)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>section_header_offset</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>dos_header</name><operator>-&gt;</operator><name>e_lfanew</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_file_header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>+</operator>

<name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>SizeOfOptionalHeader</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>section_header_offset</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name><name>bin</name><operator>-&gt;</operator><name>section_header</name></name></expr></argument>, <argument><expr><name>sections_size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (sections)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>section_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

Each symbol table entry includes a name, storage class, type, value and section number.Short names (8 characters or fewer) are stored directly in the symbol table;

longer names are stored as an paddr into the string table at the end of the COFF object.

================================================================

COFF SYMBOL TABLE RECORDS (18 BYTES)

================================================================

record

paddr

struct symrec {

union {

char string[8]; 

struct {

ut32 seros;

ut32 stridx;

} stridx;

} name;

ut32 value;

ut16 secnum;

ut16 symtype;

ut8 symclass;

ut8 numaux;

}

------------------------------------------------------ -

0 | 8 - char symbol name |

| or 32 - bit zeroes followed by 32 - bit |

| index into string table |

------------------------------------------------------ -

8 | symbol value |

------------------------------------------------------ -

0Ch | section number | symbol type |

------------------------------------------------------ -

10h | sym class | num aux |

-------------------------- -

12h

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>true</name></expr>;</return>

<label><name>out_error</name>:</label>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>num_sections</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>bin_pe_get_claimed_checksum</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>optional_header</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>optional_header</name><operator>-&gt;</operator><name>CheckSum</name></name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>bin_pe_get_actual_checksum</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>checksum_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>computed_cs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>remaining_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>cur</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>nt_header_offset</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>checksum_offset</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>nt_header_offset</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_file_header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>==</operator> <name>checksum_offset</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>computed_cs</name> <operator>=</operator> <operator>(</operator><name>computed_cs</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFF</literal><operator>)</operator> <operator>+</operator> <name>cur</name> <operator>+</operator> <operator>(</operator><name>computed_cs</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>computed_cs</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>computed_cs</name> <operator>=</operator> <operator>(</operator><name>computed_cs</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFF</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>computed_cs</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>remaining_bytes</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>%</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>remaining_bytes</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>r_buf_read8_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>remaining_bytes</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>shift</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cur</name> <operator>|=</operator> <call><name>r_buf_read8_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>computed_cs</name> <operator>=</operator> <operator>(</operator><name>computed_cs</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFF</literal><operator>)</operator> <operator>+</operator> <name>cur</name> <operator>+</operator> <operator>(</operator><name>computed_cs</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>computed_cs</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>computed_cs</name> <operator>=</operator> <operator>(</operator><name>computed_cs</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFF</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>computed_cs</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>computed_cs</name> <operator>=</operator> <operator>(</operator><name>computed_cs</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>computed_cs</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>computed_cs</name> <operator>=</operator> <operator>(</operator><name>computed_cs</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>computed_cs</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>computed_cs</name> <operator>=</operator> <operator>(</operator><name>computed_cs</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>computed_cs</name> <operator>+=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<return>return <expr><name>computed_cs</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>bin_pe_get_claimed_authentihash</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>spcinfo</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RASN1Binary</name> <modifier>*</modifier></type><name>digest</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>spcinfo</name><operator>-&gt;</operator><name>messageDigest</name><operator>.</operator><name>digest</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_hex_bin2strdup</name> <argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>binary</name></name></expr></argument>, <argument><expr><name><name>digest</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>bin_pe_compute_authentihash</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>spcinfo</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hashtype</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>spcinfo</name><operator>-&gt;</operator><name>messageDigest</name><operator>.</operator><name>digestAlgorithm</name><operator>.</operator><name>algorithm</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>hashtype</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>algobit</name> <init>= <expr><call><name>r_hash_name_to_bits</name> <argument_list>(<argument><expr><name>hashtype</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>algobit</name> <operator>&amp;</operator> <operator>(</operator><name>R_HASH_MD5</name> <operator>|</operator> <name>R_HASH_SHA1</name> <operator>|</operator> <name>R_HASH_SHA256</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Authenticode only supports md5, sha1, sha256. This PE uses %s\n"</literal></expr></argument>, <argument><expr><name>hashtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hashtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hashtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>checksum_paddr</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>nt_header_offset</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_file_header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">0x40</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>security_entry_offset</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>nt_header_offset</name></name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_nt_headers</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">96</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_data_directory</name></expr></argument>)</argument_list></call> <operator>*</operator><name>data_dir_security</name> <operator>=</operator> <operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>data_directory</name><index>[<expr><name>PE_IMAGE_DIRECTORY_ENTRY_SECURITY</name></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>security_dir_offset</name> <init>= <expr><name><name>data_dir_security</name><operator>-&gt;</operator><name>VirtualAddress</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>security_dir_size</name> <init>= <expr><name><name>data_dir_security</name><operator>-&gt;</operator><name>Size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>r_buf_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_append_buf_slice</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>checksum_paddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_append_buf_slice</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>,

<argument><expr><name>checksum_paddr</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>,

<argument><expr><name>security_entry_offset</name> <operator>-</operator> <name>checksum_paddr</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_append_buf_slice</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>,

<argument><expr><name>security_entry_offset</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>,

<argument><expr><name>security_dir_offset</name> <operator>-</operator> <name>security_entry_offset</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_append_buf_slice</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>,

<argument><expr><name>security_dir_offset</name> <operator>+</operator> <name>security_dir_size</name></expr></argument>,

<argument><expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>security_dir_offset</name> <operator>-</operator> <name>security_dir_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>r_buf_data</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hashstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>r_hash_new</name> <argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>algobit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_hash_do_begin</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>algobit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>digest_size</name> <init>= <expr><call><name>r_hash_calculate</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>algobit</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_hash_do_end</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>algobit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hashstr</name> <operator>=</operator> <call><name>r_hex_bin2strdup</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><name>digest_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_hash_free</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>hashstr</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>bin_pe_get_authentihash</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>authentihash</name></name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>bin_pe_is_authhash_valid</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>is_authhash_valid</name></name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>computeOverlayOffset</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>file_size</name></decl></parameter>, <parameter><decl><type><name>ut64</name><modifier>*</modifier></type> <name>largest_offset</name></decl></parameter>, <parameter><decl><type><name>ut64</name><modifier>*</modifier></type> <name>largest_size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <name>size</name> <operator>&lt;=</operator> <name>file_size</name> <operator>&amp;&amp;</operator> <name>offset</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <operator>(</operator><operator>*</operator><name>largest_offset</name> <operator>+</operator> <operator>*</operator><name>largest_size</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>largest_offset</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>largest_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>bin_pe_get_overlay</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>, <argument><expr><name>ut64</name><operator>*</operator> <name>size</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>largest_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>largest_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>optional_header</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>computeOverlayOffset</name> <argument_list>(

<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_header_offset</name></name><operator>+</operator><literal type="number">4</literal><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>SizeOfOptionalHeader</name></name></expr></argument>,

<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>largest_offset</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>largest_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_section_t</name></name> <modifier>*</modifier></type><name>sects</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>sections</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name><name>sects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>computeOverlayOffset</name><argument_list>(

<argument><expr><name><name>sects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>paddr</name></expr></argument>,

<argument><expr><name><name>sects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>,

<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>largest_offset</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>largest_size</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>optional_header</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PE_IMAGE_DIRECTORY_ENTRIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>PE_IMAGE_DIRECTORY_ENTRY_SECURITY</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>computeOverlayOffset</name> <argument_list>(

<argument><expr><call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>data_directory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>VirtualAddress</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>data_directory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Size</name></expr></argument>,

<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>largest_offset</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>largest_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>largest_offset</name> <operator>+</operator> <name>largest_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>largest_offset</name> <operator>-</operator> <name>largest_size</name></expr>;</expr_stmt>

<return>return <expr><name>largest_offset</name> <operator>+</operator> <name>largest_size</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bin_pe_read_metadata_string</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>frombuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fromoff</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>covered</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>covered</name> <operator>&lt;</operator> <name>MAX_METADATA_STRING_LENGTH</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>covch</name> <init>= <expr><call><name>r_buf_read8_at</name> <argument_list>(<argument><expr><name>frombuf</name></expr></argument>, <argument><expr><name>covered</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>to</name><index>[<expr><name>covered</name></expr>]</index></name> <operator>=</operator> <name>covch</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>covch</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>covered</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>covered</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name>covered</name> <operator>%</operator> <literal type="number">4</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>covered</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>

<return>return <expr><name>covered</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>bin_pe_init_metadata_hdr</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>metadata_directory</name> <init>= <expr><ternary><condition><expr><name><name>bin</name><operator>-&gt;</operator><name>clr_hdr</name></name></expr>?</condition><then> <expr><call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>clr_hdr</name><operator>-&gt;</operator><name>MetaDataDirectoryAddress</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_metadata_header</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>metadata</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_metadata_header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>metadata</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>metadata_directory</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rr</name> <operator>=</operator> <call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>metadata_directory</name></expr></argument>,

<argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>metadata</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>bin</name><operator>-&gt;</operator><name>big_endian</name></name></expr>?</condition><then> <expr><literal type="string">"1I2S"</literal></expr></then><else>: <expr><literal type="string">"1i2s"</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rr</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rr</name> <operator>=</operator> <call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>metadata_directory</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>,

<argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>metadata</name><operator>-&gt;</operator><name>Reserved</name></name><operator>)</operator></expr></argument>, <argument><expr><ternary><condition><expr><name><name>bin</name><operator>-&gt;</operator><name>big_endian</name></name></expr>?</condition><then> <expr><literal type="string">"1I"</literal></expr></then><else>: <expr><literal type="string">"1i"</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rr</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rr</name> <operator>=</operator> <call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>metadata_directory</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>,

<argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>metadata</name><operator>-&gt;</operator><name>VersionStringLength</name></name><operator>)</operator></expr></argument>, <argument><expr><ternary><condition><expr><name><name>bin</name><operator>-&gt;</operator><name>big_endian</name></name></expr>?</condition><then> <expr><literal type="string">"1I"</literal></expr></then><else>: <expr><literal type="string">"1i"</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rr</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Metadata Signature: 0x%"</literal><name>PFMT64x</name><literal type="string">" 0x%"</literal><name>PFMT64x</name><literal type="string">" %d\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>metadata_directory</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>metadata</name><operator>-&gt;</operator><name>Signature</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>metadata</name><operator>-&gt;</operator><name>VersionStringLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>metadata</name><operator>-&gt;</operator><name>VersionStringLength</name></name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>metadata</name><operator>-&gt;</operator><name>VersionString</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>metadata</name><operator>-&gt;</operator><name>VersionString</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rr</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>metadata_directory</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>metadata</name><operator>-&gt;</operator><name>VersionString</name></name><operator>)</operator></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rr</name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (metadata header) - cannot parse version string\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>VersionString</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">".NET Version: %s\n"</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>VersionString</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rr</name> <operator>=</operator> <call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>metadata_directory</name> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <name><name>metadata</name><operator>-&gt;</operator><name>VersionStringLength</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>metadata</name><operator>-&gt;</operator><name>Flags</name></name><operator>)</operator></expr></argument>, <argument><expr><ternary><condition><expr><name><name>bin</name><operator>-&gt;</operator><name>big_endian</name></name></expr>?</condition><then> <expr><literal type="string">"2S"</literal></expr></then><else>: <expr><literal type="string">"2s"</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rr</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Number of Metadata Streams: %d\n"</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>NumberOfStreams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>metadata_header</name></name> <operator>=</operator> <name>metadata</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_of_stream</name> <init>= <expr><name>metadata_directory</name> <operator>+</operator> <literal type="number">20</literal> <operator>+</operator> <name><name>metadata</name><operator>-&gt;</operator><name>VersionStringLength</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_metadata_stream</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>stream</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_metadata_stream</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>*</operator><name>streams</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_metadata_stream</name></expr></argument>)</argument_list></call><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>NumberOfStreams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>streams</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name><name>metadata</name><operator>-&gt;</operator><name>NumberOfStreams</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_metadata_stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>start_of_stream</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>stream</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>bin</name><operator>-&gt;</operator><name>big_endian</name></name></expr>?</condition><then> <expr><literal type="string">"2I"</literal></expr></then><else>: <expr><literal type="string">"2i"</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"DirectoryAddress: %x Size: %x\n"</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>Offset</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>Size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>stream_name</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>MAX_METADATA_STRING_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream_name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>start_of_stream</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>MAX_METADATA_STRING_LENGTH</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>stream_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>bin_pe_read_metadata_string</name> <argument_list>(<argument><expr><name>stream_name</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>start_of_stream</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>stream_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Stream name: %s %d\n"</literal></expr></argument>, <argument><expr><name>stream_name</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>Name</name></name> <operator>=</operator> <name>stream_name</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>streams</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start_of_stream</name> <operator>+=</operator> <literal type="number">8</literal> <operator>+</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>streams</name></name> <operator>=</operator> <name>streams</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (metadata header)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>bin_pe_init_overlay</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>pe_overlay_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>pe_overlay_offset</name> <init>= <expr><call><call><name>PE_</name><argument_list>(<argument><expr><name>bin_pe_get_overlay</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pe_overlay_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pe_overlay_offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"pe_overlay.offset"</literal></expr></argument>, <argument><expr><name>pe_overlay_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"pe_overlay.size"</literal></expr></argument>, <argument><expr><name>pe_overlay_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>bin_pe_init_clr_hdr</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_data_directory</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>clr_dir</name> <operator>=</operator> <operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>data_directory</name><index>[<expr><name>PE_IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR</name></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>image_clr_hdr_paddr</name> <init>= <expr><call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>clr_dir</name><operator>-&gt;</operator><name>VirtualAddress</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_clr_header</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>clr_hdr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_clr_header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rr</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_clr_header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clr_hdr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rr</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>image_clr_hdr_paddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>clr_hdr</name><operator>)</operator></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>clr_hdr</name><operator>-&gt;</operator><name>HeaderSize</name></name> <operator>!=</operator> <literal type="number">0x48</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>clr_hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rr</name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>clr_hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>clr_hdr</name></name> <operator>=</operator> <name>clr_hdr</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>bin_pe_init_imports</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_data_directory</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>data_dir_import</name> <operator>=</operator> <operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>data_directory</name><index>[<expr><name>PE_IMAGE_DIRECTORY_ENTRY_IMPORT</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_data_directory</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>data_dir_delay_import</name> <operator>=</operator> <operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>data_directory</name><index>[<expr><name>PE_IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT</name></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>import_dir_paddr</name> <init>= <expr><call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>data_dir_import</name><operator>-&gt;</operator><name>VirtualAddress</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>import_dir_offset</name> <init>= <expr><call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>data_dir_import</name><operator>-&gt;</operator><name>VirtualAddress</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>delay_import_dir_offset</name> <init>= <expr><ternary><condition><expr><name>data_dir_delay_import</name></expr>

?</condition><then> <expr><call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>data_dir_delay_import</name><operator>-&gt;</operator><name>VirtualAddress</name></name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_import_directory</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>import_dir</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_import_directory</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>new_import_dir</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_import_directory</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>curr_import_dir</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_delay_import_directory</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>delay_import_dir</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_delay_import_directory</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>new_delay_import_dir</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_delay_import_directory</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>curr_delay_import_dir</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dir_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_import_directory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delay_import_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_delay_import_directory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>indx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rr</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>import_dir_size</name> <init>= <expr><name><name>data_dir_import</name><operator>-&gt;</operator><name>Size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delay_import_dir_size</name> <init>= <expr><name><name>data_dir_delay_import</name><operator>-&gt;</operator><name>Size</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>import_dir_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>import_dir_size</name> <operator>=</operator> <name><name>data_dir_import</name><operator>-&gt;</operator><name>Size</name></name> <operator>=</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>delay_import_dir_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>delay_import_dir_size</name> <operator>=</operator> <name><name>data_dir_delay_import</name><operator>-&gt;</operator><name>Size</name></name> <operator>=</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxidsz</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><operator>(</operator><name>PE_DWord</name><operator>)</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>import_dir_offset</name> <operator>+</operator> <name>import_dir_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>maxidsz</name> <operator>-=</operator> <name>import_dir_offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>maxidsz</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>maxidsz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>import_directory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>import_dir_paddr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>import_dir_size</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>import_dir_size</name></expr></argument> &gt;</argument_list></name> <name>maxidsz</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Invalid import directory size: 0x%x is now 0x%x\n"</literal></expr></argument>, <argument><expr><name>import_dir_size</name></expr></argument>, <argument><expr><name>maxidsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>import_dir_size</name> <operator>=</operator> <name>maxidsz</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>import_directory_offset</name></name> <operator>=</operator> <name>import_dir_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>indx</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name>indx</name><operator>)</operator> <operator>*</operator> <name>dir_size</name><operator>)</operator> <operator>&gt;</operator> <name>import_dir_size</name></expr>)</condition> <block>{<block_content>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>new_import_dir</name> <operator>=</operator> <operator>(</operator><call><name>PE_</name><argument_list>(<argument><expr><name>image_import_directory</name></expr></argument>)</argument_list></call><operator>*</operator><operator>)</operator><call><name>realloc</name> <argument_list>(<argument><expr><name>import_dir</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>indx</name><operator>)</operator> <operator>*</operator> <name>dir_size</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_import_dir</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"malloc (import directory)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>import_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>import_dir</name> <operator>=</operator> <name>new_import_dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_import_dir</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curr_import_dir</name> <operator>=</operator> <name>import_dir</name> <operator>+</operator> <operator>(</operator><name>indx</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>import_dir_offset</name> <operator>+</operator> <operator>(</operator><name>indx</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>dir_size</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>curr_import_dir</name><operator>)</operator></expr></argument>, <argument><expr><name>dir_size</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (import directory)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>import_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name><name>curr_import_dir</name><operator>-&gt;</operator><name>FirstThunk</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>curr_import_dir</name><operator>-&gt;</operator><name>Name</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>curr_import_dir</name><operator>-&gt;</operator><name>TimeDateStamp</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>curr_import_dir</name><operator>-&gt;</operator><name>Characteristics</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>curr_import_dir</name><operator>-&gt;</operator><name>ForwarderChain</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>import_directory</name></name> <operator>=</operator> <name>import_dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>import_directory_size</name></name> <operator>=</operator> <name>import_dir_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>indx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>delay_import_dir_offset</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>delay_import_dir_offset</name> <operator>&lt;</operator> <operator>(</operator><name>ut32</name><operator>)</operator><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>off</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>delay_import_directory_offset</name></name> <operator>=</operator> <name>delay_import_dir_offset</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>indx</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name>indx</name> <operator>*</operator> <name>delay_import_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Cannot find end of import symbols\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>new_delay_import_dir</name> <operator>=</operator> <operator>(</operator><call><name>PE_</name><argument_list>(<argument><expr><name>image_delay_import_directory</name></expr></argument>)</argument_list></call><operator>*</operator><operator>)</operator><call><name>realloc</name> <argument_list>(

<argument><expr><name>delay_import_dir</name></expr></argument>, <argument><expr><operator>(</operator><name>indx</name> <operator>*</operator> <name>delay_import_size</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_delay_import_dir</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"malloc (delay import directory)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>delay_import_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>delay_import_dir</name> <operator>=</operator> <name>new_delay_import_dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curr_delay_import_dir</name> <operator>=</operator> <name>delay_import_dir</name> <operator>+</operator> <operator>(</operator><name>indx</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>rr</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>delay_import_dir_offset</name> <operator>+</operator> <operator>(</operator><name>indx</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>delay_import_size</name></expr></argument>,

<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>curr_delay_import_dir</name><operator>)</operator></expr></argument>, <argument><expr><name>dir_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rr</name> <operator>!=</operator> <name>dir_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (delay import directory)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name><name>curr_delay_import_dir</name><operator>-&gt;</operator><name>Name</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>delay_import_directory</name></name> <operator>=</operator> <name>delay_import_dir</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>import_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>import_directory</name></name> <operator>=</operator> <name>import_dir</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>delay_import_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>bin_pe_init_exports</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_data_directory</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>data_dir_export</name> <operator>=</operator> <operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>data_directory</name><index>[<expr><name>PE_IMAGE_DIRECTORY_ENTRY_EXPORT</name></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>export_dir_paddr</name> <init>= <expr><call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>data_dir_export</name><operator>-&gt;</operator><name>VirtualAddress</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>export_dir_paddr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>export_directory</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_export_directory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"malloc (export directory)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>export_dir_paddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name><name>bin</name><operator>-&gt;</operator><name>export_directory</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_export_directory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (export directory)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>export_directory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_free_resource</name><parameter_list>(<parameter><decl><type><name>r_pe_resource</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>timestr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>language</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>bin_pe_init_resource</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_data_directory</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>resource_dir</name> <operator>=</operator> <operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>data_directory</name><index>[<expr><name>PE_IMAGE_DIRECTORY_ENTRY_RESOURCE</name></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>resource_dir_paddr</name> <init>= <expr><call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>resource_dir</name><operator>-&gt;</operator><name>VirtualAddress</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>resource_dir_paddr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>resources</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>_free_resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>resources</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>resource_directory</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>bin</name><operator>-&gt;</operator><name>resource_directory</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"malloc (resource directory)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>resource_dir_paddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name><name>bin</name><operator>-&gt;</operator><name>resource_directory</name></name></expr></argument>,

<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>bin</name><operator>-&gt;</operator><name>resource_directory</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>bin</name><operator>-&gt;</operator><name>resource_directory</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (resource directory)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>resource_directory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>resource_directory_offset</name></name> <operator>=</operator> <name>resource_dir_paddr</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>bin_pe_store_tls_callbacks</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>, <argument><expr><name>PE_DWord</name> <name>callbacks</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>paddr</name></decl>, <decl><type ref="prev"/><name>haddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>addressOfTLSCallback</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>key</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>addressOfTLSCallback</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>callbacks</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>addressOfTLSCallback</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addressOfTLSCallback</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>addressOfTLSCallback</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (tls_callback)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>addressOfTLSCallback</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>optional_header</name><operator>-&gt;</operator><name>SizeOfImage</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rva_callback</name> <init>= <expr><call><name>bin_pe_va_to_rva</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>(</operator><name>PE_DWord</name><operator>)</operator> <name>addressOfTLSCallback</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rva_callback</name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>optional_header</name><operator>-&gt;</operator><name>SizeOfImage</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"pe.tls_callback%d_vaddr"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>addressOfTLSCallback</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"pe.tls_callback%d_paddr"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>paddr</name> <operator>=</operator> <call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><call><name>bin_pe_va_to_rva</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>(</operator><name>PE_DWord</name><operator>)</operator> <name>addressOfTLSCallback</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>paddr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"pe.tls_callback%d_haddr"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>haddr</name> <operator>=</operator> <name>callbacks</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>haddr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>callbacks</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>addressOfTLSCallback</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>bin_pe_init_tls</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_tls_directory</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>image_tls_directory</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_data_directory</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>data_dir_tls</name> <operator>=</operator> <operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>data_directory</name><index>[<expr><name>PE_IMAGE_DIRECTORY_ENTRY_TLS</name></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>tls_paddr</name> <init>= <expr><call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>data_dir_tls</name><operator>-&gt;</operator><name>VirtualAddress</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>image_tls_directory</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_tls_directory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>tls_paddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>image_tls_directory</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_tls_directory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_tls_directory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (image_tls_directory)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>image_tls_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>tls_directory</name></name> <operator>=</operator> <name>image_tls_directory</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>image_tls_directory</name><operator>-&gt;</operator><name>AddressOfCallBacks</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>image_tls_directory</name><operator>-&gt;</operator><name>EndAddressOfRawData</name></name> <operator>&lt;</operator> <name><name>image_tls_directory</name><operator>-&gt;</operator><name>StartAddressOfRawData</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>callbacks_paddr</name> <init>= <expr><call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><call><name>bin_pe_va_to_rva</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>,

<argument><expr><operator>(</operator><name>PE_DWord</name><operator>)</operator> <name><name>image_tls_directory</name><operator>-&gt;</operator><name>AddressOfCallBacks</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bin_pe_store_tls_callbacks</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>callbacks_paddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_Var</name><parameter_list>(<parameter><decl><type><name>Var</name><modifier>*</modifier></type> <name>var</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>var</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>szKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_VarFileInfo</name><parameter_list>(<parameter><decl><type><name>VarFileInfo</name><modifier>*</modifier></type> <name>varFileInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>varFileInfo</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>varFileInfo</name><operator>-&gt;</operator><name>szKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>varFileInfo</name><operator>-&gt;</operator><name>Children</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>children</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>children</name> <operator>&lt;</operator> <name><name>varFileInfo</name><operator>-&gt;</operator><name>numOfChildren</name></name></expr>;</condition> <incr><expr><name>children</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>free_Var</name> <argument_list>(<argument><expr><name><name>varFileInfo</name><operator>-&gt;</operator><name>Children</name><index>[<expr><name>children</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>varFileInfo</name><operator>-&gt;</operator><name>Children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>varFileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_String</name><parameter_list>(<parameter><decl><type><name>String</name><modifier>*</modifier></type> <name>string</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>string</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>szKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_StringTable</name><parameter_list>(<parameter><decl><type><name>StringTable</name><modifier>*</modifier></type> <name>stringTable</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>stringTable</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>stringTable</name><operator>-&gt;</operator><name>szKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stringTable</name><operator>-&gt;</operator><name>Children</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>childrenST</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>childrenST</name> <operator>&lt;</operator> <name><name>stringTable</name><operator>-&gt;</operator><name>numOfChildren</name></name></expr>;</condition> <incr><expr><name>childrenST</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>free_String</name> <argument_list>(<argument><expr><name><name>stringTable</name><operator>-&gt;</operator><name>Children</name><index>[<expr><name>childrenST</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>stringTable</name><operator>-&gt;</operator><name>Children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>stringTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_StringFileInfo</name><parameter_list>(<parameter><decl><type><name>StringFileInfo</name><modifier>*</modifier></type> <name>stringFileInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>stringFileInfo</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>stringFileInfo</name><operator>-&gt;</operator><name>szKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stringFileInfo</name><operator>-&gt;</operator><name>Children</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>childrenSFI</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>childrenSFI</name> <operator>&lt;</operator> <name><name>stringFileInfo</name><operator>-&gt;</operator><name>numOfChildren</name></name></expr>;</condition> <incr><expr><name>childrenSFI</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>free_StringTable</name> <argument_list>(<argument><expr><name><name>stringFileInfo</name><operator>-&gt;</operator><name>Children</name><index>[<expr><name>childrenSFI</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>stringFileInfo</name><operator>-&gt;</operator><name>Children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>stringFileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>align32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x = (((x) &amp; 0x3) == 0)? (x): ((x) &amp; ~0x3) + 0x4;</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_VS_VERSIONINFO</name><parameter_list>(<parameter><decl><type><name>PE_VS_VERSIONINFO</name><modifier>*</modifier></type> <name>vs_VersionInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vs_VersionInfo</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>szKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_VarFileInfo</name> <argument_list>(<argument><expr><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>varFileInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_StringFileInfo</name> <argument_list>(<argument><expr><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>stringFileInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>vs_VersionInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <name>PE_</name></type>(<name>free_VS_VERSIONINFO</name>)<parameter_list>(<parameter><decl><type><name>PE_VS_VERSIONINFO</name> <modifier>*</modifier></type> <name>vs_VersionInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>free_VS_VERSIONINFO</name> <argument_list>(<argument><expr><name>vs_VersionInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>Var</name><modifier>*</modifier></type> <name>Pe_r_bin_pe_parse_var</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>, <argument><expr><name>PE_DWord</name><operator>*</operator> <name>curAddr</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>Var</name><modifier>*</modifier></type> <name>var</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>var</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: calloc (Var)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>*</operator><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>wLength</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>wLength</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>wLength</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (Var wLength)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_Var</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curAddr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>wLength</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>*</operator><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>wValueLength</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>wValueLength</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>wValueLength</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (Var wValueLength)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_Var</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curAddr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>wValueLength</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>*</operator><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>wType</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>wType</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>wType</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (Var wType)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_Var</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curAddr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>wType</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>wType</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>var</name><operator>-&gt;</operator><name>wType</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: check (Var wType)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_Var</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>szKey</name></name> <operator>=</operator> <operator>(</operator><name>ut16</name><operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><call><name>UT16_ALIGN</name> <argument_list>(<argument><expr><name>TRANSLATION_UTF_16_LEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>var</name><operator>-&gt;</operator><name>szKey</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: malloc (Var szKey)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_Var</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>*</operator><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>szKey</name></name></expr></argument>, <argument><expr><name>TRANSLATION_UTF_16_LEN</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (Var szKey)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_Var</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curAddr</name> <operator>+=</operator> <name>TRANSLATION_UTF_16_LEN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>szKey</name></name></expr></argument>, <argument><expr><name>TRANSLATION_UTF_16</name></expr></argument>, <argument><expr><name>TRANSLATION_UTF_16_LEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: check (Var szKey)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_Var</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>align32</name> <argument_list>(<argument><expr><operator>*</operator><name>curAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>numOfValues</name></name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>wValueLength</name></name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>var</name><operator>-&gt;</operator><name>numOfValues</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: check (Var numOfValues)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_Var</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>Value</name></name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>wValueLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>var</name><operator>-&gt;</operator><name>Value</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: malloc (Var Value)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_Var</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>*</operator><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>Value</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>wValueLength</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>var</name><operator>-&gt;</operator><name>wValueLength</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (Var Value)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_Var</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curAddr</name> <operator>+=</operator> <name><name>var</name><operator>-&gt;</operator><name>wValueLength</name></name></expr>;</expr_stmt>

<return>return <expr><name>var</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VarFileInfo</name><modifier>*</modifier></type> <name>Pe_r_bin_pe_parse_var_file_info</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>, <argument><expr><name>PE_DWord</name><operator>*</operator> <name>curAddr</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>VarFileInfo</name><modifier>*</modifier></type> <name>varFileInfo</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>varFileInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>varFileInfo</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: calloc (VarFileInfo)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>startAddr</name> <init>= <expr><operator>*</operator><name>curAddr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>*</operator><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>varFileInfo</name><operator>-&gt;</operator><name>wLength</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>varFileInfo</name><operator>-&gt;</operator><name>wLength</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>varFileInfo</name><operator>-&gt;</operator><name>wLength</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (VarFileInfo wLength)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_VarFileInfo</name> <argument_list>(<argument><expr><name>varFileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curAddr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>varFileInfo</name><operator>-&gt;</operator><name>wLength</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>*</operator><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>varFileInfo</name><operator>-&gt;</operator><name>wValueLength</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>varFileInfo</name><operator>-&gt;</operator><name>wValueLength</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>varFileInfo</name><operator>-&gt;</operator><name>wValueLength</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (VarFileInfo wValueLength)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_VarFileInfo</name> <argument_list>(<argument><expr><name>varFileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curAddr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>varFileInfo</name><operator>-&gt;</operator><name>wValueLength</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>varFileInfo</name><operator>-&gt;</operator><name>wValueLength</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: check (VarFileInfo wValueLength)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_VarFileInfo</name> <argument_list>(<argument><expr><name>varFileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>*</operator><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>varFileInfo</name><operator>-&gt;</operator><name>wType</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>varFileInfo</name><operator>-&gt;</operator><name>wType</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>varFileInfo</name><operator>-&gt;</operator><name>wType</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (VarFileInfo wType)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_VarFileInfo</name> <argument_list>(<argument><expr><name>varFileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curAddr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>varFileInfo</name><operator>-&gt;</operator><name>wType</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>varFileInfo</name><operator>-&gt;</operator><name>wType</name></name> <operator>&amp;&amp;</operator> <name><name>varFileInfo</name><operator>-&gt;</operator><name>wType</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: check (VarFileInfo wType)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_VarFileInfo</name> <argument_list>(<argument><expr><name>varFileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>varFileInfo</name><operator>-&gt;</operator><name>szKey</name></name> <operator>=</operator> <operator>(</operator><name>ut16</name><operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><call><name>UT16_ALIGN</name> <argument_list>(<argument><expr><name>VARFILEINFO_UTF_16_LEN</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>varFileInfo</name><operator>-&gt;</operator><name>szKey</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: malloc (VarFileInfo szKey)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_VarFileInfo</name> <argument_list>(<argument><expr><name>varFileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>*</operator><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name><name>varFileInfo</name><operator>-&gt;</operator><name>szKey</name></name></expr></argument>, <argument><expr><name>VARFILEINFO_UTF_16_LEN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VARFILEINFO_UTF_16_LEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (VarFileInfo szKey)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_VarFileInfo</name> <argument_list>(<argument><expr><name>varFileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curAddr</name> <operator>+=</operator> <name>VARFILEINFO_UTF_16_LEN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><name><name>varFileInfo</name><operator>-&gt;</operator><name>szKey</name></name></expr></argument>, <argument><expr><name>VARFILEINFO_UTF_16</name></expr></argument>, <argument><expr><name>VARFILEINFO_UTF_16_LEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: check (VarFileInfo szKey)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_VarFileInfo</name> <argument_list>(<argument><expr><name>varFileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>align32</name> <argument_list>(<argument><expr><operator>*</operator><name>curAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>startAddr</name> <operator>+</operator> <name><name>varFileInfo</name><operator>-&gt;</operator><name>wLength</name></name> <operator>&gt;</operator> <operator>*</operator><name>curAddr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Var</name><modifier>*</modifier><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><operator>(</operator><name>Var</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name><name>varFileInfo</name><operator>-&gt;</operator><name>Children</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>varFileInfo</name><operator>-&gt;</operator><name>numOfChildren</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>varFileInfo</name><operator>-&gt;</operator><name>Children</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: realloc (VarFileInfo Children)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_VarFileInfo</name> <argument_list>(<argument><expr><name>varFileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>varFileInfo</name><operator>-&gt;</operator><name>Children</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>varFileInfo</name><operator>-&gt;</operator><name>Children</name><index>[<expr><name><name>varFileInfo</name><operator>-&gt;</operator><name>numOfChildren</name></name></expr>]</index></name> <operator>=</operator> <call><name>Pe_r_bin_pe_parse_var</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>curAddr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: bad parsing Var\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_VarFileInfo</name> <argument_list>(<argument><expr><name>varFileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>varFileInfo</name><operator>-&gt;</operator><name>numOfChildren</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>align32</name> <argument_list>(<argument><expr><operator>*</operator><name>curAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>varFileInfo</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>String</name><modifier>*</modifier></type> <name>Pe_r_bin_pe_parse_string</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>, <argument><expr><name>PE_DWord</name><operator>*</operator> <name>curAddr</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>String</name><modifier>*</modifier></type> <name>string</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>string</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>begAddr</name> <init>= <expr><operator>*</operator><name>curAddr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len_value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>string</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: calloc (String)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>begAddr</name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>begAddr</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>wLength</name></name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_String</name> <argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>*</operator><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>string</name><operator>-&gt;</operator><name>wLength</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>wLength</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>wLength</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (String wLength)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curAddr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>wLength</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>curAddr</name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <operator>*</operator><name>curAddr</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>wValueLength</name></name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>*</operator><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>string</name><operator>-&gt;</operator><name>wValueLength</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>wValueLength</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>wValueLength</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (String wValueLength)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curAddr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>wValueLength</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>curAddr</name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <operator>*</operator><name>curAddr</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>wType</name></name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>*</operator><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>string</name><operator>-&gt;</operator><name>wType</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>wType</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>wType</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (String wType)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curAddr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>wType</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>string</name><operator>-&gt;</operator><name>wType</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>string</name><operator>-&gt;</operator><name>wType</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: check (String wType)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>curAddr</name> <operator>&lt;</operator> <name>begAddr</name> <operator>+</operator> <name><name>string</name><operator>-&gt;</operator><name>wLength</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><operator>*</operator><name>curAddr</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>utf16_char</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name> <modifier>*</modifier></type><name>tmpKey</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>curAddr</name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <operator>*</operator><name>curAddr</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>*</operator><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>utf16_char</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: check (String szKey)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmpKey</name> <operator>=</operator> <operator>(</operator><name>ut16</name><operator>*</operator><operator>)</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>szKey</name></name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmpKey</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: realloc (String szKey)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>string</name><operator>-&gt;</operator><name>szKey</name></name> <operator>=</operator> <name>tmpKey</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><operator>-&gt;</operator><name>szKey</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>utf16_char</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><operator>-&gt;</operator><name>wKeyLen</name></name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>utf16_char</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>curAddr</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>align32</name> <argument_list>(<argument><expr><operator>*</operator><name>curAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len_value</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>wValueLength</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>string</name><operator>-&gt;</operator><name>wLength</name></name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>curAddr</name> <operator>-</operator> <name>begAddr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><operator>-&gt;</operator><name>wValueLength</name></name> <operator>=</operator> <name>len_value</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len_value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len_value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>string</name><operator>-&gt;</operator><name>Value</name></name> <operator>=</operator> <operator>(</operator><name>ut16</name><operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>len_value</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>string</name><operator>-&gt;</operator><name>Value</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: malloc (String Value)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>curAddr</name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <operator>*</operator><name>curAddr</name> <operator>+</operator> <name>len_value</name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>*</operator><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name><name>string</name><operator>-&gt;</operator><name>Value</name></name></expr></argument>, <argument><expr><name>len_value</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>len_value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (String Value)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curAddr</name> <operator>+=</operator> <name>len_value</name></expr>;</expr_stmt>

<return>return <expr><name>string</name></expr>;</return>

<label><name>out_error</name>:</label>

<expr_stmt><expr><call><name>free_String</name> <argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>StringTable</name><modifier>*</modifier></type> <name>Pe_r_bin_pe_parse_string_table</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>, <argument><expr><name>PE_DWord</name><operator>*</operator> <name>curAddr</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>StringTable</name><modifier>*</modifier></type> <name>stringTable</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>stringTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stringTable</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: calloc (stringTable)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>startAddr</name> <init>= <expr><operator>*</operator><name>curAddr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>*</operator><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>stringTable</name><operator>-&gt;</operator><name>wLength</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>stringTable</name><operator>-&gt;</operator><name>wLength</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>stringTable</name><operator>-&gt;</operator><name>wLength</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (StringTable wLength)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_StringTable</name> <argument_list>(<argument><expr><name>stringTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curAddr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>stringTable</name><operator>-&gt;</operator><name>wLength</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>*</operator><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>stringTable</name><operator>-&gt;</operator><name>wValueLength</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>stringTable</name><operator>-&gt;</operator><name>wValueLength</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>stringTable</name><operator>-&gt;</operator><name>wValueLength</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (StringTable wValueLength)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_StringTable</name> <argument_list>(<argument><expr><name>stringTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curAddr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>stringTable</name><operator>-&gt;</operator><name>wValueLength</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stringTable</name><operator>-&gt;</operator><name>wValueLength</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: check (StringTable wValueLength)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_StringTable</name> <argument_list>(<argument><expr><name>stringTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>*</operator><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>stringTable</name><operator>-&gt;</operator><name>wType</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>stringTable</name><operator>-&gt;</operator><name>wType</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>stringTable</name><operator>-&gt;</operator><name>wType</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (StringTable wType)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_StringTable</name> <argument_list>(<argument><expr><name>stringTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curAddr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>stringTable</name><operator>-&gt;</operator><name>wType</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stringTable</name><operator>-&gt;</operator><name>wType</name></name> <operator>&amp;&amp;</operator> <name><name>stringTable</name><operator>-&gt;</operator><name>wType</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: check (StringTable wType)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_StringTable</name> <argument_list>(<argument><expr><name>stringTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stringTable</name><operator>-&gt;</operator><name>szKey</name></name> <operator>=</operator> <operator>(</operator><name>ut16</name><operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><call><name>UT16_ALIGN</name> <argument_list>(<argument><expr><name>EIGHT_HEX_DIG_UTF_16_LEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stringTable</name><operator>-&gt;</operator><name>szKey</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: malloc (stringTable szKey)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_StringTable</name> <argument_list>(<argument><expr><name>stringTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>*</operator><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name><name>stringTable</name><operator>-&gt;</operator><name>szKey</name></name></expr></argument>, <argument><expr><name>EIGHT_HEX_DIG_UTF_16_LEN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EIGHT_HEX_DIG_UTF_16_LEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (StringTable szKey)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_StringTable</name> <argument_list>(<argument><expr><name>stringTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curAddr</name> <operator>+=</operator> <name>EIGHT_HEX_DIG_UTF_16_LEN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>align32</name> <argument_list>(<argument><expr><operator>*</operator><name>curAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>startAddr</name> <operator>+</operator> <name><name>stringTable</name><operator>-&gt;</operator><name>wLength</name></name> <operator>&gt;</operator> <operator>*</operator><name>curAddr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>String</name><modifier>*</modifier><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><operator>(</operator><name>String</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name><name>stringTable</name><operator>-&gt;</operator><name>Children</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>stringTable</name><operator>-&gt;</operator><name>numOfChildren</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>stringTable</name><operator>-&gt;</operator><name>Children</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: realloc (StringTable Children)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_StringTable</name> <argument_list>(<argument><expr><name>stringTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stringTable</name><operator>-&gt;</operator><name>Children</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>stringTable</name><operator>-&gt;</operator><name>Children</name><index>[<expr><name><name>stringTable</name><operator>-&gt;</operator><name>numOfChildren</name></name></expr>]</index></name> <operator>=</operator> <call><name>Pe_r_bin_pe_parse_string</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>curAddr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: bad parsing String\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_StringTable</name> <argument_list>(<argument><expr><name>stringTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stringTable</name><operator>-&gt;</operator><name>numOfChildren</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>align32</name> <argument_list>(<argument><expr><operator>*</operator><name>curAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stringTable</name><operator>-&gt;</operator><name>numOfChildren</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: check (StringTable numOfChildren)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_StringTable</name> <argument_list>(<argument><expr><name>stringTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>stringTable</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>StringFileInfo</name><modifier>*</modifier></type> <name>Pe_r_bin_pe_parse_string_file_info</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>, <argument><expr><name>PE_DWord</name><operator>*</operator> <name>curAddr</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>StringFileInfo</name><modifier>*</modifier></type> <name>stringFileInfo</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>stringFileInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stringFileInfo</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: calloc (StringFileInfo)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>startAddr</name> <init>= <expr><operator>*</operator><name>curAddr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>*</operator><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>stringFileInfo</name><operator>-&gt;</operator><name>wLength</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>stringFileInfo</name><operator>-&gt;</operator><name>wLength</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>stringFileInfo</name><operator>-&gt;</operator><name>wLength</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (StringFileInfo wLength)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_StringFileInfo</name> <argument_list>(<argument><expr><name>stringFileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curAddr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>stringFileInfo</name><operator>-&gt;</operator><name>wLength</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>*</operator><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>stringFileInfo</name><operator>-&gt;</operator><name>wValueLength</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>stringFileInfo</name><operator>-&gt;</operator><name>wValueLength</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>stringFileInfo</name><operator>-&gt;</operator><name>wValueLength</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (StringFileInfo wValueLength)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_StringFileInfo</name> <argument_list>(<argument><expr><name>stringFileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curAddr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>stringFileInfo</name><operator>-&gt;</operator><name>wValueLength</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stringFileInfo</name><operator>-&gt;</operator><name>wValueLength</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: check (StringFileInfo wValueLength)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_StringFileInfo</name> <argument_list>(<argument><expr><name>stringFileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>*</operator><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>stringFileInfo</name><operator>-&gt;</operator><name>wType</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>stringFileInfo</name><operator>-&gt;</operator><name>wType</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>stringFileInfo</name><operator>-&gt;</operator><name>wType</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (StringFileInfo wType)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_StringFileInfo</name> <argument_list>(<argument><expr><name>stringFileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curAddr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>stringFileInfo</name><operator>-&gt;</operator><name>wType</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stringFileInfo</name><operator>-&gt;</operator><name>wType</name></name> <operator>&amp;&amp;</operator> <name><name>stringFileInfo</name><operator>-&gt;</operator><name>wType</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: check (StringFileInfo wType)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_StringFileInfo</name> <argument_list>(<argument><expr><name>stringFileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stringFileInfo</name><operator>-&gt;</operator><name>szKey</name></name> <operator>=</operator> <operator>(</operator><name>ut16</name><operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><call><name>UT16_ALIGN</name> <argument_list>(<argument><expr><name>STRINGFILEINFO_UTF_16_LEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stringFileInfo</name><operator>-&gt;</operator><name>szKey</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: malloc (StringFileInfo szKey)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_StringFileInfo</name> <argument_list>(<argument><expr><name>stringFileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>*</operator><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name><name>stringFileInfo</name><operator>-&gt;</operator><name>szKey</name></name></expr></argument>, <argument><expr><name>STRINGFILEINFO_UTF_16_LEN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STRINGFILEINFO_UTF_16_LEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (StringFileInfo szKey)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_StringFileInfo</name> <argument_list>(<argument><expr><name>stringFileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curAddr</name> <operator>+=</operator> <name>STRINGFILEINFO_UTF_16_LEN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><name><name>stringFileInfo</name><operator>-&gt;</operator><name>szKey</name></name></expr></argument>, <argument><expr><name>STRINGFILEINFO_UTF_16</name></expr></argument>, <argument><expr><name>STRINGFILEINFO_UTF_16_LEN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: check (StringFileInfo szKey)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_StringFileInfo</name> <argument_list>(<argument><expr><name>stringFileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>align32</name> <argument_list>(<argument><expr><operator>*</operator><name>curAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>startAddr</name> <operator>+</operator> <name><name>stringFileInfo</name><operator>-&gt;</operator><name>wLength</name></name> <operator>&gt;</operator> <operator>*</operator><name>curAddr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>StringTable</name><modifier>*</modifier><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><operator>(</operator><name>StringTable</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name><name>stringFileInfo</name><operator>-&gt;</operator><name>Children</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>stringFileInfo</name><operator>-&gt;</operator><name>numOfChildren</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>stringFileInfo</name><operator>-&gt;</operator><name>Children</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: realloc (StringFileInfo Children)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_StringFileInfo</name> <argument_list>(<argument><expr><name>stringFileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stringFileInfo</name><operator>-&gt;</operator><name>Children</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>stringFileInfo</name><operator>-&gt;</operator><name>Children</name><index>[<expr><name><name>stringFileInfo</name><operator>-&gt;</operator><name>numOfChildren</name></name></expr>]</index></name> <operator>=</operator> <call><name>Pe_r_bin_pe_parse_string_table</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>curAddr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: bad parsing StringTable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_StringFileInfo</name> <argument_list>(<argument><expr><name>stringFileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stringFileInfo</name><operator>-&gt;</operator><name>numOfChildren</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>align32</name> <argument_list>(<argument><expr><operator>*</operator><name>curAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stringFileInfo</name><operator>-&gt;</operator><name>numOfChildren</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: check (StringFileInfo numOfChildren)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_StringFileInfo</name> <argument_list>(<argument><expr><name>stringFileInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>stringFileInfo</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXIT_ON_OVERFLOW</name><parameter_list>(<parameter><type><name>S</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>if (curAddr &gt; bin-&gt;size || curAddr + (S) &gt; bin-&gt;size) { goto out_error; }</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>PE_VS_VERSIONINFO</name><modifier>*</modifier></type> <name>Pe_r_bin_pe_parse_version_info</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>, <argument><expr><name>PE_DWord</name> <name>version_info_paddr</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>sz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PE_VS_VERSIONINFO</name><modifier>*</modifier></type> <name>vs_VersionInfo</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PE_VS_VERSIONINFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vs_VersionInfo</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>startAddr</name> <init>= <expr><name>version_info_paddr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>curAddr</name> <init>= <expr><name>version_info_paddr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXIT_ON_OVERFLOW</name> <argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>wLength</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (VS_VERSIONINFO wLength)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curAddr</name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXIT_ON_OVERFLOW</name> <argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>wValueLength</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (VS_VERSIONINFO wValueLength)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curAddr</name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXIT_ON_OVERFLOW</name> <argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>wType</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (VS_VERSIONINFO wType)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curAddr</name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>wType</name></name> <operator>&amp;&amp;</operator> <name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>wType</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: check (VS_VERSIONINFO wType)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>szKey</name></name> <operator>=</operator> <operator>(</operator><name>ut16</name><operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><call><name>UT16_ALIGN</name> <argument_list>(<argument><expr><name>VS_VERSION_INFO_UTF_16_LEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>szKey</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: malloc (VS_VERSIONINFO szKey)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <name>VS_VERSION_INFO_UTF_16_LEN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXIT_ON_OVERFLOW</name> <argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>szKey</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (VS_VERSIONINFO szKey)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curAddr</name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>szKey</name></name></expr></argument>, <argument><expr><name>VS_VERSION_INFO_UTF_16</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>align32</name> <argument_list>(<argument><expr><name>curAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>wValueLength</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>wValueLength</name></name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>Value</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: check (VS_VERSIONINFO wValueLength != sizeof PE_VS_FIXEDFILEINFO)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>Value</name></name> <operator>=</operator> <operator>(</operator><name>PE_VS_FIXEDFILEINFO</name><operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>Value</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>Value</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: malloc (VS_VERSIONINFO Value)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_VS_FIXEDFILEINFO</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXIT_ON_OVERFLOW</name> <argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>curAddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>Value</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (VS_VERSIONINFO Value)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>Value</name><operator>-&gt;</operator><name>dwSignature</name></name> <operator>!=</operator> <literal type="number">0xFEEF04BD</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: check (PE_VS_FIXEDFILEINFO signature) 0x%08x\n"</literal></expr></argument>, <argument><expr><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>Value</name><operator>-&gt;</operator><name>dwSignature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curAddr</name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>align32</name> <argument_list>(<argument><expr><name>curAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>startAddr</name> <operator>+</operator> <name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>wLength</name></name> <operator>&gt;</operator> <name>curAddr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>t</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>curAddr</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>curAddr</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>curAddr</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (VS_VERSIONINFO Children V or S)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>t</name> <operator>==</operator> <literal type="char">'S'</literal> <operator>||</operator> <name>t</name> <operator>==</operator> <literal type="char">'V'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: bad type (VS_VERSIONINFO Children)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>stringFileInfo</name></name> <operator>=</operator> <call><name>Pe_r_bin_pe_parse_string_file_info</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curAddr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: bad parsing (VS_VERSIONINFO StringFileInfo)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>varFileInfo</name></name> <operator>=</operator> <call><name>Pe_r_bin_pe_parse_var_file_info</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curAddr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: bad parsing (VS_VERSIONINFO VarFileInfo)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>align32</name> <argument_list>(<argument><expr><name>curAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>startAddr</name> <operator>+</operator> <name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>wLength</name></name> <operator>&gt;</operator> <name>curAddr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>stringFileInfo</name></name> <operator>=</operator> <call><name>Pe_r_bin_pe_parse_string_file_info</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curAddr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: bad parsing (VS_VERSIONINFO StringFileInfo)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>varFileInfo</name></name> <operator>=</operator> <call><name>Pe_r_bin_pe_parse_var_file_info</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curAddr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: bad parsing (VS_VERSIONINFO VarFileInfo)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>startAddr</name> <operator>+</operator> <name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>wLength</name></name> <operator>&gt;</operator> <name>curAddr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: bad parsing (VS_VERSIONINFO wLength left)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>vs_VersionInfo</name></expr>;</return>

<label><name>out_error</name>:</label>

<expr_stmt><expr><call><name>free_VS_VERSIONINFO</name> <argument_list>(<argument><expr><name>vs_VersionInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>Sdb</name><modifier>*</modifier></type> <name>Pe_r_bin_store_var</name><parameter_list>(<parameter><decl><type><name>Var</name><modifier>*</modifier></type> <name>var</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>sdb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>var</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sdb</name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sdb</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>var</name><operator>-&gt;</operator><name>numOfValues</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>Value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>sdb</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Sdb</name><modifier>*</modifier></type> <name>Pe_r_bin_store_var_file_info</name><parameter_list>(<parameter><decl><type><name>VarFileInfo</name><modifier>*</modifier></type> <name>varFileInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>varFileInfo</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>sdb</name> <init>= <expr><call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sdb</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>varFileInfo</name><operator>-&gt;</operator><name>numOfChildren</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"var%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_ns_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>Pe_r_bin_store_var</name> <argument_list>(<argument><expr><name><name>varFileInfo</name><operator>-&gt;</operator><name>Children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>sdb</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Sdb</name><modifier>*</modifier></type> <name>Pe_r_bin_store_string</name><parameter_list>(<parameter><decl><type><name>String</name><modifier>*</modifier></type> <name>string</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>sdb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>encodedVal</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type> <name>encodedKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>string</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sdb</name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sdb</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>encodedKey</name> <operator>=</operator> <call><name>sdb_encode</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name><name>string</name><operator>-&gt;</operator><name>szKey</name></name></expr></argument>, <argument><expr><name><name>string</name><operator>-&gt;</operator><name>wKeyLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encodedKey</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>encodedVal</name> <operator>=</operator> <call><name>sdb_encode</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name><name>string</name><operator>-&gt;</operator><name>Value</name></name></expr></argument>, <argument><expr><name><name>string</name><operator>-&gt;</operator><name>wValueLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encodedVal</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>encodedKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><literal type="string">"key"</literal></expr></argument>, <argument><expr><name>encodedKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><name>encodedVal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>encodedKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>encodedVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>sdb</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Sdb</name><modifier>*</modifier></type> <name>Pe_r_bin_store_string_table</name><parameter_list>(<parameter><decl><type><name>StringTable</name><modifier>*</modifier></type> <name>stringTable</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>encodedKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>sdb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stringTable</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sdb</name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sdb</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>encodedKey</name> <operator>=</operator> <call><name>sdb_encode</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name><name>stringTable</name><operator>-&gt;</operator><name>szKey</name></name></expr></argument>, <argument><expr><name>EIGHT_HEX_DIG_UTF_16_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encodedKey</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><literal type="string">"key"</literal></expr></argument>, <argument><expr><name>encodedKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>encodedKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>stringTable</name><operator>-&gt;</operator><name>numOfChildren</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"string%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_ns_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>Pe_r_bin_store_string</name> <argument_list>(<argument><expr><name><name>stringTable</name><operator>-&gt;</operator><name>Children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>sdb</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Sdb</name><modifier>*</modifier></type> <name>Pe_r_bin_store_string_file_info</name><parameter_list>(<parameter><decl><type><name>StringFileInfo</name><modifier>*</modifier></type> <name>stringFileInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>sdb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stringFileInfo</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sdb</name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sdb</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>stringFileInfo</name><operator>-&gt;</operator><name>numOfChildren</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="string">"stringtable%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_ns_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>Pe_r_bin_store_string_table</name> <argument_list>(<argument><expr><name><name>stringFileInfo</name><operator>-&gt;</operator><name>Children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>sdb</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Sdb</name><modifier>*</modifier></type> <name>Pe_r_bin_store_fixed_file_info</name><parameter_list>(<parameter><decl><type><name>PE_VS_FIXEDFILEINFO</name><modifier>*</modifier></type> <name>vs_fixedFileInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>sdb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vs_fixedFileInfo</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sdb</name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sdb</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><literal type="string">"Signature"</literal></expr></argument>, <argument><expr><name><name>vs_fixedFileInfo</name><operator>-&gt;</operator><name>dwSignature</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><literal type="string">"StrucVersion"</literal></expr></argument>, <argument><expr><name><name>vs_fixedFileInfo</name><operator>-&gt;</operator><name>dwStrucVersion</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><literal type="string">"FileVersionMS"</literal></expr></argument>, <argument><expr><name><name>vs_fixedFileInfo</name><operator>-&gt;</operator><name>dwFileVersionMS</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><literal type="string">"FileVersionLS"</literal></expr></argument>, <argument><expr><name><name>vs_fixedFileInfo</name><operator>-&gt;</operator><name>dwFileVersionLS</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><literal type="string">"ProductVersionMS"</literal></expr></argument>, <argument><expr><name><name>vs_fixedFileInfo</name><operator>-&gt;</operator><name>dwProductVersionMS</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><literal type="string">"ProductVersionLS"</literal></expr></argument>, <argument><expr><name><name>vs_fixedFileInfo</name><operator>-&gt;</operator><name>dwProductVersionLS</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><literal type="string">"FileFlagsMask"</literal></expr></argument>, <argument><expr><name><name>vs_fixedFileInfo</name><operator>-&gt;</operator><name>dwFileFlagsMask</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><literal type="string">"FileFlags"</literal></expr></argument>, <argument><expr><name><name>vs_fixedFileInfo</name><operator>-&gt;</operator><name>dwFileFlags</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><literal type="string">"FileOS"</literal></expr></argument>, <argument><expr><name><name>vs_fixedFileInfo</name><operator>-&gt;</operator><name>dwFileOS</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><literal type="string">"FileType"</literal></expr></argument>, <argument><expr><name><name>vs_fixedFileInfo</name><operator>-&gt;</operator><name>dwFileType</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><literal type="string">"FileSubtype"</literal></expr></argument>, <argument><expr><name><name>vs_fixedFileInfo</name><operator>-&gt;</operator><name>dwFileSubtype</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><literal type="string">"FileDateMS"</literal></expr></argument>, <argument><expr><name><name>vs_fixedFileInfo</name><operator>-&gt;</operator><name>dwFileDateMS</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><literal type="string">"FileDateLS"</literal></expr></argument>, <argument><expr><name><name>vs_fixedFileInfo</name><operator>-&gt;</operator><name>dwFileDateLS</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>sdb</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Sdb</name><modifier>*</modifier></type> <name>Pe_r_bin_store_resource_version_info</name><parameter_list>(<parameter><decl><type><name>PE_VS_VERSIONINFO</name><modifier>*</modifier></type> <name>vs_VersionInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>sdb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vs_VersionInfo</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sdb</name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sdb</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>Value</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_ns_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><literal type="string">"fixed_file_info"</literal></expr></argument>, <argument><expr><call><name>Pe_r_bin_store_fixed_file_info</name> <argument_list>(<argument><expr><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>Value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>varFileInfo</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_ns_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><literal type="string">"var_file_info"</literal></expr></argument>, <argument><expr><call><name>Pe_r_bin_store_var_file_info</name> <argument_list>(<argument><expr><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>varFileInfo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>stringFileInfo</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_ns_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><literal type="string">"string_file_info"</literal></expr></argument>, <argument><expr><call><name>Pe_r_bin_store_string_file_info</name> <argument_list>(<argument><expr><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>stringFileInfo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>sdb</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>_known_product_ids</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <return>return <expr><literal type="string">"Unknown"</literal></expr>;</return>

<case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><literal type="string">"Import0"</literal></expr>;</return>

<case>case <expr><literal type="number">2</literal></expr>:</case> <return>return <expr><literal type="string">"Linker510"</literal></expr>;</return>

<case>case <expr><literal type="number">3</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtomf510"</literal></expr>;</return>

<case>case <expr><literal type="number">4</literal></expr>:</case> <return>return <expr><literal type="string">"Linker600"</literal></expr>;</return>

<case>case <expr><literal type="number">5</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtomf600"</literal></expr>;</return>

<case>case <expr><literal type="number">6</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtres500"</literal></expr>;</return>

<case>case <expr><literal type="number">7</literal></expr>:</case> <return>return <expr><literal type="string">"Utc11_Basic"</literal></expr>;</return>

<case>case <expr><literal type="number">8</literal></expr>:</case> <return>return <expr><literal type="string">"Utc11_C"</literal></expr>;</return>

<case>case <expr><literal type="number">9</literal></expr>:</case> <return>return <expr><literal type="string">"Utc12_Basic"</literal></expr>;</return>

<case>case <expr><literal type="number">10</literal></expr>:</case> <return>return <expr><literal type="string">"Utc12_C"</literal></expr>;</return>

<case>case <expr><literal type="number">11</literal></expr>:</case> <return>return <expr><literal type="string">"Utc12_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">12</literal></expr>:</case> <return>return <expr><literal type="string">"AliasObj60"</literal></expr>;</return>

<case>case <expr><literal type="number">13</literal></expr>:</case> <return>return <expr><literal type="string">"VisualBasic60"</literal></expr>;</return>

<case>case <expr><literal type="number">14</literal></expr>:</case> <return>return <expr><literal type="string">"Masm613"</literal></expr>;</return>

<case>case <expr><literal type="number">15</literal></expr>:</case> <return>return <expr><literal type="string">"Masm710"</literal></expr>;</return>

<case>case <expr><literal type="number">16</literal></expr>:</case> <return>return <expr><literal type="string">"Linker511"</literal></expr>;</return>

<case>case <expr><literal type="number">17</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtomf511"</literal></expr>;</return>

<case>case <expr><literal type="number">18</literal></expr>:</case> <return>return <expr><literal type="string">"Masm614"</literal></expr>;</return>

<case>case <expr><literal type="number">19</literal></expr>:</case> <return>return <expr><literal type="string">"Linker512"</literal></expr>;</return>

<case>case <expr><literal type="number">20</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtomf512"</literal></expr>;</return>

<case>case <expr><literal type="number">21</literal></expr>:</case> <return>return <expr><literal type="string">"Utc12_C_Std"</literal></expr>;</return>

<case>case <expr><literal type="number">22</literal></expr>:</case> <return>return <expr><literal type="string">"Utc12_CPP_Std"</literal></expr>;</return>

<case>case <expr><literal type="number">23</literal></expr>:</case> <return>return <expr><literal type="string">"Utc12_C_Book"</literal></expr>;</return>

<case>case <expr><literal type="number">24</literal></expr>:</case> <return>return <expr><literal type="string">"Utc12_CPP_Book"</literal></expr>;</return>

<case>case <expr><literal type="number">25</literal></expr>:</case> <return>return <expr><literal type="string">"Implib700"</literal></expr>;</return>

<case>case <expr><literal type="number">26</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtomf700"</literal></expr>;</return>

<case>case <expr><literal type="number">27</literal></expr>:</case> <return>return <expr><literal type="string">"Utc13_Basic"</literal></expr>;</return>

<case>case <expr><literal type="number">28</literal></expr>:</case> <return>return <expr><literal type="string">"Utc13_C"</literal></expr>;</return>

<case>case <expr><literal type="number">29</literal></expr>:</case> <return>return <expr><literal type="string">"Utc13_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">30</literal></expr>:</case> <return>return <expr><literal type="string">"Linker610"</literal></expr>;</return>

<case>case <expr><literal type="number">31</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtomf610"</literal></expr>;</return>

<case>case <expr><literal type="number">32</literal></expr>:</case> <return>return <expr><literal type="string">"Linker601"</literal></expr>;</return>

<case>case <expr><literal type="number">33</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtomf601"</literal></expr>;</return>

<case>case <expr><literal type="number">34</literal></expr>:</case> <return>return <expr><literal type="string">"Utc12_1_Basic"</literal></expr>;</return>

<case>case <expr><literal type="number">35</literal></expr>:</case> <return>return <expr><literal type="string">"Utc12_1_C"</literal></expr>;</return>

<case>case <expr><literal type="number">36</literal></expr>:</case> <return>return <expr><literal type="string">"Utc12_1_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">37</literal></expr>:</case> <return>return <expr><literal type="string">"Linker620"</literal></expr>;</return>

<case>case <expr><literal type="number">38</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtomf620"</literal></expr>;</return>

<case>case <expr><literal type="number">39</literal></expr>:</case> <return>return <expr><literal type="string">"AliasObj70"</literal></expr>;</return>

<case>case <expr><literal type="number">40</literal></expr>:</case> <return>return <expr><literal type="string">"Linker621"</literal></expr>;</return>

<case>case <expr><literal type="number">41</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtomf621"</literal></expr>;</return>

<case>case <expr><literal type="number">42</literal></expr>:</case> <return>return <expr><literal type="string">"Masm615"</literal></expr>;</return>

<case>case <expr><literal type="number">43</literal></expr>:</case> <return>return <expr><literal type="string">"Utc13_LTCG_C"</literal></expr>;</return>

<case>case <expr><literal type="number">44</literal></expr>:</case> <return>return <expr><literal type="string">"Utc13_LTCG_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">45</literal></expr>:</case> <return>return <expr><literal type="string">"Masm620"</literal></expr>;</return>

<case>case <expr><literal type="number">46</literal></expr>:</case> <return>return <expr><literal type="string">"ILAsm100"</literal></expr>;</return>

<case>case <expr><literal type="number">47</literal></expr>:</case> <return>return <expr><literal type="string">"Utc12_2_Basic"</literal></expr>;</return>

<case>case <expr><literal type="number">48</literal></expr>:</case> <return>return <expr><literal type="string">"Utc12_2_C"</literal></expr>;</return>

<case>case <expr><literal type="number">49</literal></expr>:</case> <return>return <expr><literal type="string">"Utc12_2_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">50</literal></expr>:</case> <return>return <expr><literal type="string">"Utc12_2_C_Std"</literal></expr>;</return>

<case>case <expr><literal type="number">51</literal></expr>:</case> <return>return <expr><literal type="string">"Utc12_2_CPP_Std"</literal></expr>;</return>

<case>case <expr><literal type="number">52</literal></expr>:</case> <return>return <expr><literal type="string">"Utc12_2_C_Book"</literal></expr>;</return>

<case>case <expr><literal type="number">53</literal></expr>:</case> <return>return <expr><literal type="string">"Utc12_2_CPP_Book"</literal></expr>;</return>

<case>case <expr><literal type="number">54</literal></expr>:</case> <return>return <expr><literal type="string">"Implib622"</literal></expr>;</return>

<case>case <expr><literal type="number">55</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtomf622"</literal></expr>;</return>

<case>case <expr><literal type="number">56</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtres501"</literal></expr>;</return>

<case>case <expr><literal type="number">57</literal></expr>:</case> <return>return <expr><literal type="string">"Utc13_C_Std"</literal></expr>;</return>

<case>case <expr><literal type="number">58</literal></expr>:</case> <return>return <expr><literal type="string">"Utc13_CPP_Std"</literal></expr>;</return>

<case>case <expr><literal type="number">59</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtpgd1300"</literal></expr>;</return>

<case>case <expr><literal type="number">60</literal></expr>:</case> <return>return <expr><literal type="string">"Linker622"</literal></expr>;</return>

<case>case <expr><literal type="number">61</literal></expr>:</case> <return>return <expr><literal type="string">"Linker700"</literal></expr>;</return>

<case>case <expr><literal type="number">62</literal></expr>:</case> <return>return <expr><literal type="string">"Export622"</literal></expr>;</return>

<case>case <expr><literal type="number">63</literal></expr>:</case> <return>return <expr><literal type="string">"Export700"</literal></expr>;</return>

<case>case <expr><literal type="number">64</literal></expr>:</case> <return>return <expr><literal type="string">"Masm700"</literal></expr>;</return>

<case>case <expr><literal type="number">65</literal></expr>:</case> <return>return <expr><literal type="string">"Utc13_POGO_I_C"</literal></expr>;</return>

<case>case <expr><literal type="number">66</literal></expr>:</case> <return>return <expr><literal type="string">"Utc13_POGO_I_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">67</literal></expr>:</case> <return>return <expr><literal type="string">"Utc13_POGO_O_C"</literal></expr>;</return>

<case>case <expr><literal type="number">68</literal></expr>:</case> <return>return <expr><literal type="string">"Utc13_POGO_O_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">69</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtres700"</literal></expr>;</return>

<case>case <expr><literal type="number">70</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtres710p"</literal></expr>;</return>

<case>case <expr><literal type="number">71</literal></expr>:</case> <return>return <expr><literal type="string">"Linker710p"</literal></expr>;</return>

<case>case <expr><literal type="number">72</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtomf710p"</literal></expr>;</return>

<case>case <expr><literal type="number">73</literal></expr>:</case> <return>return <expr><literal type="string">"Export710p"</literal></expr>;</return>

<case>case <expr><literal type="number">74</literal></expr>:</case> <return>return <expr><literal type="string">"Implib710p"</literal></expr>;</return>

<case>case <expr><literal type="number">75</literal></expr>:</case> <return>return <expr><literal type="string">"Masm710p"</literal></expr>;</return>

<case>case <expr><literal type="number">76</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1310p_C"</literal></expr>;</return>

<case>case <expr><literal type="number">77</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1310p_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">78</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1310p_C_Std"</literal></expr>;</return>

<case>case <expr><literal type="number">79</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1310p_CPP_Std"</literal></expr>;</return>

<case>case <expr><literal type="number">80</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1310p_LTCG_C"</literal></expr>;</return>

<case>case <expr><literal type="number">81</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1310p_LTCG_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">82</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1310p_POGO_I_C"</literal></expr>;</return>

<case>case <expr><literal type="number">83</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1310p_POGO_I_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">84</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1310p_POGO_O_C"</literal></expr>;</return>

<case>case <expr><literal type="number">85</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1310p_POGO_O_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">86</literal></expr>:</case> <return>return <expr><literal type="string">"Linker624"</literal></expr>;</return>

<case>case <expr><literal type="number">87</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtomf624"</literal></expr>;</return>

<case>case <expr><literal type="number">88</literal></expr>:</case> <return>return <expr><literal type="string">"Export624"</literal></expr>;</return>

<case>case <expr><literal type="number">89</literal></expr>:</case> <return>return <expr><literal type="string">"Implib624"</literal></expr>;</return>

<case>case <expr><literal type="number">90</literal></expr>:</case> <return>return <expr><literal type="string">"Linker710"</literal></expr>;</return>

<case>case <expr><literal type="number">91</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtomf710"</literal></expr>;</return>

<case>case <expr><literal type="number">92</literal></expr>:</case> <return>return <expr><literal type="string">"Export710"</literal></expr>;</return>

<case>case <expr><literal type="number">93</literal></expr>:</case> <return>return <expr><literal type="string">"Implib710"</literal></expr>;</return>

<case>case <expr><literal type="number">94</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtres710"</literal></expr>;</return>

<case>case <expr><literal type="number">95</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1310_C"</literal></expr>;</return>

<case>case <expr><literal type="number">96</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1310_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">97</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1310_C_Std"</literal></expr>;</return>

<case>case <expr><literal type="number">98</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1310_CPP_Std"</literal></expr>;</return>

<case>case <expr><literal type="number">99</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1310_LTCG_C"</literal></expr>;</return>

<case>case <expr><literal type="number">100</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1310_LTCG_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">101</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1310_POGO_I_C"</literal></expr>;</return>

<case>case <expr><literal type="number">102</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1310_POGO_I_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">103</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1310_POGO_O_C"</literal></expr>;</return>

<case>case <expr><literal type="number">104</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1310_POGO_O_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">105</literal></expr>:</case> <return>return <expr><literal type="string">"AliasObj710"</literal></expr>;</return>

<case>case <expr><literal type="number">106</literal></expr>:</case> <return>return <expr><literal type="string">"AliasObj710p"</literal></expr>;</return>

<case>case <expr><literal type="number">107</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtpgd1310"</literal></expr>;</return>

<case>case <expr><literal type="number">108</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtpgd1310p"</literal></expr>;</return>

<case>case <expr><literal type="number">109</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1400_C"</literal></expr>;</return>

<case>case <expr><literal type="number">110</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1400_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">111</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1400_C_Std"</literal></expr>;</return>

<case>case <expr><literal type="number">112</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1400_CPP_Std"</literal></expr>;</return>

<case>case <expr><literal type="number">113</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1400_LTCG_C"</literal></expr>;</return>

<case>case <expr><literal type="number">114</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1400_LTCG_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">115</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1400_POGO_I_C"</literal></expr>;</return>

<case>case <expr><literal type="number">116</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1400_POGO_I_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">117</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1400_POGO_O_C"</literal></expr>;</return>

<case>case <expr><literal type="number">118</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1400_POGO_O_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">119</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtpgd1400"</literal></expr>;</return>

<case>case <expr><literal type="number">120</literal></expr>:</case> <return>return <expr><literal type="string">"Linker800"</literal></expr>;</return>

<case>case <expr><literal type="number">121</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtomf800"</literal></expr>;</return>

<case>case <expr><literal type="number">122</literal></expr>:</case> <return>return <expr><literal type="string">"Export800"</literal></expr>;</return>

<case>case <expr><literal type="number">123</literal></expr>:</case> <return>return <expr><literal type="string">"Implib800"</literal></expr>;</return>

<case>case <expr><literal type="number">124</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtres800"</literal></expr>;</return>

<case>case <expr><literal type="number">125</literal></expr>:</case> <return>return <expr><literal type="string">"Masm800"</literal></expr>;</return>

<case>case <expr><literal type="number">126</literal></expr>:</case> <return>return <expr><literal type="string">"AliasObj800"</literal></expr>;</return>

<case>case <expr><literal type="number">127</literal></expr>:</case> <return>return <expr><literal type="string">"PhoenixPrerelease"</literal></expr>;</return>

<case>case <expr><literal type="number">128</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1400_CVTCIL_C"</literal></expr>;</return>

<case>case <expr><literal type="number">129</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1400_CVTCIL_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">130</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1400_LTCG_MSIL"</literal></expr>;</return>

<case>case <expr><literal type="number">131</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1500_C"</literal></expr>;</return>

<case>case <expr><literal type="number">132</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1500_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">133</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1500_C_Std"</literal></expr>;</return>

<case>case <expr><literal type="number">134</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1500_CPP_Std"</literal></expr>;</return>

<case>case <expr><literal type="number">135</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1500_CVTCIL_C"</literal></expr>;</return>

<case>case <expr><literal type="number">136</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1500_CVTCIL_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">137</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1500_LTCG_C"</literal></expr>;</return>

<case>case <expr><literal type="number">138</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1500_LTCG_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">139</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1500_LTCG_MSIL"</literal></expr>;</return>

<case>case <expr><literal type="number">140</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1500_POGO_I_C"</literal></expr>;</return>

<case>case <expr><literal type="number">141</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1500_POGO_I_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">142</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1500_POGO_O_C"</literal></expr>;</return>

<case>case <expr><literal type="number">143</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1500_POGO_O_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">144</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtpgd1500"</literal></expr>;</return>

<case>case <expr><literal type="number">145</literal></expr>:</case> <return>return <expr><literal type="string">"Linker900"</literal></expr>;</return>

<case>case <expr><literal type="number">146</literal></expr>:</case> <return>return <expr><literal type="string">"Export900"</literal></expr>;</return>

<case>case <expr><literal type="number">147</literal></expr>:</case> <return>return <expr><literal type="string">"Implib900"</literal></expr>;</return>

<case>case <expr><literal type="number">148</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtres900"</literal></expr>;</return>

<case>case <expr><literal type="number">149</literal></expr>:</case> <return>return <expr><literal type="string">"Masm900"</literal></expr>;</return>

<case>case <expr><literal type="number">150</literal></expr>:</case> <return>return <expr><literal type="string">"AliasObj900"</literal></expr>;</return>

<case>case <expr><literal type="number">151</literal></expr>:</case> <return>return <expr><literal type="string">"Resource900"</literal></expr>;</return>

<case>case <expr><literal type="number">152</literal></expr>:</case> <return>return <expr><literal type="string">"AliasObj1000"</literal></expr>;</return>

<case>case <expr><literal type="number">154</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtres1000"</literal></expr>;</return>

<case>case <expr><literal type="number">155</literal></expr>:</case> <return>return <expr><literal type="string">"Export1000"</literal></expr>;</return>

<case>case <expr><literal type="number">156</literal></expr>:</case> <return>return <expr><literal type="string">"Implib1000"</literal></expr>;</return>

<case>case <expr><literal type="number">157</literal></expr>:</case> <return>return <expr><literal type="string">"Linker1000"</literal></expr>;</return>

<case>case <expr><literal type="number">158</literal></expr>:</case> <return>return <expr><literal type="string">"Masm1000"</literal></expr>;</return>

<case>case <expr><literal type="number">170</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1600_C"</literal></expr>;</return>

<case>case <expr><literal type="number">171</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1600_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">172</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1600_CVTCIL_C"</literal></expr>;</return>

<case>case <expr><literal type="number">173</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1600_CVTCIL_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">174</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1600_LTCG_C "</literal></expr>;</return>

<case>case <expr><literal type="number">175</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1600_LTCG_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">176</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1600_LTCG_MSIL"</literal></expr>;</return>

<case>case <expr><literal type="number">177</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1600_POGO_I_C"</literal></expr>;</return>

<case>case <expr><literal type="number">178</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1600_POGO_I_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">179</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1600_POGO_O_C"</literal></expr>;</return>

<case>case <expr><literal type="number">180</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1600_POGO_O_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">183</literal></expr>:</case> <return>return <expr><literal type="string">"Linker1010"</literal></expr>;</return>

<case>case <expr><literal type="number">184</literal></expr>:</case> <return>return <expr><literal type="string">"Export1010"</literal></expr>;</return>

<case>case <expr><literal type="number">185</literal></expr>:</case> <return>return <expr><literal type="string">"Implib1010"</literal></expr>;</return>

<case>case <expr><literal type="number">186</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtres1010"</literal></expr>;</return>

<case>case <expr><literal type="number">187</literal></expr>:</case> <return>return <expr><literal type="string">"Masm1010"</literal></expr>;</return>

<case>case <expr><literal type="number">188</literal></expr>:</case> <return>return <expr><literal type="string">"AliasObj1010"</literal></expr>;</return>

<case>case <expr><literal type="number">199</literal></expr>:</case> <return>return <expr><literal type="string">"AliasObj1100"</literal></expr>;</return>

<case>case <expr><literal type="number">201</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtres1100"</literal></expr>;</return>

<case>case <expr><literal type="number">202</literal></expr>:</case> <return>return <expr><literal type="string">"Export1100"</literal></expr>;</return>

<case>case <expr><literal type="number">203</literal></expr>:</case> <return>return <expr><literal type="string">"Implib1100"</literal></expr>;</return>

<case>case <expr><literal type="number">204</literal></expr>:</case> <return>return <expr><literal type="string">"Linker1100"</literal></expr>;</return>

<case>case <expr><literal type="number">205</literal></expr>:</case> <return>return <expr><literal type="string">"Masm1100"</literal></expr>;</return>

<case>case <expr><literal type="number">206</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1700_C"</literal></expr>;</return>

<case>case <expr><literal type="number">207</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1700_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">208</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1700_CVTCIL_C"</literal></expr>;</return>

<case>case <expr><literal type="number">209</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1700_CVTCIL_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">210</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1700_LTCG_C "</literal></expr>;</return>

<case>case <expr><literal type="number">211</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1700_LTCG_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">212</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1700_LTCG_MSIL"</literal></expr>;</return>

<case>case <expr><literal type="number">213</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1700_POGO_I_C"</literal></expr>;</return>

<case>case <expr><literal type="number">214</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1700_POGO_I_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">215</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1700_POGO_O_C"</literal></expr>;</return>

<case>case <expr><literal type="number">216</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1700_POGO_O_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">219</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtres1200"</literal></expr>;</return>

<case>case <expr><literal type="number">220</literal></expr>:</case> <return>return <expr><literal type="string">"Export1200"</literal></expr>;</return>

<case>case <expr><literal type="number">221</literal></expr>:</case> <return>return <expr><literal type="string">"Implib1200"</literal></expr>;</return>

<case>case <expr><literal type="number">222</literal></expr>:</case> <return>return <expr><literal type="string">"Linker1200"</literal></expr>;</return>

<case>case <expr><literal type="number">223</literal></expr>:</case> <return>return <expr><literal type="string">"Masm1200"</literal></expr>;</return>

<case>case <expr><literal type="number">224</literal></expr>:</case> <return>return <expr><literal type="string">"AliasObj1200"</literal></expr>;</return>

<case>case <expr><literal type="number">237</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtres1210"</literal></expr>;</return>

<case>case <expr><literal type="number">238</literal></expr>:</case> <return>return <expr><literal type="string">"Export1210"</literal></expr>;</return>

<case>case <expr><literal type="number">239</literal></expr>:</case> <return>return <expr><literal type="string">"Implib1210"</literal></expr>;</return>

<case>case <expr><literal type="number">240</literal></expr>:</case> <return>return <expr><literal type="string">"Linker1210"</literal></expr>;</return>

<case>case <expr><literal type="number">241</literal></expr>:</case> <return>return <expr><literal type="string">"Masm1210"</literal></expr>;</return>

<case>case <expr><literal type="number">242</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1810_C"</literal></expr>;</return>

<case>case <expr><literal type="number">243</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1810_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">244</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1810_CVTCIL_C"</literal></expr>;</return>

<case>case <expr><literal type="number">245</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1810_CVTCIL_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">246</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1810_LTCG_C "</literal></expr>;</return>

<case>case <expr><literal type="number">247</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1810_LTCG_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">248</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1810_LTCG_MSIL"</literal></expr>;</return>

<case>case <expr><literal type="number">249</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1810_POGO_I_C"</literal></expr>;</return>

<case>case <expr><literal type="number">250</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1810_POGO_I_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">251</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1810_POGO_O_C"</literal></expr>;</return>

<case>case <expr><literal type="number">252</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1810_POGO_O_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">255</literal></expr>:</case> <return>return <expr><literal type="string">"Cvtres1400"</literal></expr>;</return>

<case>case <expr><literal type="number">256</literal></expr>:</case> <return>return <expr><literal type="string">"Export1400"</literal></expr>;</return>

<case>case <expr><literal type="number">257</literal></expr>:</case> <return>return <expr><literal type="string">"Implib1400"</literal></expr>;</return>

<case>case <expr><literal type="number">258</literal></expr>:</case> <return>return <expr><literal type="string">"Linker1400"</literal></expr>;</return>

<case>case <expr><literal type="number">259</literal></expr>:</case> <return>return <expr><literal type="string">"Masm1400"</literal></expr>;</return>

<case>case <expr><literal type="number">260</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1900_C"</literal></expr>;</return>

<case>case <expr><literal type="number">261</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1900_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">262</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1900_CVTCIL_C"</literal></expr>;</return>

<case>case <expr><literal type="number">263</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1900_CVTCIL_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">264</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1900_LTCG_C "</literal></expr>;</return>

<case>case <expr><literal type="number">265</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1900_LTCG_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">266</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1900_LTCG_MSIL"</literal></expr>;</return>

<case>case <expr><literal type="number">267</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1900_POGO_I_C"</literal></expr>;</return>

<case>case <expr><literal type="number">268</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1900_POGO_I_CPP"</literal></expr>;</return>

<case>case <expr><literal type="number">269</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1900_POGO_O_C"</literal></expr>;</return>

<case>case <expr><literal type="number">270</literal></expr>:</case> <return>return <expr><literal type="string">"Utc1900_POGO_O_CPP"</literal></expr>;</return>

<default>default:</default> <return>return <expr><literal type="string">"Unknown"</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>bin_pe_init_rich_info</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>rich_entries</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>rich_entries</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>rich_header_offset</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>nt_header_offset</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>off</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>nt_header_offset</name></name> <operator>-</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>magic</name> <init>= <expr><literal type="number">0x68636952</literal></expr></init></decl>;</decl_stmt> 

<while>while <condition>(<expr><operator>(</operator><call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>magic</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>off</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>-=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>off</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>mask</name> <init>= <expr><call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>magic</name> <operator>=</operator> <literal type="number">0x536E6144</literal></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><name>off</name> <operator>-=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><operator>(</operator><name>data</name> <operator>=</operator> <call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>magic</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>data</name> <operator>^</operator> <name>mask</name> <operator>&amp;&amp;</operator> <name>off</name> <operator>&gt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Pe_image_rich_entry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>Pe_image_rich_entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>timesUsed</name></name> <operator>=</operator> <name>data</name> <operator>^</operator> <name>mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>-=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call> <operator>^</operator> <name>mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>productId</name></name> <operator>=</operator> <name>data</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>minVersion</name></name> <operator>=</operator> <name>data</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>productName</name></name> <operator>=</operator> <call><name>_known_product_ids</name> <argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>productId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>-=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>rich_entries</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>rich_header_offset</name></name> <operator>=</operator> <name>off</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>_resource_lang_str</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x00</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_NEUTRAL"</literal></expr>;</return>

<case>case <expr><literal type="number">0x7f</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_INVARIANT"</literal></expr>;</return>

<case>case <expr><literal type="number">0x36</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_AFRIKAANS"</literal></expr>;</return>

<case>case <expr><literal type="number">0x1c</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_ALBANIAN "</literal></expr>;</return>

<case>case <expr><literal type="number">0x01</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_ARABIC"</literal></expr>;</return>

<case>case <expr><literal type="number">0x2b</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_ARMENIAN"</literal></expr>;</return>

<case>case <expr><literal type="number">0x4d</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_ASSAMESE"</literal></expr>;</return>

<case>case <expr><literal type="number">0x2c</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_AZERI"</literal></expr>;</return>

<case>case <expr><literal type="number">0x2d</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_BASQUE"</literal></expr>;</return>

<case>case <expr><literal type="number">0x23</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_BELARUSIAN"</literal></expr>;</return>

<case>case <expr><literal type="number">0x45</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_BENGALI"</literal></expr>;</return>

<case>case <expr><literal type="number">0x02</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_BULGARIAN"</literal></expr>;</return>

<case>case <expr><literal type="number">0x03</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_CATALAN"</literal></expr>;</return>

<case>case <expr><literal type="number">0x04</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_CHINESE"</literal></expr>;</return>

<case>case <expr><literal type="number">0x1a</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_CROATIAN"</literal></expr>;</return>

<case>case <expr><literal type="number">0x05</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_CZECH"</literal></expr>;</return>

<case>case <expr><literal type="number">0x06</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_DANISH"</literal></expr>;</return>

<case>case <expr><literal type="number">0x65</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_DIVEHI"</literal></expr>;</return>

<case>case <expr><literal type="number">0x13</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_DUTCH"</literal></expr>;</return>

<case>case <expr><literal type="number">0x09</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_ENGLISH"</literal></expr>;</return>

<case>case <expr><literal type="number">0x25</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_ESTONIAN"</literal></expr>;</return>

<case>case <expr><literal type="number">0x38</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_FAEROESE"</literal></expr>;</return>

<case>case <expr><literal type="number">0x29</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_FARSI"</literal></expr>;</return>

<case>case <expr><literal type="number">0x0b</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_FINNISH"</literal></expr>;</return>

<case>case <expr><literal type="number">0x0c</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_FRENCH"</literal></expr>;</return>

<case>case <expr><literal type="number">0x56</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_GALICIAN"</literal></expr>;</return>

<case>case <expr><literal type="number">0x37</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_GEORGIAN"</literal></expr>;</return>

<case>case <expr><literal type="number">0x07</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_GERMAN"</literal></expr>;</return>

<case>case <expr><literal type="number">0x08</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_GREEK"</literal></expr>;</return>

<case>case <expr><literal type="number">0x47</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_GUJARATI"</literal></expr>;</return>

<case>case <expr><literal type="number">0x0d</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_HEBREW"</literal></expr>;</return>

<case>case <expr><literal type="number">0x39</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_HINDI"</literal></expr>;</return>

<case>case <expr><literal type="number">0x0e</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_HUNGARIAN"</literal></expr>;</return>

<case>case <expr><literal type="number">0x0f</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_ICELANDIC"</literal></expr>;</return>

<case>case <expr><literal type="number">0x21</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_INDONESIAN"</literal></expr>;</return>

<case>case <expr><literal type="number">0x10</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_ITALIAN"</literal></expr>;</return>

<case>case <expr><literal type="number">0x11</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_JAPANESE"</literal></expr>;</return>

<case>case <expr><literal type="number">0x4b</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_KANNADA"</literal></expr>;</return>

<case>case <expr><literal type="number">0x60</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_KASHMIRI"</literal></expr>;</return>

<case>case <expr><literal type="number">0x3f</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_KAZAK"</literal></expr>;</return>

<case>case <expr><literal type="number">0x57</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_KONKANI"</literal></expr>;</return>

<case>case <expr><literal type="number">0x12</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_KOREAN"</literal></expr>;</return>

<case>case <expr><literal type="number">0x40</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_KYRGYZ"</literal></expr>;</return>

<case>case <expr><literal type="number">0x26</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_LATVIAN"</literal></expr>;</return>

<case>case <expr><literal type="number">0x27</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_LITHUANIAN"</literal></expr>;</return>

<case>case <expr><literal type="number">0x2f</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_MACEDONIAN"</literal></expr>;</return>

<case>case <expr><literal type="number">0x3e</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_MALAY"</literal></expr>;</return>

<case>case <expr><literal type="number">0x4c</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_MALAYALAM"</literal></expr>;</return>

<case>case <expr><literal type="number">0x58</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_MANIPURI"</literal></expr>;</return>

<case>case <expr><literal type="number">0x4e</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_MARATHI"</literal></expr>;</return>

<case>case <expr><literal type="number">0x50</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_MONGOLIAN"</literal></expr>;</return>

<case>case <expr><literal type="number">0x61</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_NEPALI"</literal></expr>;</return>

<case>case <expr><literal type="number">0x14</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_NORWEGIAN"</literal></expr>;</return>

<case>case <expr><literal type="number">0x48</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_ORIYA"</literal></expr>;</return>

<case>case <expr><literal type="number">0x15</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_POLISH"</literal></expr>;</return>

<case>case <expr><literal type="number">0x16</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_PORTUGUESE"</literal></expr>;</return>

<case>case <expr><literal type="number">0x46</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_PUNJABI"</literal></expr>;</return>

<case>case <expr><literal type="number">0x18</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_ROMANIAN"</literal></expr>;</return>

<case>case <expr><literal type="number">0x19</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_RUSSIAN"</literal></expr>;</return>

<case>case <expr><literal type="number">0x4f</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_SANSKRIT"</literal></expr>;</return>

<case>case <expr><literal type="number">0x59</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_SINDHI"</literal></expr>;</return>

<case>case <expr><literal type="number">0x1b</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_SLOVAK"</literal></expr>;</return>

<case>case <expr><literal type="number">0x24</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_SLOVENIAN"</literal></expr>;</return>

<case>case <expr><literal type="number">0x0a</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_SPANISH "</literal></expr>;</return>

<case>case <expr><literal type="number">0x41</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_SWAHILI"</literal></expr>;</return>

<case>case <expr><literal type="number">0x1d</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_SWEDISH"</literal></expr>;</return>

<case>case <expr><literal type="number">0x5a</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_SYRIAC"</literal></expr>;</return>

<case>case <expr><literal type="number">0x49</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_TAMIL"</literal></expr>;</return>

<case>case <expr><literal type="number">0x44</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_TATAR"</literal></expr>;</return>

<case>case <expr><literal type="number">0x4a</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_TELUGU"</literal></expr>;</return>

<case>case <expr><literal type="number">0x1e</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_THAI"</literal></expr>;</return>

<case>case <expr><literal type="number">0x1f</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_TURKISH"</literal></expr>;</return>

<case>case <expr><literal type="number">0x22</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_UKRAINIAN"</literal></expr>;</return>

<case>case <expr><literal type="number">0x20</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_URDU"</literal></expr>;</return>

<case>case <expr><literal type="number">0x43</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_UZBEK"</literal></expr>;</return>

<case>case <expr><literal type="number">0x2a</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_VIETNAMESE"</literal></expr>;</return>

<case>case <expr><literal type="number">0x3c</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_GAELIC"</literal></expr>;</return>

<case>case <expr><literal type="number">0x3a</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_MALTESE"</literal></expr>;</return>

<case>case <expr><literal type="number">0x28</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_MAORI"</literal></expr>;</return>

<case>case <expr><literal type="number">0x17</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_RHAETO_ROMANCE"</literal></expr>;</return>

<case>case <expr><literal type="number">0x3b</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_SAAMI"</literal></expr>;</return>

<case>case <expr><literal type="number">0x2e</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_SORBIAN"</literal></expr>;</return>

<case>case <expr><literal type="number">0x30</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_SUTU"</literal></expr>;</return>

<case>case <expr><literal type="number">0x31</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_TSONGA"</literal></expr>;</return>

<case>case <expr><literal type="number">0x32</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_TSWANA"</literal></expr>;</return>

<case>case <expr><literal type="number">0x33</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_VENDA"</literal></expr>;</return>

<case>case <expr><literal type="number">0x34</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_XHOSA"</literal></expr>;</return>

<case>case <expr><literal type="number">0x35</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_ZULU"</literal></expr>;</return>

<case>case <expr><literal type="number">0x8f</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_ESPERANTO"</literal></expr>;</return>

<case>case <expr><literal type="number">0x90</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_WALON"</literal></expr>;</return>

<case>case <expr><literal type="number">0x91</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_CORNISH"</literal></expr>;</return>

<case>case <expr><literal type="number">0x92</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_WELSH"</literal></expr>;</return>

<case>case <expr><literal type="number">0x93</literal></expr>:</case> <return>return <expr><literal type="string">"LANG_BRETON"</literal></expr>;</return>

<default>default:</default> <return>return <expr><literal type="string">"UNKNOWN"</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>_resource_type_str</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>typeName</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"CURSOR"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"BITMAP"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"ICON"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"MENU"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"DIALOG"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"STRING"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case>

<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"FONTDIR"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"FONT"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">9</literal></expr>:</case>

<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"ACCELERATOR"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">10</literal></expr>:</case>

<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"RCDATA"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">11</literal></expr>:</case>

<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"MESSAGETABLE"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">12</literal></expr>:</case>

<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"GROUP_CURSOR"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">14</literal></expr>:</case>

<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"GROUP_ICON"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"VERSION"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">17</literal></expr>:</case>

<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"DLGINCLUDE"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">19</literal></expr>:</case>

<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"PLUGPLAY"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">20</literal></expr>:</case>

<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"VXD"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">21</literal></expr>:</case>

<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"ANICURSOR"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">22</literal></expr>:</case>

<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"ANIICON"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">23</literal></expr>:</case>

<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"HTML"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">24</literal></expr>:</case>

<expr_stmt><expr><name>typeName</name> <operator>=</operator> <literal type="string">"MANIFEST"</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> <return>return <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"UNKNOWN (%d)"</literal></expr></argument>,<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>_parse_resource_directory</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>, <argument><expr><name>Pe_image_resource_directory</name> <operator>*</operator><name>dir</name></expr></argument>, <argument><expr><name>ut64</name> <name>offDir</name></expr></argument>, <argument><expr><name>int</name> <name>type</name></expr></argument>, <argument><expr><name>int</name> <name>id</name></expr></argument>, <argument><expr><name>HtUU</name> <operator>*</operator><name>dirs</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>resource_name</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>resourceEntryName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>totalRes</name> <init>= <expr><name><name>dir</name><operator>-&gt;</operator><name>NumberOfNamedEntries</name></name> <operator>+</operator> <name><name>dir</name><operator>-&gt;</operator><name>NumberOfIdEntries</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>rsrc_base</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>resource_directory_offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>off</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>totalRes</name> <operator>&gt;</operator> <name>R_PE_MAX_RESOURCES</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>totalRes</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Pe_image_resource_directory_entry</name></type> <name>entry</name></decl>;</decl_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name>rsrc_base</name> <operator>+</operator> <name>offDir</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dir</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>index</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ht_uu_find</name> <argument_list>(<argument><expr><name>dirs</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ht_uu_insert</name> <argument_list>(<argument><expr><name>dirs</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>off</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read resource entry\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>u1</name><operator>.</operator><name>s</name><operator>.</operator><name>NameIsString</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>resource_directory_offset</name></name> <operator>+</operator> <name><name>entry</name><operator>.</operator><name>u1</name><operator>.</operator><name>s</name><operator>.</operator><name>NameOffset</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>resourceEntryNameLength</name> <init>= <expr><call><name>r_read_le16</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>resourceEntryName</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>resourceEntryNameLength</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>resourceEntryName</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>resourceEntryNameLength</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 

<decl_stmt><decl><type><name>ut8</name></type> <name>byte</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>resource_directory_offset</name></name> <operator>+</operator> <name><name>entry</name><operator>.</operator><name>u1</name><operator>.</operator><name>s</name><operator>.</operator><name>NameOffset</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>i</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>byte</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut8</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut8</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <operator>!</operator><name>byte</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>resourceEntryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>resourceEntryName</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>byte</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>u2</name><operator>.</operator><name>s</name><operator>.</operator><name>DataIsDirectory</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Pe_image_resource_directory</name></type> <name>identEntry</name></decl>;</decl_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name>rsrc_base</name> <operator>+</operator> <name><name>entry</name><operator>.</operator><name>u2</name><operator>.</operator><name>s</name><operator>.</operator><name>OffsetToDirectory</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>identEntry</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>identEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>len</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>Pe_image_resource_directory</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: parsing resource directory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_parse_resource_directory</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>identEntry</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>u2</name><operator>.</operator><name>s</name><operator>.</operator><name>OffsetToDirectory</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>u1</name><operator>.</operator><name>Id</name></name></expr></argument>, <argument><expr><name>dirs</name></expr></argument>, <argument><expr><name>resourceEntryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>resourceEntryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>resourceEntryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Pe_image_resource_data_entry</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>Pe_image_resource_data_entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name>rsrc_base</name> <operator>+</operator> <name><name>entry</name><operator>.</operator><name>u2</name><operator>.</operator><name>OffsetToData</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>off</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (resource data entry)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>PE_RESOURCE_ENTRY_VERSION</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name> <init>= <expr><call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sdb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>data_paddr</name> <init>= <expr><call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>OffsetToData</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data_paddr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: bad RVA in resource data entry\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>cur_paddr</name> <init>= <expr><name>data_paddr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cur_paddr</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: not aligned version info address\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>cur_paddr</name> <operator>&lt;</operator> <operator>(</operator><name>data_paddr</name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>Size</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>cur_paddr</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>PE_VS_VERSIONINFO</name><modifier>*</modifier></type> <name>vs_VersionInfo</name> <init>= <expr><call><name>Pe_r_bin_pe_parse_version_info</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>cur_paddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vs_VersionInfo</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="string">"VS_VERSIONINFO%d"</literal></expr></argument>, <argument><expr><name>counter</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_ns_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>Pe_r_bin_store_resource_version_info</name> <argument_list>(<argument><expr><name>vs_VersionInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>wLength</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur_paddr</name> <operator>+=</operator> <name><name>vs_VersionInfo</name><operator>-&gt;</operator><name>wLength</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_VS_VERSIONINFO</name> <argument_list>(<argument><expr><name>vs_VersionInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>align32</name> <argument_list>(<argument><expr><name>cur_paddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>sdb_ns_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"vs_version_info"</literal></expr></argument>, <argument><expr><name>sdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>r_pe_resource</name> <modifier>*</modifier></type><name>rs</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>r_pe_resource</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_time_stamp_is_dos_format</name> <argument_list>(<argument><expr><operator>(</operator><name>ut32</name><operator>)</operator> <call><name>sdb_num_get</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"image_file_header.TimeDateStamp"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>TimeDateStamp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>timestr</name></name> <operator>=</operator> <call><name>r_time_stamp_to_str</name> <argument_list>( <argument><expr><call><name>r_dos_time_stamp_to_posix</name> <argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>TimeDateStamp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>timestr</name></name> <operator>=</operator> <call><name>r_time_stamp_to_str</name> <argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>TimeDateStamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>_resource_type_str</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>language</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>_resource_lang_str</name> <argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>u1</name><operator>.</operator><name>Name</name></name> <operator>&amp;</operator> <literal type="number">0x3ff</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>resource_name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>resource_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>resources</name></name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>_store_resource_sdb</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>r_pe_resource</name> <modifier>*</modifier></type><name>rs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>vaddr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name> <init>= <expr><call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sdb</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;resources</argument>, <argument>iter</argument>, <argument>rs</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"resource.%d.timestr"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>timestr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"resource.%d.vaddr"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vaddr</name> <operator>=</operator> <call><name>bin_pe_rva_to_va</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>OffsetToData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>vaddr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"resource.%d.name"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"resource.%d.size"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>Size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"resource.%d.type"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"resource.%d.language"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>sdb_ns_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"pe_resource"</literal></expr></argument>, <argument><expr><name>sdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>R_API</name> <name>void</name> <name>PE_</name></type><argument_list>(<argument><expr><name>bin_pe_parse_resource</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rsrc_base</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>resource_directory_offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Pe_image_resource_directory</name> <modifier>*</modifier></type><name>rs_directory</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>resource_directory</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>curRes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>totalRes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HtUUOptions</name></type> <name>opt</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HtUU</name> <modifier>*</modifier></type><name>dirs</name> <init>= <expr><call><name>ht_uu_new_opt</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dirs</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rs_directory</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ht_uu_free</name> <argument_list>(<argument><expr><name>dirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curRes</name> <operator>=</operator> <name><name>rs_directory</name><operator>-&gt;</operator><name>NumberOfNamedEntries</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>totalRes</name> <operator>=</operator> <name>curRes</name> <operator>+</operator> <name><name>rs_directory</name><operator>-&gt;</operator><name>NumberOfIdEntries</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>totalRes</name> <operator>&gt;</operator> <name>R_PE_MAX_RESOURCES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error parsing resource directory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ht_uu_free</name> <argument_list>(<argument><expr><name>dirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>totalRes</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Pe_image_resource_directory_entry</name></type> <name>typeEntry</name></decl>;</decl_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name>rsrc_base</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>rs_directory</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>index</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>typeEntry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ht_uu_insert</name> <argument_list>(<argument><expr><name>dirs</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>off</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>typeEntry</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>typeEntry</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>typeEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read resource directory entry\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>typeEntry</name><operator>.</operator><name>u2</name><operator>.</operator><name>s</name><operator>.</operator><name>DataIsDirectory</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Pe_image_resource_directory</name></type> <name>identEntry</name></decl>;</decl_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name>rsrc_base</name> <operator>+</operator> <name><name>typeEntry</name><operator>.</operator><name>u2</name><operator>.</operator><name>s</name><operator>.</operator><name>OffsetToDirectory</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>identEntry</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>identEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>len</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>identEntry</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: parsing resource directory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_parse_resource_directory</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>identEntry</name></expr></argument>, <argument><expr><name><name>typeEntry</name><operator>.</operator><name>u2</name><operator>.</operator><name>s</name><operator>.</operator><name>OffsetToDirectory</name></name></expr></argument>, <argument><expr><name><name>typeEntry</name><operator>.</operator><name>u1</name><operator>.</operator><name>Id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dirs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ht_uu_free</name> <argument_list>(<argument><expr><name>dirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_store_resource_sdb</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>bin_pe_init_security</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>NumberOfRvaAndSizes</name></name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_data_directory</name></expr></argument>)</argument_list></call> <operator>*</operator><name>data_dir_security</name> <operator>=</operator> <operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>data_directory</name><index>[<expr><name>PE_IMAGE_DIRECTORY_ENTRY_SECURITY</name></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>paddr</name> <init>= <expr><name><name>data_dir_security</name><operator>-&gt;</operator><name>VirtualAddress</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>size</name> <init>= <expr><name><name>data_dir_security</name><operator>-&gt;</operator><name>Size</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>size</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">8</literal> <operator>||</operator> <name>paddr</name></expr></argument> &gt;</argument_list></name> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>paddr</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid certificate table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>Pe_image_security_directory</name> <modifier>*</modifier></type><name>security_directory</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>Pe_image_security_directory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>security_directory</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>security_directory</name></name> <operator>=</operator> <name>security_directory</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>offset</name> <init>= <expr><name>paddr</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>paddr</name> <operator>+</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Pe_certificate</name> <modifier>*</modifier><modifier>*</modifier></type><name>tmp</name> <init>= <expr><operator>(</operator><name>Pe_certificate</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>realloc</name> <argument_list>(<argument><expr><name><name>security_directory</name><operator>-&gt;</operator><name>certificates</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>security_directory</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Pe_certificate</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>Pe_certificate</name> <modifier>*</modifier></type><name>cert</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>Pe_certificate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cert</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cert</name><operator>-&gt;</operator><name>dwLength</name></name> <operator>=</operator> <call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cert</name><operator>-&gt;</operator><name>dwLength</name></name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <operator>(</operator><name><name>cert</name><operator>-&gt;</operator><name>dwLength</name></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <name><name>cert</name><operator>-&gt;</operator><name>dwLength</name></name> <operator>&gt;</operator> <name>paddr</name> <operator>+</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid certificate entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cert</name><operator>-&gt;</operator><name>wRevision</name></name> <operator>=</operator> <call><name>r_buf_read_le16_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cert</name><operator>-&gt;</operator><name>wCertificateType</name></name> <operator>=</operator> <call><name>r_buf_read_le16_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cert</name><operator>-&gt;</operator><name>bCertificate</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>cert</name><operator>-&gt;</operator><name>dwLength</name></name> <operator>-</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>cert</name><operator>-&gt;</operator><name>bCertificate</name></name></expr></argument>, <argument><expr><name><name>cert</name><operator>-&gt;</operator><name>dwLength</name></name> <operator>-</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>cms</name></name> <operator>&amp;&amp;</operator> <name><name>cert</name><operator>-&gt;</operator><name>wCertificateType</name></name> <operator>==</operator> <name>PE_WIN_CERT_TYPE_PKCS_SIGNED_DATA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cms</name></name> <operator>=</operator> <call><name>r_pkcs7_parse_cms</name> <argument_list>(<argument><expr><name><name>cert</name><operator>-&gt;</operator><name>bCertificate</name></name></expr></argument>, <argument><expr><name><name>cert</name><operator>-&gt;</operator><name>dwLength</name></name> <operator>-</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>spcinfo</name></name> <operator>=</operator> <call><name>r_pkcs7_parse_spcinfo</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>security_directory</name><operator>-&gt;</operator><name>certificates</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>security_directory</name><operator>-&gt;</operator><name>certificates</name><index>[<expr><name><name>security_directory</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <name>cert</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>security_directory</name><operator>-&gt;</operator><name>length</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>cert</name><operator>-&gt;</operator><name>dwLength</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>cms</name></name> <operator>&amp;&amp;</operator> <name><name>bin</name><operator>-&gt;</operator><name>spcinfo</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>actual_authentihash</name> <init>= <expr><call><call><name>PE_</name><argument_list>(<argument><expr><name>bin_pe_compute_authentihash</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>claimed_authentihash</name> <init>= <expr><call><call><name>PE_</name><argument_list>(<argument><expr><name>bin_pe_get_claimed_authentihash</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>actual_authentihash</name> <operator>&amp;&amp;</operator> <name>claimed_authentihash</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>is_authhash_valid</name></name> <operator>=</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>actual_authentihash</name></expr></argument>, <argument><expr><name>claimed_authentihash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>is_authhash_valid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>actual_authentihash</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>actual_authentihash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>claimed_authentihash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>is_signed</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>cms</name></name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_security_directory</name><parameter_list>(<parameter><decl><type><name>Pe_image_security_directory</name> <modifier>*</modifier></type><name>security_directory</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>security_directory</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>numCert</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>numCert</name> <operator>&lt;</operator> <name><name>security_directory</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>numCert</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>security_directory</name><operator>-&gt;</operator><name>certificates</name><index>[<expr><name>numCert</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>security_directory</name><operator>-&gt;</operator><name>certificates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>security_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>bin_pe_init</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>dos_header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>section_header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>export_directory</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>import_directory</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>resource_directory</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>security_directory</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>delay_import_directory</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>optional_header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>data_directory</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>big_endian</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cms</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>spcinfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bin_pe_init_hdr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: File is not PE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bin_pe_init_sections</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Cannot initialize sections\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>sections</name></name> <operator>=</operator> <call><call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_get_sections</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bin_pe_init_imports</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bin_pe_init_exports</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bin_pe_init_resource</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bin_pe_init_security</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>big_endian</name></name> <operator>=</operator> <call><call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_is_big_endian</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bin_pe_init_rich_info</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bin_pe_init_tls</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bin_pe_init_clr_hdr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bin_pe_init_metadata_hdr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bin_pe_init_overlay</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>PE_</name></type>(<name>bin_pe_parse_resource</name>) <parameter_list>(<parameter><decl><type><name>bin</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>relocs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_arch</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>arch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"x86"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>Machine</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_ALPHA</name></expr>:</case>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_ALPHA64</name></expr>:</case>

<expr_stmt><expr><name>arch</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"alpha"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_RPI2</name></expr>:</case> 

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_ARM</name></expr>:</case>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_THUMB</name></expr>:</case>

<expr_stmt><expr><name>arch</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"arm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_M68K</name></expr>:</case>

<expr_stmt><expr><name>arch</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"m68k"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_MIPS16</name></expr>:</case>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_MIPSFPU</name></expr>:</case>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_MIPSFPU16</name></expr>:</case>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_WCEMIPSV2</name></expr>:</case>

<expr_stmt><expr><name>arch</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"mips"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_POWERPC</name></expr>:</case>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_POWERPCFP</name></expr>:</case>

<expr_stmt><expr><name>arch</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"ppc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_EBC</name></expr>:</case>

<expr_stmt><expr><name>arch</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"ebc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_ARM64</name></expr>:</case>

<expr_stmt><expr><name>arch</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"arm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>arch</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"x86"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><name>arch</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_addr_t</name></name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_entrypoint</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_addr_t</name></name><modifier>*</modifier></type> <name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>debug</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>base_addr</name> <init>= <expr><call><call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_get_image_base</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>optional_header</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>r_bin_pe_addr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"malloc (entrypoint)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>pe_entry</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>optional_header</name><operator>-&gt;</operator><name>AddressOfEntryPoint</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <call><name>bin_pe_rva_to_va</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>pe_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>pe_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>haddr</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>dos_header</name><operator>-&gt;</operator><name>e_lfanew</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_file_header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_section_t</name></name><modifier>*</modifier></type> <name>sections</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>sections</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>paddr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>debug</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Invalid entrypoint ... "</literal>

<literal type="string">"trying to fix it but i do not promise nothing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>num_sections</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>perm</name> <operator>&amp;</operator> <name>PE_IMAGE_SCN_MEM_EXECUTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>paddr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vaddr</name> <operator>+</operator> <name>base_addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>paddr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>paddr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>min_off</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>num_sections</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>paddr</name> <operator>&lt;</operator> <name>min_off</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>paddr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vaddr</name> <operator>+</operator> <name>base_addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>min_off</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>paddr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>min_off</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sa</name> <init>= <expr><call><name>R_MAX</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>optional_header</name><operator>-&gt;</operator><name>SectionAlignment</name></name></expr></argument>, <argument><expr><literal type="number">0x1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>pe_entry</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>sa</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+</operator> <name>base_addr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>debug</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: NULL entrypoint\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_section_t</name></name><modifier>*</modifier></type> <name>sections</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>sections</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>num_sections</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>perm</name> <operator>&amp;</operator> <name>PE_IMAGE_SCN_MEM_EXECUTE</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>perm</name> <operator>&amp;</operator> <name>PE_IMAGE_SCN_MEM_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>paddr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vaddr</name> <operator>+</operator> <name>base_addr</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_arm</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>debug</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>debug</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>entry</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_export_t</name></name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_exports</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_export_t</name></name><modifier>*</modifier></type> <name>exp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type> <name>exports</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PE_Word</name></type> <name>function_ordinal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PE_VWord</name></type> <name>functions_paddr</name></decl>, <decl><type ref="prev"/><name>names_paddr</name></decl>, <decl><type ref="prev"/><name>ordinals_paddr</name></decl>, <decl><type ref="prev"/><name>function_rva</name></decl>, <decl><type ref="prev"/><name>name_vaddr</name></decl>, <decl><type ref="prev"/><name>name_paddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>function_name</name><index>[<expr><name>PE_NAME_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>forwarder_name</name><index>[<expr><name>PE_NAME_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>dll_name</name><index>[<expr><name>PE_NAME_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_data_directory</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>data_dir_export</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PE_VWord</name></type> <name>export_dir_rva</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>export_dir_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>exports_sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>data_directory</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data_dir_export</name> <operator>=</operator> <operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>data_directory</name><index>[<expr><name>PE_IMAGE_DIRECTORY_ENTRY_EXPORT</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>export_dir_rva</name> <operator>=</operator> <name><name>data_dir_export</name><operator>-&gt;</operator><name>VirtualAddress</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>export_dir_size</name> <operator>=</operator> <name><name>data_dir_export</name><operator>-&gt;</operator><name>Size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>export_directory</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>export_directory</name><operator>-&gt;</operator><name>NumberOfFunctions</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator>

<name><name>bin</name><operator>-&gt;</operator><name>export_directory</name><operator>-&gt;</operator><name>NumberOfFunctions</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>exports_sz</name> <operator>=</operator> <operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>export_directory</name><operator>-&gt;</operator><name>NumberOfFunctions</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>r_bin_pe_export_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>exports_sz</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name><name>bin</name><operator>-&gt;</operator><name>export_directory</name><operator>-&gt;</operator><name>NumberOfFunctions</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> &gt;</argument_list></name> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>exports</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>exports_sz</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>export_directory</name><operator>-&gt;</operator><name>Name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>dll_name</name></expr></argument>, <argument><expr><name>PE_NAME_LENGTH</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (dll name)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dll_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>functions_paddr</name> <operator>=</operator> <call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>export_directory</name><operator>-&gt;</operator><name>AddressOfFunctions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>names_paddr</name> <operator>=</operator> <call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>export_directory</name><operator>-&gt;</operator><name>AddressOfNames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ordinals_paddr</name> <operator>=</operator> <call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>export_directory</name><operator>-&gt;</operator><name>AddressOfOrdinals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>export_directory</name><operator>-&gt;</operator><name>NumberOfFunctions</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>functions_paddr</name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_VWord</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>function_rva</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PE_VWord</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>export_directory</name><operator>-&gt;</operator><name>NumberOfNames</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name_vaddr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>export_directory</name><operator>-&gt;</operator><name>NumberOfNames</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>ordinals_paddr</name> <operator>+</operator> <name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_Word</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>function_ordinal</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>PE_Word</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>function_ordinal</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>names_paddr</name> <operator>+</operator> <name>n</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>PE_VWord</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>name_vaddr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>PE_VWord</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>name_vaddr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name_paddr</name> <operator>=</operator> <call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>name_vaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>name_paddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>function_name</name></expr></argument>, <argument><expr><name>PE_NAME_LENGTH</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (function name)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exports</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>exports</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>function_name</name></expr></argument>, <argument><expr><name>PE_NAME_LENGTH</name></expr></argument>, <argument><expr><literal type="string">"Ordinal_%i"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><else>else <block>{<block_content> 

<expr_stmt><expr><name>function_ordinal</name> <operator>=</operator> <name>i</name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>export_directory</name><operator>-&gt;</operator><name>Base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>function_name</name></expr></argument>, <argument><expr><name>PE_NAME_LENGTH</name></expr></argument>, <argument><expr><literal type="string">"Ordinal_%i"</literal></expr></argument>, <argument><expr><name>function_ordinal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>function_rva</name> <operator>&gt;=</operator> <name>export_dir_rva</name> <operator>&amp;&amp;</operator> <name>function_rva</name> <operator>&lt;</operator> <operator>(</operator><name>export_dir_rva</name> <operator>+</operator> <name>export_dir_size</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>function_rva</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>forwarder_name</name></expr></argument>, <argument><expr><name>PE_NAME_LENGTH</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>exports</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>exports</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>forwarder_name</name></expr></argument>, <argument><expr><name>PE_NAME_LENGTH</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dll_name</name><index>[<expr><name>PE_NAME_LENGTH</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>function_name</name><index>[<expr><name>PE_NAME_LENGTH</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exports</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vaddr</name> <operator>=</operator> <call><name>bin_pe_rva_to_va</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>function_rva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exports</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>paddr</name> <operator>=</operator> <call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>function_rva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exports</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ordinal</name> <operator>=</operator> <name>function_ordinal</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>exports</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>forwarder</name></expr></argument>, <argument><expr><name>forwarder_name</name></expr></argument>, <argument><expr><name>PE_NAME_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exports</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>forwarder</name><index>[<expr><name>PE_NAME_LENGTH</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>exports</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>function_name</name></expr></argument>, <argument><expr><name>PE_NAME_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exports</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><name>PE_NAME_LENGTH</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>exports</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>libname</name></expr></argument>, <argument><expr><name>dll_name</name></expr></argument>, <argument><expr><name>PE_NAME_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exports</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>libname</name><index>[<expr><name>PE_NAME_LENGTH</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exports</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>exports</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>parse_symbol_table</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>exports</name></expr></argument>, <argument><expr><name>exports_sz</name> <operator>-</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>r_bin_pe_export_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>exp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>exports</name> <operator>=</operator> <name>exp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>exports</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_rsdr_hdr</name><parameter_list>(<parameter><decl><type><name>SCV_RSDS_HEADER</name><modifier>*</modifier></type> <name>rsds_hdr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>rsds_hdr</name><operator>-&gt;</operator><name>file_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_rsdr_hdr</name><parameter_list>(<parameter><decl><type><name>SCV_RSDS_HEADER</name><modifier>*</modifier></type> <name>rsds_hdr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>rsds_hdr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>SCV_RSDS_HEADER</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rsds_hdr</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr>struct <name>SCV_RSDS_HEADER</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>free_rsdr_hdr</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_cv_nb10_header</name><parameter_list>(<parameter><decl><type><name>SCV_NB10_HEADER</name><modifier>*</modifier></type> <name>cv_nb10_header</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>cv_nb10_header</name><operator>-&gt;</operator><name>file_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_cv_nb10_header</name><parameter_list>(<parameter><decl><type><name>SCV_NB10_HEADER</name><modifier>*</modifier></type> <name>cv_nb10_header</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>cv_nb10_header</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>SCV_NB10_HEADER</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cv_nb10_header</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr>struct <name>SCV_NB10_HEADER</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>free_cv_nb10_header</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_rsds</name><parameter_list>(<parameter><decl><type><name>ut8</name><modifier>*</modifier></type> <name>dbg_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbg_data_len</name></decl></parameter>, <parameter><decl><type><name>SCV_RSDS_HEADER</name><modifier>*</modifier></type> <name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rsds_sz</name> <init>= <expr><literal type="number">4</literal> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>SGUID</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg_data_len</name> <operator>&lt;</operator> <name>rsds_sz</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dbg_data</name></expr></argument>, <argument><expr><name>rsds_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>file_name</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <call><name>strdup</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name>dbg_data</name> <operator>+</operator> <name>rsds_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_nb10</name><parameter_list>(<parameter><decl><type><name>ut8</name><modifier>*</modifier></type> <name>dbg_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbg_data_len</name></decl></parameter>, <parameter><decl><type><name>SCV_NB10_HEADER</name><modifier>*</modifier></type> <name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nb10sz</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg_data_len</name> <operator>&lt;</operator> <name>nb10sz</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dbg_data</name></expr></argument>, <argument><expr><name>nb10sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>file_name</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <call><name>strdup</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name>dbg_data</name> <operator>+</operator> <name>nb10sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>get_debug_info</name><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>, <argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_debug_directory_entry</name></expr></argument>)</argument_list></call><operator>*</operator> <name>dbg_dir_entry</name></expr></argument>, <argument><expr><name>ut8</name><operator>*</operator> <name>dbg_data</name></expr></argument>, <argument><expr><name>int</name> <name>dbg_data_len</name></expr></argument>, <argument><expr><name>SDebugInfo</name><operator>*</operator> <name>res</name></expr></argument>)</argument_list> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_FILE_NAME</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbgname</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbg_data</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>dbg_dir_entry</name><operator>-&gt;</operator><name>Type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>IMAGE_DEBUG_TYPE_CODEVIEW</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>dbg_data</name></expr></argument>, <argument><expr><literal type="string">"RSDS"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>SCV_RSDS_HEADER</name></type> <name>rsds_hdr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_rsdr_hdr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rsds_hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_rsds</name> <argument_list>(<argument><expr><name>dbg_data</name></expr></argument>, <argument><expr><name>dbg_data_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsds_hdr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Cannot read PE debug info\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>guidstr</name></name></expr></argument>, <argument><expr><name>GUIDSTR_LEN</name></expr></argument>,

<argument><expr><literal type="string">"%08x%04x%04x%02x%02x%02x%02x%02x%02x%02x%02x%x"</literal></expr></argument>,

<argument><expr><name><name>rsds_hdr</name><operator>.</operator><name>guid</name><operator>.</operator><name>data1</name></name></expr></argument>,

<argument><expr><name><name>rsds_hdr</name><operator>.</operator><name>guid</name><operator>.</operator><name>data2</name></name></expr></argument>,

<argument><expr><name><name>rsds_hdr</name><operator>.</operator><name>guid</name><operator>.</operator><name>data3</name></name></expr></argument>,

<argument><expr><name><name>rsds_hdr</name><operator>.</operator><name>guid</name><operator>.</operator><name>data4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>rsds_hdr</name><operator>.</operator><name>guid</name><operator>.</operator><name>data4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>rsds_hdr</name><operator>.</operator><name>guid</name><operator>.</operator><name>data4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>rsds_hdr</name><operator>.</operator><name>guid</name><operator>.</operator><name>data4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>rsds_hdr</name><operator>.</operator><name>guid</name><operator>.</operator><name>data4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>rsds_hdr</name><operator>.</operator><name>guid</name><operator>.</operator><name>data4</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>rsds_hdr</name><operator>.</operator><name>guid</name><operator>.</operator><name>data4</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>rsds_hdr</name><operator>.</operator><name>guid</name><operator>.</operator><name>data4</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>rsds_hdr</name><operator>.</operator><name>age</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dbgname</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>rsds_hdr</name><operator>.</operator><name>file_name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>file_name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator>

<name>dbgname</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>file_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>file_name</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>file_name</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>rsds_hdr</name><operator>.</operator><name>free</name></name> <argument_list>(<argument><expr><operator>(</operator>struct <name>SCV_RSDS_HEADER</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>rsds_hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name>dbg_data</name></expr></argument>, <argument><expr><literal type="string">"NB10"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dbg_data_len</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Truncated NB10 entry, not enough data to parse\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>SCV_NB10_HEADER</name></type> <name>nb10_hdr</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_cv_nb10_header</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nb10_hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_nb10</name> <argument_list>(<argument><expr><name>dbg_data</name></expr></argument>, <argument><expr><name>dbg_data_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nb10_hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>guidstr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>guidstr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"%x%x"</literal></expr></argument>, <argument><expr><name><name>nb10_hdr</name><operator>.</operator><name>timestamp</name></name></expr></argument>, <argument><expr><name><name>nb10_hdr</name><operator>.</operator><name>age</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>file_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nb10_hdr</name><operator>.</operator><name>file_name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>file_name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator>

<name><name>nb10_hdr</name><operator>.</operator><name>file_name</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>file_name</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>file_name</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>file_name</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>nb10_hdr</name><operator>.</operator><name>free</name></name> <argument_list>(<argument><expr><operator>(</operator>struct <name>SCV_NB10_HEADER</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>nb10_hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"CodeView section not NB10 or RSDS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">33</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>guidstr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>toupper</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator> <name><name>res</name><operator>-&gt;</operator><name>guidstr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_debug_data</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>, <argument><expr><name>SDebugInfo</name><operator>*</operator> <name>res</name></expr></argument>)</argument_list> <block>{<block_content>

<macro><name>PE_</name><argument_list>(<argument>image_debug_directory_entry</argument>)</argument_list></macro> <expr_stmt><expr><name>img_dbg_dir_entry</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_data_directory</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>dbg_dir</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>dbg_dir_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier></type> <name>dbg_data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dbg_dir</name> <operator>=</operator> <operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>DataDirectory</name><index>[<expr><literal type="number">6</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dbg_dir_offset</name> <operator>=</operator> <call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>dbg_dir</name><operator>-&gt;</operator><name>VirtualAddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <name>dbg_dir_offset</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>dbg_dir_offset</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg_dir_offset</name> <operator>&gt;=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>dbg_dir_offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>img_dbg_dir_entry</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>img_dbg_dir_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>dbg_dir_offset</name><operator>)</operator> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_debug_directory_entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>dbg_data_poff</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>img_dbg_dir_entry</name><operator>.</operator><name>PointerToRawData</name></name></expr></argument>, <argument><expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dbg_data_len</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>img_dbg_dir_entry</name><operator>.</operator><name>SizeOfData</name></name></expr></argument>, <argument><expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>dbg_data_poff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg_data_len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dbg_data</name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dbg_data_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>dbg_data_poff</name></expr></argument>, <argument><expr><name>dbg_data</name></expr></argument>, <argument><expr><name>dbg_data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>get_debug_info</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>img_dbg_dir_entry</name></expr></argument>, <argument><expr><name>dbg_data</name></expr></argument>, <argument><expr><name>dbg_data_len</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>dbg_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_import_t</name></name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_imports</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_import_t</name></name><modifier>*</modifier></type> <name>imps</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type> <name>imports</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>dll_name</name><index>[<expr><name>PE_NAME_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nimp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>off</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>dll_name_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>paddr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>import_func_name_offset</name></decl>;</decl_stmt>

<macro><name>PE_</name><argument_list>(<argument>image_import_directory</argument>)</argument_list></macro> <expr_stmt><expr><name>curr_import_dir</name></expr>;</expr_stmt>

<macro><name>PE_</name><argument_list>(<argument>image_delay_import_directory</argument>)</argument_list></macro> <expr_stmt><expr><name>curr_delay_import_dir</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>import_directory_offset</name></name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>import_directory_offset</name></name> <operator>+</operator> <literal type="number">32</literal> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>import_directory_offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>off</name> <argument_list type="generic">&lt; <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name>off</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_import_directory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>import_directory_offset</name></name> <operator>+</operator> <name>idi</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>curr_import_dir</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>curr_import_dir</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>curr_import_dir</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>import_directory_size</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>import_directory_size</name></name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (import directory too big)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>import_directory_size</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>bin</name><operator>-&gt;</operator><name>import_directory_offset</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>import_directory_offset</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>import_directory_size</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>r</name> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>curr_import_dir</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <name><name>bin</name><operator>-&gt;</operator><name>import_directory_offset</name></name> <operator>+</operator> <operator>(</operator><name>idi</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>curr_import_dir</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <name>last</name> <operator>&amp;&amp;</operator> <operator>(</operator>

<name><name>curr_import_dir</name><operator>.</operator><name>FirstThunk</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>curr_import_dir</name><operator>.</operator><name>Name</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>curr_import_dir</name><operator>.</operator><name>TimeDateStamp</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>curr_import_dir</name><operator>.</operator><name>Characteristics</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>curr_import_dir</name><operator>.</operator><name>ForwarderChain</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dll_name_offset</name> <operator>=</operator> <name><name>curr_import_dir</name><operator>.</operator><name>Name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>paddr</name> <operator>=</operator> <call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>dll_name_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>paddr</name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>paddr</name> <operator>+</operator> <name>PE_NAME_LENGTH</name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rr</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>paddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>dll_name</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>paddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rr</name> <operator>!=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>paddr</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dll_name</name><index>[<expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>paddr</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else <block>{<block_content>

<expr_stmt><expr><name>rr</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>paddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>dll_name</name></expr></argument>, <argument><expr><name>PE_NAME_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rr</name> <operator>!=</operator> <name>PE_NAME_LENGTH</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dll_name</name><index>[<expr><name>PE_NAME_LENGTH</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bin_pe_parse_imports</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>imports</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nimp</name></expr></argument>, <argument><expr><name>dll_name</name></expr></argument>,

<argument><expr><name><name>curr_import_dir</name><operator>.</operator><name>Characteristics</name></name></expr></argument>,

<argument><expr><name><name>curr_import_dir</name><operator>.</operator><name>FirstThunk</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>idi</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>import_directory_offset</name></name> <operator>+</operator> <name>idi</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>curr_import_dir</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>curr_import_dir</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>curr_import_dir</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>imports</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>delay_import_directory_offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>off</name> <argument_list type="generic">&lt; <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name>off</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>didi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_delay_import_directory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>didi</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>curr_delay_import_dir</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>curr_delay_import_dir</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>curr_delay_import_dir</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>curr_delay_import_dir</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curr_delay_import_dir</name><operator>.</operator><name>Attributes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dll_name_offset</name> <operator>=</operator> <call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>,

<argument><expr><name><name>curr_delay_import_dir</name><operator>.</operator><name>Name</name></name> <operator>-</operator> <call><call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_get_image_base</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>import_func_name_offset</name> <operator>=</operator> <name><name>curr_delay_import_dir</name><operator>.</operator><name>DelayImportNameTable</name></name> <operator>-</operator>

<call><call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_get_image_base</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>dll_name_offset</name> <operator>=</operator> <call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>curr_delay_import_dir</name><operator>.</operator><name>Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>import_func_name_offset</name> <operator>=</operator> <name><name>curr_delay_import_dir</name><operator>.</operator><name>DelayImportNameTable</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name><name>curr_delay_import_dir</name><operator>.</operator><name>Name</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>curr_delay_import_dir</name><operator>.</operator><name>DelayImportAddressTable</name></name> <operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dll_name_offset</name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>dll_name_offset</name> <operator>+</operator> <name>PE_NAME_LENGTH</name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rr</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>dll_name_offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>dll_name</name></expr></argument>, <argument><expr><name>PE_NAME_LENGTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rr</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dll_name</name><index>[<expr><name>PE_NAME_LENGTH</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bin_pe_parse_imports</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>imports</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nimp</name></expr></argument>, <argument><expr><name>dll_name</name></expr></argument>, <argument><expr><name>import_func_name_offset</name></expr></argument>,

<argument><expr><name><name>curr_delay_import_dir</name><operator>.</operator><name>DelayImportAddressTable</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>didi</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>didi</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>curr_delay_import_dir</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>curr_delay_import_dir</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>curr_delay_import_dir</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>curr_delay_import_dir</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<label><name>beach</name>:</label>

<if_stmt><if>if <condition>(<expr><name>nimp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>imps</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>imports</name></expr></argument>, <argument><expr><operator>(</operator><name>nimp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>r_bin_pe_import_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>imps</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"realloc (import)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>imports</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>imports</name> <operator>=</operator> <name>imps</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imports</name><index>[<expr><name>nimp</name></expr>]</index></name><operator>.</operator><name>last</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>imports</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_lib_t</name></name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_libs</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_lib_t</name></name><modifier>*</modifier></type> <name>libs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_lib_t</name></name><modifier>*</modifier></type> <name>new_libs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<macro><name>PE_</name><argument_list>(<argument>image_import_directory</argument>)</argument_list></macro> <expr_stmt><expr><name>curr_import_dir</name></expr>;</expr_stmt>

<macro><name>PE_</name><argument_list>(<argument>image_delay_import_directory</argument>)</argument_list></macro> <expr_stmt><expr><name>curr_delay_import_dir</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PE_DWord</name></type> <name>name_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HtPP</name> <modifier>*</modifier></type><name>lib_map</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>off</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_libs</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>libs</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>max_libs</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>r_bin_pe_lib_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>libs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"malloc (libs)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>import_directory_offset</name></name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>import_directory_size</name></name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"import directory offset bigger than file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lib_map</name> <operator>=</operator> <call><name>sdb_ht_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>import_directory_offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>off</name> <argument_list type="generic">&lt; <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name>off</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>iidi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_import_directory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>iidi</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>curr_import_dir</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>curr_import_dir</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>curr_import_dir</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>off</name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>import_directory_size</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>r</name> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>curr_import_dir</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <name>off</name> <operator>+</operator> <operator>(</operator><name>iidi</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>curr_import_dir</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <name>last</name> <operator>&amp;&amp;</operator> <operator>(</operator>

<name><name>curr_import_dir</name><operator>.</operator><name>FirstThunk</name></name> <operator>||</operator> <name><name>curr_import_dir</name><operator>.</operator><name>Name</name></name> <operator>||</operator>

<name><name>curr_import_dir</name><operator>.</operator><name>TimeDateStamp</name></name> <operator>||</operator> <name><name>curr_import_dir</name><operator>.</operator><name>Characteristics</name></name> <operator>||</operator>

<name><name>curr_import_dir</name><operator>.</operator><name>ForwarderChain</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name_off</name> <operator>=</operator> <call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>curr_import_dir</name><operator>.</operator><name>Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>name_off</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name><name>libs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>PE_STRING_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>libs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content> 

<goto>goto <name>next</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>libs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (libs - import dirs) %d\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>libs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name><name>libs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sdb_ht_find</name> <argument_list>(<argument><expr><name>lib_map</name></expr></argument>, <argument><expr><name><name>libs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_ht_insert</name> <argument_list>(<argument><expr><name>lib_map</name></expr></argument>, <argument><expr><name><name>libs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>libs</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>last</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name>max_libs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_libs</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>libs</name></expr></argument>, <argument><expr><operator>(</operator><name>max_libs</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>r_bin_pe_lib_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_libs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"realloc (libs)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>libs</name> <operator>=</operator> <name>new_libs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_libs</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_libs</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>next</name>:</label>

<expr_stmt><expr><name>iidi</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>iidi</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>curr_import_dir</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>curr_import_dir</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>curr_import_dir</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>delay_import_directory_offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>off</name> <argument_list type="generic">&lt; <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name>off</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>did</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_delay_import_directory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>curr_delay_import_dir</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>curr_delay_import_dir</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>curr_delay_import_dir</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>r</name> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>curr_delay_import_dir</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator>

<name><name>curr_delay_import_dir</name><operator>.</operator><name>Name</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>curr_delay_import_dir</name><operator>.</operator><name>DelayImportNameTable</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name_off</name> <operator>=</operator> <call><name>bin_pe_rva_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>curr_delay_import_dir</name><operator>.</operator><name>Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name_off</name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>name_off</name> <operator>+</operator> <name>PE_STRING_LENGTH</name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>name_off</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name><name>libs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>PE_STRING_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>PE_STRING_LENGTH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: read (libs - delay import dirs)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>libs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name><name>libs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sdb_ht_find</name> <argument_list>(<argument><expr><name>lib_map</name></expr></argument>, <argument><expr><name><name>libs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_ht_insert</name> <argument_list>(<argument><expr><name>lib_map</name></expr></argument>, <argument><expr><name><name>libs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>libs</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>last</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name>max_libs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_libs</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>libs</name></expr></argument>, <argument><expr><operator>(</operator><name>max_libs</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>r_bin_pe_lib_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_libs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"realloc (libs)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>libs</name> <operator>=</operator> <name>new_libs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_libs</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_libs</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>did</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>did</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>curr_delay_import_dir</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>curr_delay_import_dir</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>curr_delay_import_dir</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_ht_free</name> <argument_list>(<argument><expr><name>lib_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>libs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>last</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>libs</name></expr>;</return>

<label><name>out_error</name>:</label>

<expr_stmt><expr><call><name>sdb_ht_free</name> <argument_list>(<argument><expr><name>lib_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>libs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_image_size</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>SizeOfImage</name></name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_machine</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>machine</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bin</name> <operator>&amp;&amp;</operator> <name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name></name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>Machine</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_ALPHA</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"Alpha"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_ALPHA64</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"Alpha 64"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_AM33</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"AM33"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_AMD64</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"AMD 64"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_ARM</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"ARM"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_CEE</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"CEE"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_CEF</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"CEF"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_EBC</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"EBC"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_I386</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"i386"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_IA64</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"ia64"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_M32R</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"M32R"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_M68K</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"M68K"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_MIPS16</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"Mips 16"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_MIPSFPU</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"Mips FPU"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_MIPSFPU16</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"Mips FPU 16"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_POWERPC</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"PowerPC"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_POWERPCFP</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"PowerPC FP"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_R10000</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"R10000"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_R3000</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"R3000"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_R4000</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"R4000"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_SH3</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"SH3"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_SH3DSP</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"SH3DSP"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_SH3E</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"SH3E"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_SH4</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"SH4"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_SH5</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"SH5"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_THUMB</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"Thumb"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_TRICORE</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"Tricore"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_MACHINE_WCEMIPSV2</name></expr>:</case> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"WCE Mips V2"</literal></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>machine</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>machine</name></expr>?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>machine</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_os</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>os</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>Subsystem</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PE_IMAGE_SUBSYSTEM_NATIVE</name></expr>:</case>

<expr_stmt><expr><name>os</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"native"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PE_IMAGE_SUBSYSTEM_WINDOWS_GUI</name></expr>:</case>

<case>case <expr><name>PE_IMAGE_SUBSYSTEM_WINDOWS_CUI</name></expr>:</case>

<case>case <expr><name>PE_IMAGE_SUBSYSTEM_WINDOWS_CE_GUI</name></expr>:</case>

<expr_stmt><expr><name>os</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"windows"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PE_IMAGE_SUBSYSTEM_POSIX_CUI</name></expr>:</case>

<expr_stmt><expr><name>os</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"posix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PE_IMAGE_SUBSYSTEM_EFI_APPLICATION</name></expr>:</case>

<case>case <expr><name>PE_IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER</name></expr>:</case>

<case>case <expr><name>PE_IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER</name></expr>:</case>

<case>case <expr><name>PE_IMAGE_SUBSYSTEM_EFI_ROM</name></expr>:</case>

<expr_stmt><expr><name>os</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"efi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PE_IMAGE_SUBSYSTEM_XBOX</name></expr>:</case>

<expr_stmt><expr><name>os</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"xbox"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>os</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"windows"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><name>os</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_class</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bin</name> <operator>&amp;&amp;</operator> <name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name></name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>Magic</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PE_IMAGE_FILE_TYPE_PE32</name></expr>:</case> <return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"PE32"</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>PE_IMAGE_FILE_TYPE_PE32PLUS</name></expr>:</case> <return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"PE32+"</literal></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default> <return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Unknown"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_bits</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bin</name> <operator>&amp;&amp;</operator> <name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_arm</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_thumb</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<switch>switch <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>Magic</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PE_IMAGE_FILE_TYPE_PE32</name></expr>:</case> <expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_FILE_TYPE_PE32PLUS</name></expr>:</case> <expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>bits</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_check_sections</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>, <argument><expr>struct <name>r_bin_pe_section_t</name><operator>*</operator> <operator>*</operator> <name>sects</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_section_t</name></name><modifier>*</modifier></type> <name>sections</name> <init>= <expr><operator>*</operator><name>sects</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr_beg</name></decl>, <decl><type ref="prev"/><name>addr_end</name></decl>, <decl><type ref="prev"/><name>new_section_size</name></decl>, <decl><type ref="prev"/><name>new_perm</name></decl>, <decl><type ref="prev"/><name>base_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_addr_t</name></name><modifier>*</modifier></type> <name>entry</name> <init>= <expr><call><call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_get_entrypoint</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>new_section_size</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_section_size</name> <operator>-=</operator> <ternary><condition><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>?</condition><then> <expr><literal type="number">0</literal></expr></then><else>: <expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>new_perm</name> <operator>=</operator> <operator>(</operator><name>PE_IMAGE_SCN_MEM_READ</name> <operator>|</operator> <name>PE_IMAGE_SCN_MEM_WRITE</name> <operator>|</operator> <name>PE_IMAGE_SCN_MEM_EXECUTE</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>base_addr</name> <operator>=</operator> <call><call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_get_image_base</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>fix</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>addr_beg</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>paddr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>addr_end</name> <operator>=</operator> <name>addr_beg</name> <operator>+</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>&lt;</operator> <name>addr_beg</name> <operator>||</operator> <name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>&gt;</operator> <name>addr_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fix</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>addr_beg</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vaddr</name> <operator>+</operator> <name>base_addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>addr_end</name> <operator>=</operator> <name>addr_beg</name> <operator>+</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vsize</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>&lt;</operator> <name>addr_beg</name> <operator>||</operator> <name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>&gt;</operator> <name>addr_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fix</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>last</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>perm</name> <operator>&amp;</operator> <name>PE_IMAGE_SCN_MEM_EXECUTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>addr_beg</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>paddr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>addr_end</name> <operator>=</operator> <name>addr_beg</name> <operator>+</operator> <name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>addr_beg</name> <operator>&lt;=</operator> <name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>&lt;</operator> <name>addr_end</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>vsize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>vsize</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>addr_beg</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>vaddr</name> <operator>+</operator> <name>base_addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>addr_end</name> <operator>=</operator> <name>addr_beg</name> <operator>+</operator> <name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>vsize</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>addr_beg</name> <operator>&lt;=</operator> <name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>||</operator> <name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>&lt;</operator> <name>addr_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fix</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>fix</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"blob"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>paddr</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vaddr</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>-</operator> <name>base_addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vsize</name> <operator>=</operator> <name>new_section_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>perm</name> <operator>=</operator> <name>new_perm</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>out_function</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>addr_beg</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>paddr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>addr_end</name> <operator>=</operator> <name>addr_beg</name> <operator>+</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>addr_beg</name> <operator>&lt;=</operator> <name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>&lt;</operator> <name>addr_end</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vsize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vsize</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>addr_beg</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vaddr</name> <operator>+</operator> <name>base_addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>addr_end</name> <operator>=</operator> <name>addr_beg</name> <operator>+</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vsize</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>&lt;</operator> <name>addr_beg</name> <operator>||</operator> <name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>&gt;</operator> <name>addr_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vaddr</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>-</operator> <name>base_addr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>out_function</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>, <argument><expr><operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>num_sections</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>r_bin_pe_section_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ss</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out_function</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>sections</name></name> <operator>=</operator> <name>sections</name> <operator>=</operator> <name>ss</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>num_sections</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"blob"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>paddr</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vaddr</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>-</operator> <name>base_addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vsize</name> <operator>=</operator> <name>new_section_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>perm</name> <operator>=</operator> <name>new_perm</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>last</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>sects</name> <operator>=</operator> <name>sections</name></expr>;</expr_stmt>

<label><name>out_function</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>r_bin_pe_section_t</name></name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_sections</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_pe_section_t</name></name><modifier>*</modifier></type> <name>sections</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PE_</name><argument_list>(<argument><expr><name>image_section_header</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>shdr</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>section_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>shdr</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>section_header</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>num_sections</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>shdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>SizeOfRawData</name> <operator>||</operator> <name><name>shdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>Misc</name><operator>.</operator><name>VirtualSize</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>section_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sections</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>section_count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>r_bin_pe_section_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sections</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"malloc (sections)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>num_sections</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>shdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>SizeOfRawData</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>shdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>Misc</name><operator>.</operator><name>VirtualSize</name></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>Name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>new_name</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"sect_%d"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>, <argument><expr><call><name>R_ARRAY_SIZE</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>shdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>Name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>atoi</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>shdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Name</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>sym_tbl_off</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>PointerToSymbolTable</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_symbols</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>NumberOfSymbols</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><name>num_symbols</name> <operator>*</operator> <name>COFF_SYMBOL_SIZE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sym_tbl_off</name> <operator>&amp;&amp;</operator>

<name>sym_tbl_off</name> <operator>+</operator> <name>off</name> <operator>+</operator> <name><name>idx</name> <argument_list type="generic">&lt; <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator>

<name>sym_tbl_off</name> <operator>+</operator> <name>off</name> <operator>+</operator> <name>idx</name></expr></argument> &gt;</argument_list></name> <name>off</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><name>PE_IMAGE_SIZEOF_SHORT_NAME</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>,

<argument><expr><name>sym_tbl_off</name> <operator>+</operator> <name>off</name> <operator>+</operator> <name>idx</name></expr></argument>,

<argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><name>sz</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>shdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Name</name></expr></argument>, <argument><expr><name>PE_IMAGE_SIZEOF_SHORT_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><name>PE_IMAGE_SIZEOF_SHORT_NAME</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>vaddr</name> <operator>=</operator> <name><name>shdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>VirtualAddress</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name><name>shdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>SizeOfRawData</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>Misc</name><operator>.</operator><name>VirtualSize</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>vsize</name> <operator>=</operator> <name><name>shdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>Misc</name><operator>.</operator><name>VirtualSize</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>vsize</name> <operator>=</operator> <name><name>shdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>SizeOfRawData</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>optional_header</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>sa</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>optional_header</name><operator>-&gt;</operator><name>SectionAlignment</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sa</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>diff</name> <init>= <expr><name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>vsize</name> <operator>%</operator> <name>sa</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>vsize</name> <operator>+=</operator> <name>sa</name> <operator>-</operator> <name>diff</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>vaddr</name> <operator>%</operator> <name>sa</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: section %s not aligned to SectionAlignment.\n"</literal></expr></argument>,

<argument><expr><name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>paddr</name> <operator>=</operator> <name><name>shdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>PointerToRawData</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>perm</name> <operator>=</operator> <name><name>shdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Characteristics</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>last</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>last</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>num_sections</name></name> <operator>=</operator> <name>section_count</name></expr>;</expr_stmt>

<return>return <expr><name>sections</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_get_subsystem</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>subsystem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bin</name> <operator>&amp;&amp;</operator> <name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name></name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>optional_header</name><operator>.</operator><name>Subsystem</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PE_IMAGE_SUBSYSTEM_NATIVE</name></expr>:</case>

<expr_stmt><expr><name>subsystem</name> <operator>=</operator> <literal type="string">"Native"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_SUBSYSTEM_WINDOWS_GUI</name></expr>:</case>

<expr_stmt><expr><name>subsystem</name> <operator>=</operator> <literal type="string">"Windows GUI"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_SUBSYSTEM_WINDOWS_CUI</name></expr>:</case>

<expr_stmt><expr><name>subsystem</name> <operator>=</operator> <literal type="string">"Windows CUI"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_SUBSYSTEM_POSIX_CUI</name></expr>:</case>

<expr_stmt><expr><name>subsystem</name> <operator>=</operator> <literal type="string">"POSIX CUI"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_SUBSYSTEM_WINDOWS_CE_GUI</name></expr>:</case>

<expr_stmt><expr><name>subsystem</name> <operator>=</operator> <literal type="string">"Windows CE GUI"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_SUBSYSTEM_EFI_APPLICATION</name></expr>:</case>

<expr_stmt><expr><name>subsystem</name> <operator>=</operator> <literal type="string">"EFI Application"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER</name></expr>:</case>

<expr_stmt><expr><name>subsystem</name> <operator>=</operator> <literal type="string">"EFI Boot Service Driver"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER</name></expr>:</case>

<expr_stmt><expr><name>subsystem</name> <operator>=</operator> <literal type="string">"EFI Runtime Driver"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_SUBSYSTEM_EFI_ROM</name></expr>:</case>

<expr_stmt><expr><name>subsystem</name> <operator>=</operator> <literal type="string">"EFI ROM"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PE_IMAGE_SUBSYSTEM_XBOX</name></expr>:</case>

<expr_stmt><expr><name>subsystem</name> <operator>=</operator> <literal type="string">"XBOX"</literal></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>subsystem</name> <operator>=</operator> <literal type="string">"Unknown"</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>subsystem</name></expr>?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>subsystem</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASCHR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bin-&gt;nt_headers-&gt;file_header.Characteristics &amp; (x))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_is_dll</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>HASCHR</name> <argument_list>(<argument><expr><name>PE_IMAGE_FILE_DLL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_is_pie</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>HASCHR</name> <argument_list>(<argument><expr><name>IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

BOOL aslr = inh-&gt;OptionalHeader.DllCharacteristics &amp; IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE;

BOOL dep = inh-&gt;OptionalHeader.DllCharacteristics &amp; IMAGE_DLLCHARACTERISTICS_NX_COMPAT;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_is_big_endian</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>arch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arch</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name><operator>-&gt;</operator><name>file_header</name><operator>.</operator><name>Machine</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arch</name> <operator>==</operator> <name>PE_IMAGE_FILE_MACHINE_I386</name> <operator>||</operator>

<name>arch</name> <operator>==</operator> <name>PE_IMAGE_FILE_MACHINE_AMD64</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>HASCHR</name> <argument_list>(<argument><expr><name>PE_IMAGE_FILE_BYTES_REVERSED_HI</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_is_stripped_relocs</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>HASCHR</name> <argument_list>(<argument><expr><name>PE_IMAGE_FILE_RELOCS_STRIPPED</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_is_stripped_line_nums</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>HASCHR</name> <argument_list>(<argument><expr><name>PE_IMAGE_FILE_LINE_NUMS_STRIPPED</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_is_stripped_local_syms</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>HASCHR</name> <argument_list>(<argument><expr><name>PE_IMAGE_FILE_LOCAL_SYMS_STRIPPED</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_is_stripped_debug</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>HASCHR</name> <argument_list>(<argument><expr><name>PE_IMAGE_FILE_DEBUG_STRIPPED</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier> <name>PE_</name></type><argument_list>(<argument><expr><name>r_bin_pe_free</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>dos_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>nt_headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>section_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>export_directory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>import_directory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>resource_directory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_security_directory</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>security_directory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>delay_import_directory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>tls_directory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>sections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>authentihash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>rich_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>resources</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pkcs7_free_cms</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pkcs7_free_spcinfo</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>spcinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>PE_</name></name></type><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list><modifier>*</modifier> <name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_new</name></expr></argument>)</argument_list><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>file</name></expr></argument>, <argument><expr><name>bool</name> <name>verbose</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>PE_</name></name></type><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list><modifier>*</modifier> <name>bin</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>binsz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><call><name>r_file_slurp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>binsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>binsz</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_free</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>r_buf_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_buf_set_bytes</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_free</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>verbose</name></name> <operator>=</operator> <name>verbose</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bin_pe_init</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_free</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>bin</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>PE_</name></name></type><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list><modifier>*</modifier> <name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_new_buf</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RBuffer</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>bool</name> <name>verbose</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>PE_</name></name></type><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list><modifier>*</modifier> <name>bin</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_obj_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>r_buf_ref</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>verbose</name></name> <operator>=</operator> <name>verbose</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bin_pe_init</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><call><name>PE_</name><argument_list>(<argument><expr><name>r_bin_pe_free</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>bin</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

</unit>
