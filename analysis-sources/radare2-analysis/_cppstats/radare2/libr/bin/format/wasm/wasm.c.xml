<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\format\wasm\wasm.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wasm.h"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>ConsumeFcn</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>max</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>out_value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>ParseEntryFcn</name>) <parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>max</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>consume_r</name> <parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>n_out</name></decl></parameter>, <parameter><decl><type><name>ConsumeFcn</name></type> <name>consume_fcn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name> <operator>&amp;&amp;</operator> <name>n_out</name> <operator>&amp;&amp;</operator> <name>consume_fcn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>cur</name> <init>= <expr><call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&gt;=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>cur</name> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>R_NEWS</name> <argument_list>(<argument><expr><name>ut8</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>n</name> <operator>=</operator> <call><name>consume_fcn</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>max</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>cur</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>n_out</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tmp</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>consume_u32_r</name> <parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>tmp</name> <init>= <expr><call><name>consume_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>read_u32_leb128</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>consume_u7_r</name> <parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>tmp</name> <init>= <expr><call><name>consume_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>read_u32_leb128</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>consume_s7_r</name> <parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>st8</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>tmp</name> <init>= <expr><call><name>consume_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>ConsumeFcn</name><operator>)</operator><name>read_i32_leb128</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>(</operator><name>st8</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x10000000</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>consume_u1_r</name> <parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>tmp</name> <init>= <expr><call><name>consume_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>read_u32_leb128</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>consume_str_r</name> <parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>cur</name> <init>= <expr><call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name> <operator>||</operator> <name>max</name> <operator>&gt;=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>cur</name> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cur</name> <operator>+</operator> <name>sz</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>max</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>out</name></expr></argument>, <argument><expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>R_BIN_WASM_STRING_LENGTH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>sz</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>consume_init_expr_r</name> <parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>eoc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name> <operator>||</operator> <name>max</name> <operator>&gt;=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>cur</name> <init>= <expr><call><name>r_buf_read8</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>max</name> <operator>&amp;&amp;</operator> <name>cur</name> <operator>!=</operator> <name>eoc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>r_buf_read8</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>!=</operator> <name>eoc</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>consume_locals_r</name> <parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>RBinWasmCodeEntry</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>cur</name> <init>= <expr><call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name> <operator>||</operator> <name>max</name> <operator>&gt;=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>cur</name> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>count</name> <init>= <expr><ternary><condition><expr><name>out</name></expr> ?</condition><then> <expr><name><name>out</name><operator>-&gt;</operator><name>local_count</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>locals</name></name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr>struct <name>r_bin_wasm_local_entry_t</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>max</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>out</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>locals</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>count</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_s7_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>out</name></expr> ?</condition><then> <expr><operator>(</operator><name>st8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>locals</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>type</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>count</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>j</name></expr>;</return>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>locals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>consume_limits_r</name> <parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_bin_wasm_resizable_limits_t</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name> <operator>||</operator> <name>max</name> <operator>&gt;=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>max</name> <operator>||</operator> <operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u7_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>initial</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>maximum</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>R_ABS</name> <argument_list>(<argument><expr><call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_bin_wasm_get_sections_by_id</name> <parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>sections</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinWasmSection</name> <modifier>*</modifier></type><name>sec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>sections</argument>, <argument>iter</argument>, <argument>sec</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

const char *r_bin_wasm_valuetype_to_string (r_bin_wasm_value_type_t type) {

switch (type) {

case R_BIN_WASM_VALUETYPE_i32:

return "i32";

case R_BIN_WASM_VALUETYPE_i64:

return "i62";

case R_BIN_WASM_VALUETYPE_f32:

return "f32";

case R_BIN_WASM_VALUETYPE_f64:

return "f64";

case R_BIN_WASM_VALUETYPE_ANYFUNC:

return "ANYFUNC";

case R_BIN_WASM_VALUETYPE_FUNC:

return "FUNC";

default:

return "&lt;?&gt;";

}

}

static char *r_bin_wasm_type_entry_to_string(RBinWasmTypeEntry *ptr) {

if (!ptr) {

return NULL;

}

char *buf = (char*)calloc (ptr-&gt;param_count, 5);

if (!buf) {

return NULL;

}

int p;

for (p = 0; p &lt; ptr-&gt;param_count; p++) {

strcat (buf, r_bin_wasm_valuetype_to_string (ptr-&gt;param_types[p]));

if (p &lt; ptr-&gt;param_count - 1) {

strcat (buf, ", ");

}

}

snprintf (ptr-&gt;to_str, R_BIN_WASM_STRING_LENGTH, "(%s) -&gt; (%s)",

(ptr-&gt;param_count &gt; 0? buf: ""),

(ptr-&gt;return_count == 1? r_bin_wasm_valuetype_to_string (ptr-&gt;return_type): ""));

free (buf);

return ptr-&gt;to_str;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_bin_wasm_free_types</name> <parameter_list>(<parameter><decl><type><name>RBinWasmTypeEntry</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>param_types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_bin_wasm_free_codes</name> <parameter_list>(<parameter><decl><type><name>RBinWasmCodeEntry</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>locals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>get_entries_from_section</name> <parameter_list>(<parameter><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinWasmSection</name> <modifier>*</modifier></type><name>sec</name></decl></parameter>, <parameter><decl><type><name>ParseEntryFcn</name></type> <name>parse_entry</name></decl></parameter>, <parameter><decl><type><name>RListFree</name></type> <name>free_entry</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>sec</name> <operator>&amp;&amp;</operator> <name>bin</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free_entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>sec</name><operator>-&gt;</operator><name>payload_data</name></name></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>max</name> <init>= <expr><call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>sec</name><operator>-&gt;</operator><name>payload_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>max</name> <operator>&lt;</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>max</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>&lt;</operator> <name><name>sec</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>parse_entry</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_entry</name> <argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[wasm] error: beach reading entries for section %s\n"</literal></expr></argument>, <argument><expr><name><name>sec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>parse_type_entry</name> <parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinWasmTypeEntry</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinWasmTypeEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u7_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>form</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>param_count</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>count</name> <init>= <expr><ternary><condition><expr><name>ptr</name></expr> ?</condition><then> <expr><name><name>ptr</name><operator>-&gt;</operator><name>param_count</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>count</name> <operator>&lt;=</operator> <name>max</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ptr</name><operator>-&gt;</operator><name>param_types</name></name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>r_bin_wasm_value_type_t</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_s7_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>(</operator><name>st8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>param_types</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u1_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>return_count</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>return_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>return_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_s7_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>(</operator><name>st8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>return_type</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ptr</name></expr>;</return>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>r_bin_wasm_free_types</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>parse_import_entry</name> <parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinWasmImportEntry</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinWasmImportEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>module_len</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>consume_str_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>module_len</name></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>module_str</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>module_len</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>field_len</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>consume_str_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>field_len</name></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>field_str</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>field_len</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u7_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>kind</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>type_f</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_s7_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>(</operator><name>st8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>type_t</name><operator>.</operator><name>elem_type</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_limits_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>type_t</name><operator>.</operator><name>limits</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_limits_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>type_m</name><operator>.</operator><name>limits</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_s7_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>(</operator><name>st8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>type_g</name><operator>.</operator><name>content_type</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u1_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>type_g</name><operator>.</operator><name>mutability</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></switch>

<return>return <expr><name>ptr</name></expr>;</return>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>parse_export_entry</name> <parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinWasmExportEntry</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinWasmExportEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>field_len</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>consume_str_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>field_len</name></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>field_str</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>field_len</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u7_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ptr</name></expr>;</return>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>parse_code_entry</name> <parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinWasmCodeEntry</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinWasmCodeEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>body_size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>j</name> <init>= <expr><call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>ptr</name><operator>-&gt;</operator><name>body_size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>max</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>local_count</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>consume_locals_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>local_count</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>body_size</name></name> <operator>-</operator> <name><name>ptr</name><operator>-&gt;</operator><name>code</name></name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>R_BUF_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>byte</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>byte</name></name> <operator>!=</operator> <name>R_BIN_WASM_END_OF_CODE</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ptr</name></expr>;</return>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>r_bin_wasm_free_codes</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>parse_data_entry</name> <parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinWasmDataEntry</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinWasmDataEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ptr</name><operator>-&gt;</operator><name>offset</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>consume_init_expr_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>R_BIN_WASM_END_OF_CODE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>R_BUF_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ptr</name></expr>;</return>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>parse_namemap</name> <parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>RIDStorage</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_wasm_name_t</name></name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <name>r_bin_wasm_name_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>name</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_str_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>name</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>name</name><operator>-&gt;</operator><name>name</name><index>[<expr><name><name>name</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_id_storage_add</name> <argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>parse_custom_name_entry</name> <parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinWasmCustomNameEntry</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinWasmCustomNameEntry</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u7_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<switch>switch <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_BIN_WASM_NAMETYPE_Module</name></expr>:</case>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>mod_name</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <name>r_bin_wasm_name_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ptr</name><operator>-&gt;</operator><name>mod_name</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>mod_name</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_str_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>mod_name</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>ptr</name><operator>-&gt;</operator><name>mod_name</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>mod_name</name><operator>-&gt;</operator><name>name</name><index>[<expr><name><name>ptr</name><operator>-&gt;</operator><name>mod_name</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_BIN_WASM_NAMETYPE_Function</name></expr>:</case>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinWasmCustomNameFunctionNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ptr</name><operator>-&gt;</operator><name>func</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>names</name></name> <operator>=</operator> <call><name>r_id_storage_new</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>UT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ptr</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>names</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_namemap</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>names</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>R_BIN_WASM_NAMETYPE_Local</name></expr>:</case>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>local</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinWasmCustomNameLocalNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ptr</name><operator>-&gt;</operator><name>local</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>local</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>local</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>local</name><operator>-&gt;</operator><name>locals</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>local</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RBinWasmCustomNameLocalName</name> <modifier>*</modifier></type><name>local_name</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinWasmCustomNameLocalName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>local_name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>local</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>local_name</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>local</name><operator>-&gt;</operator><name>locals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>local</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>local_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>local_name</name><operator>-&gt;</operator><name>names</name></name> <operator>=</operator> <call><name>r_id_storage_new</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>UT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>local_name</name><operator>-&gt;</operator><name>names</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>local</name><operator>-&gt;</operator><name>locals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>local</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>local_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_namemap</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name><name>local_name</name><operator>-&gt;</operator><name>names</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>local_name</name><operator>-&gt;</operator><name>names_count</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_id_storage_free</name> <argument_list>(<argument><expr><name><name>local_name</name><operator>-&gt;</operator><name>names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>local</name><operator>-&gt;</operator><name>locals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>local</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>local_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>local</name><operator>-&gt;</operator><name>locals</name></name></expr></argument>, <argument><expr><name>local_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>local_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>ptr</name></expr>;</return>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>parse_memory_entry</name> <parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinWasmMemoryEntry</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinWasmMemoryEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_limits_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>limits</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ptr</name></expr>;</return>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>parse_table_entry</name> <parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinWasmTableEntry</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinWasmTableEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_s7_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>(</operator><name>st8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>element_type</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_limits_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>limits</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ptr</name></expr>;</return>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>parse_global_entry</name> <parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinWasmGlobalEntry</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinWasmGlobalEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u7_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>content_type</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u1_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>mutability</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_init_expr_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>R_BIN_WASM_END_OF_CODE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ptr</name></expr>;</return>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>parse_element_entry</name> <parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinWasmElementEntry</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinWasmElementEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_init_expr_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>R_BIN_WASM_END_OF_CODE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>num_elem</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>max</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>num_elem</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>ptr</name></expr>;</return>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_bin_wasm_get_type_entries</name> <parameter_list>(<parameter><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinWasmSection</name> <modifier>*</modifier></type><name>sec</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>get_entries_from_section</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><name>parse_type_entry</name></expr></argument>, <argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_bin_wasm_free_types</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_bin_wasm_get_import_entries</name> <parameter_list>(<parameter><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinWasmSection</name> <modifier>*</modifier></type><name>sec</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>get_entries_from_section</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><name>parse_import_entry</name></expr></argument>, <argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_bin_wasm_get_export_entries</name> <parameter_list>(<parameter><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinWasmSection</name> <modifier>*</modifier></type><name>sec</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>get_entries_from_section</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><name>parse_export_entry</name></expr></argument>, <argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_bin_wasm_get_code_entries</name> <parameter_list>(<parameter><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinWasmSection</name> <modifier>*</modifier></type><name>sec</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>get_entries_from_section</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><name>parse_code_entry</name></expr></argument>, <argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_bin_wasm_free_codes</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_bin_wasm_get_data_entries</name> <parameter_list>(<parameter><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinWasmSection</name> <modifier>*</modifier></type><name>sec</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>get_entries_from_section</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><name>parse_data_entry</name></expr></argument>, <argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBinWasmStartEntry</name> <modifier>*</modifier></type><name>r_bin_wasm_get_start</name> <parameter_list>(<parameter><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinWasmSection</name> <modifier>*</modifier></type><name>sec</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinWasmStartEntry</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinWasmStartEntry</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>sec</name><operator>-&gt;</operator><name>payload_data</name></name></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>max</name> <init>= <expr><call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>sec</name><operator>-&gt;</operator><name>payload_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>max</name> <operator>&lt;</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ptr</name></expr>;</return>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[wasm] error: beach start\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_bin_wasm_get_memory_entries</name> <parameter_list>(<parameter><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinWasmSection</name> <modifier>*</modifier></type><name>sec</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>get_entries_from_section</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><name>parse_memory_entry</name></expr></argument>, <argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_bin_wasm_get_table_entries</name> <parameter_list>(<parameter><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinWasmSection</name> <modifier>*</modifier></type><name>sec</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>get_entries_from_section</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><name>parse_table_entry</name></expr></argument>, <argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_bin_wasm_get_global_entries</name> <parameter_list>(<parameter><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinWasmSection</name> <modifier>*</modifier></type><name>sec</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>get_entries_from_section</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><name>parse_global_entry</name></expr></argument>, <argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_bin_wasm_get_element_entries</name> <parameter_list>(<parameter><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinWasmSection</name> <modifier>*</modifier></type><name>sec</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>get_entries_from_section</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><name>parse_element_entry</name></expr></argument>, <argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>r_bin_wasm_get_custom_name_entries</name> <parameter_list>(<parameter><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinWasmSection</name> <modifier>*</modifier></type><name>sec</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>sec</name><operator>-&gt;</operator><name>payload_data</name></name></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>max</name> <init>= <expr><name><name>sec</name><operator>-&gt;</operator><name>payload_data</name></name> <operator>+</operator> <name><name>sec</name><operator>-&gt;</operator><name>payload_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&gt;</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RBinWasmCustomNameEntry</name> <modifier>*</modifier></type><name>nam</name> <init>= <expr><call><name>parse_custom_name_entry</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nam</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>nam</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>r_bin_wasm_init</name> <parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinWasmObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>r_buf_ref</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name> <operator>=</operator> <call><name>r_bin_wasm_get_sections</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>g_types</name></name> <operator>=</operator> <call><name>r_bin_wasm_get_types</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>g_imports</name></name> <operator>=</operator> <call><name>r_bin_wasm_get_imports</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>g_exports</name></name> <operator>=</operator> <call><name>r_bin_wasm_get_exports</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>g_tables</name></name> <operator>=</operator> <call><name>r_bin_wasm_get_tables</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>g_memories</name></name> <operator>=</operator> <call><name>r_bin_wasm_get_memories</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>g_globals</name></name> <operator>=</operator> <call><name>r_bin_wasm_get_globals</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>g_codes</name></name> <operator>=</operator> <call><name>r_bin_wasm_get_codes</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>g_datas</name></name> <operator>=</operator> <call><name>r_bin_wasm_get_datas</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>g_names</name></name> <operator>=</operator> <call><name>r_bin_wasm_get_custom_names</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>entrypoint</name></name> <operator>=</operator> <call><name>r_bin_wasm_get_entrypoint</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bin</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>r_bin_wasm_destroy</name> <parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bf</name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bin</name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>g_types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>g_imports</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>g_exports</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>g_tables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>g_memories</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>g_globals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>g_codes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>g_datas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinWasmCustomNameEntry</name> <modifier>*</modifier></type><name>nam</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;g_names</argument>, <argument>iter</argument>, <argument>nam</argument>)</argument_list></macro> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>nam</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_BIN_WASM_NAMETYPE_Module</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>nam</name><operator>-&gt;</operator><name>mod_name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>nam</name><operator>-&gt;</operator><name>mod_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>R_BIN_WASM_NAMETYPE_Function</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>nam</name><operator>-&gt;</operator><name>func</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_id_storage_free</name> <argument_list>(<argument><expr><name><name>nam</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>R_BIN_WASM_NAMETYPE_Local</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>nam</name><operator>-&gt;</operator><name>local</name></name> <operator>&amp;&amp;</operator> <name><name>nam</name><operator>-&gt;</operator><name>local</name><operator>-&gt;</operator><name>locals</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinWasmCustomNameLocalName</name> <modifier>*</modifier></type><name>local</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>nam-&gt;local-&gt;locals</argument>, <argument>iter</argument>, <argument>local</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>local</name><operator>-&gt;</operator><name>names</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_id_storage_free</name> <argument_list>(<argument><expr><name><name>local</name><operator>-&gt;</operator><name>names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>nam</name><operator>-&gt;</operator><name>local</name><operator>-&gt;</operator><name>locals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>g_names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>g_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>r_bin_wasm_get_sections</name> <parameter_list>(<parameter><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinWasmSection</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>max</name> <init>= <expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>max</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinWasmSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u7_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>ut64</name><operator>)</operator><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>max</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_BIN_WASM_SECTION_CUSTOM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>name_len</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>consume_str_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name_len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>name_len</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>R_BIN_WASM_SECTION_TYPE</name></expr>:</case>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name_len</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_BIN_WASM_SECTION_IMPORT</name></expr>:</case>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"import"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name_len</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_BIN_WASM_SECTION_FUNCTION</name></expr>:</case>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name_len</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_BIN_WASM_SECTION_TABLE</name></expr>:</case>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name_len</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_BIN_WASM_SECTION_MEMORY</name></expr>:</case>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name_len</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_BIN_WASM_SECTION_GLOBAL</name></expr>:</case>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"global"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name_len</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_BIN_WASM_SECTION_EXPORT</name></expr>:</case>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"export"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name_len</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_BIN_WASM_SECTION_START</name></expr>:</case>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name_len</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_BIN_WASM_SECTION_ELEMENT</name></expr>:</case>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"element"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name_len</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_BIN_WASM_SECTION_CODE</name></expr>:</case>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"code"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name_len</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_BIN_WASM_SECTION_DATA</name></expr>:</case>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name_len</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[wasm] error: unkown section id: %d\n"</literal></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>R_BUF_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>R_BIN_WASM_SECTION_START</name> <operator>&amp;&amp;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>R_BIN_WASM_SECTION_CUSTOM</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>consume_u32_r</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>payload_data</name></name> <operator>=</operator> <call><name>r_buf_tell</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>payload_len</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <operator>(</operator><name><name>ptr</name><operator>-&gt;</operator><name>payload_data</name></name> <operator>-</operator> <name><name>ptr</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>payload_len</name></name> <operator>&gt;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>payload_len</name></name></expr></argument>, <argument><expr><name>R_BUF_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[wasm] error: beach sections\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ut32</name></type> <name>r_bin_wasm_get_entrypoint</name> <parameter_list>(<parameter><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>secs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinWasmStartEntry</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinWasmSection</name> <modifier>*</modifier></type><name>sec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinWasmCodeEntry</name> <modifier>*</modifier></type><name>func</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>entrypoint</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>entrypoint</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>g_start</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>g_start</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>secs</name> <operator>=</operator> <call><name>r_bin_wasm_get_sections_by_id</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name></expr></argument>, <argument><expr><name>R_BIN_WASM_SECTION_START</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>sec</name> <operator>=</operator> <operator>(</operator><name>RBinWasmSection</name> <operator>*</operator><operator>)</operator><call><name>r_list_first</name> <argument_list>(<argument><expr><name>secs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>r_bin_wasm_get_start</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>g_start</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>g_codes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>func</name> <operator>=</operator> <call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>g_codes</name></name></expr></argument>, <argument><expr><name><name>start</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ut32</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><name>func</name></expr> ?</condition><then> <expr><name><name>func</name><operator>-&gt;</operator><name>code</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>r_bin_wasm_get_imports</name> <parameter_list>(<parameter><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinWasmSection</name> <modifier>*</modifier></type><name>import</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>imports</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>g_imports</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>g_imports</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imports</name> <operator>=</operator> <call><name>r_bin_wasm_get_sections_by_id</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name></expr></argument>, <argument><expr><name>R_BIN_WASM_SECTION_IMPORT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>import</name> <operator>=</operator> <operator>(</operator><name>RBinWasmSection</name> <operator>*</operator><operator>)</operator><call><name>r_list_first</name> <argument_list>(<argument><expr><name>imports</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>imports</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>g_imports</name></name> <operator>=</operator> <call><name>r_bin_wasm_get_import_entries</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>import</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>imports</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>g_imports</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>r_bin_wasm_get_exports</name> <parameter_list>(<parameter><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinWasmSection</name> <modifier>*</modifier></type><name>export</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>exports</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>g_exports</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>g_exports</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>exports</name> <operator>=</operator> <call><name>r_bin_wasm_get_sections_by_id</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name></expr></argument>, <argument><expr><name>R_BIN_WASM_SECTION_EXPORT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>export</name> <operator>=</operator> <operator>(</operator><name>RBinWasmSection</name> <operator>*</operator><operator>)</operator><call><name>r_list_first</name> <argument_list>(<argument><expr><name>exports</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>exports</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>g_exports</name></name> <operator>=</operator> <call><name>r_bin_wasm_get_export_entries</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>export</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>exports</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>g_exports</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>r_bin_wasm_get_types</name> <parameter_list>(<parameter><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinWasmSection</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>types</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>g_types</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>g_types</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>types</name> <operator>=</operator> <call><name>r_bin_wasm_get_sections_by_id</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name></expr></argument>, <argument><expr><name>R_BIN_WASM_SECTION_TYPE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>type</name> <operator>=</operator> <operator>(</operator><name>RBinWasmSection</name> <operator>*</operator><operator>)</operator><call><name>r_list_first</name> <argument_list>(<argument><expr><name>types</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>g_types</name></name> <operator>=</operator> <call><name>r_bin_wasm_get_type_entries</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>g_types</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>r_bin_wasm_get_tables</name> <parameter_list>(<parameter><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinWasmSection</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>tables</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>g_tables</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>g_tables</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tables</name> <operator>=</operator> <call><name>r_bin_wasm_get_sections_by_id</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name></expr></argument>, <argument><expr><name>R_BIN_WASM_SECTION_TABLE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>table</name> <operator>=</operator> <operator>(</operator><name>RBinWasmSection</name> <operator>*</operator><operator>)</operator><call><name>r_list_first</name> <argument_list>(<argument><expr><name>tables</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>g_tables</name></name> <operator>=</operator> <call><name>r_bin_wasm_get_table_entries</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>g_tables</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>r_bin_wasm_get_memories</name> <parameter_list>(<parameter><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinWasmSection</name> <modifier>*</modifier></type><name>memory</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>memories</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>g_memories</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>g_memories</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>memories</name> <operator>=</operator> <call><name>r_bin_wasm_get_sections_by_id</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name></expr></argument>, <argument><expr><name>R_BIN_WASM_SECTION_MEMORY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>memory</name> <operator>=</operator> <operator>(</operator><name>RBinWasmSection</name> <operator>*</operator><operator>)</operator><call><name>r_list_first</name> <argument_list>(<argument><expr><name>memories</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>memories</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>g_memories</name></name> <operator>=</operator> <call><name>r_bin_wasm_get_memory_entries</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>memories</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>g_memories</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>r_bin_wasm_get_globals</name> <parameter_list>(<parameter><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinWasmSection</name> <modifier>*</modifier></type><name>global</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>globals</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>g_globals</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>g_globals</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>globals</name> <operator>=</operator> <call><name>r_bin_wasm_get_sections_by_id</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name></expr></argument>, <argument><expr><name>R_BIN_WASM_SECTION_GLOBAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>global</name> <operator>=</operator> <operator>(</operator><name>RBinWasmSection</name> <operator>*</operator><operator>)</operator><call><name>r_list_first</name> <argument_list>(<argument><expr><name>globals</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>globals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>g_globals</name></name> <operator>=</operator> <call><name>r_bin_wasm_get_global_entries</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>global</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>globals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>g_globals</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>r_bin_wasm_get_elements</name> <parameter_list>(<parameter><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinWasmSection</name> <modifier>*</modifier></type><name>element</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>elements</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>g_elements</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>g_elements</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>elements</name> <operator>=</operator> <call><name>r_bin_wasm_get_sections_by_id</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name></expr></argument>, <argument><expr><name>R_BIN_WASM_SECTION_ELEMENT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>element</name> <operator>=</operator> <operator>(</operator><name>RBinWasmSection</name> <operator>*</operator><operator>)</operator><call><name>r_list_first</name> <argument_list>(<argument><expr><name>elements</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>g_elements</name></name> <operator>=</operator> <call><name>r_bin_wasm_get_element_entries</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>g_elements</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>r_bin_wasm_get_codes</name> <parameter_list>(<parameter><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinWasmSection</name> <modifier>*</modifier></type><name>code</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>codes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>g_codes</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>g_codes</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>codes</name> <operator>=</operator> <call><name>r_bin_wasm_get_sections_by_id</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name></expr></argument>, <argument><expr><name>R_BIN_WASM_SECTION_CODE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>code</name> <operator>=</operator> <operator>(</operator><name>RBinWasmSection</name> <operator>*</operator><operator>)</operator><call><name>r_list_first</name> <argument_list>(<argument><expr><name>codes</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>g_codes</name></name> <operator>=</operator> <call><name>r_bin_wasm_get_code_entries</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>g_codes</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>r_bin_wasm_get_datas</name> <parameter_list>(<parameter><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinWasmSection</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>datas</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>g_datas</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>g_datas</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>datas</name> <operator>=</operator> <call><name>r_bin_wasm_get_sections_by_id</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name></expr></argument>, <argument><expr><name>R_BIN_WASM_SECTION_DATA</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>RBinWasmSection</name> <operator>*</operator><operator>)</operator><call><name>r_list_first</name> <argument_list>(<argument><expr><name>datas</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>datas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>g_datas</name></name> <operator>=</operator> <call><name>r_bin_wasm_get_data_entries</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>datas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>g_datas</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>r_bin_wasm_get_custom_names</name> <parameter_list>(<parameter><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinWasmSection</name> <modifier>*</modifier></type><name>cust</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>customs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bin</name> <operator>&amp;&amp;</operator> <name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>g_names</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>g_names</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>customs</name> <operator>=</operator> <call><name>r_bin_wasm_get_sections_by_id</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>g_sections</name></name></expr></argument>, <argument><expr><name>R_BIN_WASM_SECTION_CUSTOM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cust</name> <operator>=</operator> <operator>(</operator><name>RBinWasmSection</name> <operator>*</operator><operator>)</operator><call><name>r_list_first</name> <argument_list>(<argument><expr><name>customs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>strncmp</name> <argument_list>(<argument><expr><name><name>cust</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>customs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>g_names</name></name> <operator>=</operator> <call><name>r_bin_wasm_get_custom_name_entries</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>cust</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>customs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>g_names</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_bin_wasm_get_function_name</name> <parameter_list>(<parameter><decl><type><name>RBinWasmObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bin</name> <operator>&amp;&amp;</operator> <name><name>bin</name><operator>-&gt;</operator><name>g_names</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinWasmCustomNameEntry</name> <modifier>*</modifier></type><name>nam</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;g_names</argument>, <argument>iter</argument>, <argument>nam</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>nam</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_BIN_WASM_NAMETYPE_Function</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_wasm_name_t</name></name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>r_id_storage_get</name> <argument_list>(<argument><expr><name><name>nam</name><operator>-&gt;</operator><name>func</name><operator>-&gt;</operator><name>names</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>n</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

</unit>
