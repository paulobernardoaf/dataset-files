<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\format\le\le_specs.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <block>{

<decl><name>UNUSED_ENTRY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>ENTRY16</name></decl>,

<decl><name>CALLGATE</name></decl>,

<decl><name>ENTRY32</name></decl>,

<decl><name>FORWARDER</name></decl>,

}</block></enum></type> <name>LE_entry_bundle_type</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>LE_RT_POINTER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>LE_RT_BITMAP</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 

<decl><name>LE_RT_MENU</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 

<decl><name>LE_RT_DIALOG</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 

<decl><name>LE_RT_STRING</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>, 

<decl><name>LE_RT_FONTDIR</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>, 

<decl><name>LE_RT_FONT</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>, 

<decl><name>LE_RT_ACCELTABLE</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, 

<decl><name>LE_RT_RCDATA</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>, 

<decl><name>LE_RT_MESSAGE</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>, 

<decl><name>LE_RT_DLGINCLUDE</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>, 

<decl><name>LE_RT_VKEYTBL</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>, 

<decl><name>LE_RT_KEYTBL</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>, 

<decl><name>LE_RT_CHARTBL</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>, 

<decl><name>LE_RT_DISPLAYINFO</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>, 

<decl><name>LE_RT_FKASHORT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>, 

<decl><name>LE_RT_FKALONG</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>, 

<decl><name>LE_RT_HELPTABLE</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>, 

<decl><name>LE_RT_HELPSUBTABLE</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>, 

<decl><name>LE_RT_FDDIR</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>, 

<decl><name>LE_RT_FD</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>, 

}</block></enum></type> <name>LE_resource_type</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENTRY_PARAMETER_TYPING_PRESENT</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>LE_entry_bundle_header_s</name> <block>{

<decl_stmt><decl><type><name>ut8</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut16</name></type> <name>objnum</name></decl>;</decl_stmt> 

}</block></struct></type> <name>LE_entry_bundle_header</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENTRY_EXPORTED</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENTRY_PARAM_COUNT_MASK</name></cpp:macro> <cpp:value>0xF8</cpp:value></cpp:define>

<typedef>typedef <macro><name>R_PACKED</name> <argument_list>(<argument>union LE_entry_bundle_entry_u {

R_PACKED (struct {

ut8 flags; 

ut16 offset; 

}) entry_16;

R_PACKED (struct {

ut8 flags; 

ut16 offset; 

ut16 callgate_sel; 

}) callgate;

R_PACKED (struct {

ut8 flags; 

ut32 offset; 

}) entry_32;

R_PACKED (struct {

ut8 flags; 

ut16 import_ord; 

ut32 offset; 

}) forwarder;

}</argument>)</argument_list></macro> <expr_stmt><expr><name>LE_entry_bundle_entry</name></expr>;</expr_stmt></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_SOURCE_TYPE_MASK</name></cpp:macro> <cpp:value>0xF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_SOURCE_ALIAS</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_SOURCE_LIST</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{

<decl><name>BYTEFIXUP</name></decl>,

<decl><name>UNDEFINED1</name></decl>,

<decl><name>SELECTOR16</name></decl>,

<decl><name>POINTER32</name></decl>, 

<decl><name>UNDEFINED2</name></decl>,

<decl><name>OFFSET16</name></decl>,

<decl><name>POINTER48</name></decl>, 

<decl><name>OFFSET32</name></decl>,

<decl><name>SELFOFFSET32</name></decl>,

}</block></enum></type> <name>LE_fixup_source_type</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_TARGET_TYPE_MASK</name></cpp:macro> <cpp:value>0x3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_TARGET_ADDITIVE</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_TARGET_CHAIN</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_TARGET_OFF32</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_TARGET_ADD32</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_TARGET_ORD16</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_TARGET_ORD8</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define> 

<typedef>typedef <type><enum>enum <block>{

<decl><name>INTERNAL</name></decl>,

<decl><name>IMPORTORD</name></decl>,

<decl><name>IMPORTNAME</name></decl>,

<decl><name>INTERNALENTRY</name></decl>

}</block></enum></type> <name>LE_fixup_record_type</name>;</typedef>

<typedef>typedef <type><struct>struct <name>LE_fixup_record_header_s</name> <block>{

<decl_stmt><decl><type><name>ut8</name></type> <name>source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>target</name></decl>;</decl_stmt>

}</block></struct></type> <name>LE_fixup_record_header</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_READABLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_WRITABLE</name></cpp:macro> <cpp:value>1 &lt;&lt; 1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_EXECUTABLE</name></cpp:macro> <cpp:value>1 &lt;&lt; 2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_RESOURCE</name></cpp:macro> <cpp:value>1 &lt;&lt; 3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_DISCARTABLE</name></cpp:macro> <cpp:value>1 &lt;&lt; 4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_SHARED</name></cpp:macro> <cpp:value>1 &lt;&lt; 5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_PRELOAD</name></cpp:macro> <cpp:value>1 &lt;&lt; 6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_INVALID</name></cpp:macro> <cpp:value>1 &lt;&lt; 7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_ZEROED</name></cpp:macro> <cpp:value>1 &lt;&lt; 8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_RESIDENT</name></cpp:macro> <cpp:value>1 &lt;&lt; 9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_CONTIGUOUS</name></cpp:macro> <cpp:value>O_RESIDENT | O_ZEROED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_LOCKABLE</name></cpp:macro> <cpp:value>1 &lt;&lt; 10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_RESERVED</name></cpp:macro> <cpp:value>1 &lt;&lt; 11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_ALIASED</name></cpp:macro> <cpp:value>1 &lt;&lt; 12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_BIG_BIT</name></cpp:macro> <cpp:value>1 &lt;&lt; 13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_CODE</name></cpp:macro> <cpp:value>1 &lt;&lt; 14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_IO_PRIV</name></cpp:macro> <cpp:value>1 &lt;&lt; 15</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>LE_object_entry_s</name> <block>{

<decl_stmt><decl><type><name>ut32</name></type> <name>virtual_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>reloc_base_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>page_tbl_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>page_tbl_entries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>reserved</name></decl>;</decl_stmt>

}</block></struct></type> <name>LE_object_entry</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_LEGAL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_ITERATED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_INVALID</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_ZEROED</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_RANGE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_COMPRESSED</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>LE_object_page_entry_s</name> <block>{

<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut16</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>LE_object_page_entry</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PP_LIB_INIT</name></cpp:macro> <cpp:value>1 &lt;&lt; 2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_SYS_DLL</name></cpp:macro> <cpp:value>1 &lt;&lt; 3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_INTERNAL_FIXUP</name></cpp:macro> <cpp:value>1 &lt;&lt; 4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_EXTERNAL_FIXUP</name></cpp:macro> <cpp:value>1 &lt;&lt; 5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PM_WINDOWING_INCOMP</name></cpp:macro> <cpp:value>1 &lt;&lt; 8</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PM_WINDOWING_COMPAT</name></cpp:macro> <cpp:value>1 &lt;&lt; 9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_USES_PM_WINDOWING</name></cpp:macro> <cpp:value>M_PM_WINDOWING_INCOMP | M_PM_WINDOWING_COMPAT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_NOT_LOADABLE</name></cpp:macro> <cpp:value>1 &lt;&lt; 13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_TYPE_MASK</name></cpp:macro> <cpp:value>0x38000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_TYPE_EXE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_TYPE_DLL</name></cpp:macro> <cpp:value>0x08000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_TYPE_PM_DLL</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_TYPE_PDD</name></cpp:macro> <cpp:value>0x20000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_TYPE_VDD</name></cpp:macro> <cpp:value>0x28000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_MP_UNSAFE</name></cpp:macro> <cpp:value>1 &lt;&lt; 19</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PP_LIB_TERM</name></cpp:macro> <cpp:value>1 &lt;&lt; 30</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>LE_image_header_s</name> <block>{ 

<decl_stmt><decl><type><name>ut8</name></type> <name><name>magic</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut8</name></type> <name>border</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut8</name></type> <name>worder</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>level</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut16</name></type> <name>cpu</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut16</name></type> <name>os</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>ver</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>mflags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>mpages</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>startobj</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>eip</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>stackobj</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>esp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>pagesize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>pageshift</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>fixupsize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>fixupsum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>ldrsize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>ldrsum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>objtab</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>objcnt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>objmap</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>itermap</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>rsrctab</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>rsrccnt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>restab</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>enttab</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>dirtab</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>dircnt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>fpagetab</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>frectab</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>impmod</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>impmodcnt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>impproc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>pagesum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>datapage</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>preload</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>nrestab</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>cbnrestab</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>nressum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>autodata</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>debuginfo</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>debuglen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>instpreload</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>instdemand</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>heapsize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>stacksize</name></decl>;</decl_stmt> 

}</block></struct></type> <name>LE_image_header</name>;</typedef>

</unit>
