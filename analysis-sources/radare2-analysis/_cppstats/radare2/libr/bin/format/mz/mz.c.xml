<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\format\mz\mz.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mz.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_list.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>r_bin_mz_va_to_la</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>segment</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>segment</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>offset</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>r_bin_mz_la_to_pa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>r_bin_mz_obj_t</name></name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>la</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>la</name> <operator>+</operator> <operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>dos_header</name><operator>-&gt;</operator><name>header_paragraphs</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>RBinAddr</name> <modifier>*</modifier></type><name>r_bin_mz_get_entrypoint</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>r_bin_mz_obj_t</name></name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>MZ_image_dos_header</name> <modifier>*</modifier></type><name>mz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>la</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>entrypoint</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>dos_header</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mz</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>dos_header</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>la</name> <operator>=</operator> <call><name>r_bin_mz_va_to_la</name> <argument_list>(<argument><expr><name><name>mz</name><operator>-&gt;</operator><name>cs</name></name></expr></argument>, <argument><expr><name><name>mz</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>la</name> <operator>&amp;=</operator> <literal type="number">0xfffff</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>la</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>load_module_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: entry point outside load module\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>entrypoint</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>entrypoint</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>entrypoint</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>la</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entrypoint</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <call><name>r_bin_mz_la_to_pa</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>la</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>entrypoint</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_sections</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>RBinSection</name> <modifier>*</modifier></type><name>s_a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s_b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s_a</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s_b</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<return>return <expr><name><name>s_a</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>-</operator> <name><name>s_b</name><operator>-&gt;</operator><name>vaddr</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBinSection</name> <modifier>*</modifier></type><name>r_bin_mz_init_section</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>r_bin_mz_obj_t</name></name> <modifier>*</modifier></type><name>bin</name></decl></parameter>,

<parameter><decl><type><name>ut64</name></type> <name>laddr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>section</name></decl>;</decl_stmt>

<expr_stmt><expr><name>section</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>section</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>laddr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>section</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RList</name> <modifier>*</modifier></type><name>r_bin_mz_get_segments</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>r_bin_mz_obj_t</name></name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>seg_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>section</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MZ_image_relocation_entry</name> <modifier>*</modifier></type><name>relocs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num_relocs</name></decl>, <decl><type ref="prev"/><name>section_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>ss</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>dos_header</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>seg_list</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>seg_list</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>section</name> <operator>=</operator> <call><name>r_bin_mz_init_section</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>section</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>err_out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_add_sorted</name> <argument_list>(<argument><expr><name>seg_list</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>cmp_sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>relocs</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>relocation_entries</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>num_relocs</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>dos_header</name><operator>-&gt;</operator><name>num_relocs</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_relocs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RBinSection</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>laddr</name></decl>, <decl><type ref="prev"/><name>paddr</name></decl>, <decl><type ref="prev"/><name>section_laddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>curr_seg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>laddr</name> <operator>=</operator> <call><name>r_bin_mz_va_to_la</name> <argument_list>(<argument><expr><name><name>relocs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>segment</name></expr></argument>, <argument><expr><name><name>relocs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>laddr</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>load_module_size</name></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>paddr</name> <operator>=</operator> <call><name>r_bin_mz_la_to_pa</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>laddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>paddr</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curr_seg</name> <operator>=</operator> <call><name>r_buf_read_le16_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>paddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>section_laddr</name> <operator>=</operator> <call><name>r_bin_mz_va_to_la</name> <argument_list>(<argument><expr><name>curr_seg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>section_laddr</name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>load_module_size</name></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>vaddr</name></name> <operator>=</operator> <name>section_laddr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_list_find</name> <argument_list>(<argument><expr><name>seg_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>cmp_sections</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>section</name> <operator>=</operator> <call><name>r_bin_mz_init_section</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>section_laddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>section</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>err_out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_add_sorted</name> <argument_list>(<argument><expr><name>seg_list</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>cmp_sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ss</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>dos_header</name><operator>-&gt;</operator><name>ss</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_bin_mz_va_to_la</name> <argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>load_module_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>section</name> <operator>=</operator> <call><name>r_bin_mz_init_section</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><call><name>r_bin_mz_va_to_la</name> <argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>section</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>err_out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_add_sorted</name> <argument_list>(<argument><expr><name>seg_list</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>cmp_sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>section_number</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>seg_list</argument>, <argument>iter</argument>, <argument>section</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"seg_%03d"</literal></expr></argument>, <argument><expr><name>section_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>section_number</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>p_section</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_section</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>section</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>-</operator> <name><name>p_section</name><operator>-&gt;</operator><name>vaddr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_section</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name><name>p_section</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name><name>section</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <call><name>r_bin_mz_la_to_pa</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <call><name>r_str_rwx</name> <argument_list>(<argument><expr><literal type="string">"rwx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>section_number</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name>section</name> <operator>=</operator> <call><name>r_list_get_top</name> <argument_list>(<argument><expr><name>seg_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>load_module_size</name></name> <operator>-</operator> <name><name>section</name><operator>-&gt;</operator><name>vaddr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name><name>section</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<return>return <expr><name>seg_list</name></expr>;</return>

<label><name>err_out</name>:</label>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: alloc (RBinSection)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>seg_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>r_bin_mz_reloc_t</name></name> <modifier>*</modifier></type><name>r_bin_mz_get_relocs</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>r_bin_mz_obj_t</name></name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_relocs</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>dos_header</name><operator>-&gt;</operator><name>num_relocs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MZ_image_relocation_entry</name> <modifier>*</modifier><specifier>const</specifier></type> <name>rel_entry</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>relocation_entries</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_mz_reloc_t</name></name> <modifier>*</modifier></type><name>relocs</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><name>num_relocs</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>relocs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>relocs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: calloc (struct r_bin_mz_reloc_t)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_relocs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>relocs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>vaddr</name> <operator>=</operator> <call><name>r_bin_mz_va_to_la</name> <argument_list>(<argument><expr><name><name>rel_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>segment</name></expr></argument>,

<argument><expr><name><name>rel_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>relocs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>paddr</name> <operator>=</operator> <call><name>r_bin_mz_la_to_pa</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>relocs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>vaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>relocs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>vaddr</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>load_module_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>relocs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>last</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>relocs</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>r_bin_mz_free</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_mz_obj_t</name></name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>bin</name><operator>-&gt;</operator><name>dos_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>bin</name><operator>-&gt;</operator><name>dos_extended_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>bin</name><operator>-&gt;</operator><name>relocation_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_bin_mz_init_hdr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_mz_obj_t</name></name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>relocations_size</name></decl>, <decl><type ref="prev"/><name>dos_file_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MZ_image_dos_header</name> <modifier>*</modifier></type><name>mz</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mz</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>MZ_image_dos_header</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"malloc (MZ_image_dos_header)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>dos_header</name></name> <operator>=</operator> <name>mz</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>mz</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>mz</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: read (MZ_image_dos_header)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mz</name><operator>-&gt;</operator><name>blocks_in_file</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dos_file_size</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>mz</name><operator>-&gt;</operator><name>blocks_in_file</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>+</operator>

<name><name>mz</name><operator>-&gt;</operator><name>bytes_in_last_block</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>dos_file_size</name></name> <operator>=</operator> <name>dos_file_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dos_file_size</name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>load_module_size</name></name> <operator>=</operator> <name>dos_file_size</name> <operator>-</operator> <operator>(</operator><name><name>mz</name><operator>-&gt;</operator><name>header_paragraphs</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>relocations_size</name> <operator>=</operator> <name><name>mz</name><operator>-&gt;</operator><name>num_relocs</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>MZ_image_relocation_entry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mz</name><operator>-&gt;</operator><name>reloc_table_offset</name></name> <operator>+</operator> <name>relocations_size</name><operator>)</operator> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mz.initial.cs"</literal></expr></argument>, <argument><expr><name><name>mz</name><operator>-&gt;</operator><name>cs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mz.initial.ip"</literal></expr></argument>, <argument><expr><name><name>mz</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mz.initial.ss"</literal></expr></argument>, <argument><expr><name><name>mz</name><operator>-&gt;</operator><name>ss</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mz.initial.sp"</literal></expr></argument>, <argument><expr><name><name>mz</name><operator>-&gt;</operator><name>sp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mz.overlay_number"</literal></expr></argument>, <argument><expr><name><name>mz</name><operator>-&gt;</operator><name>overlay_number</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mz.dos_header.offset"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mz.dos_header.format"</literal></expr></argument>, <argument><expr><literal type="string">"[2]zwwwwwwwwwwwww"</literal>

<literal type="string">" signature bytes_in_last_block blocks_in_file num_relocs "</literal>

<literal type="string">" header_paragraphs min_extra_paragraphs max_extra_paragraphs "</literal>

<literal type="string">" ss sp checksum ip cs reloc_table_offset overlay_number "</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>dos_extended_header_size</name></name> <operator>=</operator> <name><name>mz</name><operator>-&gt;</operator><name>reloc_table_offset</name></name> <operator>-</operator>

<sizeof>sizeof <argument_list>(<argument><expr><name>MZ_image_dos_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>dos_extended_header_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>dos_extended_header</name></name> <operator>=</operator>

<call><name>malloc</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>dos_extended_header_size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"malloc (dos extended header)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>MZ_image_dos_header</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>bin</name><operator>-&gt;</operator><name>dos_extended_header</name></name></expr></argument>,

<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>dos_extended_header_size</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: read (dos extended header)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>relocations_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>relocation_entries</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>relocations_size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"malloc (dos relocation entries)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>dos_header</name><operator>-&gt;</operator><name>reloc_table_offset</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>bin</name><operator>-&gt;</operator><name>relocation_entries</name></name></expr></argument>, <argument><expr><name>relocations_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: read (dos relocation entries)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>relocation_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_bin_mz_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_mz_obj_t</name></name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>dos_header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>dos_extended_header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>relocation_entries</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_bin_mz_init_hdr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: File is not MZ\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>r_bin_mz_obj_t</name></name> <modifier>*</modifier></type><name>r_bin_mz_new</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_mz_obj_t</name></name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <name>r_bin_mz_obj_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>binsz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><call><name>r_file_slurp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>binsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>binsz</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_bin_mz_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>r_buf_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_buf_set_bytes</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_bin_mz_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_bin_mz_init</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_bin_mz_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>bin</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>r_bin_mz_obj_t</name></name> <modifier>*</modifier></type><name>r_bin_mz_new_buf</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_mz_obj_t</name></name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <name>r_bin_mz_obj_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>r_buf_new_with_buf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_bin_mz_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><call><name>r_bin_mz_init</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><name>bin</name></expr></then><else>: <expr><call><name>r_bin_mz_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>RBinAddr</name> <modifier>*</modifier></type><name>r_bin_mz_get_main_vaddr</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_mz_obj_t</name></name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>b</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>r_bin_mz_get_entrypoint</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ZERO_FILL</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Cannot read entry at 0x%16"</literal> <name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xb4</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x30</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">18</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>b</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">12</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x9a</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">17</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x50</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>call_addr</name> <init>= <expr><call><name>r_read_ble16</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>call_seg</name> <init>= <expr><call><name>r_read_ble16</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <call><name>r_bin_mz_va_to_la</name> <argument_list>(<argument><expr><name>call_seg</name></expr></argument>, <argument><expr><name>call_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <call><name>r_bin_mz_la_to_pa</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>entry</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

</unit>
