<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\format\mach0\mach0.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mach0_specs.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FEATURE_SYMLIST</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BIN_MACH0_STRING_LENGTH</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSMAGIC_CODEDIRECTORY</name></cpp:macro> <cpp:value>0xfade0c02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSMAGIC_EMBEDDED_SIGNATURE</name></cpp:macro> <cpp:value>0xfade0cc0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSMAGIC_DETACHED_SIGNATURE</name></cpp:macro> <cpp:value>0xfade0cc1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSMAGIC_ENTITLEMENTS</name></cpp:macro> <cpp:value>0xfade7171</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSMAGIC_REQUIREMENT</name></cpp:macro> <cpp:value>0xfade0c00</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSMAGIC_REQUIREMENTS</name></cpp:macro> <cpp:value>0xfade0c01</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_PAGE_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_HASHTYPE_SHA1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_HASHTYPE_SHA256</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_HASHTYPE_SHA256_TRUNCATED</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_HASH_SIZE_SHA1</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_HASH_SIZE_SHA256</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_HASH_SIZE_SHA256_TRUNCATED</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSSLOT_CODEDIRECTORY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSSLOT_INFOSLOT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSSLOT_REQUIREMENTS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSSLOT_RESOURCEDIR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSSLOT_APPLICATION</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSSLOT_ENTITLEMENTS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSSLOT_CMS_SIGNATURE</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define>

<struct>struct <name>section_t</name> <block>{

<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>vsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>align</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>perm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>R_BIN_MACH0_STRING_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>symbol_t</name> <block>{

<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_imported</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>R_BIN_MACH0_STRING_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>import_t</name> <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>R_BIN_MACH0_STRING_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ord</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>reloc_t</name> <block>{

<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>addend</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ord</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>external</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>pc_relative</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>size</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>addr_t</name> <block>{

<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>haddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>lib_t</name> <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>R_BIN_MACH0_STRING_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>blob_index_t</name> <block>{

<decl_stmt><decl><type><name>ut32</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>blob_t</name> <block>{

<decl_stmt><decl><type><name>ut32</name></type> <name>magic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>length</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>super_blob_t</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>blob_t</name></name></type> <name>blob</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>blob_index_t</name></name></type> <name><name>index</name><index>[]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><name><name>struct</name> <name>MACH0_</name></name></type>(<name>opts_t</name>) <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>verbose</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>header_at</name></decl>;</decl_stmt>

</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name><name>struct</name> <name>MACH0_</name></name></type>(<name>obj_t</name>) <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>mach_header</name></expr></argument>)</argument_list> <name>hdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>segment_command</name></expr></argument>)</argument_list> <modifier>*</modifier><name>segs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>intrp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>compiler</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nsegs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list> <modifier>*</modifier><name>sects</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nsects</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>nlist</name></expr></argument>)</argument_list> <modifier>*</modifier><name>symtab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>symstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>func_start</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>symstrlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nsymtab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name> <modifier>*</modifier></type><name>indirectsyms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nindirectsyms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinImport</name> <modifier>*</modifier><modifier>*</modifier></type><name>imports_by_ord</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>imports_by_ord_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HtPP</name> <modifier>*</modifier></type><name>imports_by_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dysymtab_command</name></name></type> <name>dysymtab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>load_command</name></name></type> <name>main_cmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dyld_info_command</name></name> <modifier>*</modifier></type><name>dyld_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dylib_table_of_contents</name></name> <modifier>*</modifier></type><name>toc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ntoc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>dylib_module</name></expr></argument>)</argument_list> <modifier>*</modifier><name>modtab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nmodtab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>thread_command</name></name></type> <name>thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>signature</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>x86_thread_state32</name></name></type> <name>x86_32</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>x86_thread_state64</name></name></type> <name>x86_64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ppc_thread_state32</name></name></type> <name>ppc_32</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ppc_thread_state64</name></name></type> <name>ppc_64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>arm_thread_state32</name></name></type> <name>arm_32</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>arm_thread_state64</name></name></type> <name>arm_64</name></decl>;</decl_stmt>

}</block> <decl><name>thread_state</name></decl>;</union>

<expr_stmt><expr><call><name>char</name> <argument_list>(<argument><expr><operator>*</operator><name>libs</name></expr></argument>)</argument_list></call><index>[<expr><name>R_BIN_MACH0_STRING_LENGTH</name></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nlibs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>baddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>big_endian</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>os</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_crypto</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_canary</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_retguard</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_sanitizers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_blocks_ext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dbg_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lang</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uuidn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>func_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>verbose</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>header_at</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>

<function_decl><type><name>ut64</name></type> (<modifier>*</modifier><name>va2pa</name>)<parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name><name>struct</name> <name>symbol_t</name></name> <modifier>*</modifier></type><name>symbols</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>main_addr</name></decl>;</decl_stmt>

</block_content>}</block></function><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>void</name> <name>MACH0_</name></type><argument_list>(<argument><expr><name>opts_set_default</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>opts_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>options</name></expr></argument>, <argument><expr><name>RBinFile</name> <operator>*</operator><name>bf</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>MACH0_</name><argument_list>(<argument><expr><name>mach0_new</name></expr></argument>)</argument_list><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>file</name></expr></argument>, <argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>opts_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>options</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>MACH0_</name><argument_list>(<argument><expr><name>new_buf</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RBuffer</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>opts_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>options</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><name>MACH0_</name></type><argument_list>(<argument><expr><name>mach0_free</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>section_t</name></name> <modifier>*</modifier><name>MACH0_</name></type><argument_list>(<argument><expr><name>get_sections</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>RList</name> <modifier>*</modifier><name>MACH0_</name></type>(<name>get_segments</name>)<parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list>;</function_decl> 

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>symbol_t</name></name> <modifier>*</modifier><name>MACH0_</name></type><argument_list>(<argument><expr><name>get_symbols</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>RList</name> <modifier>*</modifier><name>MACH0_</name></type><argument_list>(<argument><expr><name>get_symbols_list</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <name>MACH0_</name></type><argument_list>(<argument><expr><name>pull_symbols</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>mo</name></expr></argument>, <argument><expr><name>RBinSymbolCallback</name> <name>cb</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>user</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>import_t</name></name> <modifier>*</modifier><name>MACH0_</name></type><argument_list>(<argument><expr><name>get_imports</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSkipList</name> <modifier>*</modifier><name>MACH0_</name></type><argument_list>(<argument><expr><name>get_relocs</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>addr_t</name></name> <modifier>*</modifier><name>MACH0_</name></type><argument_list>(<argument><expr><name>get_entrypoint</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lib_t</name></name> <modifier>*</modifier><name>MACH0_</name></type><argument_list>(<argument><expr><name>get_libs</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name> <name>MACH0_</name></type><argument_list>(<argument><expr><name>get_baddr</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><name>MACH0_</name></type><argument_list>(<argument><expr><name>get_class</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>MACH0_</name></type><argument_list>(<argument><expr><name>get_bits</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name> <name>MACH0_</name></type><argument_list>(<argument><expr><name>is_big_endian</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name> <name>MACH0_</name></type><argument_list>(<argument><expr><name>is_pie</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name> <name>MACH0_</name></type><argument_list>(<argument><expr><name>has_nx</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>MACH0_</name></type><argument_list>(<argument><expr><name>get_intrp</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>MACH0_</name></type><argument_list>(<argument><expr><name>get_os</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>MACH0_</name></type><argument_list>(<argument><expr><name>get_cputype</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><name>MACH0_</name></type><argument_list>(<argument><expr><name>get_cpusubtype</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><name>MACH0_</name></type><argument_list>(<argument><expr><name>get_cpusubtype_from_hdr</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>mach_header</name></expr></argument>)</argument_list></call> <operator>*</operator><name>hdr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><name>MACH0_</name></type><argument_list>(<argument><expr><name>get_filetype</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><name>MACH0_</name></type><argument_list>(<argument><expr><name>get_filetype_from_hdr</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>mach_header</name></expr></argument>)</argument_list></call> <operator>*</operator><name>hdr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name> <name>MACH0_</name></type><argument_list>(<argument><expr><name>get_main</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>MACH0_</name></type><argument_list>(<argument><expr><name>get_cputype_from_hdr</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>mach_header</name></expr></argument>)</argument_list></call> <operator>*</operator><name>hdr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>MACH0_</name></type><argument_list>(<argument><expr><name>get_bits_from_hdr</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>mach_header</name></expr></argument>)</argument_list></call> <operator>*</operator><name>hdr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>mach_header</name></expr></argument>)</argument_list> <modifier>*</modifier><name>MACH0_</name><argument_list>(<argument><expr><name>get_hdr</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RBuffer</name> <operator>*</operator><name>buf</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name> <name>MACH0_</name></type>(<name>mach_headerfields</name>)<parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RList</name> <modifier>*</modifier><name>MACH0_</name></type>(<name>mach_fields</name>)<parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
