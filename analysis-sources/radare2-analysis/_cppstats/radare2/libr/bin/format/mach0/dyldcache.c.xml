<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\format\mach0\dyldcache.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dyldcache.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_bin_dyldcache_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_dyldcache_obj_t</name></name><modifier>*</modifier></type> <name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"16c4i7l"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"read (cache_header)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>nlibs</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>numlibs</name></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_bin_dyldcache_apply_patch</name><parameter_list>(<parameter><decl><type><name>RBuffer</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NZ_OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if((x) &gt; 0) r_bin_dyldcache_apply_patch (dbuf, (x) - linkedit_offset, addend + r_offsetof (y, z))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>r_buf_read64le</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_read_le64</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>r_buf_read_string</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>r_bin_dyldcache_lib_t</name></name> <modifier>*</modifier></type><name>r_bin_dyldcache_extract</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_dyldcache_obj_t</name></name><modifier>*</modifier></type> <name>bin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nlib</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>liboff</name></decl>, <decl><type ref="prev"/><name>linkedit_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>dyld_vmbase</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>addend</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_dyldcache_lib_t</name></name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dyld_cache_image_info</name></name><modifier>*</modifier></type> <name>image_infos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>mach_header</name></name></type> <name>mh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>cmdptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cmd</name></decl>, <decl><type ref="prev"/><name>libsz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBuffer</name><modifier>*</modifier></type> <name>dbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>libname</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Empty file? (%s)\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>bin</name><operator>-&gt;</operator><name>file</name></name></expr>?</condition><then> <expr><name><name>bin</name><operator>-&gt;</operator><name>file</name></name></expr></then><else>: <expr><literal type="string">"(null)"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>nlibs</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>idx</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>nlibs</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>nlib</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>nlibs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <name>r_bin_dyldcache_lib_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>startaddr</name></name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"corrupted dyldcache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>ret_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>startaddr</name></name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name><name>bin</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>baseaddroff</name></name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"corrupted dyldcache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>ret_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>nlibs</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>dyld_cache_image_info</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>image_infos</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>image_infos</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>ret_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>startaddr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>image_infos</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dyld_vmbase</name> <operator>=</operator> <call><name>r_buf_read64le</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>baseaddroff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>liboff</name> <operator>=</operator> <name><name>image_infos</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>address</name> <operator>-</operator> <name>dyld_vmbase</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>liboff</name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Corrupted file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>ret_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>liboff</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pfo</name> <init>= <expr><name><name>image_infos</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pathFileOffset</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pfo</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>pfo</name></expr></argument> &gt;</argument_list></name> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"corrupted file: pathFileOffset &gt; bin-&gt;size (%d)\n"</literal></expr></argument>, <argument><expr><name>pfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>ret_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>libname</name> <operator>=</operator> <call><name>r_buf_read_string</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>pfo</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>liboff</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>mh</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>mh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mh</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<goto>goto <name>ret_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mh</name><operator>.</operator><name>magic</name></name> <operator>!=</operator> <name>MH_MAGIC</name> <operator>&amp;&amp;</operator> <name><name>mh</name><operator>.</operator><name>magic</name></name> <operator>!=</operator> <name>MH_MAGIC_64</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mh</name><operator>.</operator><name>magic</name></name> <operator>==</operator> <literal type="number">0xbebafeca</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"FAT Binary\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Not mach-o\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>ret_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>addend</name> <operator>=</operator> <ternary><condition><expr><name><name>mh</name><operator>.</operator><name>magic</name></name> <operator>==</operator> <name>MH_MAGIC</name></expr>?</condition><then> <expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>mach_header</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>mach_header_64</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dbuf</name> <operator>=</operator> <call><name>r_buf_new</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"new (dbuf)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>ret_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_buf_append_buf_slice</name> <argument_list>(<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>liboff</name></expr></argument>, <argument><expr><name>addend</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>dbuf_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cmdptr</name> <operator>=</operator> <name>liboff</name> <operator>+</operator> <name>addend</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cmd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cmd</name> <operator>&lt;</operator> <name><name>mh</name><operator>.</operator><name>ncmds</name></name></expr>;</condition> <incr><expr><name>cmd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>load_command</name></name></type> <name>lc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>cmdptr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>lc</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<goto>goto <name>dbuf_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_append_bytes</name> <argument_list>(<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>lc</name></expr></argument>, <argument><expr><name><name>lc</name><operator>.</operator><name>cmdsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmdptr</name> <operator>+=</operator> <name><name>lc</name><operator>.</operator><name>cmdsize</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>cmdptr</name> <operator>=</operator> <name>liboff</name> <operator>+</operator> <name>addend</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cmd</name> <operator>=</operator> <name>linkedit_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cmd</name> <operator>&lt;</operator> <name><name>mh</name><operator>.</operator><name>ncmds</name></name></expr>;</condition> <incr><expr><name>cmd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>load_command</name></name></type> <name>lc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>cmdptr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>lc</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<goto>goto <name>dbuf_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>lc</name><operator>.</operator><name>cmd</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LC_SEGMENT</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>segment_command</name></name></type> <name>seg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>cmdptr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>seg</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>seg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>seg</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<goto>goto <name>dbuf_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>seg</name><operator>.</operator><name>filesize</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>.</operator><name>fileoff</name></name> <operator>+</operator> <name><name>seg</name><operator>.</operator><name>filesize</name></name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name><name>seg</name><operator>.</operator><name>fileoff</name></name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"malformed dyldcache\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>dbuf_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_append_buf_slice</name> <argument_list>(<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>seg</name><operator>.</operator><name>fileoff</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_bin_dyldcache_apply_patch</name> <argument_list>(<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>dbuf</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>addend</name> <operator>+</operator> <call><name>r_offsetof</name> <argument_list>(<argument><expr>struct <name>segment_command</name></expr></argument>, <argument><expr><name>fileoff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sect_offset</name> <init>= <expr><name><name>seg</name><operator>.</operator><name>fileoff</name></name> <operator>-</operator> <name>libsz</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>libsz</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>dbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>seg</name><operator>.</operator><name>segname</name></name></expr></argument>, <argument><expr><literal type="string">"__LINKEDIT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>linkedit_offset</name> <operator>=</operator> <name>sect_offset</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>.</operator><name>nsects</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nsect</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>nsect</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>nsect</name> <operator>&lt;</operator> <name><name>seg</name><operator>.</operator><name>nsects</name></name></expr>;</condition> <incr><expr><name>nsect</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>section</name></name></type> <name>sect</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>cmdptr</name> <operator>+</operator> <name>nsect</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>segment_command</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sect</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>sect</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>sect</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sect</name><operator>.</operator><name>offset</name></name> <operator>&gt;</operator> <name>libsz</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_bin_dyldcache_apply_patch</name> <argument_list>(<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><name><name>sect</name><operator>.</operator><name>offset</name></name> <operator>-</operator> <name>sect_offset</name></expr></argument>,

<argument><expr><name>addend</name> <operator>+</operator> <call><name>r_offsetof</name> <argument_list>(<argument><expr>struct <name>section</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>LC_SYMTAB</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>symtab_command</name></name></type> <name>st</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>cmdptr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<goto>goto <name>dbuf_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>NZ_OFFSET</name> <argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>symoff</name></name></expr></argument>, <argument><expr>struct <name>symtab_command</name></expr></argument>, <argument><expr><name>symoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>NZ_OFFSET</name> <argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>stroff</name></name></expr></argument>, <argument><expr>struct <name>symtab_command</name></expr></argument>, <argument><expr><name>stroff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>LC_DYSYMTAB</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dysymtab_command</name></name></type> <name>st</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>cmdptr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<goto>goto <name>dbuf_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>NZ_OFFSET</name> <argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>tocoff</name></name></expr></argument>, <argument><expr>struct <name>dysymtab_command</name></expr></argument>, <argument><expr><name>tocoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>NZ_OFFSET</name> <argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>modtaboff</name></name></expr></argument>, <argument><expr>struct <name>dysymtab_command</name></expr></argument>, <argument><expr><name>modtaboff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>NZ_OFFSET</name> <argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>extrefsymoff</name></name></expr></argument>, <argument><expr>struct <name>dysymtab_command</name></expr></argument>, <argument><expr><name>extrefsymoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>NZ_OFFSET</name> <argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>indirectsymoff</name></name></expr></argument>, <argument><expr>struct <name>dysymtab_command</name></expr></argument>, <argument><expr><name>indirectsymoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>NZ_OFFSET</name> <argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>extreloff</name></name></expr></argument>, <argument><expr>struct <name>dysymtab_command</name></expr></argument>, <argument><expr><name>extreloff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>NZ_OFFSET</name> <argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>locreloff</name></name></expr></argument>, <argument><expr>struct <name>dysymtab_command</name></expr></argument>, <argument><expr><name>locreloff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>LC_DYLD_INFO</name></expr>:</case>

<case>case <expr><name>LC_DYLD_INFO_ONLY</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dyld_info_command</name></name></type> <name>st</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>cmdptr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<goto>goto <name>dbuf_err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>NZ_OFFSET</name> <argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>rebase_off</name></name></expr></argument>, <argument><expr>struct <name>dyld_info_command</name></expr></argument>, <argument><expr><name>rebase_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>NZ_OFFSET</name> <argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>bind_off</name></name></expr></argument>, <argument><expr>struct <name>dyld_info_command</name></expr></argument>, <argument><expr><name>bind_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>NZ_OFFSET</name> <argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>weak_bind_off</name></name></expr></argument>, <argument><expr>struct <name>dyld_info_command</name></expr></argument>, <argument><expr><name>weak_bind_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>NZ_OFFSET</name> <argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>lazy_bind_off</name></name></expr></argument>, <argument><expr>struct <name>dyld_info_command</name></expr></argument>, <argument><expr><name>lazy_bind_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>NZ_OFFSET</name> <argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>export_off</name></name></expr></argument>, <argument><expr>struct <name>dyld_info_command</name></expr></argument>, <argument><expr><name>export_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>cmdptr</name> <operator>+=</operator> <name><name>lc</name><operator>.</operator><name>cmdsize</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name>dbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>libname</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>libsz</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

<label><name>dbuf_err</name>:</label>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>dbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>ret_err</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>r_bin_dyldcache_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_dyldcache_obj_t</name></name><modifier>*</modifier></type> <name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>r_bin_dydlcache_get_libname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_dyldcache_lib_t</name></name> <modifier>*</modifier></type><name>lib</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>libname</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>lib</name><operator>-&gt;</operator><name>path</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name><name>lib</name><operator>-&gt;</operator><name>path</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>path_length</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>lib</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>cur</name> <operator>&lt;</operator> <name>cur</name> <operator>+</operator> <name>path_length</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>libname</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>r_bin_dyldcache_obj_t</name></name><modifier>*</modifier></type> <name>r_bin_dyldcache_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_dyldcache_obj_t</name></name> <modifier>*</modifier></type><name>bin</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bin</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <name>r_bin_dyldcache_obj_t</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>binsz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><call><name>r_file_slurp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>binsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>binsz</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_bin_dyldcache_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>r_buf_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_buf_set_bytes</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_bin_dyldcache_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_bin_dyldcache_init</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_bin_dyldcache_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>bin</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>r_bin_dyldcache_obj_t</name></name><modifier>*</modifier></type> <name>r_bin_dyldcache_from_bytes_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_dyldcache_obj_t</name></name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <name>r_bin_dyldcache_obj_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_bin_dyldcache_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>r_buf_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>b</name></name> <operator>||</operator> <operator>!</operator><call><name>r_buf_set_bytes</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_bin_dyldcache_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_bin_dyldcache_init</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_bin_dyldcache_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><name>bin</name></expr>;</return>

</block_content>}</block></function>

</unit>
