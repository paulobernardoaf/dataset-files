<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\format\vsf\vsf_specs.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types_base.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct vsf_hdr {

char id[<literal type="number">19</literal>]; 

char major;

char minor;

char machine[<literal type="number">16</literal>]; 

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct vsf_module {

char module_name[<literal type="number">16</literal>]; 

char major;

char minor;

ut32 length; 

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct vsf_maincpu {

ut32 clk; 

ut8 ac; 

ut8 xr; 

ut8 yr; 

ut8 sp; 

ut16 pc; 

ut8 st; 

ut32 lastopcode; 

ut32 ba_low_flags; 

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct vsf_c64mem {

ut8 cpudata; 

ut8 cpudir; 

ut8 exrom; 

ut8 game; 

ut8 ram[<literal type="number">1024</literal> * <literal type="number">64</literal>]; 

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct vsf_c64rom {

ut8 kernal[<literal type="number">1024</literal> * <literal type="number">8</literal>]; 

ut8 basic[<literal type="number">1024</literal> * <literal type="number">8</literal>]; 

ut8 chargen[<literal type="number">1024</literal> * <literal type="number">4</literal>]; 

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct vsf_c128mem {

ut8 mmu[<literal type="number">12</literal>]; 

ut8 ram[<literal type="number">1024</literal> * <literal type="number">128</literal>]; 

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct vsf_c128rom {

ut8 kernal[<literal type="number">1024</literal> * <literal type="number">8</literal>]; 

ut8 basic[<literal type="number">1024</literal> * <literal type="number">32</literal>]; 

ut8 editor[<literal type="number">1024</literal> * <literal type="number">4</literal>]; 

ut8 chargen[<literal type="number">1024</literal> * <literal type="number">4</literal>]; 

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<struct>struct <name>r_bin_vsf_obj</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>machine_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut64</name></type> <name>rom</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut64</name></type> <name>mem</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>vsf_maincpu</name></name><modifier>*</modifier></type> <name>maincpu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sdb</name><modifier>*</modifier></type> <name>kv</name></decl>;</decl_stmt>

}</block>;</struct>

</unit>
