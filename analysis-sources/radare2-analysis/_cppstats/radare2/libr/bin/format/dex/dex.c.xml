<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\format\dex\dex.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dex.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./dex_uleb128.inc"</cpp:file></cpp:include>

<function><type><name>char</name><modifier>*</modifier></type> <name>r_bin_dex_get_version</name><parameter_list>(<parameter><decl><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>version</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>version</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>version</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>r_bin_dex_new_buf</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinDexObj</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinDexObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dex_header_t</name></name> <modifier>*</modifier></type><name>dexhdr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>r_buf_ref</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>dex_header_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dexhdr</name> <operator>=</operator> <operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>header</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">112</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dexhdr</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>checksum</name></name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dexhdr</name><operator>-&gt;</operator><name>signature</name></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>header_size</name></name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>endian</name></name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>linksection_size</name></name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>linksection_offset</name></name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>map_offset</name></name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>strings_size</name></name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>strings_offset</name></name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>types_size</name></name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>types_offset</name></name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>prototypes_size</name></name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>prototypes_offset</name></name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>fields_size</name></name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>fields_offset</name></name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>method_size</name></name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>method_offset</name></name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>class_size</name></name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>class_offset</name></name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRINGS_SIZE</name></cpp:macro> <cpp:value>((dexhdr-&gt;strings_size + 1) * sizeof (ut32))</cpp:value></cpp:define>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>strings</name></name> <operator>=</operator> <operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>strings_size</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>strings</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dexhdr</name><operator>-&gt;</operator><name>strings_size</name></name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>strings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dexhdr</name><operator>-&gt;</operator><name>strings_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><name><name>dexhdr</name><operator>-&gt;</operator><name>strings_offset</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>strings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>classes_size</name> <init>= <expr><name><name>dexhdr</name><operator>-&gt;</operator><name>class_size</name></name> <operator>*</operator> <name>DEX_CLASS_SIZE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dexhdr</name><operator>-&gt;</operator><name>class_offset</name></name> <operator>+</operator> <name>classes_size</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>classes_size</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>dexhdr</name><operator>-&gt;</operator><name>class_offset</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>classes_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>classes_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>class_size</name></name> <operator>=</operator> <name>classes_size</name> <operator>/</operator> <name>DEX_CLASS_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>classes</name></name> <operator>=</operator> <operator>(</operator>struct <name>dex_class_t</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>class_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>dex_class_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dexhdr</name><operator>-&gt;</operator><name>class_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><name><name>dexhdr</name><operator>-&gt;</operator><name>class_offset</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>DEX_CLASS_SIZE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <literal type="number">32</literal> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>strings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>classes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>classes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>class_id</name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>classes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>access_flags</name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>classes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>super_class</name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>classes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>interfaces_offset</name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>classes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>source_file</name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>classes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>anotations_offset</name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>classes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>class_data_offset</name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>classes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>static_values_offset</name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>methods_size</name> <init>= <expr><name><name>dexhdr</name><operator>-&gt;</operator><name>method_size</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>dex_method_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dexhdr</name><operator>-&gt;</operator><name>method_offset</name></name> <operator>+</operator> <name>methods_size</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>methods_size</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>dexhdr</name><operator>-&gt;</operator><name>method_offset</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>methods_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>methods_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>method_size</name></name> <operator>=</operator> <name>methods_size</name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>dex_method_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>methods</name></name> <operator>=</operator> <operator>(</operator>struct <name>dex_method_t</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>methods_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dexhdr</name><operator>-&gt;</operator><name>method_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><name><name>dexhdr</name><operator>-&gt;</operator><name>method_offset</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>dex_method_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <literal type="number">8</literal> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>strings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>classes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>methods</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>methods</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>class_id</name> <operator>=</operator> <call><name>r_buf_read_le16</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>methods</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>proto_id</name> <operator>=</operator> <call><name>r_buf_read_le16</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>methods</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name_id</name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>types_size</name> <init>= <expr><name><name>dexhdr</name><operator>-&gt;</operator><name>types_size</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>dex_type_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dexhdr</name><operator>-&gt;</operator><name>types_offset</name></name> <operator>+</operator> <name>types_size</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>types_size</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>dexhdr</name><operator>-&gt;</operator><name>types_offset</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>types_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>types_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>types_size</name></name> <operator>=</operator> <name>types_size</name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>dex_type_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>types</name></name> <operator>=</operator> <operator>(</operator>struct <name>dex_type_t</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>types_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dexhdr</name><operator>-&gt;</operator><name>types_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><name><name>dexhdr</name><operator>-&gt;</operator><name>types_offset</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>dex_type_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>strings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>classes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>methods</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>types</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>descriptor_id</name> <operator>=</operator> <call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>fields_size</name> <init>= <expr><name><name>dexhdr</name><operator>-&gt;</operator><name>fields_size</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>dex_field_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dexhdr</name><operator>-&gt;</operator><name>fields_offset</name></name> <operator>+</operator> <name>fields_size</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fields_size</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>dexhdr</name><operator>-&gt;</operator><name>fields_offset</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fields_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fields_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>fields_size</name></name> <operator>=</operator> <name>fields_size</name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>dex_field_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>fields</name></name> <operator>=</operator> <operator>(</operator>struct <name>dex_field_t</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>fields_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dexhdr</name><operator>-&gt;</operator><name>fields_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><name><name>dexhdr</name><operator>-&gt;</operator><name>fields_offset</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>dex_field_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <literal type="number">8</literal> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>strings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>classes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>methods</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>class_id</name> <operator>=</operator> <call><name>r_buf_read_le16</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type_id</name> <operator>=</operator> <call><name>r_buf_read_le16</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name_id</name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>protos_size</name> <init>= <expr><name><name>dexhdr</name><operator>-&gt;</operator><name>prototypes_size</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>dex_proto_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dexhdr</name><operator>-&gt;</operator><name>prototypes_offset</name></name> <operator>+</operator> <name>protos_size</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>protos_size</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>dexhdr</name><operator>-&gt;</operator><name>prototypes_offset</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>protos_size</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>prototypes_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>bin</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dexhdr</name><operator>-&gt;</operator><name>prototypes_size</name></name> <operator>=</operator> <name>protos_size</name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>dex_proto_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>protos</name></name> <operator>=</operator> <operator>(</operator>struct <name>dex_proto_t</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>protos_size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dexhdr</name><operator>-&gt;</operator><name>prototypes_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><name><name>dexhdr</name><operator>-&gt;</operator><name>prototypes_offset</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>dex_proto_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <literal type="number">12</literal> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>strings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>classes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>methods</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>protos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>protos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>shorty_id</name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>protos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>return_type_id</name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>protos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parameters_off</name> <operator>=</operator> <call><name>r_buf_read_le32</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>bin</name></expr>;</return>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><name>bin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

</unit>
