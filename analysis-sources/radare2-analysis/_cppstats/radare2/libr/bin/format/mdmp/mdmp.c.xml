<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\format\mdmp\mdmp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mdmp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMENTS_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<function><type><name>ut64</name></type> <name>r_bin_mdmp_get_paddr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_mdmp_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>vaddr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>minidump_memory_descriptor64</name></name> <modifier>*</modifier></type><name>memory</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>paddr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>memories64</name><operator>.</operator><name>base_rva</name></name></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;streams.memories64.memories</argument>, <argument>it</argument>, <argument>memory</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vaddr</name> <operator>==</operator> <name><name>memory</name><operator>-&gt;</operator><name>start_of_memory_range</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>paddr</name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <name><name>memory</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name>paddr</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>minidump_memory_info</name></name> <modifier>*</modifier></type><name>r_bin_mdmp_get_mem_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_mdmp_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>vaddr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>minidump_memory_info</name></name> <modifier>*</modifier></type><name>mem_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;streams.memory_infos</argument>, <argument>it</argument>, <argument>mem_info</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mem_info</name><operator>-&gt;</operator><name>allocation_base</name></name> <operator>&amp;&amp;</operator> <name>vaddr</name> <operator>==</operator> <name><name>mem_info</name><operator>-&gt;</operator><name>base_address</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>mem_info</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ut32</name></type> <name>r_bin_mdmp_get_perm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_mdmp_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>vaddr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>minidump_memory_info</name></name> <modifier>*</modifier></type><name>mem_info</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mem_info</name> <operator>=</operator> <call><name>r_bin_mdmp_get_mem_info</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>vaddr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>R_PERM_R</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>mem_info</name><operator>-&gt;</operator><name>protect</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MINIDUMP_PAGE_READONLY</name></expr>:</case>

<return>return <expr><name>R_PERM_R</name></expr>;</return>

<case>case <expr><name>MINIDUMP_PAGE_READWRITE</name></expr>:</case>

<return>return <expr><name>R_PERM_RW</name></expr>;</return>

<case>case <expr><name>MINIDUMP_PAGE_EXECUTE</name></expr>:</case>

<return>return <expr><name>R_PERM_X</name></expr>;</return>

<case>case <expr><name>MINIDUMP_PAGE_EXECUTE_READ</name></expr>:</case>

<return>return <expr><name>R_PERM_RX</name></expr>;</return>

<case>case <expr><name>MINIDUMP_PAGE_EXECUTE_READWRITE</name></expr>:</case>

<return>return <expr><name>R_PERM_RWX</name></expr>;</return>

<case>case <expr><name>MINIDUMP_PAGE_NOACCESS</name></expr>:</case>

<case>case <expr><name>MINIDUMP_PAGE_WRITECOPY</name></expr>:</case>

<case>case <expr><name>MINIDUMP_PAGE_EXECUTE_WRITECOPY</name></expr>:</case>

<case>case <expr><name>MINIDUMP_PAGE_GUARD</name></expr>:</case>

<case>case <expr><name>MINIDUMP_PAGE_NOCACHE</name></expr>:</case>

<case>case <expr><name>MINIDUMP_PAGE_WRITECOMBINE</name></expr>:</case>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_bin_mdmp_free_pe32_bin</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pe_bin_</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Pe32_r_bin_mdmp_pe_bin</name></name> <modifier>*</modifier></type><name>pe_bin</name> <init>= <expr><name>pe_bin_</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pe_bin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name><name>pe_bin</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Pe32_r_bin_pe_free</name> <argument_list>(<argument><expr><name><name>pe_bin</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>pe_bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_bin_mdmp_free_pe64_bin</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pe_bin_</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Pe64_r_bin_mdmp_pe_bin</name></name> <modifier>*</modifier></type><name>pe_bin</name> <init>= <expr><name>pe_bin_</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pe_bin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name><name>pe_bin</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Pe64_r_bin_pe_free</name> <argument_list>(<argument><expr><name><name>pe_bin</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>pe_bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>r_bin_mdmp_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_mdmp_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>ex_threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>memories</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>memories64</name><operator>.</operator><name>memories</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>memory_infos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>modules</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>operations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>thread_infos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>token_infos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>unloaded_modules</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>exception</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>system_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>comments_a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>comments_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>handle_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>function_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>misc_info</name><operator>.</operator><name>misc_info_1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>pe32_bins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>pe64_bins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_bin_mdmp_init_parsing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_mdmp_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_mem_state.cparse"</literal></expr></argument>,

<argument><expr><literal type="string">"enum mdmp_mem_state { MEM_COMMIT=0x1000, "</literal>

<literal type="string">"MEM_FREE=0x10000, MEM_RESERVE=0x02000 };"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_mem_type.cparse"</literal></expr></argument>,

<argument><expr><literal type="string">"enum mdmp_mem_type { MEM_IMAGE=0x1000000, "</literal>

<literal type="string">"MEM_MAPPED=0x40000, MEM_PRIVATE=0x20000 };"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_page_protect.cparse"</literal></expr></argument>,

<argument><expr><literal type="string">"enum mdmp_page_protect { PAGE_NOACCESS=1, "</literal>

<literal type="string">"PAGE_READONLY=2, PAGE_READWRITE=4, PAGE_WRITECOPY=8, "</literal>

<literal type="string">"PAGE_EXECUTE=0x10, PAGE_EXECUTE_READ=0x20, "</literal>

<literal type="string">"PAGE_EXECUTE_READWRITE=0x40, PAGE_EXECUTE_WRITECOPY=0x80, "</literal>

<literal type="string">"PAGE_GUARD=0x100, PAGE_NOCACHE=0x200, "</literal>

<literal type="string">"PAGE_WRITECOMBINE=0x400, PAGE_TARGETS_INVALID=0x40000000 };"</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_misc1_flags.cparse"</literal></expr></argument>,

<argument><expr><literal type="string">"enum mdmp_misc1_flags { MINIDUMP_MISC1_PROCESS_ID=1, "</literal>

<literal type="string">"MINIDUMP_MISC1_PROCESS_TIMES=2, "</literal>

<literal type="string">"MINIDUMP_MISC1_PROCESSOR_POWER_INFO=4 };"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_processor_architecture.cparse"</literal></expr></argument>,

<argument><expr><literal type="string">"enum mdmp_processor_architecture { "</literal>

<literal type="string">"PROCESSOR_ARCHITECTURE_INTEL=0, "</literal>

<literal type="string">"PROCESSOR_ARCHITECTURE_ARM=5, "</literal>

<literal type="string">"PROCESSOR_ARCHITECTURE_IA64=6, "</literal>

<literal type="string">"PROCESSOR_ARCHITECTURE_AMD64=9, "</literal>

<literal type="string">"PROCESSOR_ARCHITECTURE_UNKNOWN=0xffff };"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_product_type.cparse"</literal></expr></argument>,

<argument><expr><literal type="string">"enum mdmp_product_type { "</literal>

<literal type="string">"VER_NT_WORKSTATION=1, VER_NT_DOMAIN_CONTROLLER=2, "</literal>

<literal type="string">"VER_NT_SERVER=3 };"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_platform_id.cparse"</literal></expr></argument>,

<argument><expr><literal type="string">"enum mdmp_platform_id { "</literal>

<literal type="string">"VER_PLATFORM_WIN32s=0, "</literal>

<literal type="string">"VER_PLATFORM_WIN32_WINDOWS=1, "</literal>

<literal type="string">"VER_PLATFORM_WIN32_NT=2 };"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_suite_mask.cparse"</literal></expr></argument>,

<argument><expr><literal type="string">"enum mdmp_suite_mask { "</literal>

<literal type="string">"VER_SUITE_SMALLBUSINESS=1, VER_SUITE_ENTERPRISE=2, "</literal>

<literal type="string">"VER_SUITE_BACKOFFICE=4, VER_SUITE_TERMINAL=0x10, "</literal>

<literal type="string">"VER_SUITE_SMALLBUSINESS_RESTRICTED=0x20, "</literal>

<literal type="string">"VER_SUITE_EMBEDDEDNT=0x40, VER_SUITE_DATACENTER=0x80, "</literal>

<literal type="string">"VER_SUITE_SINGLEUSERTS=0x100, VER_SUITE_PERSONAL=0x200, "</literal>

<literal type="string">"VER_SUITE_BLADE=0x400, VER_SUITE_STORAGE_SERVER=0x2000, "</literal>

<literal type="string">"VER_SUITE_COMPUTE_SERVER=0x4000 };"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_callback_type.cparse"</literal></expr></argument>,

<argument><expr><literal type="string">"enum mdmp_type { ModuleCallback=0,"</literal>

<literal type="string">"ThreadCallback=1, ThreadExCallback=2, "</literal>

<literal type="string">"IncludeThreadCallback=3, IncludeModuleCallback=4, "</literal>

<literal type="string">"MemoryCallback=5, CancelCallback=6, "</literal>

<literal type="string">"WriteKernelMinidumpCallback=7, "</literal>

<literal type="string">"KernelMinidumpStatusCallback=8, "</literal>

<literal type="string">"RemoveMemoryCallback=9, "</literal>

<literal type="string">"IncludeVmRegionCallback=10, "</literal>

<literal type="string">"IoStartCallback=11, IoWriteAllCallback=12, "</literal>

<literal type="string">"IoFinishCallback=13, ReadMemoryFailureCallback=14, "</literal>

<literal type="string">"SecondaryFlagsCallback=15 };"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_exception_code.cparse"</literal></expr></argument>,

<argument><expr><literal type="string">"enum mdmp_exception_code { "</literal>

<literal type="string">"DBG_CONTROL_C=0x40010005, "</literal>

<literal type="string">"EXCEPTION_GUARD_PAGE_VIOLATION=0x80000001, "</literal>

<literal type="string">"EXCEPTION_DATATYPE_MISALIGNMENT=0x80000002, "</literal>

<literal type="string">"EXCEPTION_BREAKPOINT=0x80000003, "</literal>

<literal type="string">"EXCEPTION_SINGLE_STEP=0x80000004, "</literal>

<literal type="string">"EXCEPTION_ACCESS_VIOLATION=0xc0000005, "</literal>

<literal type="string">"EXCEPTION_IN_PAGE_ERROR=0xc0000006, "</literal>

<literal type="string">"EXCEPTION_INVALID_HANDLE=0xc0000008, "</literal>

<literal type="string">"EXCEPTION_ILLEGAL_INSTRUCTION=0xc000001d, "</literal>

<literal type="string">"EXCEPTION_NONCONTINUABLE_EXCEPTION=0xc0000025, "</literal>

<literal type="string">"EXCEPTION_INVALID_DISPOSITION=0xc0000026, "</literal>

<literal type="string">"EXCEPTION_ARRAY_BOUNDS_EXCEEDED=0xc000008c, "</literal>

<literal type="string">"EXCEPTION_FLOAT_DENORMAL_OPERAND=0xc000008d, "</literal>

<literal type="string">"EXCEPTION_FLOAT_DIVIDE_BY_ZERO=0xc000008e, "</literal>

<literal type="string">"EXCEPTION_FLOAT_INEXACT_RESULT=0xc000008f, "</literal>

<literal type="string">"EXCEPTION_FLOAT_INVALID_OPERATION=0xc0000090, "</literal>

<literal type="string">"EXCEPTION_FLOAT_OVERFLOW=0xc0000091, "</literal>

<literal type="string">"EXCEPTION_FLOAT_STACK_CHECK=0xc0000092, "</literal>

<literal type="string">"EXCEPTION_FLOAT_UNDERFLOW=0xc0000093, "</literal>

<literal type="string">"EXCEPTION_INTEGER_DIVIDE_BY_ZERO=0xc0000094, "</literal>

<literal type="string">"EXCEPTION_INTEGER_OVERFLOW=0xc0000095, "</literal>

<literal type="string">"EXCEPTION_PRIVILEGED_INSTRUCTION=0xc0000096, "</literal>

<literal type="string">"EXCEPTION_STACK_OVERFLOW=0xc00000fd, "</literal>

<literal type="string">"EXCEPTION_POSSIBLE_DEADLOCK=0xc0000194 };"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_exception_flags.cparse"</literal></expr></argument>,

<argument><expr><literal type="string">"enum mdmp_exception_flags { "</literal>

<literal type="string">"EXCEPTION_CONTINUABLE=0, "</literal>

<literal type="string">"EXCEPTION_NONCONTINUABLE=1 };"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_handle_object_information_type.cparse"</literal></expr></argument>,

<argument><expr><literal type="string">"enum mdmp_handle_object_information_type { "</literal>

<literal type="string">"MiniHandleObjectInformationNone=0, "</literal>

<literal type="string">"MiniThreadInformation1=1, MiniMutantInformation1=2, "</literal>

<literal type="string">"MiniMutantInformation2=3, MiniMutantProcessInformation1=4, "</literal>

<literal type="string">"MiniProcessInformation2=5 };"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_secondary_flags.cparse"</literal></expr></argument>,

<argument><expr><literal type="string">"enum mdmp_secondary_flags { "</literal>

<literal type="string">"MiniSecondaryWithoutPowerInfo=0 };"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_stream_type.cparse"</literal></expr></argument>,

<argument><expr><literal type="string">"enum mdmp_stream_type { UnusedStream=0, "</literal>

<literal type="string">"ReservedStream0=1, ReservedStream1=2, "</literal>

<literal type="string">"ThreadListStream=3, ModuleListStream=4, "</literal>

<literal type="string">"MemoryListStream=5, ExceptionStream=6, "</literal>

<literal type="string">"SystemInfoStream=7, ThreadExListStream=8, "</literal>

<literal type="string">"Memory64ListStream=9, CommentStreamA=10, "</literal>

<literal type="string">"CommentStreamW=11, HandleDataStream=12, "</literal>

<literal type="string">"FunctionTableStream=13, UnloadedModuleListStream=14, "</literal>

<literal type="string">"MiscInfoStream=15, MemoryInfoListStream=16, "</literal>

<literal type="string">"ThreadInfoListStream=17, "</literal>

<literal type="string">"HandleOperationListStream=18, "</literal>

<literal type="string">"LastReservedStream=0xffff };"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_type.cparse"</literal></expr></argument>, <argument><expr><literal type="string">"enum mdmp_type { "</literal>

<literal type="string">"MiniDumpNormal=0x0, "</literal>

<literal type="string">"MiniDumpWithDataSegs=0x1, "</literal>

<literal type="string">"MiniDumpWithFullMemory=0x2, "</literal>

<literal type="string">"MiniDumpWithHandleData=0x4, "</literal>

<literal type="string">"MiniDumpFilterMemory=0x8, "</literal>

<literal type="string">"MiniDumpScanMemory=0x10, "</literal>

<literal type="string">"MiniDumpWithUnloadedModule=0x20, "</literal>

<literal type="string">"MiniDumpWihinDirectlyReferencedMemory=0x40, "</literal>

<literal type="string">"MiniDumpFilterWithModulePaths=0x80,"</literal>

<literal type="string">"MiniDumpWithProcessThreadData=0x100, "</literal>

<literal type="string">"MiniDumpWithPrivateReadWriteMemory=0x200, "</literal>

<literal type="string">"MiniDumpWithoutOptionalDate=0x400, "</literal>

<literal type="string">"MiniDumpWithFullMemoryInfo=0x800, "</literal>

<literal type="string">"MiniDumpWithThreadInfo=0x1000, "</literal>

<literal type="string">"MiniDumpWithCodeSegs=0x2000, "</literal>

<literal type="string">"MiniDumpWithoutAuxiliaryState=0x4000, "</literal>

<literal type="string">"MiniDumpWithFullAuxiliaryState=0x8000, "</literal>

<literal type="string">"MiniDumpWithPrivateWriteCopyMemory=0x10000, "</literal>

<literal type="string">"MiniDumpIgnoreInaccessibleMemory=0x20000, "</literal>

<literal type="string">"MiniDumpWithTokenInformation=0x40000, "</literal>

<literal type="string">"MiniDumpWithModuleHeaders=0x80000, "</literal>

<literal type="string">"MiniDumpFilterTriage=0x100000, "</literal>

<literal type="string">"MiniDumpValidTypeFlags=0x1fffff };"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_module_write_flags.cparse"</literal></expr></argument>,

<argument><expr><literal type="string">"enum mdmp_module_write_flags { "</literal>

<literal type="string">"ModuleWriteModule=0, ModuleWriteDataSeg=2, "</literal>

<literal type="string">"ModuleWriteMiscRecord=4, ModuleWriteCvRecord=8, "</literal>

<literal type="string">"ModuleReferencedByMemory=0x10, ModuleWriteTlsData=0x20, "</literal>

<literal type="string">"ModuleWriteCodeSegs=0x40 };"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_thread_write_flags.cparse"</literal></expr></argument>,

<argument><expr><literal type="string">"enum mdmp_thread_write_flags { "</literal>

<literal type="string">"ThreadWriteThread=0, ThreadWriteStack=2, "</literal>

<literal type="string">"ThreadWriteContext=4, ThreadWriteBackingStore=8, "</literal>

<literal type="string">"ThreadWriteInstructionWindow=0x10, "</literal>

<literal type="string">"ThreadWriteThreadData=0x20, "</literal>

<literal type="string">"ThreadWriteThreadInfo=0x40 };"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_context_flags.cparse"</literal></expr></argument>,

<argument><expr><literal type="string">"enum mdmp_context_flags { CONTEXT_i386=0x10000, "</literal>

<literal type="string">"CONTEXT_CONTROL=0x10001, CONTEXT_INTEGER=0x10002, "</literal>

<literal type="string">"CONTEXT_SEGMENTS=0x10004, CONTEXT_FLOATING_POINT=0x10008, "</literal>

<literal type="string">"CONTEXT_DEBUG_REGISTERS=0x10010, "</literal>

<literal type="string">"CONTEXT_EXTENDED_REGISTERS=0x10020 };"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_location_descriptor.format"</literal></expr></argument>,

<argument><expr><literal type="string">"dd DataSize RVA"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_location_descriptor64.format"</literal></expr></argument>,

<argument><expr><literal type="string">"qq DataSize RVA"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_memory_descriptor.format"</literal></expr></argument>, <argument><expr><literal type="string">"q? "</literal>

<literal type="string">"StartOfMemoryRange "</literal>

<literal type="string">"(mdmp_location_descriptor)Memory"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_memory_descriptor64.format"</literal></expr></argument>, <argument><expr><literal type="string">"qq "</literal>

<literal type="string">"StartOfMemoryRange DataSize"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

sdb_set (obj-&gt;kv, "mdmp_context.format", "[4]B "

"(mdmp_context_flags)ContextFlags", 0);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_vs_fixedfileinfo.format"</literal></expr></argument>, <argument><expr><literal type="string">"ddddddddddddd "</literal>

<literal type="string">"dwSignature dwStrucVersion dwFileVersionMs "</literal>

<literal type="string">"dwFileVersionLs dwProductVersionMs "</literal>

<literal type="string">"dwProductVersionLs dwFileFlagsMask dwFileFlags "</literal>

<literal type="string">"dwFileOs dwFileType dwFileSubtype dwFileDateMs "</literal>

<literal type="string">"dwFileDateLs"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_string.format"</literal></expr></argument>, <argument><expr><literal type="string">"dZ Length Buffer"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_bin_mdmp_init_hdr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_mdmp_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name></name> <operator>=</operator> <call><name>R_NEW</name> <argument_list>(<argument><expr>struct <name>minidump_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>hdr</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>obj</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>obj</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>number_of_streams</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[WARN] No streams present!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>stream_directory_rva</name></name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>minidump_header</name></expr></argument>)</argument_list></sizeof></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[ERROR] RVA for directory resides in the header!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>check_sum</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[INFO] Checksum present but needs validating!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp.hdr.time_date_stamp"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>time_date_stamp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp.hdr.flags"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_header.offset"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_header.format"</literal></expr></argument>, <argument><expr><literal type="string">"[4]zddddt[8]B Signature "</literal>

<literal type="string">"Version NumberOfStreams StreamDirectoryRVA CheckSum "</literal>

<literal type="string">"TimeDateStamp (mdmp_type)Flags"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_bin_mdmp_init_directory_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_mdmp_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>minidump_directory</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>minidump_handle_operation_list</name></name></type> <name>handle_operation_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>minidump_memory_list</name></name></type> <name>memory_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>minidump_memory64_list</name></name></type> <name>memory64_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>minidump_memory_info_list</name></name></type> <name>memory_info_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>minidump_module_list</name></name></type> <name>module_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>minidump_thread_list</name></name></type> <name>thread_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>minidump_thread_ex_list</name></name></type> <name>thread_ex_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>minidump_thread_info_list</name></name></type> <name>thread_info_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>minidump_token_info_list</name></name></type> <name>token_info_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>minidump_unloaded_module_list</name></name></type> <name>unloaded_module_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name> <operator>+</operator> <name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>data_size</name></name> <operator>&gt;</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[ERROR] Size Mismatch - Stream data is larger than file size!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>stream_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THREAD_LIST_STREAM</name></expr>:</case>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>thread_list</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>thread_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>thread_list</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_thread.format"</literal></expr></argument>, <argument><expr><literal type="string">"ddddq?? "</literal>

<literal type="string">"ThreadId SuspendCount PriorityClass Priority "</literal>

<literal type="string">"Teb (mdmp_memory_descriptor)Stack "</literal>

<literal type="string">"(mdmp_location_descriptor)ThreadContext"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_thread_list.offset"</literal></expr></argument>,

<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_thread_list.format"</literal></expr></argument>,

<argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"d[%i]? "</literal>

<literal type="string">"NumberOfThreads (mdmp_thread)Threads"</literal></expr></argument>,

<argument><expr><name><name>thread_list</name><operator>.</operator><name>number_of_threads</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MODULE_LIST_STREAM</name></expr>:</case>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>module_list</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>module_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>module_list</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_module.format"</literal></expr></argument>, <argument><expr><literal type="string">"qddtd???qq "</literal>

<literal type="string">"BaseOfImage SizeOfImage CheckSum "</literal>

<literal type="string">"TimeDateStamp ModuleNameRVA "</literal>

<literal type="string">"(mdmp_vs_fixedfileinfo)VersionInfo "</literal>

<literal type="string">"(mdmp_location_descriptor)CvRecord "</literal>

<literal type="string">"(mdmp_location_descriptor)MiscRecord "</literal>

<literal type="string">"Reserved0 Reserved1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_module_list.offset"</literal></expr></argument>,

<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_module_list.format"</literal></expr></argument>,

<argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"d[%i]? "</literal>

<literal type="string">"NumberOfModule (mdmp_module)Modules"</literal></expr></argument>,

<argument><expr><name><name>module_list</name><operator>.</operator><name>number_of_modules</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>module_list</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>module_list</name><operator>.</operator><name>number_of_modules</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>minidump_module</name></name> <modifier>*</modifier></type><name>module</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr>struct <name>minidump_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>module</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>module</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>module</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>module</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>modules</name></name></expr></argument>, <argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>module</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>MEMORY_LIST_STREAM</name></expr>:</case>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>memory_list</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>memory_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>memory_list</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_memory_list.offset"</literal></expr></argument>,

<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_memory_list.format"</literal></expr></argument>,

<argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"d[%i]? "</literal>

<literal type="string">"NumberOfMemoryRanges "</literal>

<literal type="string">"(mdmp_memory_descriptor)MemoryRanges "</literal></expr></argument>,

<argument><expr><name><name>memory_list</name><operator>.</operator><name>number_of_memory_ranges</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>memory_list</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>memory_list</name><operator>.</operator><name>number_of_memory_ranges</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>minidump_memory_descriptor</name></name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr>struct <name>minidump_memory_descriptor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>desc</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>desc</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>memories</name></name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>desc</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>EXCEPTION_STREAM</name></expr>:</case>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>exception</name></name> <operator>=</operator> <call><name>R_NEW</name> <argument_list>(<argument><expr>struct <name>minidump_exception_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>exception</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>exception</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>exception</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>exception</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_exception.format"</literal></expr></argument>, <argument><expr><literal type="string">"[4]E[4]Eqqdd[15]q "</literal>

<literal type="string">"(mdmp_exception_code)ExceptionCode "</literal>

<literal type="string">"(mdmp_exception_flags)ExceptionFlags "</literal>

<literal type="string">"ExceptionRecord ExceptionAddress "</literal>

<literal type="string">"NumberParameters __UnusedAlignment "</literal>

<literal type="string">"ExceptionInformation"</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_exception_stream.offset"</literal></expr></argument>,

<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_exception_stream.format"</literal></expr></argument>, <argument><expr><literal type="string">"dd?? "</literal>

<literal type="string">"ThreadId __Alignment "</literal>

<literal type="string">"(mdmp_exception)ExceptionRecord "</literal>

<literal type="string">"(mdmp_location_descriptor)ThreadContext"</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SYSTEM_INFO_STREAM</name></expr>:</case>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>system_info</name></name> <operator>=</operator> <call><name>R_NEW</name> <argument_list>(<argument><expr>struct <name>minidump_system_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>system_info</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>system_info</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>system_info</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>system_info</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_system_info.offset"</literal></expr></argument>,

<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_system_info.format"</literal></expr></argument>, <argument><expr><literal type="string">"[2]EwwbBddd[4]Ed[2]Ew[2]q "</literal>

<literal type="string">"(mdmp_processor_architecture)ProcessorArchitecture "</literal>

<literal type="string">"ProcessorLevel ProcessorRevision NumberOfProcessors "</literal>

<literal type="string">"(mdmp_product_type)ProductType "</literal>

<literal type="string">"MajorVersion MinorVersion BuildNumber (mdmp_platform_id)PlatformId "</literal>

<literal type="string">"CsdVersionRva (mdmp_suite_mask)SuiteMask Reserved2 ProcessorFeatures"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>THREAD_EX_LIST_STREAM</name></expr>:</case>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>thread_ex_list</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>thread_ex_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>thread_ex_list</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_thread_ex.format"</literal></expr></argument>, <argument><expr><literal type="string">"ddddq??? "</literal>

<literal type="string">"ThreadId SuspendCount PriorityClass Priority "</literal>

<literal type="string">"Teb (mdmp_memory_descriptor)Stack "</literal>

<literal type="string">"(mdmp_location_descriptor)ThreadContext "</literal>

<literal type="string">"(mdmp_memory_descriptor)BackingStore"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_thread_ex_list.offset"</literal></expr></argument>,

<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_thread_ex_list.format"</literal></expr></argument>,

<argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"d[%i]? NumberOfThreads "</literal>

<literal type="string">"(mdmp_thread_ex)Threads"</literal></expr></argument>,

<argument><expr><name><name>thread_ex_list</name><operator>.</operator><name>number_of_threads</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>thread_ex_list</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>thread_ex_list</name><operator>.</operator><name>number_of_threads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>minidump_thread_ex</name></name> <modifier>*</modifier></type><name>thread</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr>struct <name>minidump_thread_ex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>thread</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>thread</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>thread</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>thread</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>ex_threads</name></name></expr></argument>, <argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>thread</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>MEMORY_64_LIST_STREAM</name></expr>:</case>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>memory64_list</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>memory64_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>memory64_list</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_memory64_list.offset"</literal></expr></argument>,

<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_memory64_list.format"</literal></expr></argument>,

<argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"qq[%i]? NumberOfMemoryRanges "</literal>

<literal type="string">"BaseRva "</literal>

<literal type="string">"(mdmp_memory_descriptor64)MemoryRanges"</literal></expr></argument>,

<argument><expr><name><name>memory64_list</name><operator>.</operator><name>number_of_memory_ranges</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>memories64</name><operator>.</operator><name>base_rva</name></name> <operator>=</operator> <name><name>memory64_list</name><operator>.</operator><name>base_rva</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>memory64_list</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>memory64_list</name><operator>.</operator><name>number_of_memory_ranges</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>minidump_memory_descriptor64</name></name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr>struct <name>minidump_memory_descriptor64</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>desc</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>desc</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>memories64</name><operator>.</operator><name>memories</name></name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>desc</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>COMMENT_STREAM_A</name></expr>:</case>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>comments_a</name></name> <operator>=</operator> <call><name>R_NEWS</name> <argument_list>(<argument><expr><name>ut8</name></expr></argument>, <argument><expr><name>COMMENTS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>comments_a</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>comments_a</name></name></expr></argument>, <argument><expr><name>COMMENTS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>COMMENTS_SIZE</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_comment_stream_a.offset"</literal></expr></argument>,

<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_comment_stream_a.format"</literal></expr></argument>,

<argument><expr><literal type="string">"s CommentA"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>COMMENT_STREAM_W</name></expr>:</case>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>comments_w</name></name> <operator>=</operator> <call><name>R_NEWS</name> <argument_list>(<argument><expr><name>ut8</name></expr></argument>, <argument><expr><name>COMMENTS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>comments_w</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>comments_w</name></name></expr></argument>, <argument><expr><name>COMMENTS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>COMMENTS_SIZE</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_comment_stream_w.offset"</literal></expr></argument>,

<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_comment_stream_w.format"</literal></expr></argument>,

<argument><expr><literal type="string">"s CommentW"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HANDLE_DATA_STREAM</name></expr>:</case>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>handle_data</name></name> <operator>=</operator> <call><name>R_NEW</name> <argument_list>(<argument><expr>struct <name>minidump_handle_data_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>handle_data</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>handle_data</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>handle_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>handle_data</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_handle_data_stream.offset"</literal></expr></argument>,

<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_handle_data_stream.format"</literal></expr></argument>, <argument><expr><literal type="string">"dddd "</literal>

<literal type="string">"SizeOfHeader SizeOfDescriptor "</literal>

<literal type="string">"NumberOfDescriptors Reserved"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FUNCTION_TABLE_STREAM</name></expr>:</case>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>function_table</name></name> <operator>=</operator> <call><name>R_NEW</name> <argument_list>(<argument><expr>struct <name>minidump_function_table_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>function_table</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>function_table</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>function_table</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>function_table</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_function_table_stream.offset"</literal></expr></argument>,

<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_function_table_stream.format"</literal></expr></argument>, <argument><expr><literal type="string">"dddddd "</literal>

<literal type="string">"SizeOfHeader SizeOfDescriptor SizeOfNativeDescriptor "</literal>

<literal type="string">"SizeOfFunctionEntry NumberOfDescriptors SizeOfAlignPad"</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>UNLOADED_MODULE_LIST_STREAM</name></expr>:</case>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>unloaded_module_list</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>unloaded_module_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>unloaded_module_list</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_unloaded_module.format"</literal></expr></argument>, <argument><expr><literal type="string">"qddtd "</literal>

<literal type="string">"BaseOfImage SizeOfImage CheckSum TimeDateStamp "</literal>

<literal type="string">"ModuleNameRva"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_unloaded_module_list.offset"</literal></expr></argument>,

<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_unloaded_module_list.format"</literal></expr></argument>, <argument><expr><literal type="string">"ddd "</literal>

<literal type="string">"SizeOfHeader SizeOfEntry NumberOfEntries"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>unloaded_module_list</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>unloaded_module_list</name><operator>.</operator><name>number_of_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>minidump_unloaded_module</name></name> <modifier>*</modifier></type><name>module</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr>struct <name>minidump_unloaded_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>module</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>module</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>module</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>module</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>unloaded_modules</name></name></expr></argument>, <argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>module</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>MISC_INFO_STREAM</name></expr>:</case>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>misc_info</name><operator>.</operator><name>misc_info_1</name></name> <operator>=</operator> <call><name>R_NEW</name> <argument_list>(<argument><expr>struct <name>minidump_misc_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>misc_info</name><operator>.</operator><name>misc_info_1</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>misc_info</name><operator>.</operator><name>misc_info_1</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>misc_info</name><operator>.</operator><name>misc_info_1</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>misc_info</name><operator>.</operator><name>misc_info_1</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_misc_info.offset"</literal></expr></argument>,

<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_misc_info.format"</literal></expr></argument>, <argument><expr><literal type="string">"d[4]Bdtttddddd "</literal>

<literal type="string">"SizeOfInfo (mdmp_misc1_flags)Flags1 ProcessId "</literal>

<literal type="string">"ProcessCreateTime ProcessUserTime ProcessKernelTime "</literal>

<literal type="string">"ProcessorMaxMhz ProcessorCurrentMhz "</literal>

<literal type="string">"ProcessorMhzLimit ProcessorMaxIdleState "</literal>

<literal type="string">"ProcessorCurrentIdleState"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MEMORY_INFO_LIST_STREAM</name></expr>:</case>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>memory_info_list</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>memory_info_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>memory_info_list</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_memory_info.format"</literal></expr></argument>,

<argument><expr><literal type="string">"qq[4]Edq[4]E[4]E[4]Ed BaseAddress AllocationBase "</literal>

<literal type="string">"(mdmp_page_protect)AllocationProtect __Alignment1 RegionSize "</literal>

<literal type="string">"(mdmp_mem_state)State (mdmp_page_protect)Protect "</literal>

<literal type="string">"(mdmp_mem_type)Type __Alignment2"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_memory_info_list.offset"</literal></expr></argument>,

<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_memory_info_list.format"</literal></expr></argument>,

<argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"ddq[%i]? SizeOfHeader SizeOfEntry "</literal>

<literal type="string">"NumberOfEntries (mdmp_memory_info)MemoryInfo"</literal></expr></argument>,

<argument><expr><name><name>memory_info_list</name><operator>.</operator><name>number_of_entries</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>memory_info_list</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>memory_info_list</name><operator>.</operator><name>number_of_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>minidump_memory_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr>struct <name>minidump_memory_info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>info</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>memory_infos</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>THREAD_INFO_LIST_STREAM</name></expr>:</case>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>thread_info_list</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>thread_info_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>thread_info_list</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_thread_info.format"</literal></expr></argument>, <argument><expr><literal type="string">"ddddttttqq "</literal>

<literal type="string">"ThreadId DumpFlags DumpError ExitStatus CreateTime "</literal>

<literal type="string">"ExitTime KernelTime UserTime StartAddress Affinity"</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_thread_info_list.offset"</literal></expr></argument>,

<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_thread_info_list.format"</literal></expr></argument>, <argument><expr><literal type="string">"ddd "</literal>

<literal type="string">"SizeOfHeader SizeOfEntry NumberOfEntries"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>thread_info_list</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>thread_info_list</name><operator>.</operator><name>number_of_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>minidump_thread_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr>struct <name>minidump_thread_info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>info</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>thread_infos</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>HANDLE_OPERATION_LIST_STREAM</name></expr>:</case>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>handle_operation_list</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>handle_operation_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>handle_operation_list</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_handle_operation_list.offset"</literal></expr></argument>,

<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_handle_operation_list.format"</literal></expr></argument>, <argument><expr><literal type="string">"dddd "</literal>

<literal type="string">"SizeOfHeader SizeOfEntry NumberOfEntries Reserved"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>handle_operation_list</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>handle_operation_list</name><operator>.</operator><name>number_of_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>avrf_handle_operation</name></name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr>struct <name>avrf_handle_operation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>op</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>op</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>operations</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>op</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>TOKEN_STREAM</name></expr>:</case>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>token_info_list</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>token_info_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>token_info_list</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_token_info.format"</literal></expr></argument>, <argument><expr><literal type="string">"ddq "</literal>

<literal type="string">"TokenSize TokenId TokenHandle"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_token_info_list.offset"</literal></expr></argument>,

<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_token_info_list.format"</literal></expr></argument>, <argument><expr><literal type="string">"dddd "</literal>

<literal type="string">"TokenListSize TokenListEntries ListHeaderSize ElementHeaderSize"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>rva</name></name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>token_info_list</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>token_info_list</name><operator>.</operator><name>number_of_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>minidump_token_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr>struct <name>minidump_token_info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>info</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>token_infos</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>LAST_RESERVED_STREAM</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>UNUSED_STREAM</name></expr>:</case>

<case>case <expr><name>RESERVED_STREAM_0</name></expr>:</case>

<case>case <expr><name>RESERVED_STREAM_1</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[WARN] Invalid or unsupported enumeration encountered %i\n"</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>stream_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_bin_mdmp_init_directory</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_mdmp_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>minidump_directory</name></name></type> <name>entry</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_directory.offset"</literal></expr></argument>,

<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>stream_directory_rva</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"mdmp_directory.format"</literal></expr></argument>, <argument><expr><literal type="string">"[4]E? "</literal>

<literal type="string">"(mdmp_stream_type)StreamType "</literal>

<literal type="string">"(mdmp_location_descriptor)Location"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>rvadir</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>stream_directory_rva</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>bytes_left</name> <init>= <expr><ternary><condition><expr><name>rvadir</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>size</name></name></expr> ?</condition><then> <expr><name><name>obj</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>rvadir</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>max_entries</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>number_of_streams</name></name></expr></argument>, <argument><expr><name>bytes_left</name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>minidump_directory</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>max_entries</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>number_of_streams</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[ERROR] Number of streams = %u is greater than is supportable by bin size\n"</literal></expr></argument>,

<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>number_of_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_entries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>delta</name> <init>= <expr><name>i</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>minidump_directory</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>rvadir</name> <operator>+</operator> <name>delta</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>minidump_directory</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_bin_mdmp_init_directory_entry</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_bin_mdmp_patch_pe_headers</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>pe_buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Pe64_image_dos_header</name></type> <name>dos_hdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Pe64_image_nt_headers</name></type> <name>nt_hdr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>pe_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dos_hdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>Pe64_image_dos_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>pe_buf</name></expr></argument>, <argument><expr><name><name>dos_hdr</name><operator>.</operator><name>e_lfanew</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nt_hdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>Pe64_image_nt_headers</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>sect_hdrs_off</name> <init>= <expr><name><name>dos_hdr</name><operator>.</operator><name>e_lfanew</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>Pe64_image_file_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>nt_hdr</name><operator>.</operator><name>file_header</name><operator>.</operator><name>SizeOfOptionalHeader</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Pe64_image_section_header</name></type> <name>section_hdr</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nt_hdr</name><operator>.</operator><name>file_header</name><operator>.</operator><name>NumberOfSections</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>pe_buf</name></expr></argument>, <argument><expr><name>sect_hdrs_off</name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>section_hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>section_hdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>section_hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>section_hdr</name><operator>.</operator><name>PointerToRawData</name></name> <operator>=</operator> <name><name>section_hdr</name><operator>.</operator><name>VirtualAddress</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name>pe_buf</name></expr></argument>, <argument><expr><name>sect_hdrs_off</name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>section_hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>section_hdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>section_hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_pe32_buf</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name> <operator>||</operator> <name>length</name> <operator>&lt;=</operator> <literal type="number">0x3d</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><call><name>r_buf_read8_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x3c</literal></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><call><name>r_buf_read8_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x3d</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <name>idx</name> <operator>+</operator> <literal type="number">0x18</literal> <operator>+</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>tmp1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">0x18</literal></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="string">"MZ"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="string">"PE"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><literal type="string">"\x0b\x01"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_pe64_buf</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name> <operator>||</operator> <name>length</name> <operator>&lt;=</operator> <literal type="number">0x3d</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>r_buf_read8_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x3c</literal></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><call><name>r_buf_read8_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x3d</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;=</operator> <name>idx</name> <operator>+</operator> <literal type="number">0x20</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>tmp1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">0x18</literal></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="string">"MZ"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="string">"PE"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><literal type="string">"\x0b\x02"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_bin_mdmp_init_pe_bins</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_mdmp_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>dup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>paddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>minidump_module</name></name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Pe32_r_bin_mdmp_pe_bin</name></name> <modifier>*</modifier></type><name>pe32_bin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pe32_dup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Pe64_r_bin_mdmp_pe_bin</name></name> <modifier>*</modifier></type><name>pe64_bin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pe64_dup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>it_dup</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;streams.modules</argument>, <argument>it</argument>, <argument>module</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>paddr</name> <operator>=</operator> <call><name>r_bin_mdmp_get_paddr</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>module</name><operator>-&gt;</operator><name>base_of_image</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>R_NEWS</name> <argument_list>(<argument><expr><name>ut8</name></expr></argument>, <argument><expr><name><name>module</name><operator>-&gt;</operator><name>size_of_image</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>paddr</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>module</name><operator>-&gt;</operator><name>size_of_image</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_buf_new_with_bytes</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dup</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_pe32_buf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>module</name><operator>-&gt;</operator><name>size_of_image</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<macro><name>r_list_foreach</name><argument_list>(<argument>obj-&gt;pe32_bins</argument>, <argument>it_dup</argument>, <argument>pe32_dup</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pe32_dup</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>==</operator> <name><name>module</name><operator>-&gt;</operator><name>base_of_image</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dup</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>dup</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pe32_bin</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <name>Pe32_r_bin_mdmp_pe_bin</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_bin_mdmp_patch_pe_headers</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pe32_bin</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>module</name><operator>-&gt;</operator><name>base_of_image</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pe32_bin</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>paddr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pe32_bin</name><operator>-&gt;</operator><name>bin</name></name> <operator>=</operator> <call><name>Pe32_r_bin_pe_new_buf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>pe32_bins</name></name></expr></argument>, <argument><expr><name>pe32_bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>check_pe64_buf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>module</name><operator>-&gt;</operator><name>size_of_image</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<macro><name>r_list_foreach</name><argument_list>(<argument>obj-&gt;pe64_bins</argument>, <argument>it_dup</argument>, <argument>pe64_dup</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pe64_dup</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>==</operator> <name><name>module</name><operator>-&gt;</operator><name>base_of_image</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dup</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>dup</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pe64_bin</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <name>Pe64_r_bin_mdmp_pe_bin</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_bin_mdmp_patch_pe_headers</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pe64_bin</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>module</name><operator>-&gt;</operator><name>base_of_image</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pe64_bin</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>paddr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pe64_bin</name><operator>-&gt;</operator><name>bin</name></name> <operator>=</operator> <call><name>Pe64_r_bin_pe_new_buf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>pe64_bins</name></name></expr></argument>, <argument><expr><name>pe64_bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_bin_mdmp_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_mdmp_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_bin_mdmp_init_parsing</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_bin_mdmp_init_hdr</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[ERROR] Failed to initialise header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_bin_mdmp_init_directory</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[ERROR] Failed to initialise directory structures!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_bin_mdmp_init_pe_bins</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[ERROR] Failed to initialise pe binaries!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>r_bin_mdmp_obj</name></name> <modifier>*</modifier></type><name>r_bin_mdmp_new_buf</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>fail</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_mdmp_obj</name></name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <name>r_bin_mdmp_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>kv</name></name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fail</name> <operator>|=</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>ex_threads</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>fail</name> <operator>|=</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>memories</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>fail</name> <operator>|=</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>memories64</name><operator>.</operator><name>memories</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>fail</name> <operator>|=</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>memory_infos</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>fail</name> <operator>|=</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>modules</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>fail</name> <operator>|=</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>operations</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>fail</name> <operator>|=</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>thread_infos</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>fail</name> <operator>|=</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>token_infos</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>fail</name> <operator>|=</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>threads</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>fail</name> <operator>|=</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>streams</name><operator>.</operator><name>unloaded_modules</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>fail</name> <operator>|=</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>pe32_bins</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_mdmp_free_pe32_bin</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>fail</name> <operator>|=</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>pe64_bins</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_mdmp_free_pe64_bin</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fail</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_bin_mdmp_free</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>r_buf_ref</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_bin_mdmp_init</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_bin_mdmp_free</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

</unit>
