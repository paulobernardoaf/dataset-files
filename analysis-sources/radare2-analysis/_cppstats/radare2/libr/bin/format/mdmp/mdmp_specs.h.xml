<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\format\mdmp\mdmp_specs.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types_base.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mdmp_windefs.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_MEM_COMMIT</name></cpp:macro> <cpp:value>0x01000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_MEM_FREE</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_MEM_RESERVE</name></cpp:macro> <cpp:value>0x02000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_MEM_IMAGE</name></cpp:macro> <cpp:value>0x1000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_MEM_MAPPED</name></cpp:macro> <cpp:value>0x0040000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_MEM_PRIVATE</name></cpp:macro> <cpp:value>0x0020000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_PROCESSOR_ARCHITECTURE_INTEL</name></cpp:macro> <cpp:value>0x0000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_PROCESSOR_ARCHITECTURE_ARM</name></cpp:macro> <cpp:value>0x0005</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_PROCESSOR_ARCHITECTURE_IA64</name></cpp:macro> <cpp:value>0x0006</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_PROCESSOR_ARCHITECTURE_AMD64</name></cpp:macro> <cpp:value>0x0009</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_PROCESSOR_ARCHITECTURE_UNKNOWN</name></cpp:macro> <cpp:value>0xFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_VER_NT_WORKSTATION</name></cpp:macro> <cpp:value>0x0000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_VER_NT_DOMAIN_CONTROLLER</name></cpp:macro> <cpp:value>0x0000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_VER_NT_SERVER</name></cpp:macro> <cpp:value>0x0000003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_VER_PLATFORM_WIN32s</name></cpp:macro> <cpp:value>0x0000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_VER_PLATFORM_WIN32_WINDOWS</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_VER_PLATFORM_WIN32_NT</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_VER_SUITE_SMALLBUSINESS</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_VER_SUITE_ENTERPRISE</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_VER_SUITE_BACKOFFICE</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_VER_SUITE_TERMINAL</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_VER_SUITE_SMALLBUSINESS_RESTRICTED</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_VER_SUITE_EMBEDDEDNT</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_VER_SUITE_DATACENTER</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_VER_SUITE_SINGLEUSERTS</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_VER_SUITE_PERSONAL</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_VER_SUITE_BLADE</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_VER_SUITE_STORAGE_SERVER</name></cpp:macro> <cpp:value>0x00002000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_VER_SUITE_COMPUTE_SERVER</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDMP_MAGIC</name></cpp:macro> <cpp:value>"\x4D\x44\x4D\x50\x93\xA7"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVRF_MAX_TRACES</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIDUMP_PAGE_NOACCESS</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIDUMP_PAGE_READONLY</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIDUMP_PAGE_READWRITE</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIDUMP_PAGE_WRITECOPY</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIDUMP_PAGE_EXECUTE</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIDUMP_PAGE_EXECUTE_READ</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIDUMP_PAGE_EXECUTE_READWRITE</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIDUMP_PAGE_EXECUTE_WRITECOPY</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIDUMP_PAGE_GUARD</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIDUMP_PAGE_NOCACHE</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIDUMP_PAGE_WRITECOMBINE</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIDUMP_PAGE_TARGETS_INVALID</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIDUMP_PAGE_TARGETS_NO_UPDATE</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIDUMP_MISC1_PROCESS_ID</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIDUMP_MISC1_PROCESS_TIMES</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIDUMP_MISC1_PROCESSOR_POWER_INFO</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIDUMP_THREAD_INFO_ERROR_THREAD</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIDUMP_THREAD_INFO_WRITING_THREAD</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIDUMP_THREAD_INFO_EXITED_THREAD</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIDUMP_THREAD_INFO_INVALID_INFO</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIDUMP_THREAD_INFO_INVALID_CONTEXT</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIDUMP_THREAD_INFO_INVALID_TEB</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>

<typedef>typedef <type><name>ut32</name></type> <name>rva_t</name>;</typedef>

<typedef>typedef <type><name>ut64</name></type> <name>rva64_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>minidump_callback_type_t</name> <block>{

<decl><name>MODULE_CALLBACK</name></decl>,

<decl><name>THREAD_CALLBACK</name></decl>,

<decl><name>THREAD_EX_CALLBACK</name></decl>,

<decl><name>INCLUDE_THREAD_CALLBACK</name></decl>,

<decl><name>INCLUDE_MODULE_CALLBACK</name></decl>,

<decl><name>MEMORY_CALLBACK</name></decl>,

<decl><name>CANCEL_CALLBACK</name></decl>,

<decl><name>WRITE_KERNEL_MINIDUMP_CALLBACK</name></decl>,

<decl><name>KERNEL_MINIDUMP_STATUS_CALLBACK</name></decl>,

<decl><name>REMOVE_MEMORY_CALLBACK</name></decl>,

<decl><name>INCLUDE_VM_REGION_CALLBACK</name></decl>,

<decl><name>IO_START_CALLBACK</name></decl>,

<decl><name>IO_WRITE_ALL_CALLBACK</name></decl>,

<decl><name>IO_FINISH_CALLBACK</name></decl>,

<decl><name>READ_MEMORY_FAILURE_CALLBACK</name></decl>,

<decl><name>SECONDARY_FLAGS_CALLBACK</name></decl>

}</block></enum></type> <name>minidump_callback_type</name>;</typedef>

<typedef>typedef <type><enum>enum <name>minidump_handle_object_information_type_t</name> <block>{

<decl><name>MINI_HANDLE_OBJECT_INFORMATION_NONE</name></decl>,

<decl><name>MINI_THREAD_INFORMATION_1</name></decl>,

<decl><name>MINI_MUTANT_INFORMATION_1</name></decl>,

<decl><name>MINI_MUTANT_INFORMATION_2</name></decl>,

<decl><name>MINI_PROCESS_INFORMATION_1</name></decl>,

<decl><name>MINI_PROCESS_INFORMATION_2</name></decl>

}</block></enum></type> <name>minidump_handle_object_information_type</name>;</typedef>

<typedef>typedef <type><enum>enum <name>minidump_secondary_flags_t</name> <block>{

<decl><name>MINI_SECONDARY_WITHOUT_POWER_INFO</name> <init>= <expr><literal type="number">0X00000001</literal></expr></init></decl>

}</block></enum></type> <name>minidump_secondary_flags</name>;</typedef>

<typedef>typedef <type><enum>enum <name>minidump_stream_type_t</name> <block>{

<decl><name>UNUSED_STREAM</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>RESERVED_STREAM_0</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>RESERVED_STREAM_1</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>THREAD_LIST_STREAM</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>MODULE_LIST_STREAM</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>MEMORY_LIST_STREAM</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>EXCEPTION_STREAM</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,

<decl><name>SYSTEM_INFO_STREAM</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,

<decl><name>THREAD_EX_LIST_STREAM</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,

<decl><name>MEMORY_64_LIST_STREAM</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,

<decl><name>COMMENT_STREAM_A</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,

<decl><name>COMMENT_STREAM_W</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,

<decl><name>HANDLE_DATA_STREAM</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,

<decl><name>FUNCTION_TABLE_STREAM</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,

<decl><name>UNLOADED_MODULE_LIST_STREAM</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,

<decl><name>MISC_INFO_STREAM</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,

<decl><name>MEMORY_INFO_LIST_STREAM</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

<decl><name>THREAD_INFO_LIST_STREAM</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>,

<decl><name>HANDLE_OPERATION_LIST_STREAM</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>,

<decl><name>TOKEN_STREAM</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>,

<decl><name>JAVASCRIPT_DATA_STREAM</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,

<decl><name>SYSTEM_MEMORY_INFO_STREAM</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,

<decl><name>PROCESS_VM_COUNTERS_STREAM</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>,

<decl><name>IPT_TRACE_STREAM</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>,

<decl><name>THREAD_NAMES_STREAM</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>,

<decl><name>LAST_RESERVED_STREAM</name> <init>= <expr><literal type="number">0xffff</literal></expr></init></decl>

}</block></enum></type> <name>minidump_stream_type</name>;</typedef>

<typedef>typedef <type><enum>enum <name>minidump_type_t</name> <block>{

<decl><name>MINI_DUMP_NORMAL</name> <init>= <expr><literal type="number">0x00000000</literal></expr></init></decl>,

<decl><name>MINI_DUMP_WITH_DATA_SEGS</name> <init>= <expr><literal type="number">0x00000001</literal></expr></init></decl>,

<decl><name>MINI_DUMP_WITH_FULL_MEMORY</name> <init>= <expr><literal type="number">0x00000002</literal></expr></init></decl>,

<decl><name>MINI_DUMP_WITH_HANDLE_DATA</name> <init>= <expr><literal type="number">0x00000004</literal></expr></init></decl>,

<decl><name>MINI_DUMP_FILTER_MEMORY</name> <init>= <expr><literal type="number">0x00000008</literal></expr></init></decl>,

<decl><name>MINI_DUMP_SCAN_MEMORY</name> <init>= <expr><literal type="number">0x00000010</literal></expr></init></decl>,

<decl><name>MINI_DUMP_WITH_UNLOADED_MODULES</name> <init>= <expr><literal type="number">0x00000020</literal></expr></init></decl>,

<decl><name>MINI_DUMP_WITHIN_DIRECTLY_REFERENCED_MEMORY</name> <init>= <expr><literal type="number">0x00000040</literal></expr></init></decl>,

<decl><name>MINI_DUMP_FILTER_MODULE_PATHS</name> <init>= <expr><literal type="number">0x00000080</literal></expr></init></decl>,

<decl><name>MINI_DUMP_WITH_PROCESS_THREAD_DATA</name> <init>= <expr><literal type="number">0x00000100</literal></expr></init></decl>,

<decl><name>MINI_DUMP_WITH_PRIVATE_READ_WRITE_MEMORY</name> <init>= <expr><literal type="number">0x00000200</literal></expr></init></decl>,

<decl><name>MINI_DUMP_WITHOUT_OPTIONAL_DATA</name> <init>= <expr><literal type="number">0x00000400</literal></expr></init></decl>,

<decl><name>MINI_DUMP_WITH_FULL_MEMORY_INFO</name> <init>= <expr><literal type="number">0x00000800</literal></expr></init></decl>,

<decl><name>MINI_DUMP_WITH_THREAD_INFO</name> <init>= <expr><literal type="number">0x00001000</literal></expr></init></decl>,

<decl><name>MINI_DUMP_WITH_CODE_SEGS</name> <init>= <expr><literal type="number">0x00002000</literal></expr></init></decl>,

<decl><name>MINI_DUMP_WITHOUT_AUXILIARY_STATE</name> <init>= <expr><literal type="number">0x00004000</literal></expr></init></decl>,

<decl><name>MINI_DUMP_WITH_FULL_AUXILIARY_STATE</name> <init>= <expr><literal type="number">0x00008000</literal></expr></init></decl>,

<decl><name>MINI_DUMP_WITH_PRIVATE_WRITE_COPY_MEMORY</name> <init>= <expr><literal type="number">0x00010000</literal></expr></init></decl>,

<decl><name>MINI_DUMP_IGNORE_INACCESSIBLE_MEMORY</name> <init>= <expr><literal type="number">0x00020000</literal></expr></init></decl>,

<decl><name>MINI_DUMP_WITH_TOKEN_INFORMATION</name> <init>= <expr><literal type="number">0x00040000</literal></expr></init></decl>,

<decl><name>MINI_DUMP_WITH_MODULE_HEADERS</name> <init>= <expr><literal type="number">0x00080000</literal></expr></init></decl>,

<decl><name>MINI_DUMP_FILTER_TRIAGE</name> <init>= <expr><literal type="number">0x00100000</literal></expr></init></decl>,

<decl><name>MINI_DUMP_VALID_TYPE_FLAGS</name> <init>= <expr><literal type="number">0x001fffff</literal></expr></init></decl>

}</block></enum></type> <name>minidump_type</name>;</typedef>

<typedef>typedef <type><enum>enum <name>module_write_flags_t</name> <block>{

<decl><name>MODULE_WRITE_MODULE</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>,

<decl><name>MODULE_WRITE_DATA_SEG</name> <init>= <expr><literal type="number">0x0002</literal></expr></init></decl>,

<decl><name>MODULE_WRITE_MISC_RECORD</name> <init>= <expr><literal type="number">0x0004</literal></expr></init></decl>,

<decl><name>MODULE_WRITE_CV_RECORD</name> <init>= <expr><literal type="number">0x0008</literal></expr></init></decl>,

<decl><name>MODULE_REFERENCED_BY_MEMORY</name> <init>= <expr><literal type="number">0x0010</literal></expr></init></decl>,

<decl><name>MODULE_WRITE_TLS_DATA</name> <init>= <expr><literal type="number">0x0020</literal></expr></init></decl>,

<decl><name>MODULE_WRITE_CODE_SEGS</name> <init>= <expr><literal type="number">0x0040</literal></expr></init></decl>

}</block></enum></type> <name>module_write_flags</name>;</typedef>

<typedef>typedef <type><enum>enum <name>thread_write_flags_t</name> <block>{

<decl><name>THREAD_WRITE_THREAD</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>,

<decl><name>THREAD_WRITE_STACK</name> <init>= <expr><literal type="number">0x0002</literal></expr></init></decl>,

<decl><name>THREAD_WRITE_CONTEXT</name> <init>= <expr><literal type="number">0x0004</literal></expr></init></decl>,

<decl><name>THREAD_WRITE_BACKING_STORE</name> <init>= <expr><literal type="number">0x0008</literal></expr></init></decl>,

<decl><name>THREAD_WRITE_INSTRUCTION_WINDOW</name> <init>= <expr><literal type="number">0x0010</literal></expr></init></decl>,

<decl><name>THREAD_WRITE_THREAD_DATA</name> <init>= <expr><literal type="number">0x0020</literal></expr></init></decl>,

<decl><name>THREAD_WRITE_THREAD_INFO</name> <init>= <expr><literal type="number">0x0040</literal></expr></init></decl>

}</block></enum></type> <name>thread_write_flags</name>;</typedef>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_header {

ut32 signature;

ut32 version;

ut32 number_of_streams;

rva_t stream_directory_rva;

ut32 check_sum;

union {

ut32 reserved;

ut32 time_date_stamp;

};

ut64 flags;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_location_descriptor {

ut32 data_size;

rva_t rva;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_location_descriptor64 {

ut64 data_size;

rva64_t rva;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_memory_descriptor {

ut64 start_of_memory_range;

struct minidump_location_descriptor memory;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_memory_descriptor64 {

ut64 start_of_memory_range;

ut64 data_size;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_directory {

ut32 stream_type;

struct minidump_location_descriptor location;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_exception {

ut32 exception_code;

ut32 exception_flags;

ut64 exception_record;

ut64 exception_address;

ut32 number_parameters;

ut32 __unused_alignment;

ut64 exception_information[EXCEPTION_MAXIMUM_PARAMETERS];

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_exception_stream {

ut32 thread_id;

ut32 __alignment;

struct minidump_exception exception_record;

struct minidump_location_descriptor thread_context;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_exception_record {

ut32 exception_code;

ut32 exception_flags;

struct minidump_exception_record *exception_record;

void *exception_address;

ut32 number_parameters;

void *exception_information[EXCEPTION_MAXIMUM_PARAMETERS];

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_exception_pointers {

struct minidump_exception_record exception_record;

void *context_record;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_exception_information {

ut32 thread_id;

struct minidump_exception_pointers *exception_pointers;

ut8 client_pointers;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_function_table_descriptor {

ut64 minimum_address;

ut64 maximum_address;

ut64 base_address;

ut32 entry_count;

ut32 size_of_align_pad;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_function_table_stream {

ut32 size_of_header;

ut32 size_of_descriptor;

ut32 size_of_native_descriptor;

ut32 size_of_function_entry;

ut32 number_of_descriptors;

ut32 size_of_align_pad;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_handle_data_stream {

ut32 size_of_header;

ut32 size_of_descriptor;

ut32 number_of_descriptors;

ut32 reserved;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_handle_descriptor {

ut64 handle;

rva_t type_name_rva;

rva_t object_name_rva;

ut32 attributes;

ut32 granted_access;

ut32 handle_count;

ut32 pointer_count;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_handle_descriptor_2 {

ut64 handle;

rva_t type_name_rva;

rva_t object_name_rva;

ut32 attributes;

ut32 granted_access;

ut32 handle_count;

ut32 pointer_count;

rva_t object_info_rva;

ut32 reserved_0;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_handle_object_information {

rva_t next_info_rva;

ut32 info_type;

ut32 size_of_info;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_memory_list {

ut32 number_of_memory_ranges;

struct minidump_memory_descriptor memory_ranges[];

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_memory64_list {

ut64 number_of_memory_ranges;

rva64_t base_rva;

struct minidump_memory_descriptor64 memory_ranges[];

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_memory_info {

ut64 base_address;

ut64 allocation_base;

ut32 allocation_protect;

ut32 __alignment_1;

ut64 region_size;

ut32 state;

ut32 protect;

ut32 type;

ut32 __alignment_2;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_memory_info_list {

ut32 size_of_header;

ut32 size_of_entry;

ut64 number_of_entries;

struct minidump_memory_info entries[];

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_misc_info {

ut32 size_of_info;

ut32 flags_1;

ut32 process_id;

ut32 process_create_time;

ut32 process_user_time;

ut32 process_kernel_time;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_misc_info_2 {

ut32 size_of_info;

ut32 flags_1;

ut32 process_id;

ut32 process_create_time;

ut32 process_user_time;

ut32 process_kernel_time;

ut32 processor_max_mhz;

ut32 processor_current_mhz;

ut32 processor_mhz_limit;

ut32 processor_max_idle_state;

ut32 processor_current_idle_state;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct vs_fixedfileinfo {

ut32 dw_signature;

ut32 dw_struc_version;

ut32 dw_file_version_ms;

ut32 dw_file_version_ls;

ut32 dw_product_version_ms;

ut32 dw_product_version_ls;

ut32 dw_file_flags_mask;

ut32 dw_file_flags;

ut32 dw_file_os;

ut32 dw_file_type;

ut32 dw_file_subtype;

ut32 dw_file_date_ms;

ut32 dw_file_date_ls;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_module {

ut64 base_of_image;

ut32 size_of_image;

ut32 check_sum;

ut32 time_date_stamp;

rva_t module_name_rva;

struct vs_fixedfileinfo version_info;

struct minidump_location_descriptor cv_record;

struct minidump_location_descriptor misc_record;

ut64 reserved_0;

ut64 reserved_1;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_module_list {

ut32 number_of_modules;

struct minidump_module modules[];

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_string {

ut32 length;

ut16 *buffer;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_system_info {

ut16 processor_architecture;

ut16 processor_level;

ut16 processor_revision;

union {

ut16 reserved_0;

struct {

ut8 number_of_processors;

ut8 product_type;

};

};

ut32 major_version;

ut32 minor_version;

ut32 build_number;

ut32 platform_id;

rva_t csd_version_rva;

union {

ut32 reserved_1;

struct {

ut16 suite_mask;

ut16 reserved_2;

};

};

union {

struct {

ut32 vendor_id[<literal type="number">3</literal>];

ut32 version_information;

ut32 feature_information;

ut32 amd_extended_cpu_features;

} x86_cpu_info;

struct {

ut64 processor_features[<literal type="number">2</literal>];

} other_cpu_info;

} cpu;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_thread {

ut32 thread_id;

ut32 suspend_count;

ut32 priority_class;

ut32 priority;

ut64 teb;

struct minidump_memory_descriptor stack;

struct minidump_location_descriptor thread_context;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_thread_list {

ut32 number_of_threads;

struct minidump_thread threads[<literal type="number">0</literal>];

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_thread_ex {

ut32 thread_id;

ut32 suspend_count;

ut32 priority_class;

ut32 priority;

ut64 teb;

struct minidump_memory_descriptor stack;

struct minidump_location_descriptor thread_context;

struct minidump_memory_descriptor backing_store;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_thread_ex_list {

ut32 number_of_threads;

struct minidump_thread_ex threads[];

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_thread_info {

ut32 thread_id;

ut32 dump_flags;

ut32 dump_error;

ut32 exit_status;

ut64 create_time;

ut64 exit_time;

ut64 kernel_time;

ut64 user_time;

ut64 start_address;

ut64 affinity;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_thread_info_list {

ut32 size_of_header;

ut32 size_of_entry;

ut32 number_of_entries;

struct minidump_thread_info entries[];

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_token_info {

ut32 token_size;

ut32 token_id;

ut64 token_handle;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_token_info_list {

ut32 size_of_list;

ut32 number_of_entries;

ut32 list_header_size;

ut32 element_header_size;

struct minidump_token_info entries[];

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_unloaded_module {

ut64 base_of_image;

ut32 size_of_image;

ut32 check_sum;

ut32 time_date_stamp;

rva_t module_name_rva;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_unloaded_module_list {

ut32 size_of_header;

ut32 size_of_entry;

ut32 number_of_entries;

struct minidump_unloaded_module entries[];

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_user_stream {

ut32 type;

ut32 buffer_size;

void *buffer;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_user_stream_information {

ut32 user_stream_count;

struct minidump_user_stream *user_stream_array;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_include_thread_callback {

ut32 thread_id;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_module_callback {

ut16 *full_path;

ut64 base_of_image;

ut32 size_of_image;

ut32 check_sum;

ut32 time_date_stamp;

struct vs_fixedfileinfo version_info;

void *cv_record;

ut32 size_of_cv_record;

void *misc_record;

ut32 size_of_misc_record;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_include_module_callback {

ut64 base_of_image;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_io_callback {

void *Handle;

ut64 offset;

void *buffer;

ut32 buffer_bytes;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_read_memory_failure_callback {

ut64 offset;

ut32 bytes;

st32 failure_status;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_callback_output {

union {

ut32 module_write_flags;

ut32 thread_write_flags;

ut32 secondary_flags;

struct {

ut64 memory_base;

ut32 memory_size;

};

struct {

ut8 check_cancel;

ut8 cancel;

};

void *handle;

};

struct {

struct minidump_memory_info vm_region;

ut8 should_continue;

};

st32 status;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct avrf_backtrace_information {

ut32 depth;

ut32 index;

ut64 return_addresses[AVRF_MAX_TRACES];

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct avrf_handle_operation {

ut64 handle;

ut32 process_id;

ut32 thread_id;

ut32 operation_type;

ut32 spare_0;

struct avrf_backtrace_information back_trace_information;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>R_PACKED</name> <argument_list>(

<argument>struct minidump_handle_operation_list {

ut32 size_of_header;

ut32 size_of_entry;

ut32 number_of_entries;

ut32 reserved;

struct avrf_handle_operation entries[];

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</unit>
