<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\format\objc\mach0_classes.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../i/private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mach0_classes.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RO_META</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CLASS_NAME_LEN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<function><type><name><name>struct</name> <name>MACH0_</name></name></type>(<name>SMethodList</name>) <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>entsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>count</name></decl>;</decl_stmt>

</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name><name>struct</name> <name>MACH0_</name></name></type>(<name>SMethod</name>) <block>{<block_content>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>types</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>imp</name></decl>;</decl_stmt> 

</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name><name>struct</name> <name>MACH0_</name></name></type>(<name>SClass</name>) <block>{<block_content>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>isa</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>superclass</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>cache</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>vtable</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>data</name></decl>;</decl_stmt> 

</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name><name>struct</name> <name>MACH0_</name></name></type>(<name>SClassRoT</name>) <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>instanceStart</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>instanceSize</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_BIN_MACH064</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ut32</name></type> <name>reserved</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>ivarLayout</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>baseMethods</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>baseProtocols</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>ivars</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>weakIvarLayout</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>baseProperties</name></decl>;</decl_stmt> 

</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name><name>struct</name> <name>MACH0_</name></name></type>(<name>SProtocolList</name>) <block>{<block_content>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>count</name></decl>;</decl_stmt> 

</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name><name>struct</name> <name>MACH0_</name></name></type>(<name>SProtocol</name>) <block>{<block_content>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>isa</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>protocols</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>instanceMethods</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>classMethods</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>optionalInstanceMethods</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>optionalClassMethods</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>instanceProperties</name></decl>;</decl_stmt> 

</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name><name>struct</name> <name>MACH0_</name></name></type>(<name>SIVarList</name>) <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>entsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>count</name></decl>;</decl_stmt>

</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name><name>struct</name> <name>MACH0_</name></name></type>(<name>SIVar</name>) <block>{<block_content>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut32</name></type> <name>alignment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>size</name></decl>;</decl_stmt>

</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name><name>struct</name> <name>MACH0_</name></name></type>(<name>SObjcProperty</name>) <block>{<block_content>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>attributes</name></decl>;</decl_stmt> 

</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name><name>struct</name> <name>MACH0_</name></name></type>(<name>SObjcPropertyList</name>) <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>entsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>count</name></decl>;</decl_stmt>

</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name><name>struct</name> <name>MACH0_</name></name></type>(<name>SCategory</name>) <block>{<block_content>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>targetClass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>instanceMethods</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>classMethods</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>protocols</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>properties</name></decl>;</decl_stmt>

</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function_decl><type><specifier>static</specifier> <name>mach0_ut</name></type> <name>va2pa</name><parameter_list>(<parameter><decl><type><name>mach0_ut</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>copy_sym_name_with_namespace</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>read_name</name></decl></parameter>, <parameter><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>get_ivar_list_t</name><parameter_list>(<parameter><decl><type><name>mach0_ut</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>klass</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>get_objc_property_list</name><parameter_list>(<parameter><decl><type><name>mach0_ut</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>klass</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>get_method_list_t</name><parameter_list>(<parameter><decl><type><name>mach0_ut</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>klass</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_static</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>get_protocol_list_t</name><parameter_list>(<parameter><decl><type><name>mach0_ut</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>klass</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>get_class_ro_t</name><parameter_list>(<parameter><decl><type><name>mach0_ut</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>is_meta_class</name></decl></parameter>, <parameter><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>klass</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier><name>MACH0_</name></type>(<name>parse_categories</name>)<parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>relocs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>read_ptr_pa</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>paddr</name></decl></parameter>, <parameter><decl><type><name>mach0_ut</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>read_ptr_va</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>vaddr</name></decl></parameter>, <parameter><decl><type><name>mach0_ut</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>read_str</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>mach0_ut</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>left</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_class_name</name><parameter_list>(<parameter><decl><type><name>mach0_ut</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_thumb</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>bin</name> <init>= <expr><operator>(</operator>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>cputype</name></name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>cpusubtype</name></name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mach0_ut</name></type> <name>va2pa</name><parameter_list>(<parameter><decl><type><name>mach0_ut</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>sctns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>bin</name> <init>= <expr><operator>(</operator>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call><operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>va2pa</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name><name>bin</name><operator>-&gt;</operator><name>va2pa</name></name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sctns</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sctns</name> <operator>=</operator> <call><name><name>r_bin_plugin_mach</name><operator>.</operator><name>sections</name></name> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sctns</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>sctns</argument>, <argument>iter</argument>, <argument>s</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>vsize</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name>addr</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>vaddr</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>vsize</name></name> <operator>-</operator> <operator>(</operator><name>addr</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>vaddr</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>paddr</name></name> <operator>-</operator> <name><name>obj</name><operator>-&gt;</operator><name>boffset</name></name> <operator>+</operator> <operator>(</operator><name>addr</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>vaddr</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_sym_name_with_namespace</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>read_name</name></decl></parameter>, <parameter><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>class_name</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>classname</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>read_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sort_by_offset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_a</name></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinField</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><name>RBinField</name><operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinField</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>RBinField</name><operator>*</operator><operator>)</operator><name>_b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>a</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>offset</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_ivar_list_t</name><parameter_list>(<parameter><decl><type><name>mach0_ut</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>klass</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>SIVarList</name></expr></argument>)</argument_list> <name>il</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>SIVar</name></expr></argument>)</argument_list> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>left</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>bigendian</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>ivar_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinField</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>sivarlist</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SIVarList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>sivar</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SIVar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>offs</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bf</name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"uncorrect RBinFile pointer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bigendian</name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>big_endian</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>va2pa</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <name>left</name> <operator>&lt;</operator> <name>r</name> <operator>||</operator> <name>r</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SIVarList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>r</name> <operator>+</operator> <name>left</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SIVarList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SIVarList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>sivarlist</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>left</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>sivarlist</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SIVarList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SIVarList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>il</name><operator>.</operator><name>entsize</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sivarlist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>il</name><operator>.</operator><name>count</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sivarlist</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SIVarList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SIVarList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>base_offset</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>il</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>va2pa</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SIVar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <name>left</name> <operator>&lt;</operator> <name>r</name> <operator>||</operator> <name>r</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SIVar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>r</name> <operator>+</operator> <name>left</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SIVar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SIVar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>sivar</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>left</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>sivar</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SIVar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SIVar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_BIN_MACH064</name></expr></cpp:if>

<expr_stmt><expr><name><name>i</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sivar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sivar</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>.</operator><name>type</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sivar</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>.</operator><name>alignment</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sivar</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sivar</name><index>[<expr><literal type="number">28</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>i</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sivar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sivar</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>.</operator><name>type</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sivar</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>.</operator><name>alignment</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sivar</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sivar</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <call><name>va2pa</name> <argument_list>(<argument><expr><name><name>i</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>i</name><operator>.</operator><name>offset</name></name> <operator>-</operator> <name>base_offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>base_offset</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>base_offset</name> <operator>=</operator> <name><name>i</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ivar_offset</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>left</name> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>, <argument><expr><name>offs</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error reading\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ivar_offset</name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><name>offs</name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>va2pa</name> <argument_list>(<argument><expr><name><name>i</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>bin</name> <init>= <expr><operator>(</operator>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <name>left</name> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>r</name> <operator>+</operator> <name>left</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>has_crypto</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"some_encrypted_data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>name_len</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>MAX_CLASS_NAME_LEN</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>name_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error reading\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><name>name_len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s::%s%s"</literal></expr></argument>, <argument><expr><name><name>klass</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"(ivar)"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>va2pa</name> <argument_list>(<argument><expr><name><name>i</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>bin</name> <init>= <expr><operator>(</operator>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_crypted</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>has_crypto</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <name>left</name> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>r</name> <operator>+</operator> <name>left</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_crypted</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"some_encrypted_data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type_len</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>MAX_CLASS_NAME_LEN</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>type_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>type</name></expr></argument>, <argument><expr><name>type_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type</name><index>[<expr><name>type_len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>klass</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SIVar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SIVar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_sort</name> <argument_list>(<argument><expr><name><name>klass</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>, <argument><expr><name>sort_by_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>first_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>prev_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>klass-&gt;fields</argument>, <argument>iter</argument>, <argument>field</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first_offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>first_offset</name> <operator>=</operator> <name><name>field</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;</operator> <name>prev_offset</name> <operator>+</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>prev_offset</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev_offset</name> <operator>=</operator> <name><name>field</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RBinField</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinField</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"_padding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>first_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>field</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"uint64_t"</literal></expr></then><else>: <expr><literal type="string">"uint32_t"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>base_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_prepend</name> <argument_list>(<argument><expr><name><name>klass</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_sort</name> <argument_list>(<argument><expr><name><name>klass</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>, <argument><expr><name>sort_by_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>r_bin_field_free</name> <argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_objc_property_list</name><parameter_list>(<parameter><decl><type><name>mach0_ut</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>klass</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>SObjcPropertyList</name></expr></argument>)</argument_list> <name>opl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>SObjcProperty</name></expr></argument>)</argument_list> <name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>left</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>bigendian</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinField</name> <modifier>*</modifier></type><name>property</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>sopl</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SObjcPropertyList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>sop</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SObjcProperty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bf</name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"uncorrect RBinFile pointer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bigendian</name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>big_endian</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>va2pa</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>opl</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SObjcPropertyList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <name>left</name> <operator>&lt;</operator> <name>r</name> <operator>||</operator> <name>r</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SObjcPropertyList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>r</name> <operator>+</operator> <name>left</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SObjcPropertyList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SObjcPropertyList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>sopl</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>left</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>sopl</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SObjcPropertyList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SObjcPropertyList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>opl</name><operator>.</operator><name>entsize</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sopl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opl</name><operator>.</operator><name>count</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sopl</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SObjcPropertyList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SObjcPropertyList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>opl</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>va2pa</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>property</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinField</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SObjcProperty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <name>left</name> <operator>&lt;</operator> <name>r</name> <operator>||</operator> <name>r</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SObjcProperty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>r</name> <operator>+</operator> <name>left</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SObjcProperty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SObjcProperty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>sop</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>left</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>sop</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SObjcProperty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SObjcProperty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sop</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>attributes</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sop</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>va2pa</name> <argument_list>(<argument><expr><name><name>op</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>bin</name> <init>= <expr><operator>(</operator>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>r</name> <operator>+</operator> <name>left</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <name>left</name> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>has_crypto</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"some_encrypted_data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>name_len</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>MAX_CLASS_NAME_LEN</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>name_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>name_len</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>property</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s::%s%s"</literal></expr></argument>, <argument><expr><name><name>klass</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><literal type="string">"(property)"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

r = va2pa (op.attributes, NULL, &amp;left, bf);

if (r != 0) {

struct MACH0_(obj_t) *bin = (struct MACH0_(obj_t) *) bf-&gt;o-&gt;bin_obj;

int is_crypted = bin-&gt;has_crypto;

if (r &gt; bf-&gt;size || r + left &gt; bf-&gt;size) goto error;

if (r + left &lt; r) goto error;

if (is_crypted == 1) {

name = strdup ("some_encrypted_data");

left = strlen (name) + 1;

} else {

name = malloc (left);

len = r_buf_read_at (bf-&gt;buf, r, (ut8 *)name, left);

if (len == 0 || len == -1) goto error;

}

R_FREE (name);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>klass</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>, <argument><expr><name>property</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SObjcProperty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SObjcProperty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_method_list_t</name><parameter_list>(<parameter><decl><type><name>mach0_ut</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>klass</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_static</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>SMethodList</name></expr></argument>)</argument_list> <name>ml</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>SMethod</name></expr></argument>)</argument_list> <name>m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>left</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rtype</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>bigendian</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>sml</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SMethodList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>sm</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SMethod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>method</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bf</name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"incorrect RBinFile pointer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bigendian</name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>big_endian</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>va2pa</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ml</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SMethodList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <name>left</name> <operator>&lt;</operator> <name>r</name> <operator>||</operator> <name>r</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SMethodList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SMethodList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SMethodList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>sml</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>left</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>sml</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SMethodList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SMethodList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ml</name><operator>.</operator><name>entsize</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sml</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ml</name><operator>.</operator><name>count</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sml</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SMethodList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SMethodList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ml</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>va2pa</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>method</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SMethod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <name>left</name> <operator>&lt;</operator> <name>r</name> <operator>||</operator> <name>r</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SMethod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SMethod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SMethod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>sm</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>left</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>sm</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SMethod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SMethod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>.</operator><name>types</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sm</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>.</operator><name>imp</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sm</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>va2pa</name> <argument_list>(<argument><expr><name><name>m</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>bin</name> <init>= <expr><operator>(</operator>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <name>left</name> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>r</name> <operator>+</operator> <name>MAX_CLASS_NAME_LEN</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>has_crypto</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"some_encrypted_data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>name_len</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>MAX_CLASS_NAME_LEN</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>name_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><name>name_len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>copy_sym_name_with_namespace</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>va2pa</name> <argument_list>(<argument><expr><name><name>m</name><operator>.</operator><name>types</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>bin</name> <init>= <expr><operator>(</operator>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <name>left</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>r</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <name><name>left</name> <argument_list type="generic">&lt; <argument><expr><name>r</name> <operator>||</operator> <name>r</name></expr></argument> &gt;</argument_list></name> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>r</name> <operator>+</operator> <name>left</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>has_crypto</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rtype</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"some_encrypted_data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>rtype</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>left</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rtype</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>left</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rtype</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>rtype</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>left</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>rtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rtype</name><index>[<expr><name>left</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>rtype</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>rtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>rtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>m</name><operator>.</operator><name>imp</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>method</name><operator>-&gt;</operator><name>vaddr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>next</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><name>is_static</name></expr>?</condition><then> <expr><name>R_BIN_TYPE_FUNC_STR</name></expr></then><else>: <expr><name>R_BIN_TYPE_METH_STR</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_static</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>method_flags</name></name> <operator>|=</operator> <name>R_BIN_METH_CLASS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_thumb</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>method</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>klass</name><operator>-&gt;</operator><name>methods</name></name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>next</name>:</label>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SMethod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SMethod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_protocol_list_t</name><parameter_list>(<parameter><decl><type><name>mach0_ut</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>klass</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>SProtocolList</name></expr></argument>)</argument_list> <name>pl</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>SProtocol</name></expr></argument>)</argument_list> <name>pc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>left</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>q</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>bigendian</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>spl</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SProtocolList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>spc</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SProtocol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>sptr</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bf</name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"get_protocol_list_t: Invalid RBinFile pointer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bigendian</name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>big_endian</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>va2pa</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <name>left</name> <operator>&lt;</operator> <name>r</name> <operator>||</operator> <name>r</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SProtocolList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>r</name> <operator>+</operator> <name>left</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SProtocolList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SProtocolList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>spl</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>left</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>spl</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SProtocolList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SProtocolList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pl</name><operator>.</operator><name>count</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>spl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SProtocolList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SProtocolList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pl</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>va2pa</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <name>left</name> <operator>&lt;</operator> <name>r</name> <operator>||</operator> <name>r</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>r</name> <operator>+</operator> <name>left</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>sptr</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>left</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>sptr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>va2pa</name> <argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pc</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SProtocol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <name>left</name> <operator>&lt;</operator> <name>r</name> <operator>||</operator> <name>r</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SProtocol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>r</name> <operator>+</operator> <name>left</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SProtocol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SProtocol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>spc</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>left</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>spc</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SProtocol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SProtocol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>.</operator><name>isa</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>spc</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>spc</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>.</operator><name>protocols</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>spc</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>.</operator><name>instanceMethods</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>spc</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>.</operator><name>classMethods</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>spc</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>.</operator><name>optionalInstanceMethods</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>spc</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>.</operator><name>optionalClassMethods</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>spc</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>.</operator><name>instanceProperties</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>spc</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>va2pa</name> <argument_list>(<argument><expr><name><name>pc</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>bin</name> <init>= <expr><operator>(</operator>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <name>left</name> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>r</name> <operator>+</operator> <name>left</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>has_crypto</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"some_encrypted_data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>name_len</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>MAX_CLASS_NAME_LEN</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>name_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>name_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><name>name_len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>class_name</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s::%s%s"</literal></expr></argument>, <argument><expr><name><name>klass</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"(protocol)"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>.</operator><name>instanceMethods</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_method_list_t</name> <argument_list>(<argument><expr><name><name>pc</name><operator>.</operator><name>instanceMethods</name></name></expr></argument>, <argument><expr><name>bf</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>.</operator><name>classMethods</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_method_list_t</name> <argument_list>(<argument><expr><name><name>pc</name><operator>.</operator><name>classMethods</name></name></expr></argument>, <argument><expr><name>bf</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>skipnum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<while>while <condition>(<expr><call><name>IS_DIGIT</name> <argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>demangle_classname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>modlen</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>kstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>klass</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"_TtC"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>s</name><index>[<expr><name>off</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><index>[<expr><name>off</name></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'0'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>off</name></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>off</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>modlen</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name> <operator>||</operator> <name>len</name> <operator>&gt;=</operator> <name>modlen</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>module</name> <operator>=</operator> <call><name>r_str_ndup</name> <argument_list>(<argument><expr><call><name>skipnum</name> <argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip</name> <init>= <expr><operator>(</operator><call><name>skipnum</name> <argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>s</name><operator>)</operator> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>skip</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>skip</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <operator>(</operator><call><name>skipnum</name> <argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>skip</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>s</name><operator>)</operator> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>kstr</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>skip</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>kstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>modlen</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>kstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name> <operator>||</operator> <name>len</name> <operator>&gt;=</operator> <name>modlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>klass</name> <operator>=</operator> <call><name>r_str_ndup</name> <argument_list>(<argument><expr><call><name>skipnum</name> <argument_list>(<argument><expr><name>kstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name>module</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_class_name</name><parameter_list>(<parameter><decl><type><name>mach0_ut</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>bin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>bigendian</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>sc</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>ptr_size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bf</name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid RBinFile pointer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bigendian</name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>big_endian</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bin</name> <operator>=</operator> <operator>(</operator>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>va2pa</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>+</operator> <name>left</name><operator>)</operator> <operator>&lt;</operator> <name>r</name> <operator>||</operator> <operator>(</operator><name>r</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>ptr_size</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>rodata</name> <init>= <expr><call><name>r_read_ble</name> <argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>ptr_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>va2pa</name> <argument_list>(<argument><expr><name>rodata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <name>left</name> <operator>&lt;</operator> <name>r</name> <operator>||</operator> <name>r</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_BIN_MACH064</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>ptr_size</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>ptr_size</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>name</name> <init>= <expr><call><name>r_read_ble</name> <argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>ptr_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>va2pa</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>r</name> <operator>+</operator> <name>left</name> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>r</name> <operator>+</operator> <name>MAX_CLASS_NAME_LEN</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>has_crypto</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"some_encrypted_data"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>name_len</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>MAX_CLASS_NAME_LEN</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>name_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>name_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><name>rc</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>result</name> <init>= <expr><call><name>demangle_classname</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_class_ro_t</name><parameter_list>(<parameter><decl><type><name>mach0_ut</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>is_meta_class</name></decl></parameter>, <parameter><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>klass</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>bin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>SClassRoT</name></expr></argument>)</argument_list> <name>cro</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>left</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>bigendian</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>scro</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SClassRoT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bf</name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid RBinFile pointer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bigendian</name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>big_endian</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bin</name> <operator>=</operator> <operator>(</operator>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>va2pa</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <name>left</name> <operator>&lt;</operator> <name>r</name> <operator>||</operator> <name>r</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>cro</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>r</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>cro</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>cro</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>cro</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Not enough data for SClassRoT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>scro</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>cro</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cro</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>scro</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cro</name><operator>.</operator><name>instanceStart</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>scro</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cro</name><operator>.</operator><name>instanceSize</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>scro</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_BIN_MACH064</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>cro</name><operator>.</operator><name>reserved</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>scro</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>cro</name><operator>.</operator><name>ivarLayout</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>scro</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cro</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>scro</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cro</name><operator>.</operator><name>baseMethods</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>scro</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cro</name><operator>.</operator><name>baseProtocols</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>scro</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cro</name><operator>.</operator><name>ivars</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>scro</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cro</name><operator>.</operator><name>weakIvarLayout</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>scro</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cro</name><operator>.</operator><name>baseProperties</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>scro</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>va2pa</name> <argument_list>(<argument><expr><name><name>cro</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>r</name> <operator>+</operator> <name>left</name> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>r</name> <operator>+</operator> <name>left</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>has_crypto</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>klass</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"some_encrypted_data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>klass</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>name_len</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>MAX_CLASS_NAME_LEN</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>name_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>name_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><name>rc</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>klass</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>demangle_classname</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"objc_class_%s.offset"</literal></expr></argument>, <argument><expr><name><name>klass</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_BIN_MACH064</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"objc_class.format"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"lllll isa super cache vtable data"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"objc_class.format"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"xxxxx isa super cache vtable data"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>cro</name><operator>.</operator><name>baseMethods</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_method_list_t</name> <argument_list>(<argument><expr><name><name>cro</name><operator>.</operator><name>baseMethods</name></name></expr></argument>, <argument><expr><name>bf</name></expr></argument>, <argument><expr><name><name>klass</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>cro</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>RO_META</name><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cro</name><operator>.</operator><name>baseProtocols</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_protocol_list_t</name> <argument_list>(<argument><expr><name><name>cro</name><operator>.</operator><name>baseProtocols</name></name></expr></argument>, <argument><expr><name>bf</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cro</name><operator>.</operator><name>ivars</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_ivar_list_t</name> <argument_list>(<argument><expr><name><name>cro</name><operator>.</operator><name>ivars</name></name></expr></argument>, <argument><expr><name>bf</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cro</name><operator>.</operator><name>baseProperties</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_objc_property_list</name> <argument_list>(<argument><expr><name><name>cro</name><operator>.</operator><name>baseProperties</name></name></expr></argument>, <argument><expr><name>bf</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_meta_class</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>is_meta_class</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>cro</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>RO_META</name><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mach0_ut</name></type> <name>get_isa_value</name><parameter_list>()</parameter_list> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <name>MACH0_</name></type>(<name>get_class_t</name>)<parameter_list>(<parameter><decl><type><name>mach0_ut</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>klass</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dupe</name></decl></parameter>, <parameter><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>relocs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>SClass</name></expr></argument>)</argument_list> <name>c</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SClass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>is_meta_class</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>bigendian</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>sc</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SClass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bf</name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bigendian</name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>big_endian</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>va2pa</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>+</operator> <name>left</name><operator>)</operator> <operator>&lt;</operator> <name>r</name> <operator>||</operator> <operator>(</operator><name>r</name> <operator>+</operator> <name>size</name><operator>)</operator> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot parse obj class info out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>isa</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>superclass</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>cache</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>vtable</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>klass</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>c</name><operator>.</operator><name>isa</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>.</operator><name>superclass</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>klass</name><operator>-&gt;</operator><name>super</name></name> <operator>=</operator> <call><name>get_class_name</name> <argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>superclass</name></name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>relocs</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>reloc_t</name></name></type> <name>reloc_at_class_addr</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>reloc_at_class_addr</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RSkipListNode</name> <modifier>*</modifier></type><name>found</name> <init>= <expr><call><name>r_skiplist_find</name> <argument_list>(<argument><expr><name>relocs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reloc_at_class_addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_objc_class</name> <init>= <expr><literal type="string">"_OBJC_CLASS_$_"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>_objc_class_len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>_objc_class</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>target_class_name</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator>struct <name>reloc_t</name><operator>*</operator><operator>)</operator> <name><name>found</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>target_class_name</name></expr></argument>, <argument><expr><name>_objc_class</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>target_class_name</name> <operator>+=</operator> <name>_objc_class_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>klass</name><operator>-&gt;</operator><name>super</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>target_class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>get_class_ro_t</name> <argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>data</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x3</literal></expr></argument>, <argument><expr><name>bf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_meta_class</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SWIFT_SUPPORT</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>q</name> <argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>n_value</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"This is a Swift class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_meta_class</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>dupe</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>isa_n_value</name> <init>= <expr><call><name>get_isa_value</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>tmp</name> <init>= <expr><name><name>klass</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_class_t</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>isa</name></name> <operator>+</operator> <name>isa_n_value</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>relocs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>klass</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static RList *parse_swift_classes(RBinFile *bf) {

bool is_swift = false;

RBinString *str;

RListIter *iter;

RBinClass *cls;

RList *ret;

char *lib;

r_list_foreach (bf-&gt;o-&gt;libs, iter, lib) {

if (strstr (lib, "libswift")) {

is_swift = true;

break;

}

}

if (!is_swift) {

return NULL;

}

int idx = 0;

ret = r_list_newf (r_bin_string_free);

r_list_foreach (bf-&gt;o-&gt;strings, iter, str) {

if (!strncmp (str-&gt;string, "_TtC", 4)) {

char *msg = strdup (str-&gt;string + 4);

cls = R_NEW0 (RBinClass);

cls-&gt;name = strdup (msg);

cls-&gt;super = strdup (msg);

cls-&gt;index = idx++;

r_list_append (ret, cls);

free (msg);

}

}

return ret;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>RList</name> <modifier>*</modifier><name>MACH0_</name></type>(<name>parse_classes</name>)<parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>num_of_unnamed_class</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>klass</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>sctns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>paddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>s_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>bigendian</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>pp</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bigendian</name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>big_endian</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>relocs</name> <init>= <expr><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_relocs</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>parse_categories</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>relocs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>section_t</name></name> <modifier>*</modifier></type><name>sections</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sections</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_sections</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"__objc_classlist"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>paddr</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s_size</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_found</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>get_classes_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_bin_class_free</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>get_classes_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>s_size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>left</name> <operator>=</operator> <name>s_size</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Chopped classlist data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>klass</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinClass</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>get_classes_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>klass</name><operator>-&gt;</operator><name>methods</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>get_classes_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>klass</name><operator>-&gt;</operator><name>fields</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>get_classes_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>paddr</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>paddr</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>get_classes_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>paddr</name> <operator>+</operator> <name>size</name> <operator>&lt;</operator> <name>paddr</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>get_classes_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>paddr</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<goto>goto <name>get_classes_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>MACH0_</name></type>(<name>get_class_t</name>) <parameter_list>(<parameter><decl><type><name>p</name></type></decl></parameter>, <parameter><decl><type><name>bf</name></type></decl></parameter>, <parameter><decl><type><name>klass</name></type></decl></parameter>, <parameter><decl><type><name>false</name></type></decl></parameter>, <parameter><decl><type><name>relocs</name></type></decl></parameter>)</parameter_list>;</function_decl>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>klass</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>klass</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"UnnamedClass%"</literal> <name>PFMT64d</name></expr></argument>, <argument><expr><name>num_of_unnamed_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>klass</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>get_classes_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num_of_unnamed_class</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>

<label><name>get_classes_error</name>:</label>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>sctns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier><name>MACH0_</name></type>(<name>parse_categories</name>)<parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>relocs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>ptr_size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>paddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>s_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>section_t</name></name> <modifier>*</modifier></type><name>sections</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sections</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_sections</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>!</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"__objc_catlist"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>paddr</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s_size</name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_found</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_bin_class_free</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>relocs</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>s_size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>ptr_size</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>klass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s_size</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>&lt;</operator> <name>ptr_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Chopped catlist data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>klass</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinClass</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>klass</name><operator>-&gt;</operator><name>methods</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>klass</name><operator>-&gt;</operator><name>fields</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_ptr_pa</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>paddr</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<function_decl><type><name>MACH0_</name></type>(<name>get_category_t</name>) <parameter_list>(<parameter><decl><type><name>p</name></type></decl></parameter>, <parameter><decl><type><name>bf</name></type></decl></parameter>, <parameter><decl><type><name>klass</name></type></decl></parameter>, <parameter><decl><type><name>relocs</name></type></decl></parameter>)</parameter_list>;</function_decl>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>klass</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <name>MACH0_</name></type>(<name>get_category_t</name>)<parameter_list>(<parameter><decl><type><name>mach0_ut</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>klass</name></decl></parameter>, <parameter><decl><type><name>RSkipList</name> <modifier>*</modifier></type><name>relocs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>SCategory</name></expr></argument>)</argument_list> <name>c</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SCategory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>bigendian</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>big_endian</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>sc</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>SCategory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>va2pa</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>+</operator> <name>left</name><operator>)</operator> <operator>&lt;</operator> <name>r</name> <operator>||</operator> <operator>(</operator><name>r</name> <operator>+</operator> <name>size</name><operator>)</operator> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>r</name> <operator>+</operator> <name>left</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot parse obj category info out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>ptr_size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>bits</name> <init>= <expr><literal type="number">8</literal> <operator>*</operator> <name>ptr_size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>ptr_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>targetClass</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>ptr_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>instanceMethods</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>ptr_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>classMethods</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>ptr_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>protocols</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>ptr_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>properties</name></name> <operator>=</operator> <call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bigendian</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>category_name</name> <init>= <expr><call><name>read_str</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>category_name</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>target_class_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>.</operator><name>targetClass</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>relocs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>category_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>reloc_t</name></name></type> <name>reloc_at_class_addr</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>reloc_at_class_addr</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>ptr_size</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RSkipListNode</name> <modifier>*</modifier></type><name>found</name> <init>= <expr><call><name>r_skiplist_find</name> <argument_list>(<argument><expr><name>relocs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reloc_at_class_addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>category_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_objc_class</name> <init>= <expr><literal type="string">"_OBJC_CLASS_$_"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>_objc_class_len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>_objc_class</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>target_class_name</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator>struct <name>reloc_t</name><operator>*</operator><operator>)</operator> <name><name>found</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>target_class_name</name></expr></argument>, <argument><expr><name>_objc_class</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>category_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>target_class_name</name> <operator>+=</operator> <name>_objc_class_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>klass</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s(%s)"</literal></expr></argument>, <argument><expr><name>target_class_name</name></expr></argument>, <argument><expr><name>category_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>ro_data_field</name> <init>= <expr><name><name>c</name><operator>.</operator><name>targetClass</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>ptr_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>ro_data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_ptr_va</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>ro_data_field</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ro_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>category_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>name_field</name> <init>= <expr><name>ro_data</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>ptr_size</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_BIN_MACH064</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>name_field</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>name_at</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_ptr_va</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>name_field</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>name_at</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>category_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>target_class_name</name> <operator>=</operator> <call><name>read_str</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>name_at</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>demangled</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>target_class_name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>demangled</name> <operator>=</operator> <call><name>demangle_classname</name> <argument_list>(<argument><expr><name>target_class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>klass</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s(%s)"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>demangled</name></expr> ?</condition><then> <expr><name>demangled</name></expr> </then><else>: <expr><literal type="string">"(null)"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>category_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>target_class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>demangled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>klass</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>category_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>.</operator><name>instanceMethods</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_method_list_t</name> <argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>instanceMethods</name></name></expr></argument>, <argument><expr><name>bf</name></expr></argument>, <argument><expr><name><name>klass</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>.</operator><name>classMethods</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_method_list_t</name> <argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>classMethods</name></name></expr></argument>, <argument><expr><name>bf</name></expr></argument>, <argument><expr><name><name>klass</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>.</operator><name>protocols</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_protocol_list_t</name> <argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>protocols</name></name></expr></argument>, <argument><expr><name>bf</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>.</operator><name>properties</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_objc_property_list</name> <argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>properties</name></name></expr></argument>, <argument><expr><name>bf</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>read_ptr_pa</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>paddr</name></decl></parameter>, <parameter><decl><type><name>mach0_ut</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ptr_size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>pp</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>paddr</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>, <argument><expr><name>ptr_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>ptr_size</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>p</name> <init>= <expr><call><name>r_read_ble</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>ptr_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>read_ptr_va</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>vaddr</name></decl></parameter>, <parameter><decl><type><name>mach0_ut</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>paddr</name> <init>= <expr><call><name>va2pa</name> <argument_list>(<argument><expr><name>vaddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>paddr</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>left</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mach0_ut</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>read_ptr_pa</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>paddr</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>read_str</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>mach0_ut</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>left</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name>offset</name> <operator>&amp;&amp;</operator> <name>left</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>mach0_ut</name></type> <name>paddr</name> <init>= <expr><call><name>va2pa</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>paddr</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>left</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>name_len</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>MAX_CLASS_NAME_LEN</name></expr></argument>, <argument><expr><operator>*</operator><name>left</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>name_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>paddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>name_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error reading\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>name</name></expr>;</return>

</block_content>}</block></function>

</unit>
