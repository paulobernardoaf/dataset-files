<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\format\elf\elf_write.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"elf.h"</cpp:file></cpp:include>

<function><type><name>ut64</name> <name>Elf_</name></type>(<name>r_bin_elf_resize_section</name>)<parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Elf_</name></name></type><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>bin</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>Elf_</name><argument_list>(<argument><expr><name>Ehdr</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ehdr</name> <operator>=</operator> <operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>ehdr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Elf_</name><argument_list>(<argument><expr><name>Phdr</name></expr></argument>)</argument_list></call> <operator>*</operator><name>phdr</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>phdr</name></name></expr><operator>,</operator> <expr><operator>*</operator><name>phdrp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Elf_</name><argument_list>(<argument><expr><name>Shdr</name></expr></argument>)</argument_list></call> <operator>*</operator><name>shdr</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>shdr</name></name></expr><operator>,</operator> <expr><operator>*</operator><name>shdrp</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strtab</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>shstrtab</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>off</name></decl>, <decl><type ref="prev"/><name>got_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>got_addr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rsz_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>delta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>rsz_osize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rsz_size</name> <init>= <expr><name>size</name></expr></init></decl>, <decl><type ref="prev"/><name>rest_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"0 size section?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>shdrp</name> <operator>=</operator> <name>shdr</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ehdr</name><operator>-&gt;</operator><name>e_shnum</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>shdrp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>shdrp</name><operator>-&gt;</operator><name>sh_name</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>idx</name> <operator>&gt;=</operator> <name><name>bin</name><operator>-&gt;</operator><name>shstrtab_size</name></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sh_name</name> <init>= <expr><operator>&amp;</operator><name><name>strtab</name><index>[<expr><name><name>shdrp</name><operator>-&gt;</operator><name>sh_name</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sh_name</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>sh_name</name></expr></argument>, <argument><expr><name>ELF_STRING_LENGTH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>rsz_size</name> <operator>-</operator> <name><name>shdrp</name><operator>-&gt;</operator><name>sh_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rsz_offset</name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><name><name>shdrp</name><operator>-&gt;</operator><name>sh_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rsz_osize</name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><name><name>shdrp</name><operator>-&gt;</operator><name>sh_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot find section\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"delta: %"</literal><name>PFMT64d</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>shdrp</name> <operator>=</operator> <name>shdr</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ehdr</name><operator>-&gt;</operator><name>e_shnum</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>shdrp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>strtab</name><index>[<expr><name><name>shdrp</name><operator>-&gt;</operator><name>sh_name</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">".got"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>got_addr</name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><name><name>shdrp</name><operator>-&gt;</operator><name>sh_addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>got_offset</name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><name><name>shdrp</name><operator>-&gt;</operator><name>sh_offset</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>got_addr</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>got_offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>shdrp</name> <operator>=</operator> <name>shdr</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ehdr</name><operator>-&gt;</operator><name>e_shnum</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>shdrp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>strtab</name><index>[<expr><name><name>shdrp</name><operator>-&gt;</operator><name>sh_name</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">".rel.plt"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Elf_</name><argument_list>(<argument><expr><name>Rel</name></expr></argument>)</argument_list></call> <operator>*</operator><name>rel</name></expr><operator>,</operator> <expr><operator>*</operator><name>relp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rel</name> <operator>=</operator> <operator>(</operator><call><name>Elf_</name><argument_list>(<argument><expr><name>Rel</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator><call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">1</literal><operator>+</operator><name><name>shdrp</name><operator>-&gt;</operator><name>sh_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rel</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>shdrp</name><operator>-&gt;</operator><name>sh_offset</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>rel</name></expr></argument>, <argument><expr><name><name>shdrp</name><operator>-&gt;</operator><name>sh_size</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"read (rel)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>relp</name> <operator>=</operator> <name>rel</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>shdrp</name><operator>-&gt;</operator><name>sh_size</name></name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><call><name>Elf_</name><argument_list>(<argument><expr><name>Rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr><operator>,</operator> <expr><name>relp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>relp</name><operator>-&gt;</operator><name>r_offset</name></name> <operator>-</operator> <name>got_addr</name> <operator>+</operator> <name>got_offset</name> <operator>&gt;=</operator> <name>rsz_offset</name> <operator>+</operator> <name>rsz_osize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>relp</name><operator>-&gt;</operator><name>r_offset</name></name><operator>+=</operator><name>delta</name></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>shdrp</name><operator>-&gt;</operator><name>sh_offset</name></name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>relp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>Elf_</name><argument_list>(<argument><expr><name>Rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"write (imports)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>strtab</name><index>[<expr><name><name>shdrp</name><operator>-&gt;</operator><name>sh_name</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">".rela.plt"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Elf_</name><argument_list>(<argument><expr><name>Rela</name></expr></argument>)</argument_list></call> <operator>*</operator><name>rel</name></expr><operator>,</operator> <expr><operator>*</operator><name>relp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rel</name> <operator>=</operator> <operator>(</operator><call><name>Elf_</name><argument_list>(<argument><expr><name>Rela</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator><call><name>malloc</name> <argument_list>(<argument><expr><name><name>shdrp</name><operator>-&gt;</operator><name>sh_size</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rel</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>shdrp</name><operator>-&gt;</operator><name>sh_offset</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>rel</name></expr></argument>, <argument><expr><name><name>shdrp</name><operator>-&gt;</operator><name>sh_size</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"read (rel)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>relp</name> <operator>=</operator> <name>rel</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>shdrp</name><operator>-&gt;</operator><name>sh_size</name></name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><call><name>Elf_</name><argument_list>(<argument><expr><name>Rela</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr><operator>,</operator> <expr><name>relp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>relp</name><operator>-&gt;</operator><name>r_offset</name></name> <operator>-</operator> <name>got_addr</name> <operator>+</operator> <name>got_offset</name> <operator>&gt;=</operator> <name>rsz_offset</name> <operator>+</operator> <name>rsz_osize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>relp</name><operator>-&gt;</operator><name>r_offset</name></name><operator>+=</operator><name>delta</name></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>shdrp</name><operator>-&gt;</operator><name>sh_offset</name></name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>relp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>Elf_</name><argument_list>(<argument><expr><name>Rela</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"write (imports)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>shdrp</name> <operator>=</operator> <name>shdr</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ehdr</name><operator>-&gt;</operator><name>e_shnum</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>shdrp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>strtab</name><index>[<expr><name><name>shdrp</name><operator>-&gt;</operator><name>sh_name</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>ELF_STRING_LENGTH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>shdrp</name><operator>-&gt;</operator><name>sh_size</name></name> <operator>=</operator> <name>rsz_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>shdrp</name><operator>-&gt;</operator><name>sh_offset</name></name> <operator>&gt;=</operator> <name>rsz_offset</name> <operator>+</operator> <name>rsz_osize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>shdrp</name><operator>-&gt;</operator><name>sh_offset</name></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shdrp</name><operator>-&gt;</operator><name>sh_addr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>shdrp</name><operator>-&gt;</operator><name>sh_addr</name></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>ehdr</name><operator>-&gt;</operator><name>e_shoff</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><call><name>Elf_</name><argument_list>(<argument><expr><name>Shdr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>shdrp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>Elf_</name><argument_list>(<argument><expr><name>Shdr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"write (shdr)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"-&gt; elf section (%s)\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>strtab</name><index>[<expr><name><name>shdrp</name><operator>-&gt;</operator><name>sh_name</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>phdrp</name> <operator>=</operator> <name>phdr</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ehdr</name><operator>-&gt;</operator><name>e_phnum</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>phdrp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

if (phdrp-&gt;p_offset &lt; rsz_offset &amp;&amp; phdrp-&gt;p_offset + phdrp-&gt;p_filesz &gt; rsz_offset) {

phdrp-&gt;p_filesz += delta;

phdrp-&gt;p_memsz += delta;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><name><name>phdrp</name><operator>-&gt;</operator><name>p_offset</name></name> <operator>&gt;=</operator> <name>rsz_offset</name> <operator>+</operator> <name>rsz_osize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>phdrp</name><operator>-&gt;</operator><name>p_offset</name></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>phdrp</name><operator>-&gt;</operator><name>p_vaddr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>phdrp</name><operator>-&gt;</operator><name>p_vaddr</name></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>phdrp</name><operator>-&gt;</operator><name>p_paddr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>phdrp</name><operator>-&gt;</operator><name>p_paddr</name></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>phdrp</name><operator>-&gt;</operator><name>p_offset</name></name> <operator>+</operator> <name><name>phdrp</name><operator>-&gt;</operator><name>p_filesz</name></name> <operator>&gt;=</operator> <name>rsz_offset</name> <operator>+</operator> <name>rsz_osize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>phdrp</name><operator>-&gt;</operator><name>p_filesz</name></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>phdrp</name><operator>-&gt;</operator><name>p_memsz</name></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt> 

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>ehdr</name><operator>-&gt;</operator><name>e_phoff</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><call><name>Elf_</name><argument_list>(<argument><expr><name>Phdr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>phdrp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>Elf_</name> <argument_list>(<argument><expr><name>Phdr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"write (phdr)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"-&gt; program header (0x%08"</literal><name>PFMT64x</name><literal type="string">")\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>phdrp</name><operator>-&gt;</operator><name>p_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ehdr</name><operator>-&gt;</operator><name>e_entry</name></name> <operator>-</operator> <name><name>bin</name><operator>-&gt;</operator><name>baddr</name></name> <operator>&gt;=</operator> <name>rsz_offset</name> <operator>+</operator> <name>rsz_osize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ehdr</name><operator>-&gt;</operator><name>e_entry</name></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ehdr</name><operator>-&gt;</operator><name>e_phoff</name></name> <operator>&gt;=</operator> <name>rsz_offset</name> <operator>+</operator> <name>rsz_osize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ehdr</name><operator>-&gt;</operator><name>e_phoff</name></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ehdr</name><operator>-&gt;</operator><name>e_shoff</name></name> <operator>&gt;=</operator> <name>rsz_offset</name> <operator>+</operator> <name>rsz_osize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ehdr</name><operator>-&gt;</operator><name>e_shoff</name></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>ehdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>Elf_</name><argument_list>(<argument><expr><name>Ehdr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"write (ehdr)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rest_size</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <operator>(</operator><name>rsz_offset</name> <operator>+</operator> <name>rsz_osize</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">1</literal><operator>+</operator><name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_set_bytes</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>rsz_offset</name><operator>+</operator><name>rsz_size</name><operator>+</operator><name>rest_size</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"COPY FROM 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>rsz_offset</name><operator>+</operator><name>rsz_osize</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>rsz_offset</name> <operator>+</operator> <name>rsz_osize</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>rest_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"COPY TO 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name>rsz_offset</name><operator>+</operator><name>rsz_size</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>rsz_offset</name> <operator>+</operator> <name>rsz_size</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>rest_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Shifted %d byte(s)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>delta</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name> <name>Elf_</name></type>(<name>r_bin_elf_del_rpath</name>)<parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Elf_</name></name></type><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>bin</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Elf_</name><argument_list>(<argument><expr><name>Dyn</name></expr></argument>)</argument_list></call> <operator>*</operator><name>dyn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>stroff</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ndyn</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>phdr</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>ehdr</name><operator>.</operator><name>e_phnum</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>phdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_type</name> <operator>!=</operator> <name>PT_DYNAMIC</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dyn</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>phdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_filesz</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"malloc (dyn)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>phdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>dyn</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>phdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_filesz</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: read (dyn)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dyn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ndyn</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>phdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_filesz</name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><call><name>Elf_</name><argument_list>(<argument><expr><name>Dyn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ndyn</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dyn</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>d_tag</name> <operator>==</operator> <name>DT_STRTAB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>stroff</name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><operator>(</operator><name><name>dyn</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>d_un</name><operator>.</operator><name>d_ptr</name></name> <operator>-</operator> <name><name>bin</name><operator>-&gt;</operator><name>baddr</name></name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ndyn</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dyn</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>d_tag</name> <operator>==</operator> <name>DT_RPATH</name> <operator>||</operator> <name><name>dyn</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>d_tag</name> <operator>==</operator> <name>DT_RUNPATH</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>stroff</name> <operator>+</operator> <name><name>dyn</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>d_un</name><operator>.</operator><name>d_val</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: write (rpath)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dyn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dyn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name> <name>Elf_</name></type>(<name>r_bin_elf_section_perms</name>)<parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perms</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Elf_</name></name></type><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>bin</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Elf_</name><argument_list>(<argument><expr><name>Ehdr</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ehdr</name> <operator>=</operator> <operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>ehdr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Elf_</name><argument_list>(<argument><expr><name>Shdr</name></expr></argument>)</argument_list></call> <operator>*</operator><name>shdr</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>shdr</name></name></expr><operator>,</operator> <expr><operator>*</operator><name>shdrp</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strtab</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>shstrtab</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>patchoff</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>shdrp</name> <operator>=</operator> <name>shdr</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ehdr</name><operator>-&gt;</operator><name>e_shnum</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>shdrp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shname</name> <init>= <expr><operator>&amp;</operator><name><name>strtab</name><index>[<expr><name><name>shdrp</name><operator>-&gt;</operator><name>sh_name</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>operms</name> <init>= <expr><name><name>shdrp</name><operator>-&gt;</operator><name>sh_flags</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>shname</name></expr></argument>, <argument><expr><name>ELF_STRING_LENGTH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>newperms</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>)</operator><name>operms</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>perms</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_BIT_SET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>newperms</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>R_BIT_UNSET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>newperms</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>perms</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_BIT_SET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>newperms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>R_BIT_UNSET</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>newperms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>patchoff</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>ehdr</name><operator>.</operator><name>e_shoff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>patchoff</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>shdrp</name> <operator>-</operator> <operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name><name>bin</name><operator>-&gt;</operator><name>shdr</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>patchoff</name> <operator>+=</operator> <call><name>r_offsetof</name> <argument_list>(<argument><expr><call><name>Elf_</name><argument_list>(<argument><expr><name>Shdr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sh_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"wx %02x @ 0x%x\n"</literal></expr></argument>, <argument><expr><name>newperms</name></expr></argument>, <argument><expr><name>patchoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>patchoff</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>newperms</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name> <name>Elf_</name></type>(<name>r_bin_elf_entry_write</name>)<parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>patchoff</name> <init>= <expr><literal type="number">0x18</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_BIN_ELF64</name></expr></cpp:if>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"wv8 0x%"</literal><name>PFMT64x</name><literal type="string">" @ 0x%x\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>patchoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>patchoff</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>ut32</name></type> <name>addr32</name> <init>= <expr><operator>(</operator><name>ut32</name><operator>)</operator><name>addr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"wv4 0x%x @ 0x%x\n"</literal></expr></argument>, <argument><expr><name>addr32</name></expr></argument>, <argument><expr><name>patchoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_write_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>patchoff</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr32</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>addr32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

</unit>
