<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\format\elf\elf_specs.h"><cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Elf_</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Elf_Vword</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ELF_ST_BIND</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ELF_ST_TYPE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ELF_ST_INFO</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ELF_ST_VISIBILITY</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ELF_R_SYM</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ELF_R_TYPE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ELF_R_INFO</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ELF_M_SYM</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ELF_M_SIZE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ELF_M_INFO</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>R_BIN_ELF64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Elf_</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Elf64_##name</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_ST_BIND</name></cpp:macro> <cpp:value>ELF64_ST_BIND</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_ST_TYPE</name></cpp:macro> <cpp:value>ELF64_ST_TYPE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_ST_INFO</name></cpp:macro> <cpp:value>ELF64_ST_INFO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_ST_VISIBILITY</name></cpp:macro> <cpp:value>ELF64_ST_VISIBILITY</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_R_SYM</name></cpp:macro> <cpp:value>ELF64_R_SYM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_R_TYPE</name></cpp:macro> <cpp:value>ELF64_R_TYPE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_R_INFO</name></cpp:macro> <cpp:value>ELF64_R_INFO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_M_SYM</name></cpp:macro> <cpp:value>ELF64_M_SYM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_M_SIZE</name></cpp:macro> <cpp:value>ELF64_M_SIZE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_M_INFO</name></cpp:macro> <cpp:value>ELF64_M_INFO</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Elf_</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Elf32_##name</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_ST_BIND</name></cpp:macro> <cpp:value>ELF32_ST_BIND</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_ST_TYPE</name></cpp:macro> <cpp:value>ELF32_ST_TYPE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_ST_INFO</name></cpp:macro> <cpp:value>ELF32_ST_INFO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_ST_VISIBILITY</name></cpp:macro> <cpp:value>ELF32_ST_VISIBILITY</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_R_SYM</name></cpp:macro> <cpp:value>ELF32_R_SYM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_R_TYPE</name></cpp:macro> <cpp:value>ELF32_R_TYPE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_R_INFO</name></cpp:macro> <cpp:value>ELF32_R_INFO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_M_SYM</name></cpp:macro> <cpp:value>ELF32_M_SYM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_M_SIZE</name></cpp:macro> <cpp:value>ELF32_M_SIZE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_M_INFO</name></cpp:macro> <cpp:value>ELF32_M_INFO</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__BEGIN_DECLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__BEGIN_DECLS</name></cpp:macro> <cpp:value>extern "C" {</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__BEGIN_DECLS</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__END_DECLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__END_DECLS</name></cpp:macro> <cpp:value>}</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__END_DECLS</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glibc_elf.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_INCLUDE_ELF_SPECS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_INCLUDE_ELF_SPECS_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_STRING_LENGTH</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CGCMAG</name></cpp:macro> <cpp:value>"\177CGC"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCGCMAG</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFOSABI_HURD</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFOSABI_86OPEN</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFOSABI_OPENVMS</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFOSABI_ARM_AEABI</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_PROPELLER</name></cpp:macro> <cpp:value>0x5072</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_LANAI</name></cpp:macro> <cpp:value>0x8123</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_VIDEOCORE4</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_PDP10</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_PDP11</name></cpp:macro> <cpp:value>65</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_VIDEOCORE</name></cpp:macro> <cpp:value>95</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_TMM_GPP</name></cpp:macro> <cpp:value>96</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_NS32K</name></cpp:macro> <cpp:value>97</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_TPC</name></cpp:macro> <cpp:value>98</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_SNP1K</name></cpp:macro> <cpp:value>99</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_ST200</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_IP2K</name></cpp:macro> <cpp:value>101</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_MAX</name></cpp:macro> <cpp:value>102</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_CR</name></cpp:macro> <cpp:value>103</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_F2MC16</name></cpp:macro> <cpp:value>104</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_MSP430</name></cpp:macro> <cpp:value>105</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_BLACKFIN</name></cpp:macro> <cpp:value>106</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_SE_C33</name></cpp:macro> <cpp:value>107</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_SEP</name></cpp:macro> <cpp:value>108</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_ARCA</name></cpp:macro> <cpp:value>109</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_UNICORE</name></cpp:macro> <cpp:value>110</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_EXCESS</name></cpp:macro> <cpp:value>111</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_DXP</name></cpp:macro> <cpp:value>112</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_CRX</name></cpp:macro> <cpp:value>114</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_XGATE</name></cpp:macro> <cpp:value>115</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_C166</name></cpp:macro> <cpp:value>116</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_M16C</name></cpp:macro> <cpp:value>117</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_DSPIC30F</name></cpp:macro> <cpp:value>118</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_CE</name></cpp:macro> <cpp:value>119</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_M32C</name></cpp:macro> <cpp:value>120</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_TSK3000</name></cpp:macro> <cpp:value>131</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_RS08</name></cpp:macro> <cpp:value>132</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_SHARC</name></cpp:macro> <cpp:value>133</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_ECOG2</name></cpp:macro> <cpp:value>134</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_SCORE7</name></cpp:macro> <cpp:value>135</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_DSP24</name></cpp:macro> <cpp:value>136</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_VIDEOCORE3</name></cpp:macro> <cpp:value>137</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_LATTICEMICO32</name></cpp:macro> <cpp:value>138</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_SE_C17</name></cpp:macro> <cpp:value>139</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_TI_C6000</name></cpp:macro> <cpp:value>140</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_TI_C2000</name></cpp:macro> <cpp:value>141</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_TI_C5500</name></cpp:macro> <cpp:value>142</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_TI_ARP32</name></cpp:macro> <cpp:value>143</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_TI_PRU</name></cpp:macro> <cpp:value>144</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_MMDSP_PLUS</name></cpp:macro> <cpp:value>160</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_CYPRESS_M8C</name></cpp:macro> <cpp:value>161</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_R32C</name></cpp:macro> <cpp:value>162</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_TRIMEDIA</name></cpp:macro> <cpp:value>163</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_QDSP6</name></cpp:macro> <cpp:value>164</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_8051</name></cpp:macro> <cpp:value>165</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_STXP7X</name></cpp:macro> <cpp:value>166</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_NDS32</name></cpp:macro> <cpp:value>167</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_ECOG1</name></cpp:macro> <cpp:value>168</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_MAXQ30</name></cpp:macro> <cpp:value>169</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_XIMO16</name></cpp:macro> <cpp:value>170</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_MANIK</name></cpp:macro> <cpp:value>171</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_CRAYNV2</name></cpp:macro> <cpp:value>172</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_RX</name></cpp:macro> <cpp:value>173</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_METAG</name></cpp:macro> <cpp:value>174</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_MCST_ELBRUS</name></cpp:macro> <cpp:value>175</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_ECOG16</name></cpp:macro> <cpp:value>176</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_CR16</name></cpp:macro> <cpp:value>177</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_ETPU</name></cpp:macro> <cpp:value>178</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_SLE9X</name></cpp:macro> <cpp:value>179</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_L10M</name></cpp:macro> <cpp:value>180</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_K10M</name></cpp:macro> <cpp:value>181</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_AARCH64</name></cpp:macro> <cpp:value>183</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_AVR32</name></cpp:macro> <cpp:value>185</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_STM8</name></cpp:macro> <cpp:value>186</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_TILE64</name></cpp:macro> <cpp:value>187</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_TILEPRO</name></cpp:macro> <cpp:value>188</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_MICROBLAZE</name></cpp:macro> <cpp:value>189</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_CUDA</name></cpp:macro> <cpp:value>190</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_TILEGX</name></cpp:macro> <cpp:value>191</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_CLOUDSHIELD</name></cpp:macro> <cpp:value>192</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_COREA_1ST</name></cpp:macro> <cpp:value>193</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_COREA_2ND</name></cpp:macro> <cpp:value>194</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_ARC_COMPACT2</name></cpp:macro> <cpp:value>195</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_OPEN8</name></cpp:macro> <cpp:value>196</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_RL78</name></cpp:macro> <cpp:value>197</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_VIDEOCORE5</name></cpp:macro> <cpp:value>198</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_78KOR</name></cpp:macro> <cpp:value>199</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_56800EX</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_BA1</name></cpp:macro> <cpp:value>201</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_BA2</name></cpp:macro> <cpp:value>202</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_XCORE</name></cpp:macro> <cpp:value>203</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_MCHP_PIC</name></cpp:macro> <cpp:value>204</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_INTEL205</name></cpp:macro> <cpp:value>205</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_INTEL206</name></cpp:macro> <cpp:value>206</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_INTEL207</name></cpp:macro> <cpp:value>207</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_INTEL208</name></cpp:macro> <cpp:value>208</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_INTEL209</name></cpp:macro> <cpp:value>209</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_KM32</name></cpp:macro> <cpp:value>210</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_KMX32</name></cpp:macro> <cpp:value>211</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_KMX16</name></cpp:macro> <cpp:value>212</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_KMX8</name></cpp:macro> <cpp:value>213</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_KVARC</name></cpp:macro> <cpp:value>214</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_CDP</name></cpp:macro> <cpp:value>215</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_COGE</name></cpp:macro> <cpp:value>216</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_COOL</name></cpp:macro> <cpp:value>217</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_NORC</name></cpp:macro> <cpp:value>218</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_CSR_KALIMBA</name></cpp:macro> <cpp:value>219</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_Z80</name></cpp:macro> <cpp:value>220</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_VISIUM</name></cpp:macro> <cpp:value>221</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_FT32</name></cpp:macro> <cpp:value>222</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_MOXIE</name></cpp:macro> <cpp:value>223</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_AMDGPU</name></cpp:macro> <cpp:value>224</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_RISCV</name></cpp:macro> <cpp:value>243</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PT_OPENBSD_RANDOMIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_OPENBSD_RANDOMIZE</name></cpp:macro> <cpp:value>0x65a3dbe6</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_OPENBSD_WXNEEDED</name></cpp:macro> <cpp:value>0x65a3dbe7</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_OPENBSD_BOOTDATA</name></cpp:macro> <cpp:value>0x65a41be6</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
