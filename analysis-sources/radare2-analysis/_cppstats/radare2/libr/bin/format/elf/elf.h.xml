<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\format\elf\elf.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"elf_specs.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BIN_ELF_SCN_IS_EXECUTABLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x &amp; SHF_EXECINSTR</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BIN_ELF_SCN_IS_READABLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x &amp; SHF_ALLOC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BIN_ELF_SCN_IS_WRITABLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x &amp; SHF_WRITE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BIN_ELF_SYMTAB_SYMBOLS</name></cpp:macro> <cpp:value>1 &lt;&lt; 0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BIN_ELF_DYNSYM_SYMBOLS</name></cpp:macro> <cpp:value>1 &lt;&lt; 1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BIN_ELF_IMPORT_SYMBOLS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2 | (bin-&gt;ehdr.e_type == ET_REL ? R_BIN_ELF_SYMTAB_SYMBOLS : R_BIN_ELF_DYNSYM_SYMBOLS))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BIN_ELF_ALL_SYMBOLS</name></cpp:macro> <cpp:value>(R_BIN_ELF_SYMTAB_SYMBOLS | R_BIN_ELF_DYNSYM_SYMBOLS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFOBJ</name></cpp:macro> <cpp:value>struct Elf_(r_bin_elf_obj_t)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>r_bin_elf_section_t</name> <block>{

<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>rva</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>align</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>link</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>ELF_STRING_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

}</block></struct></type> <name>RBinElfSection</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_bin_elf_symbol_t</name> <block>{

<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>ordinal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bind</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>ELF_STRING_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>libname</name><index>[<expr><name>ELF_STRING_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>in_shdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_sht_null</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_vaddr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>is_imported</name></decl>;</decl_stmt>

}</block></struct></type> <name>RBinElfSymbol</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_bin_elf_reloc_t</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>sym</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_rela</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>addend</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>rva</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>section</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>sto</name></decl>;</decl_stmt>

}</block></struct></type> <name>RBinElfReloc</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_bin_elf_field_t</name> <block>{

<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>ELF_STRING_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>

}</block></struct></type> <name>RBinElfField</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_bin_elf_string_t</name> <block>{

<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>string</name><index>[<expr><name>ELF_STRING_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>

}</block></struct></type> <name>RBinElfString</name>;</typedef>

<typedef>typedef <type><struct>struct <name>r_bin_elf_lib_t</name> <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>ELF_STRING_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>

}</block></struct></type> <name>RBinElfLib</name>;</typedef>

<function><type><name><name>struct</name> <name>Elf_</name></name></type>(<name>r_bin_elf_obj_t</name>) <block>{<block_content>

<macro><name>Elf_</name><argument_list>(<argument>Ehdr</argument>)</argument_list></macro> <expr_stmt><expr><name>ehdr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Elf_</name><argument_list>(<argument><expr><name>Phdr</name></expr></argument>)</argument_list></call><operator>*</operator> <name>phdr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Elf_</name><argument_list>(<argument><expr><name>Shdr</name></expr></argument>)</argument_list></call><operator>*</operator> <name>shdr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Elf_</name><argument_list>(<argument><expr><name>Shdr</name></expr></argument>)</argument_list></call> <operator>*</operator><name>strtab_section</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>strtab_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>strtab</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Elf_</name><argument_list>(<argument><expr><name>Shdr</name></expr></argument>)</argument_list></call> <operator>*</operator><name>shstrtab_section</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>shstrtab_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>shstrtab</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Elf_</name><argument_list>(<argument><expr><name>Dyn</name></expr></argument>)</argument_list></call> <operator>*</operator><name>dyn_buf</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dyn_entries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_rela</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>reloc_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name><name>version_info</name><index>[<expr><name>DT_VERSIONTAGNUM</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dynstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>dynstr_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinImport</name> <modifier>*</modifier><modifier>*</modifier></type><name>imports_by_ord</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>imports_by_ord_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier><modifier>*</modifier></type><name>symbols_by_ord</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>symbols_by_ord_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bss</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>baddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>boffset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>endian</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>verbose</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>kv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinElfSection</name> <modifier>*</modifier></type><name>g_sections</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinElfSymbol</name> <modifier>*</modifier></type><name>g_symbols</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinElfSymbol</name> <modifier>*</modifier></type><name>g_imports</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinElfSymbol</name> <modifier>*</modifier></type><name>phdr_symbols</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinElfSymbol</name> <modifier>*</modifier></type><name>phdr_imports</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HtUP</name> <modifier>*</modifier></type><name>rel_cache</name></decl>;</decl_stmt>

</block_content>}</block></function><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>int</name> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_has_va</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_get_section_addr</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>section_name</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_get_section_offset</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>section_name</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_get_baddr</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_p2v</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>, <argument><expr><name>ut64</name> <name>paddr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_v2p</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>, <argument><expr><name>ut64</name> <name>vaddr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_p2v_new</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>, <argument><expr><name>ut64</name> <name>paddr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_v2p_new</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>, <argument><expr><name>ut64</name> <name>vaddr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_get_boffset</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_get_entry_offset</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_get_main_offset</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_get_init_offset</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_get_fini_offset</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_intrp</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>char</name> <modifier>*</modifier><name>Elf_</name></type>(<name>r_bin_elf_compiler</name>)<parameter_list>(<parameter><decl><type><name>ELFOBJ</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_get_stripped</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_is_static</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_get_data_encoding</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_get_arch</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_get_machine_name</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_get_file_type</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_get_elf_class</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_get_bits</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_get_osabi_name</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_is_big_endian</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinElfReloc</name><modifier>*</modifier> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_get_relocs</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinElfLib</name><modifier>*</modifier> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_get_libs</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinElfSection</name><modifier>*</modifier> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_get_sections</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinElfSymbol</name><modifier>*</modifier> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_get_symbols</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinElfSymbol</name><modifier>*</modifier> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_get_imports</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_elf_field_t</name></name><modifier>*</modifier> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_get_fields</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_get_rpath</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Elf_</name></name></type><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list><modifier>*</modifier> <name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_new</name></expr></argument>)</argument_list><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>file</name></expr></argument>, <argument><expr><name>bool</name> <name>verbose</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Elf_</name></name></type><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list><modifier>*</modifier> <name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_new_buf</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>RBuffer</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>bool</name> <name>verbose</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_free</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call><operator>*</operator> <name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>ut64</name> <name>Elf_</name></type>(<name>r_bin_elf_resize_section</name>)<parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name> <name>Elf_</name></type>(<name>r_bin_elf_section_perms</name>)<parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perms</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name> <name>Elf_</name></type>(<name>r_bin_elf_entry_write</name>)<parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name> <name>Elf_</name></type>(<name>r_bin_elf_del_rpath</name>)<parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_has_relro</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_has_nx</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier><name>Elf_</name></type><argument_list>(<argument><expr><name>r_bin_elf_grab_regstate</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>len</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>RList</name> <modifier>*</modifier><name>Elf_</name></type>(<name>r_bin_elf_get_maps</name>)<parameter_list>(<parameter><decl><type><name>ELFOBJ</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier><name>Elf_</name></type><argument_list>(<argument><expr><name>_r_bin_elf_convert_symbol</name></expr></argument>)</argument_list><argument_list>(<argument><expr>struct <call><name>Elf_</name><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>bin</name></expr></argument>,

<argument><expr>struct <name>r_bin_elf_symbol_t</name> <operator>*</operator><name>symbol</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>namefmt</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</unit>
