<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\format\te\te.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"te_specs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"te.h"</cpp:file></cpp:include>

<function><type><name>ut64</name></type> <name>r_bin_te_get_stripped_delta</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_te_obj_t</name></name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bin</name> <operator>&amp;&amp;</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>StrippedSize</name></name> <operator>-</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>TE_image_file_header</name></expr></argument>)</argument_list></sizeof></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0LL</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_bin_te_init_hdr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_te_obj_t</name></name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TE_image_file_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_sys_perror</name> <argument_list>(<argument><expr><literal type="string">"malloc (header)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name><name>bin</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>TE_image_file_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Error: read (header)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Error: sdb instance is empty\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"te_machine.cparse"</literal></expr></argument>, <argument><expr><literal type="string">"enum te_machine { TE_IMAGE_FILE_MACHINE_UNKNOWN=0x0, TE_IMAGE_FILE_MACHINE_ALPHA=0x184, "</literal>

<literal type="string">"TE_IMAGE_FILE_MACHINE_ALPHA64=0x284, TE_IMAGE_FILE_MACHINE_AM33=0x1d3, TE_IMAGE_FILE_MACHINE_AMD64=0x8664, "</literal>

<literal type="string">"TE_IMAGE_FILE_MACHINE_ARM=0x1c0, TE_IMAGE_FILE_MACHINE_AXP64=0x184, TE_IMAGE_FILE_MACHINE_CEE=0xc0ee, "</literal>

<literal type="string">"TE_IMAGE_FILE_MACHINE_CEF=0x0cef, TE_IMAGE_FILE_MACHINE_EBC=0x0ebc, TE_IMAGE_FILE_MACHINE_I386=0x014c, "</literal>

<literal type="string">"TE_IMAGE_FILE_MACHINE_IA64=0x0200, TE_IMAGE_FILE_MACHINE_M32R=0x9041, TE_IMAGE_FILE_MACHINE_M68K=0x0268, "</literal>

<literal type="string">"TE_IMAGE_FILE_MACHINE_MIPS16=0x0266, TE_IMAGE_FILE_MACHINE_MIPSFPU=0x0366, TE_IMAGE_FILE_MACHINE_MIPSFPU16=0x0466, "</literal>

<literal type="string">"TE_IMAGE_FILE_MACHINE_POWERPC=0x01f0, TE_IMAGE_FILE_MACHINE_POWERPCFP=0x01f1, TE_IMAGE_FILE_MACHINE_R10000=0x0168, "</literal>

<literal type="string">"TE_IMAGE_FILE_MACHINE_R3000=0x0162, TE_IMAGE_FILE_MACHINE_R4000=0x0166, TE_IMAGE_FILE_MACHINE_SH3=0x01a2, "</literal>

<literal type="string">"TE_IMAGE_FILE_MACHINE_SH3DSP=0x01a3, TE_IMAGE_FILE_MACHINE_SH3E=0x01a4, TE_IMAGE_FILE_MACHINE_SH4=0x01a6, "</literal>

<literal type="string">"TE_IMAGE_FILE_MACHINE_SH5=0x01a8, TE_IMAGE_FILE_MACHINE_THUMB=0x01c2, TE_IMAGE_FILE_MACHINE_TRICORE=0x0520, "</literal>

<literal type="string">"TE_IMAGE_FILE_MACHINE_WCEMIPSV2=0x0169};"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"te_subsystem.cparse"</literal></expr></argument>, <argument><expr><literal type="string">"enum te_subsystem { TE_IMAGE_SUBSYSTEM_UNKNOWN=0, TE_IMAGE_SUBSYSTEM_NATIVE=1, "</literal>

<literal type="string">"TE_IMAGE_SUBSYSTEM_WINDOWS_GUI=2, TE_IMAGE_SUBSYSTEM_WINDOWS_CUI=3, "</literal>

<literal type="string">"TE_IMAGE_SUBSYSTEM_POSIX_CUI=7, TE_IMAGE_SUBSYSTEM_WINDOWS_CE_GU=9, "</literal>

<literal type="string">"TE_IMAGE_SUBSYSTEM_EFI_APPLICATION=10, TE_IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER=11, TE_IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER=12, "</literal>

<literal type="string">"TE_IMAGE_SUBSYSTEM_EFI_ROM=13, TE_IMAGE_SUBSYSTEM_XBOX=14};"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"te_header.offset"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"te_header.format"</literal></expr></argument>, <argument><expr><literal type="string">"[2]z[2]Eb[1]Ewxxq"</literal>

<literal type="string">" Signature (te_machine)Machine NumberOfSections (te_subsystem)Subsystem StrippedSize AddressOfEntryPoint BaseOfCode ImageBase"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"te_directory1_header.offset"</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"te_directory1_header.format"</literal></expr></argument>, <argument><expr><literal type="string">"xx"</literal>

<literal type="string">" VirtualAddress Size"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"te_directory2_header.offset"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_set</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"te_directory2_header.format"</literal></expr></argument>, <argument><expr><literal type="string">"xx"</literal>

<literal type="string">" VirtualAddress Size"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>Signature</name></name></expr></argument>, <argument><expr><literal type="string">"VZ"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ut64</name></type> <name>r_bin_te_get_main_paddr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_te_obj_t</name></name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>r_bin_te_get_entrypoint</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0LL</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: read (entry)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">367</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xe8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">368</literal></expr>]</index></name> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">369</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">370</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">371</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>delta</name> <operator>+=</operator> <literal type="number">367</literal> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&gt;=</operator> <operator>(</operator><name>UT64_MAX</name> <operator>-</operator> <name>addr</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>UT64_MAX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>addr</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>addr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TE_DWord</name></type> <name>r_bin_te_vaddr_to_paddr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_te_obj_t</name></name><modifier>*</modifier></type> <name>bin</name></decl></parameter>, <parameter><decl><type><name>TE_DWord</name></type> <name>vaddr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>TE_DWord</name></type> <name>section_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>section_size</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>NumberOfSections</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>section_base</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>section_header</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>VirtualAddress</name></expr>;</expr_stmt>

<expr_stmt><expr><name>section_size</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>section_header</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>VirtualSize</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vaddr</name> <operator>&gt;=</operator> <name>section_base</name> <operator>&amp;&amp;</operator> <name>vaddr</name> <operator>&lt;</operator> <name>section_base</name> <operator>+</operator> <name>section_size</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>section_header</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>PointerToRawData</name> <operator>+</operator> <operator>(</operator><name>vaddr</name> <operator>-</operator> <name>section_base</name><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_bin_te_init_sections</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_te_obj_t</name></name><modifier>*</modifier></type> <name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sections_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>TE_image_section_header</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>NumberOfSections</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sections_size</name> <operator>&gt;</operator> <name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid NumberOfSections value\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>section_header</name></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>sections_size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"malloc (sections headers)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TE_image_file_header</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name><name>bin</name><operator>-&gt;</operator><name>section_header</name></name></expr></argument>, <argument><expr><name>sections_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: read (sections headers)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_bin_te_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_te_obj_t</name></name><modifier>*</modifier></type> <name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>section_header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>endian</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_bin_te_init_hdr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Warning: File is not TE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_bin_te_init_sections</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Warning: Cannot initialize sections\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>r_bin_te_get_arch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_te_obj_t</name></name><modifier>*</modifier></type> <name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>Machine</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_ALPHA</name></expr>:</case>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_ALPHA64</name></expr>:</case>

<expr_stmt><expr><name>arch</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"alpha"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_ARM</name></expr>:</case>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_THUMB</name></expr>:</case>

<expr_stmt><expr><name>arch</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"arm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_M68K</name></expr>:</case>

<expr_stmt><expr><name>arch</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"m68k"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_MIPS16</name></expr>:</case>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_MIPSFPU</name></expr>:</case>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_MIPSFPU16</name></expr>:</case>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_WCEMIPSV2</name></expr>:</case>

<expr_stmt><expr><name>arch</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"mips"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_POWERPC</name></expr>:</case>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_POWERPCFP</name></expr>:</case>

<expr_stmt><expr><name>arch</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"ppc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>arch</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"x86"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><name>arch</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>r_bin_te_get_bits</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_te_obj_t</name></name><modifier>*</modifier></type> <name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><literal type="number">32</literal></expr>;</return> 

</block_content>}</block></function>

<function><type><name>RBinAddr</name><modifier>*</modifier></type> <name>r_bin_te_get_entrypoint</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_te_obj_t</name></name><modifier>*</modifier></type> <name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>header</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RBinAddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"malloc (entrypoint)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>AddressOfEntryPoint</name></name> <operator>-</operator> <call><name>r_bin_te_get_stripped_delta</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>ImageBase</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <call><name>r_bin_te_vaddr_to_paddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>entry</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ut64</name></type> <name>r_bin_te_get_image_base</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_te_obj_t</name></name><modifier>*</modifier></type> <name>bin</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bin</name> <operator>&amp;&amp;</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>ImageBase</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0LL</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>r_bin_te_get_machine</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_te_obj_t</name></name><modifier>*</modifier></type> <name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>machine</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>Machine</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_ALPHA</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Alpha"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_ALPHA64</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Alpha 64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_AM33</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"AM33"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_AMD64</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"AMD 64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_ARM</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"ARM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_CEE</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"CEE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_CEF</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"CEF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_EBC</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"EBC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_I386</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"i386"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_IA64</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"ia64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_M32R</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"M32R"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_M68K</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"M68K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_MIPS16</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Mips 16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_MIPSFPU</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Mips FPU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_MIPSFPU16</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Mips FPU 16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_POWERPC</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"PowerPC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_POWERPCFP</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"PowerPC FP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_R10000</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"R10000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_R3000</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"R3000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_R4000</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"R4000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_SH3</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"SH3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_SH3DSP</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"SH3DSP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_SH3E</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"SH3E"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_SH4</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"SH4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_SH5</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"SH5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_THUMB</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Thumb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_TRICORE</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Tricore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_FILE_MACHINE_WCEMIPSV2</name></expr>:</case>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"WCE Mips V2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>machine</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><name>machine</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>r_bin_te_get_os</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_te_obj_t</name></name><modifier>*</modifier></type> <name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>os</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>Subsystem</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TE_IMAGE_SUBSYSTEM_NATIVE</name></expr>:</case>

<expr_stmt><expr><name>os</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"native"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_SUBSYSTEM_WINDOWS_GUI</name></expr>:</case>

<case>case <expr><name>TE_IMAGE_SUBSYSTEM_WINDOWS_CUI</name></expr>:</case>

<case>case <expr><name>TE_IMAGE_SUBSYSTEM_WINDOWS_CE_GUI</name></expr>:</case>

<expr_stmt><expr><name>os</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"windows"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_SUBSYSTEM_POSIX_CUI</name></expr>:</case>

<expr_stmt><expr><name>os</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"posix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_SUBSYSTEM_EFI_APPLICATION</name></expr>:</case>

<case>case <expr><name>TE_IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER</name></expr>:</case>

<case>case <expr><name>TE_IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER</name></expr>:</case>

<case>case <expr><name>TE_IMAGE_SUBSYSTEM_EFI_ROM</name></expr>:</case>

<expr_stmt><expr><name>os</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"efi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_SUBSYSTEM_XBOX</name></expr>:</case>

<expr_stmt><expr><name>os</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"xbox"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>os</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"windows"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><name>os</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>r_bin_te_section_t</name></name><modifier>*</modifier></type> <name>r_bin_te_get_sections</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_te_obj_t</name></name><modifier>*</modifier></type> <name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_te_section_t</name></name> <modifier>*</modifier></type><name>sections</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TE_image_section_header</name> <modifier>*</modifier></type><name>shdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sections_count</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>shdr</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>section_header</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sections_count</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>NumberOfSections</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sections</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><operator>(</operator><name>sections_count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>r_bin_te_section_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"malloc (sections)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sections_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>shdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Name</name></expr></argument>, <argument><expr><name>TE_IMAGE_SIZEOF_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vaddr</name> <operator>=</operator> <name><name>shdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>VirtualAddress</name> <operator>-</operator> <call><name>r_bin_te_get_stripped_delta</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name><name>shdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>SizeOfRawData</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vsize</name> <operator>=</operator> <name><name>shdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>VirtualSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>paddr</name> <operator>=</operator> <name><name>shdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>PointerToRawData</name> <operator>-</operator> <call><name>r_bin_te_get_stripped_delta</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name><name>shdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Characteristics</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>sections</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>r_bin_te_get_subsystem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_te_obj_t</name></name><modifier>*</modifier></type> <name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>subsystem</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>Subsystem</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TE_IMAGE_SUBSYSTEM_NATIVE</name></expr>:</case>

<expr_stmt><expr><name>subsystem</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Native"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_SUBSYSTEM_WINDOWS_GUI</name></expr>:</case>

<expr_stmt><expr><name>subsystem</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Windows GUI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_SUBSYSTEM_WINDOWS_CUI</name></expr>:</case>

<expr_stmt><expr><name>subsystem</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Windows CUI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_SUBSYSTEM_POSIX_CUI</name></expr>:</case>

<expr_stmt><expr><name>subsystem</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"POSIX CUI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_SUBSYSTEM_WINDOWS_CE_GUI</name></expr>:</case>

<expr_stmt><expr><name>subsystem</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Windows CE GUI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_SUBSYSTEM_EFI_APPLICATION</name></expr>:</case>

<expr_stmt><expr><name>subsystem</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"EFI Application"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER</name></expr>:</case>

<expr_stmt><expr><name>subsystem</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"EFI Boot Service Driver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER</name></expr>:</case>

<expr_stmt><expr><name>subsystem</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"EFI Runtime Driver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_SUBSYSTEM_EFI_ROM</name></expr>:</case>

<expr_stmt><expr><name>subsystem</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"EFI ROM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TE_IMAGE_SUBSYSTEM_XBOX</name></expr>:</case>

<expr_stmt><expr><name>subsystem</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"XBOX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>subsystem</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><name>subsystem</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>r_bin_te_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_bin_te_obj_t</name></name><modifier>*</modifier></type> <name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>section_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>r_bin_te_obj_t</name></name><modifier>*</modifier></type> <name>r_bin_te_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_te_obj_t</name></name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <name>r_bin_te_obj_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>binsz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><call><name>r_file_slurp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>binsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>binsz</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_bin_te_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>r_buf_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_buf_set_bytes</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_bin_te_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_bin_te_init</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_bin_te_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>bin</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>r_bin_te_obj_t</name></name><modifier>*</modifier></type> <name>r_bin_te_new_buf</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_te_obj_t</name></name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <name>r_bin_te_obj_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>r_buf_new_with_buf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>b</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_bin_te_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_bin_te_init</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_bin_te_free</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>bin</name></expr>;</return>

</block_content>}</block></function>

</unit>
