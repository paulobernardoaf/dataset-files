<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\p\bin_smd.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>gen_hdr</name> <block>{

<decl_stmt><decl><type><name>ut8</name></type> <name><name>CopyRights</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>DomesticName</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>OverseasName</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>ProductCode</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>CheckSum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>Peripherials</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>RomStart</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>RomEnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>RamStart</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>RamEnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>SramCode</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>ModemCode</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>Reserved</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>CountryCode</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>SMD_Header</name>;</typedef>

<typedef>typedef <type><struct>struct <name>gen_vect</name> <block>{

<union>union <block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>ut32</name></type> <name>SSP</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>BusErr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>AdrErr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>InvOpCode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>DivBy0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Check</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>TrapV</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>GPF</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Trace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>BadInt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv10</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv11</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv12</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv13</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv14</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv15</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv16</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv17</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>BadIRQ</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>IRQ1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>EXT</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>IRQ3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>HBLANK</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>IRQ5</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>VBLANK</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>IRQ7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Trap0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Trap1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Trap2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Trap3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Trap4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Trap5</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Trap6</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Trap7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Trap8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Trap9</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Trap10</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Trap11</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Trap12</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Trap13</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Trap14</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Trap15</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv30</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv31</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv32</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv33</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv34</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv35</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv36</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv37</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv38</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv39</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv3A</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv3B</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv3C</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv3D</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv3E</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>Reserv3F</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><name>ut32</name></type> <name><name>vectors</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</union>

}</block></struct></type> <name>SMD_Vectors</name>;</typedef>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>baddr</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_buffer</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0x190</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"SEGA"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>load_buffer</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>bin_obj</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>loadaddr</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name></decl></parameter>)</parameter_list><block>{<block_content>

<return>return <expr><call><name>check_buffer</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBinInfo</name> <modifier>*</modifier></type><name>info</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinInfo</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinInfo</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"ROM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>machine</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Sega Megadrive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>tmp</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>bclass</name></name> <operator>=</operator> <call><name>r_str_ndup</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>os</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"smd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>arch</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"m68k"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>has_va</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>big_endian</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>addsym</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><ternary><condition><expr><name>name</name></expr>?</condition><then> <expr><name>name</name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>showstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>r_str_ndup</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>symbols</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>SMD_Header</name></type> <name>hdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>SMD_Header</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>addsym</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"rom_start"</literal></expr></argument>, <argument><expr><call><name>r_read_be32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdr</name><operator>.</operator><name>RomStart</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>addsym</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"rom_end"</literal></expr></argument>, <argument><expr><call><name>r_read_be32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdr</name><operator>.</operator><name>RomEnd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>addsym</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"ram_start"</literal></expr></argument>, <argument><expr><call><name>r_read_be32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdr</name><operator>.</operator><name>RamStart</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>addsym</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"ram_end"</literal></expr></argument>, <argument><expr><call><name>r_read_be32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdr</name><operator>.</operator><name>RamEnd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showstr</name> <argument_list>(<argument><expr><literal type="string">"Copyright"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>CopyRights</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showstr</name> <argument_list>(<argument><expr><literal type="string">"DomesticName"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>DomesticName</name></name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showstr</name> <argument_list>(<argument><expr><literal type="string">"OverseasName"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>OverseasName</name></name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showstr</name> <argument_list>(<argument><expr><literal type="string">"ProductCode"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>ProductCode</name></name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Checksum: 0x%04x\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator> <name><name>hdr</name><operator>.</operator><name>CheckSum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showstr</name> <argument_list>(<argument><expr><literal type="string">"Peripherials"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>Peripherials</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showstr</name> <argument_list>(<argument><expr><literal type="string">"SramCode"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>SramCode</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showstr</name> <argument_list>(<argument><expr><literal type="string">"ModemCode"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>ModemCode</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showstr</name> <argument_list>(<argument><expr><literal type="string">"CountryCode"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>CountryCode</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name><name>vtable</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>vtable</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"SSP"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reset"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"BusErr"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"AdrErr"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"InvOpCode"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"DivBy0"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Check"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"TrapV"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"GPF"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Trace"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv0"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">11</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv1"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv2"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">13</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv3"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">14</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv4"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">15</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"BadInt"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv10"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">17</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv11"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">18</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv12"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">19</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv13"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">20</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv14"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">21</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv15"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">22</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv16"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">23</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv17"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">24</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"BadIRQ"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">25</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"IRQ1"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">26</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"EXT"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">27</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"IRQ3"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">28</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"HBLANK"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">29</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"IRQ5"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">30</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"VBLANK"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">31</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"IRQ7"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">32</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Trap0"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">33</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Trap1"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">34</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Trap2"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">35</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Trap3"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">36</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Trap4"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">37</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Trap5"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">38</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Trap6"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">39</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Trap7"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">40</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Trap8"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">41</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Trap9"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">42</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Trap10"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">43</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Trap11"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">44</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Trap12"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">45</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Trap13"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">46</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Trap14"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">47</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Trap15"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">48</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv30"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">49</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv31"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">50</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv32"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">51</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv33"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">52</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv34"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">53</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv35"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">54</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv36"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">55</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv37"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">56</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv38"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">57</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv39"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">58</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv3A"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">59</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv3B"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">60</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv3C"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">61</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv3D"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">62</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv3E"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">63</literal></expr>:</case> <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Reserv3F"</literal></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <name><name>vtable</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>addr</name> <init>= <expr><call><name>r_read_be32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtable</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>addsym</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>sections</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"vtable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <literal type="number">0x100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_R</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <literal type="number">0x100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>SMD_Header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_R</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <literal type="number">0x100</literal> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>SMD_Header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>SMD_Header</name></type> <name>hdr</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>baddr</name> <init>= <expr><call><name>r_read_be32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdr</name><operator>.</operator><name>RomStart</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+=</operator> <name>baddr</name></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_RX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>entries</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content> 

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinAddr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bf</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>SMD_Vectors</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ERR: binfile too small!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <literal type="number">0x100</literal> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>SMD_Header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>SMD_Vectors</name></type> <name>vectors</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>vectors</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>vectors</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <call><name>r_read_be32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>vectors</name><operator>.</operator><name>Reset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RBinPlugin</name></type> <name>r_bin_plugin_smd</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"smd"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"SEGA Genesis/Megadrive"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,

<expr><operator>.</operator><name>load_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>load_buffer</name></expr>,

<expr><operator>.</operator><name>check_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>check_buffer</name></expr>,

<expr><operator>.</operator><name>baddr</name> <operator>=</operator> <operator>&amp;</operator><name>baddr</name></expr>,

<expr><operator>.</operator><name>entries</name> <operator>=</operator> <operator>&amp;</operator><name>entries</name></expr>,

<expr><operator>.</operator><name>sections</name> <operator>=</operator> <operator>&amp;</operator><name>sections</name></expr>,

<expr><operator>.</operator><name>symbols</name> <operator>=</operator> <operator>&amp;</operator><name>symbols</name></expr>,

<expr><operator>.</operator><name>info</name> <operator>=</operator> <operator>&amp;</operator><name>info</name></expr>,

<expr><operator>.</operator><name>minstrlen</name> <operator>=</operator> <literal type="number">10</literal></expr>,

<expr><operator>.</operator><name>strfilter</name> <operator>=</operator> <literal type="char">'U'</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_BIN</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_bin_plugin_smd</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
