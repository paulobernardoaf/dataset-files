<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\p\bin_le.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../format/le/le.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_buffer</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>length</name> <init>= <expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>idx</name> <init>= <expr><call><name>r_buf_read_le16_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0x3c</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ut64</name><operator>)</operator><name>idx</name> <operator>+</operator> <literal type="number">26</literal> <operator>&lt;</operator> <name>length</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"LX"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"LE"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"MZ"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"LX"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"LE"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>load_buffer</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>bin_obj</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>loadaddr</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name>bin_obj</name> <operator>&amp;&amp;</operator> <name>buf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>r_bin_le_obj_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_bin_le_new_buf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>bin_obj</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroy</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_bin_le_free</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>header</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>rbin</name></name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBin</name> <modifier>*</modifier></type><name>rbin</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>rbin</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>r_bin_le_obj_t</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LE_image_header</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>header</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PrintfCallback</name></type> <name>p</name> <init>= <expr><name><name>rbin</name><operator>-&gt;</operator><name>cb_printf</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name> <operator>||</operator> <operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Signature: %2s\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Byte Order: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>h</name><operator>-&gt;</operator><name>border</name></name></expr> ?</condition><then> <expr><literal type="string">"Big"</literal></expr> </then><else>: <expr><literal type="string">"Little"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Word Order: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>h</name><operator>-&gt;</operator><name>worder</name></name></expr> ?</condition><then> <expr><literal type="string">"Big"</literal></expr> </then><else>: <expr><literal type="string">"Little"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Format Level: %u\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"CPU: %s\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"OS: %s\n"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>os</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Version: %u\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>ver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Flags: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>mflags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Pages: %u\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>mpages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"InitialEipObj: %u\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>startobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"InitialEip: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>eip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"InitialStackObj: %u\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>stackobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"InitialEsp: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>esp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Page Size: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>pagesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>is_le</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Last Page Size: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>pageshift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Page Shift: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>pageshift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Fixup Size: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>fixupsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Fixup Checksum: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>fixupsum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Loader Size: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>ldrsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Loader Checksum: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>ldrsum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Obj Table: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>objtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Obj Count: %u\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>objcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Obj Page Map: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>objmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Obj Iter Data Map: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>itermap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Resource Table: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>rsrctab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Resource Count: %u\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>rsrccnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Resident Name Table: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>restab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Entry Table: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>enttab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Directives Table: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>dirtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Directives Count: %u\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>dircnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Fixup Page Table: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>fpagetab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Fixup Record Table: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>frectab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Import Module Name Table: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>impmod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Import Module Name Count: %u\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>impmodcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Import Procedure Name Table: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>impproc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Per-Page Checksum Table: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>pagesum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Enumerated Data Pages: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>datapage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Number of preload pages: %u\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>preload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Non-resident Names Table: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>nrestab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Size Non-resident Names: %u\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cbnrestab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Checksum Non-resident Names: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>nressum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Autodata Obj: %u\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>autodata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Debug Info: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>debuginfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Debug Length: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>debuglen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Preload pages: %u\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>instpreload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Demand pages: %u\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>instdemand</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Heap Size: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>heapsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"Stack Size: 0x%04x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>stacksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>sections</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_bin_le_get_sections</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>entries</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_bin_le_get_entrypoints</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>symbols</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_bin_le_get_symbols</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>imports</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_bin_le_get_imports</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>libs</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_bin_le_get_libs</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>relocs</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_bin_le_get_relocs</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBinInfo</name> <modifier>*</modifier></type><name>info</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>r_bin_le_obj_t</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LE_image_header</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>header</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cpu</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>os</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>os</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>arch</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><ternary><condition><expr><name><name>bin</name><operator>-&gt;</operator><name>filename</name></name></expr> ?</condition><then> <expr><name><name>bin</name><operator>-&gt;</operator><name>filename</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>big_endian</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>worder</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>has_va</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>baddr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>info</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RBinPlugin</name></type> <name>r_bin_plugin_le</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"le"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"LE/LX format r2 plugin"</literal></expr>,

<expr><operator>.</operator><name>author</name> <operator>=</operator> <literal type="string">"GustavoLCR"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,

<expr><operator>.</operator><name>check_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>check_buffer</name></expr>,

<expr><operator>.</operator><name>load_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>load_buffer</name></expr>,

<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <operator>&amp;</operator><name>destroy</name></expr>,

<expr><operator>.</operator><name>info</name> <operator>=</operator> <operator>&amp;</operator><name>info</name></expr>,

<expr><operator>.</operator><name>header</name> <operator>=</operator> <operator>&amp;</operator><name>header</name></expr>,

<expr><operator>.</operator><name>sections</name> <operator>=</operator> <operator>&amp;</operator><name>sections</name></expr>,

<expr><operator>.</operator><name>entries</name> <operator>=</operator> <operator>&amp;</operator><name>entries</name></expr>,

<expr><operator>.</operator><name>symbols</name> <operator>=</operator> <operator>&amp;</operator><name>symbols</name></expr>,

<expr><operator>.</operator><name>imports</name> <operator>=</operator> <operator>&amp;</operator><name>imports</name></expr>,

<expr><operator>.</operator><name>libs</name> <operator>=</operator> <operator>&amp;</operator><name>libs</name></expr>,

<expr><operator>.</operator><name>relocs</name> <operator>=</operator> <operator>&amp;</operator><name>relocs</name></expr>,

<expr><operator>.</operator><name>minstrlen</name> <operator>=</operator> <literal type="number">4</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_BIN</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_bin_plugin_le</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
