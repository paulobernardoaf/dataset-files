<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\p\bin_vsf.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vsf/vsf_specs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>VICE_MAGIC</name><index>[]</index></name> <init>= <expr><literal type="string">"VICE Snapshot File\032"</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VICE_MAGIC_LEN</name></cpp:macro> <cpp:value>sizeof (VICE_MAGIC) - 1</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>VICE_MAINCPU</name><index>[]</index></name> <init>= <expr><literal type="string">"MAINCPU"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>VICE_C64MEM</name><index>[]</index></name> <init>= <expr><literal type="string">"C64MEM"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>VICE_C64ROM</name><index>[]</index></name> <init>= <expr><literal type="string">"C64ROM"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>VICE_C128MEM</name><index>[]</index></name> <init>= <expr><literal type="string">"C128MEM"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>VICE_C128ROM</name><index>[]</index></name> <init>= <expr><literal type="string">"C128ROM"</literal></expr></init></decl>;</decl_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>offset_mem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ram_size</name></decl>;</decl_stmt>

}</block> <decl><name><name>_machines</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"C64"</literal></expr>, <expr><literal type="string">"Commodore 64"</literal></expr>, <expr><call><name>r_offsetof</name><argument_list>(<argument><expr>struct <name>vsf_c64mem</name></expr></argument>, <argument><expr><name>ram</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">1024</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"C128"</literal></expr>, <expr><literal type="string">"Commodore 128"</literal></expr>, <expr><call><name>r_offsetof</name><argument_list>(<argument><expr>struct <name>vsf_c128mem</name></expr></argument>, <argument><expr><name>ram</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">128</literal> <operator>*</operator> <literal type="number">1024</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>MACHINES_MAX</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>_machines</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>_machines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>Sdb</name><modifier>*</modifier></type> <name>get_sdb</name> <parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_vsf_obj</name></name><modifier>*</modifier></type> <name>bin</name> <init>= <expr><operator>(</operator>struct <name>r_bin_vsf_obj</name><operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>bin</name><operator>-&gt;</operator><name>kv</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_buffer</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>magic</name><index>[<expr><name>VICE_MAGIC_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>magic</name></expr></argument>, <argument><expr><name>VICE_MAGIC_LEN</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VICE_MAGIC_LEN</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>magic</name></expr></argument>, <argument><expr><name>VICE_MAGIC</name></expr></argument>, <argument><expr><name>VICE_MAGIC_LEN</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>load_buffer</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>bin_obj</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>loadaddr</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_vsf_obj</name></name><modifier>*</modifier></type> <name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_buffer</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>res</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr>struct <name>r_bin_vsf_obj</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>r_offsetof</name><argument_list>(<argument><expr>struct <name>vsf_hdr</name></expr></argument>, <argument><expr><name>machine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>machine</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>machine</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>machine</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MACHINES_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>_machines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>machine</name></expr></argument>, <argument><expr><name><name>_machines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>_machines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>machine_idx</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>MACHINES_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unsupported machine type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>vsf_hdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>sz</name> <init>= <expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vsf_module</name></name></type> <name>module</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>read</name> <init>= <expr><call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>module</name></expr></argument>, <argument><expr><literal type="string">"16ccci"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>read</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Truncated Header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP_MODULE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcmp (module.module_name, x, sizeof (x) - 1)</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CMP_MODULE</name> <argument_list>(<argument><expr><name>VICE_C64MEM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>module</name><operator>.</operator><name>major</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>mem</name></name> <operator>=</operator> <name>offset</name> <operator>+</operator> <name>read</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>CMP_MODULE</name> <argument_list>(<argument><expr><name>VICE_C64ROM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>module</name><operator>.</operator><name>major</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>rom</name></name> <operator>=</operator> <name>offset</name> <operator>+</operator> <name>read</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>CMP_MODULE</name> <argument_list>(<argument><expr><name>VICE_C128MEM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>module</name><operator>.</operator><name>major</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>mem</name></name> <operator>=</operator> <name>offset</name> <operator>+</operator> <name>read</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>CMP_MODULE</name> <argument_list>(<argument><expr><name>VICE_C128ROM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>module</name><operator>.</operator><name>major</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>rom</name></name> <operator>=</operator> <name>offset</name> <operator>+</operator> <name>read</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>CMP_MODULE</name> <argument_list>(<argument><expr><name>VICE_MAINCPU</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>module</name><operator>.</operator><name>major</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>maincpu</name></name> <operator>=</operator> <call><name>R_NEW</name> <argument_list>(<argument><expr>struct <name>vsf_maincpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>read</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name><name>res</name><operator>-&gt;</operator><name>maincpu</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>res</name><operator>-&gt;</operator><name>maincpu</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CMP_MODULE</name></cpp:undef>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>module</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>module</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Malformed VSF module with length 0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>kv</name></name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_ns_set</name> <argument_list>(<argument><expr><name>sdb</name></expr></argument>, <argument><expr><literal type="string">"info"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>bin_obj</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>mem</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_vsf_obj</name></name><modifier>*</modifier></type> <name>vsf_obj</name> <init>= <expr><operator>(</operator>struct <name>r_bin_vsf_obj</name><operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vsf_obj</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinMem</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>m</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinMem</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"RAM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>_machines</name><index>[<expr><name><name>vsf_obj</name><operator>-&gt;</operator><name>machine_idx</name></name></expr>]</index></name><operator>.</operator><name>ram_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>perms</name></name> <operator>=</operator> <call><name>r_str_rwx</name> <argument_list>(<argument><expr><literal type="string">"rwx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name><modifier>*</modifier></type> <name>sections</name><parameter_list>(<parameter><decl><type><name>RBinFile</name><modifier>*</modifier></type> <name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_vsf_obj</name></name><modifier>*</modifier></type> <name>vsf_obj</name> <init>= <expr><operator>(</operator>struct <name>r_bin_vsf_obj</name><operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vsf_obj</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m_idx</name> <init>= <expr><name><name>vsf_obj</name><operator>-&gt;</operator><name>machine_idx</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vsf_obj</name><operator>-&gt;</operator><name>rom</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vsf_obj</name><operator>-&gt;</operator><name>machine_idx</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"BASIC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>vsf_obj</name><operator>-&gt;</operator><name>rom</name></name> <operator>+</operator> <call><name>r_offsetof</name> <argument_list>(<argument><expr>struct <name>vsf_c64rom</name></expr></argument>, <argument><expr><name>basic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <literal type="number">0xa000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_RX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"KERNAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>vsf_obj</name><operator>-&gt;</operator><name>rom</name></name> <operator>+</operator> <call><name>r_offsetof</name> <argument_list>(<argument><expr>struct <name>vsf_c64rom</name></expr></argument>, <argument><expr><name>kernal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <literal type="number">0xe000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_RX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"BASIC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>vsf_obj</name><operator>-&gt;</operator><name>rom</name></name> <operator>+</operator> <call><name>r_offsetof</name> <argument_list>(<argument><expr>struct <name>vsf_c128rom</name></expr></argument>, <argument><expr><name>basic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">28</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <literal type="number">0x4000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">28</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_RX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"MONITOR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>vsf_obj</name><operator>-&gt;</operator><name>rom</name></name> <operator>+</operator> <call><name>r_offsetof</name> <argument_list>(<argument><expr>struct <name>vsf_c128rom</name></expr></argument>, <argument><expr><name>basic</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">28</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <literal type="number">0xb000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_RX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"EDITOR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>vsf_obj</name><operator>-&gt;</operator><name>rom</name></name> <operator>+</operator> <call><name>r_offsetof</name> <argument_list>(<argument><expr>struct <name>vsf_c128rom</name></expr></argument>, <argument><expr><name>editor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <literal type="number">0xc000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_RX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"KERNAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>vsf_obj</name><operator>-&gt;</operator><name>rom</name></name> <operator>+</operator> <call><name>r_offsetof</name> <argument_list>(<argument><expr>struct <name>vsf_c128rom</name></expr></argument>, <argument><expr><name>kernal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <literal type="number">0xe000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_RX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vsf_obj</name><operator>-&gt;</operator><name>mem</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name><name>_machines</name><index>[<expr><name>m_idx</name></expr>]</index></name><operator>.</operator><name>offset_mem</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vsf_obj</name><operator>-&gt;</operator><name>machine_idx</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>_machines</name><index>[<expr><name>m_idx</name></expr>]</index></name><operator>.</operator><name>ram_size</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"RAM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>vsf_obj</name><operator>-&gt;</operator><name>mem</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_RWX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">64</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"RAM BANK 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>vsf_obj</name><operator>-&gt;</operator><name>mem</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_RWX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"RAM BANK 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>vsf_obj</name><operator>-&gt;</operator><name>mem</name></name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>R_PERM_RWX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBinInfo</name><modifier>*</modifier></type> <name>info</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_vsf_obj</name></name><modifier>*</modifier></type> <name>vsf_obj</name> <init>= <expr><operator>(</operator>struct <name>r_bin_vsf_obj</name><operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vsf_obj</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m_idx</name> <init>= <expr><name><name>vsf_obj</name><operator>-&gt;</operator><name>machine_idx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinInfo</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vsf_hdr</name></name></type> <name>hdr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>read</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>read</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Truncated Header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinInfo</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Snapshot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>machine</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>_machines</name><index>[<expr><name>m_idx</name></expr>]</index></name><operator>.</operator><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>os</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>_machines</name><index>[<expr><name>m_idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>arch</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"6502"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>has_va</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vsf_obj</name><operator>-&gt;</operator><name>maincpu</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>vsf_obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"vsf.reg_a"</literal></expr></argument>, <argument><expr><name><name>vsf_obj</name><operator>-&gt;</operator><name>maincpu</name><operator>-&gt;</operator><name>ac</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>vsf_obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"vsf.reg_x"</literal></expr></argument>, <argument><expr><name><name>vsf_obj</name><operator>-&gt;</operator><name>maincpu</name><operator>-&gt;</operator><name>xr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>vsf_obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"vsf.reg_y"</literal></expr></argument>, <argument><expr><name><name>vsf_obj</name><operator>-&gt;</operator><name>maincpu</name><operator>-&gt;</operator><name>yr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>vsf_obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"vsf.reg_sp"</literal></expr></argument>, <argument><expr><name><name>vsf_obj</name><operator>-&gt;</operator><name>maincpu</name><operator>-&gt;</operator><name>sp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>vsf_obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"vsf.reg_pc"</literal></expr></argument>, <argument><expr><name><name>vsf_obj</name><operator>-&gt;</operator><name>maincpu</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>vsf_obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"vsf.reg_st"</literal></expr></argument>, <argument><expr><name><name>vsf_obj</name><operator>-&gt;</operator><name>maincpu</name><operator>-&gt;</operator><name>st</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sdb_num_set</name> <argument_list>(<argument><expr><name><name>vsf_obj</name><operator>-&gt;</operator><name>kv</name></name></expr></argument>, <argument><expr><literal type="string">"vsf.clock"</literal></expr></argument>, <argument><expr><name><name>vsf_obj</name><operator>-&gt;</operator><name>maincpu</name><operator>-&gt;</operator><name>clk</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name><modifier>*</modifier></type> <name>symbols</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>address</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>symbol_name</name></decl>;</decl_stmt>

}</block> <decl><name><name>_symbols</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="number">0xd000</literal></expr>, <expr><literal type="string">"VIC_SPR0_X"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd001</literal></expr>, <expr><literal type="string">"VIC_SPR0_Y"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd002</literal></expr>, <expr><literal type="string">"VIC_SPR1_X"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd003</literal></expr>, <expr><literal type="string">"VIC_SPR1_Y"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd004</literal></expr>, <expr><literal type="string">"VIC_SPR2_X"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd005</literal></expr>, <expr><literal type="string">"VIC_SPR2_Y"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd006</literal></expr>, <expr><literal type="string">"VIC_SPR3_X"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd007</literal></expr>, <expr><literal type="string">"VIC_SPR3_Y"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd008</literal></expr>, <expr><literal type="string">"VIC_SPR4_X"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd009</literal></expr>, <expr><literal type="string">"VIC_SPR4_Y"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd00a</literal></expr>, <expr><literal type="string">"VIC_SPR5_X"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd00b</literal></expr>, <expr><literal type="string">"VIC_SPR5_Y"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd00c</literal></expr>, <expr><literal type="string">"VIC_SPR6_X"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd00d</literal></expr>, <expr><literal type="string">"VIC_SPR6_Y"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd00e</literal></expr>, <expr><literal type="string">"VIC_SPR7_X"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd00f</literal></expr>, <expr><literal type="string">"VIC_SPR7_Y"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd010</literal></expr>, <expr><literal type="string">"VIC_SPR_HI_X"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd015</literal></expr>, <expr><literal type="string">"VIC_SPR_ENA"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd017</literal></expr>, <expr><literal type="string">"VIC_SPR_EXP_Y"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd01d</literal></expr>, <expr><literal type="string">"VIC_SPR_EXP_X"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd01c</literal></expr>, <expr><literal type="string">"VIC_SPR_MCOLOR"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd01b</literal></expr>, <expr><literal type="string">"VIC_SPR_BG_PRIO"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd025</literal></expr>, <expr><literal type="string">"VIC_SPR_MCOLOR0"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd026</literal></expr>, <expr><literal type="string">"VIC_SPR_MCOLOR1"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd027</literal></expr>, <expr><literal type="string">"VIC_SPR0_COLOR"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd028</literal></expr>, <expr><literal type="string">"VIC_SPR1_COLOR"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd029</literal></expr>, <expr><literal type="string">"VIC_SPR2_COLOR"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd02A</literal></expr>, <expr><literal type="string">"VIC_SPR3_COLOR"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd02B</literal></expr>, <expr><literal type="string">"VIC_SPR4_COLOR"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd02C</literal></expr>, <expr><literal type="string">"VIC_SPR5_COLOR"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd02D</literal></expr>, <expr><literal type="string">"VIC_SPR6_COLOR"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd02E</literal></expr>, <expr><literal type="string">"VIC_SPR7_COLOR"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd011</literal></expr>, <expr><literal type="string">"VIC_CTRL1"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd016</literal></expr>, <expr><literal type="string">"VIC_CTRL2"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd012</literal></expr>, <expr><literal type="string">"VIC_HLINE"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd013</literal></expr>, <expr><literal type="string">"VIC_LPEN_X"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd014</literal></expr>, <expr><literal type="string">"VIC_LPEN_Y"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd018</literal></expr>, <expr><literal type="string">"VIC_VIDEO_ADR"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd019</literal></expr>, <expr><literal type="string">"VIC_IRR"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd01a</literal></expr>, <expr><literal type="string">"VIC_IMR"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd020</literal></expr>, <expr><literal type="string">"VIC_BORDERCOLOR"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd021</literal></expr>, <expr><literal type="string">"VIC_BG_COLOR0"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd022</literal></expr>, <expr><literal type="string">"VIC_BG_COLOR1"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd023</literal></expr>, <expr><literal type="string">"VIC_BG_COLOR2"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd024</literal></expr>, <expr><literal type="string">"VIC_BG_COLOR3"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd02F</literal></expr>, <expr><literal type="string">"VIC_KBD_128"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd030</literal></expr>, <expr><literal type="string">"VIC_CLK_128"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD400</literal></expr>, <expr><literal type="string">"SID_S1Lo"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD401</literal></expr>, <expr><literal type="string">"SID_S1Hi"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD402</literal></expr>, <expr><literal type="string">"SID_PB1Lo"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD403</literal></expr>, <expr><literal type="string">"SID_PB1Hi"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD404</literal></expr>, <expr><literal type="string">"SID_Ctl1"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD405</literal></expr>, <expr><literal type="string">"SID_AD1"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD406</literal></expr>, <expr><literal type="string">"SID_SUR1"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD407</literal></expr>, <expr><literal type="string">"SID_S2Lo"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD408</literal></expr>, <expr><literal type="string">"SID_S2Hi"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD409</literal></expr>, <expr><literal type="string">"SID_PB2Lo"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD40A</literal></expr>, <expr><literal type="string">"SID_PB2Hi"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD40B</literal></expr>, <expr><literal type="string">"SID_Ctl2"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD40C</literal></expr>, <expr><literal type="string">"SID_AD2"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD40D</literal></expr>, <expr><literal type="string">"SID_SUR2"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD40E</literal></expr>, <expr><literal type="string">"SID_S3Lo"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD40F</literal></expr>, <expr><literal type="string">"SID_S3Hi"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD410</literal></expr>, <expr><literal type="string">"SID_PB3Lo"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD411</literal></expr>, <expr><literal type="string">"SID_PB3Hi"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD412</literal></expr>, <expr><literal type="string">"SID_Ctl3"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD413</literal></expr>, <expr><literal type="string">"SID_AD3"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD414</literal></expr>, <expr><literal type="string">"SID_SUR3"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD415</literal></expr>, <expr><literal type="string">"SID_FltLo"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD416</literal></expr>, <expr><literal type="string">"SID_FltHi"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD417</literal></expr>, <expr><literal type="string">"SID_FltCtl"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD418</literal></expr>, <expr><literal type="string">"SID_Amp"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD419</literal></expr>, <expr><literal type="string">"SID_ADConv1"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD41A</literal></expr>, <expr><literal type="string">"SID_ADConv2"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD41B</literal></expr>, <expr><literal type="string">"SID_Noise"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD41C</literal></expr>, <expr><literal type="string">"SID_Read3"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd600</literal></expr>, <expr><literal type="string">"VDC_INDEX"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd601</literal></expr>, <expr><literal type="string">"VDC_DATA"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xDC00</literal></expr>, <expr><literal type="string">"CIA1_PRA"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xDC01</literal></expr>, <expr><literal type="string">"CIA1_PRB"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xDC02</literal></expr>, <expr><literal type="string">"CIA1_DDRA"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xDC03</literal></expr>, <expr><literal type="string">"CIA1_DDRB"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xDC08</literal></expr>, <expr><literal type="string">"CIA1_TOD10"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xDC09</literal></expr>, <expr><literal type="string">"CIA1_TODSEC"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xDC0A</literal></expr>, <expr><literal type="string">"CIA1_TODMIN"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xDC0B</literal></expr>, <expr><literal type="string">"CIA1_TODHR"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xDC0D</literal></expr>, <expr><literal type="string">"CIA1_ICR"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xDC0E</literal></expr>, <expr><literal type="string">"CIA1_CRA"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xDC0F</literal></expr>, <expr><literal type="string">"CIA1_CRB"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xDD00</literal></expr>, <expr><literal type="string">"CIA2_PRA"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xDD01</literal></expr>, <expr><literal type="string">"CIA2_PRB"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xDD02</literal></expr>, <expr><literal type="string">"CIA2_DDRA"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xDD03</literal></expr>, <expr><literal type="string">"CIA2_DDRB"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xDD08</literal></expr>, <expr><literal type="string">"CIA2_TOD10"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xDD09</literal></expr>, <expr><literal type="string">"CIA2_TODSEC"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xDD0A</literal></expr>, <expr><literal type="string">"CIA2_TODMIN"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xDD0B</literal></expr>, <expr><literal type="string">"CIA2_TODHR"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xDD0D</literal></expr>, <expr><literal type="string">"CIA2_ICR"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xDD0E</literal></expr>, <expr><literal type="string">"CIA2_CRA"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xDD0F</literal></expr>, <expr><literal type="string">"CIA2_CRB"</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>SYMBOLS_MAX</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>_symbols</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>_symbols</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_vsf_obj</name></name><modifier>*</modifier></type> <name>vsf_obj</name> <init>= <expr><operator>(</operator>struct <name>r_bin_vsf_obj</name><operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vsf_obj</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m_idx</name> <init>= <expr><name><name>vsf_obj</name><operator>-&gt;</operator><name>machine_idx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name><name>_machines</name><index>[<expr><name>m_idx</name></expr>]</index></name><operator>.</operator><name>offset_mem</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SYMBOLS_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>R_BIN_SIZEOF_STRINGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>_symbols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>symbol_name</name></expr></argument>, <argument><expr><name>R_BIN_SIZEOF_STRINGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>_symbols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>address</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>vsf_obj</name><operator>-&gt;</operator><name>mem</name></name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name><name>_symbols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>address</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroy</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_vsf_obj</name></name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><operator>(</operator>struct <name>r_bin_vsf_obj</name> <operator>*</operator><operator>)</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>maincpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name><modifier>*</modifier></type> <name>entries</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r_bin_vsf_obj</name></name><modifier>*</modifier></type> <name>vsf_obj</name> <init>= <expr><operator>(</operator>struct <name>r_bin_vsf_obj</name><operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vsf_obj</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m_idx</name> <init>= <expr><name><name>vsf_obj</name><operator>-&gt;</operator><name>machine_idx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name><name>_machines</name><index>[<expr><name>m_idx</name></expr>]</index></name><operator>.</operator><name>offset_mem</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinAddr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>vsf_obj</name><operator>-&gt;</operator><name>mem</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <ternary><condition><expr><name><name>vsf_obj</name><operator>-&gt;</operator><name>maincpu</name></name></expr> ?</condition><then> <expr><name><name>vsf_obj</name><operator>-&gt;</operator><name>maincpu</name><operator>-&gt;</operator><name>pc</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RBinPlugin</name></type> <name>r_bin_plugin_vsf</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vsf"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"VICE Snapshot File"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,

<expr><operator>.</operator><name>get_sdb</name> <operator>=</operator> <operator>&amp;</operator><name>get_sdb</name></expr>,

<expr><operator>.</operator><name>load_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>load_buffer</name></expr>,

<expr><operator>.</operator><name>check_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>check_buffer</name></expr>,

<expr><operator>.</operator><name>entries</name> <operator>=</operator> <operator>&amp;</operator><name>entries</name></expr>,

<expr><operator>.</operator><name>sections</name> <operator>=</operator> <name>sections</name></expr>,

<expr><operator>.</operator><name>symbols</name> <operator>=</operator> <operator>&amp;</operator><name>symbols</name></expr>,

<expr><operator>.</operator><name>info</name> <operator>=</operator> <operator>&amp;</operator><name>info</name></expr>,

<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <operator>&amp;</operator><name>destroy</name></expr>,

<expr><operator>.</operator><name>mem</name> <operator>=</operator> <operator>&amp;</operator><name>mem</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_BIN</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_bin_plugin_vsf</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
