<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\p\bin_symbols.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../i/private.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>if (0)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>is64</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut64</name></type> <name>dwordsBeginAt</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut64</name></type> <name>stringsBeginAt</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut64</name></type> <name>symbolsBeginAt</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>globalSymbols</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTIONS_BEGIN</name></cpp:macro> <cpp:value>0x220</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEGMENTS_BEGIN</name></cpp:macro> <cpp:value>0x1b0</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>symbols_header_t</name> <block>{

<decl_stmt><decl><type><name>ut32</name></type> <name>magic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>uuid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>unk0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>unk1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>slotsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>valid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

}</block></struct></type> <name>SymbolsHeader</name>;</typedef>

<function><type><specifier>static</specifier> <name>SymbolsHeader</name></type> <name>parseHeader</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>b</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SymbolsHeader</name></type> <name>sh</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>.</operator><name>magic</name></name> <operator>=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>.</operator><name>version</name></name> <operator>=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>.</operator><name>valid</name></name> <operator>=</operator> <name><name>sh</name><operator>.</operator><name>magic</name></name> <operator>==</operator> <literal type="number">0xff01ff02</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>sh</name><operator>.</operator><name>uuid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">24</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>sh</name><operator>.</operator><name>unk0</name></name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <literal type="number">0x28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>.</operator><name>unk1</name></name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <literal type="number">0x2c</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sh</name><operator>.</operator><name>slotsize</name></name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <literal type="number">0x2e</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>

<return>return <expr><name>sh</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>symbols_metadata_t</name> <block>{ 

<decl_stmt><decl><type><name>ut32</name></type> <name>cputype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>subtype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>n_segments</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>namelen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>valid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>segments</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cpu</name></decl>;</decl_stmt>

}</block></struct></type> <name>SymbolsMetadata</name>;</typedef>

<function><type><specifier>static</specifier> <name>RBinSection</name> <modifier>*</modifier></type><name>newSection</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_segment</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>to</name> <operator>-</operator> <name>from</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <ternary><condition><expr><call><name>strstr</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"TEXT"</literal></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><literal type="number">5</literal></expr></then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_segment</name></name> <operator>=</operator> <name>is_segment</name></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>parseSegments</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>count</name> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>off</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>X</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>segments</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_bin_section_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>segments</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>A</name> <init>= <expr><call><name>r_read_le32</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <name>X</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>B</name> <init>= <expr><call><name>r_read_le32</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <name>X</name> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cname</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>b</name> <operator>+</operator> <name>X</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>r_str_ndup</name> <argument_list>(<argument><expr><name>cname</name></expr></argument>, <argument><expr><call><name>r_str_nlen</name> <argument_list>(<argument><expr><name>cname</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>section</name> <init>= <expr><call><name>newSection</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name> <operator>+</operator> <name>B</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>segments</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>X</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>segments</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>typeString</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content> 

<return>return <expr><literal type="string">"arm"</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0x0100000c</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>is64</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><literal type="string">"arm"</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0x0200000c</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>is64</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<return>return <expr><literal type="string">"arm"</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="string">"x86"</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>subtypeString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content> 

<return>return <expr><literal type="string">"armv7"</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="string">"?"</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SymbolsMetadata</name></type> <name>parseMetadata</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SymbolsMetadata</name></type> <name>sm</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>b</name><index>[<expr><literal type="number">0x100</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sm</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sm</name><operator>.</operator><name>cputype</name></name> <operator>=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sm</name><operator>.</operator><name>arch</name></name> <operator>=</operator> <call><name>typeString</name> <argument_list>(<argument><expr><name><name>sm</name><operator>.</operator><name>cputype</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sm</name><operator>.</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sm</name><operator>.</operator><name>subtype</name></name> <operator>=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sm</name><operator>.</operator><name>cpu</name></name> <operator>=</operator> <call><name>subtypeString</name> <argument_list>(<argument><expr><name><name>sm</name><operator>.</operator><name>subtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sm</name><operator>.</operator><name>n_segments</name></name> <operator>=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sm</name><operator>.</operator><name>namelen</name></name> <operator>=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <literal type="number">0xc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sm</name><operator>.</operator><name>segments</name></name> <operator>=</operator> <call><name>parseSegments</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name><name>sm</name><operator>.</operator><name>namelen</name></name> <operator>+</operator> <name>delta</name></expr></argument>, <argument><expr><name><name>sm</name><operator>.</operator><name>n_segments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sm</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name><name>sm</name><operator>.</operator><name>n_segments</name></name> <operator>*</operator> <literal type="number">32</literal><operator>)</operator> <operator>+</operator> <literal type="number">120</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>nm</name></decl>, <decl><type ref="prev"/><name>nm2</name></decl>, <decl><type ref="prev"/><name>nm3</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name><name>sm</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nm</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>nm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name><name>sm</name><operator>.</operator><name>size</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nm2</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>nm2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name><name>sm</name><operator>.</operator><name>size</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nm3</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>nm3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_read_le32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nm3</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0xa1b22b1a</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sm</name><operator>.</operator><name>size</name></name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>sm</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.addr + r_offsetof (x, y)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>printSymbolsHeader</name><parameter_list>(<parameter><decl><type><name>SymbolsHeader</name></type> <name>sh</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"0x%08x uuid "</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>sh</name><operator>.</operator><name>uuid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>parseStrings</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>string_section</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>string_section_end</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sss</name> <init>= <expr><name>string_section_end</name> <operator>+</operator> <name>string_section</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sss</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sss</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>os</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nstrings</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>available</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>string_section</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>b</name></expr></argument>, <argument><expr><name>sss</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>available</name> <operator>!=</operator> <name>sss</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sss</name> <operator>=</operator> <name>available</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sss</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot read strings at 0x%08"</literal> <name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>string_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_bin_string_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s_end</name> <init>= <expr><name>s</name> <operator>+</operator> <name>sss</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>true</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>o</name> <operator>=</operator> <name>s</name> <operator>-</operator> <name>os</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>string_section</name> <operator>+</operator> <name>o</name> <operator>+</operator> <literal type="number">8</literal> <operator>&gt;</operator> <name>string_section_end</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name>s_end</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nstrings</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinString</name> <modifier>*</modifier></type><name>bs</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bs</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>o</name> <operator>+</operator> <name>string_section</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>o</name> <operator>+</operator> <name>string_section</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>bs</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>symbols_dragons_t</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>foo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>n_sections</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>n_segments</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>n_symbols</name></decl>;</decl_stmt>

}</block></struct></type> <name>SymbolsDragons</name>;</typedef>

<function><type><specifier>static</specifier> <name>SymbolsDragons</name></type> <name>parseDragons</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SymbolsDragons</name></type> <name>sd</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sd</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sd</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>D</name></type> <name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Dragons at 0x%x\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name> <init>= <expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>off</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>sd</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>sd</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>available</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>available</name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: r_buf_read_at failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>sd</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><literal type="number">0</literal></expr></condition></ternary></expr></cpp:if>

0x00000138 |1a2b b2a1 0300 0000 1a2b b2a1 e055 0000| .+.......+...U..

n_segments ----. .--- how many sections ?

0x00000148 |0100 0000 ca55 0000 0400 0000 1800 0000| .....U..........

.---- how many symbols? 0xc7

0x00000158 |c700 0000 0000 0000 0000 0000 0104 0000| ................

0x00000168 |250b e803 0000 0100 0000 0000 bd55 0000| %............U..

0x00000178 |91bb e903 e35a b42c 93a4 340a 8746 9489| .....Z.,..4..F..

0x00000188 |0cea 4c40 0c00 0000 0900 0000 0000 0000| ..L@............

0x00000198 |0000 0000 0000 0000 0000 0000 0000 0000| ................

0x000001a8 |0080 0000 0000 0000 5f5f 5445 5854 0000| ........__TEXT..

0x000001b8 |0000 0000 0000 0000 0080 0000 0000 0000| ................

0x000001c8 |0040 0000 0000 0000 5f5f 4441 5441 0000| .@......__DATA..

0x000001d8 |0000 0000 0000 0000 00c0 0000 0000 0000| ................

0x000001e8 |0000 0100 0000 0000 5f5f 4c4c 564d 0000| ........__LLVM..

0x000001f8 |0000 0000 0000 0000 00c0 0100 0000 0000| ................

0x00000208 |00c0 0000 0000 0000 5f5f 4c49 4e4b 4544| ........__LINKED

0x00000218 |4954 0000 0000 0000 0000 0000 d069 0000| IT...........i..

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>magicCombo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><literal type="string">"\x1a\x2b\xb2\xa1"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>magicCombo</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><literal type="string">"\x1a\x2b\xb2\xa1"</literal></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>magicCombo</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>magicCombo</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>available</name> <operator>=</operator> <call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>off</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>available</name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: r_buf_read_at failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>sd</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><literal type="string">"\x1a\x2b\xb2\xa1"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>off</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"0x%08x parsing error: invalid magic retry\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>D</name></type> <name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"0x%08x magic OK\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<macro><name>D</name></macro> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>e0ss</name> <init>= <expr><call><name>r_read_le32</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"0x%08x eoss 0x%x\n"</literal></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>e0ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>sd</name><operator>.</operator><name>n_segments</name></name> <operator>=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sd</name><operator>.</operator><name>n_sections</name></name> <operator>=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parseSegments</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>SEGMENTS_BEGIN</name></expr></argument>, <argument><expr><name><name>sd</name><operator>.</operator><name>n_segments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sd</name><operator>.</operator><name>n_symbols</name></name> <operator>=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <literal type="number">0x20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>sd</name><operator>.</operator><name>n_symbols</name></name> <operator>&gt;</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: too many symbols %d, truncated to 2048\n"</literal></expr></argument>, <argument><expr><name><name>sd</name><operator>.</operator><name>n_symbols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sd</name><operator>.</operator><name>n_symbols</name></name> <operator>=</operator> <literal type="number">2048</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sd</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sd</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0x70</literal> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sd</name><operator>.</operator><name>size</name></name> <operator>+=</operator> <name><name>sd</name><operator>.</operator><name>n_segments</name></name> <operator>*</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is64</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sd</name><operator>.</operator><name>size</name></name> <operator>+=</operator> <name><name>sd</name><operator>.</operator><name>n_sections</name></name> <operator>*</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sd</name><operator>.</operator><name>size</name></name> <operator>+=</operator> <name><name>sd</name><operator>.</operator><name>n_sections</name></name> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>sd</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBinSymbol</name> <modifier>*</modifier></type><name>newSymbol</name><parameter_list>(<parameter><decl><type><name>RBinString</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sym</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <ternary><condition><expr><name>s</name></expr>?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>string</name></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_TYPE_FUNC_STR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <literal type="string">"NONE"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>sym</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>parseSections</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_sections</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>strings</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>buf_sz</name> <init>= <expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>buf_sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>must_free</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>strings</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>strings</name> <operator>=</operator> <call><name>parseStrings</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>stringsBeginAt</name></expr></argument>, <argument><expr><name>buf_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>strings</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>must_free</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_bin_section_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>buf_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_sections</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name>i</name> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>+</operator> <literal type="number">8</literal> <operator>&gt;=</operator> <name>buf_sz</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBinString</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><ternary><condition><expr><name>strings</name></expr>?</condition><then> <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>strings</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>namestr</name> <init>= <expr><ternary><condition><expr><name>name</name></expr>?</condition><then> <expr><name><name>name</name><operator>-&gt;</operator><name>string</name></name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>A</name> <init>= <expr><call><name>r_read_le32</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>B</name> <init>= <expr><call><name>r_read_le32</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>section</name> <init>= <expr><call><name>newSection</name> <argument_list>(<argument><expr><name>namestr</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name> <operator>+</operator> <name>B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>must_free</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>strings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>parseSymbols</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ut64</name> <modifier>*</modifier></type><name>eof</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>structSize</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>eof</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>eof</name> <operator>=</operator> <name>x</name> <operator>+</operator> <operator>(</operator><name>count</name> <operator>*</operator> <name>structSize</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><name>structSize</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>symbols</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_symbol_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>count</name> <operator>*</operator> <name>structSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>i</name> <operator>*</operator> <name>structSize</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>A</name> <init>= <expr><call><name>r_read_le32</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>B</name> <init>= <expr><call><name>r_read_le32</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>symbols</name></expr></argument>, <argument><expr><call><name>newSymbol</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>symbols</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>filterSymbolStrings</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>strings</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_sections</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinString</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>strings</argument>, <argument>iter</argument>, <argument>s</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>string</name></name> <operator>!=</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strstr</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><literal type="string">"$$"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>newSymbol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parseTable3</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dword_section</name> <init>= <expr><name>dwordsBeginAt</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dword_section_end</name> <init>= <expr><name>stringsBeginAt</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><name>dword_section_end</name> <operator>-</operator> <name>dword_section</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"..skip..\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>r_read_le32</name> <argument_list>(<argument><expr><name>b</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>min</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>v</name> <operator>&lt;</operator> <name>min</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>min</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>max</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>v</name> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>load_buffer</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>bin_obj</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>loadaddr</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

SYMBOLS HEADER

0 MAGIC 02ff01ff

4 VERSION 1 (little endian)

8 ffffffff

16 002b0000 01000000 { 0x2b00, 0x0000 }

24 UUID 16 bytes

40 2621 d85b 2100 2000 0000 0000 0000 0000

56 ffff ffff ffff ff7f 0c00 0000 0900 0000

72 0400 0000 6800 0000 2f76 6172 2f66 6f6c .... 4, 104 

184 

0x000000b8 5f5f 5445 5854 0000 0000 0000 0000 0000 0000 0000 0000 0000 0080 0000 0000 0000 __TEXT..........................

0x000000d8 5f5f 4441 5441 0000 0000 0000 0000 0000 0080 0000 0000 0000 0040 0000 0000 0000 __DATA...................@......

0x000000f8 5f5f 4c4c 564d 0000 0000 0000 0000 0000 00c0 0000 0000 0000 0000 0100 0000 0000 __LLVM..........................

0x00000118 5f5f 4c49 4e4b 4544 4954 0000 0000 0000 00c0 0100 0000 0000 00c0 0000 0000 0000 __LINKEDIT......................

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>SymbolsHeader</name></type> <name>sh</name> <init>= <expr><call><name>parseHeader</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sh</name><operator>.</operator><name>valid</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid headers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printSymbolsHeader</name> <argument_list>(<argument><expr><name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SymbolsMetadata</name></type> <name>sm</name> <init>= <expr><call><name>parseMetadata</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x40</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SymbolsDragons</name></type> <name>sd</name> <init>= <expr><call><name>parseDragons</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>sm</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name><name>sm</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>sm</name><operator>.</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>symbolsBeginAt</name> <operator>=</operator> <name><name>sd</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name><name>sd</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>D</name></type> <name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Symbols at 0x%08x\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name>symbolsBeginAt</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>symbols</name> <init>= <expr><call><name>parseSymbols</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>symbolsBeginAt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwordsBeginAt</name></expr></argument>, <argument><expr><name><name>sd</name><operator>.</operator><name>n_symbols</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D</name></type> <name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Dwords at 0x%08x\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name>dwordsBeginAt</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>stringsBeginAt</name> <operator>=</operator> <name>dwordsBeginAt</name> <operator>+</operator> <operator>(</operator><name><name>sd</name><operator>.</operator><name>n_symbols</name></name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>D</name></type> <name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Strings at 0x%08x\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name>stringsBeginAt</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>parseTable3</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>dwordsBeginAt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>strings</name> <init>= <expr><call><name>parseStrings</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>stringsBeginAt</name></expr></argument>, <argument><expr><name>stringsBeginAt</name> <operator>+</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>strings</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>symbolStrings</name> <init>= <expr><call><name>filterSymbolStrings</name> <argument_list>(<argument><expr><name>strings</name></expr></argument>, <argument><expr><name><name>sd</name><operator>.</operator><name>n_sections</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<macro><name>r_list_foreach</name> <argument_list>(<argument>symbols</argument>, <argument>iter</argument>, <argument>sym</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name>n</name> <operator>+</operator> <name><name>sd</name><operator>.</operator><name>n_sections</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinString</name> <modifier>*</modifier></type><name>bs</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>symbolStrings</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"__unnamed_%d"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>strings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>symbolStrings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>globalSymbols</name> <operator>=</operator> <name>symbols</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>sections</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SymbolsMetadata</name></type> <name>sm</name> <init>= <expr><call><name>parseMetadata</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0x40</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SymbolsDragons</name></type> <name>sd</name> <init>= <expr><call><name>parseDragons</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>sm</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name><name>sm</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>sm</name><operator>.</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>sections</name> <init>= <expr><call><name>parseSections</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>SECTIONS_BEGIN</name> <operator>-</operator> <literal type="number">0x18</literal></expr></argument>, <argument><expr><name><name>sd</name><operator>.</operator><name>n_sections</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_bin_section_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>sm.segments</argument>, <argument>iter</argument>, <argument>s</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>r_list_foreach</name> <argument_list>(<argument>sections</argument>, <argument>iter</argument>, <argument>s</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>baddr</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><literal type="number">0LL</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBinInfo</name> <modifier>*</modifier></type><name>info</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SymbolsMetadata</name></type> <name>sm</name> <init>= <expr><call><name>parseMetadata</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0x40</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinInfo</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>bclass</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"symbols"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>os</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>arch</name></name> <operator>=</operator> <ternary><condition><expr><name><name>sm</name><operator>.</operator><name>arch</name></name></expr>?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>sm</name><operator>.</operator><name>arch</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name><name>sm</name><operator>.</operator><name>bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Symbols file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>subsystem</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"llvm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>has_va</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_buffer</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\x02\xff\x01\xff"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>strings</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>strings</name> <init>= <expr><call><name>parseStrings</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>stringsBeginAt</name></expr></argument>, <argument><expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinString</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>strings</argument>, <argument>iter</argument>, <argument>s</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>string</name></name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>symbols</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>globalSymbols</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>size</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>UT64_MAX</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RBinPlugin</name></type> <name>r_bin_plugin_symbols</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"symbols"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Apple Symbols file"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"MIT"</literal></expr>,

<expr><operator>.</operator><name>load_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>load_buffer</name></expr>,

<expr><operator>.</operator><name>check_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>check_buffer</name></expr>,

<expr><operator>.</operator><name>symbols</name> <operator>=</operator> <operator>&amp;</operator><name>symbols</name></expr>,

<expr><operator>.</operator><name>sections</name> <operator>=</operator> <operator>&amp;</operator><name>sections</name></expr>,

<expr><operator>.</operator><name>strings</name> <operator>=</operator> <name>strings</name></expr>,

<expr><operator>.</operator><name>size</name> <operator>=</operator> <operator>&amp;</operator><name>size</name></expr>,

<expr><operator>.</operator><name>baddr</name> <operator>=</operator> <operator>&amp;</operator><name>baddr</name></expr>,

<expr><operator>.</operator><name>info</name> <operator>=</operator> <operator>&amp;</operator><name>info</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_BIN</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_bin_plugin_symbols</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
