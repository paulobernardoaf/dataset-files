<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\p\bin_elf64.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BIN_ELF64</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bin_elf.inc"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_buffer</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\x7F\x45\x4c\x46\x02"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>r_bin_dbginfo_t</name></name></type> <name>r_bin_dbginfo_elf64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>r_bin_write_t</name></name></type> <name>r_bin_write_elf64</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>get_elf_vaddr64</name> <parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>baddr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>paddr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>vaddr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Elf_</name></name></type><argument_list>(<argument><expr><name>r_bin_elf_obj_t</name></expr></argument>)</argument_list><modifier>*</modifier> <name>obj</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>obj</name><operator>-&gt;</operator><name>baddr</name></name> <operator>-</operator> <name><name>obj</name><operator>-&gt;</operator><name>boffset</name></name> <operator>+</operator> <name>vaddr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>headers64</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>p</name></cpp:macro> <cpp:value>bf-&gt;rbin-&gt;cb_printf</cpp:value></cpp:define>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"0x00000000 ELF64 0x%08x\n"</literal></expr></argument>, <argument><expr><call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"0x00000010 Type 0x%04x\n"</literal></expr></argument>, <argument><expr><call><name>r_buf_read_le16_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"0x00000012 Machine 0x%04x\n"</literal></expr></argument>, <argument><expr><call><name>r_buf_read_le16_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0x12</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"0x00000014 Version 0x%08x\n"</literal></expr></argument>, <argument><expr><call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0x14</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"0x00000018 Entrypoint 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_buf_read_le64_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0x18</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"0x00000020 PhOff 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_buf_read_le64_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name> <argument_list>(<argument><expr><literal type="string">"0x00000028 ShOff 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>r_buf_read_le64_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0x28</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBuffer</name><modifier>*</modifier></type> <name>create</name><parameter_list>(<parameter><decl><type><name>RBin</name><modifier>*</modifier></type> <name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codelen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>datalen</name></decl></parameter>, <parameter><decl><type><name>RBinArchOptions</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>p_start</name></decl>, <decl><type ref="prev"/><name>p_phoff</name></decl>, <decl><type ref="prev"/><name>p_phdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>p_vaddr</name></decl>, <decl><type ref="prev"/><name>p_paddr</name></decl>, <decl><type ref="prev"/><name>p_fs</name></decl>, <decl><type ref="prev"/><name>p_fs2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>p_ehdrsz</name></decl>, <decl><type ref="prev"/><name>p_phdrsz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>filesize</name></decl>, <decl><type ref="prev"/><name>code_va</name></decl>, <decl><type ref="prev"/><name>code_pa</name></decl>, <decl><type ref="prev"/><name>phoff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>ehdrsz</name></decl>, <decl><type ref="prev"/><name>phdrsz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>baddr</name> <init>= <expr><literal type="number">0x400000LL</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>r_buf_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_buf_append_bytes(buf,(const ut8*)(x),y)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_buf_append_ut64(buf,x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_buf_append_ut32(buf,x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_buf_append_ut16(buf,x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_buf_append_nbytes(buf,x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_buf_write_at(buf,x,(const ut8*)(y),z)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>B</name> <argument_list>(<argument><expr><literal type="string">"\x7F"</literal> <literal type="string">"ELF"</literal> <literal type="string">"\x02\x01\x01\x00"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>Z</name> <argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>H</name> <argument_list>(<argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>p_start</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Q</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>p_phoff</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Q</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>Q</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>p_ehdrsz</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>p_phdrsz</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>H</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>H</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>H</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>H</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>p_phdr</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>D</name> <argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>Q</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>p_vaddr</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Q</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>p_paddr</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Q</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>p_fs</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Q</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>p_fs2</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Q</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>Q</name> <argument_list>(<argument><expr><literal type="number">0x200000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>ehdrsz</name> <operator>=</operator> <name>p_phdr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>phdrsz</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>p_phdr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>code_pa</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>code_va</name> <operator>=</operator> <name>code_pa</name> <operator>+</operator> <name>baddr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>phoff</name> <operator>=</operator> <name>p_phdr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>filesize</name> <operator>=</operator> <name>code_pa</name> <operator>+</operator> <name>codelen</name> <operator>+</operator> <name>datalen</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>p_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>code_va</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>p_phoff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>phoff</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>p_ehdrsz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ehdrsz</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>p_phdrsz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>phdrsz</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>p_fs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filesize</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>p_fs2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filesize</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>p_vaddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>baddr</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>W</name> <argument_list>(<argument><expr><name>p_paddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>baddr</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>B</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>codelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name>datalen</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: DATA section not support for ELF yet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>B</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RBinPlugin</name></type> <name>r_bin_plugin_elf64</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"elf64"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"elf64 bin plugin"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,

<expr><operator>.</operator><name>get_sdb</name> <operator>=</operator> <operator>&amp;</operator><name>get_sdb</name></expr>,

<expr><operator>.</operator><name>check_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>check_buffer</name></expr>,

<expr><operator>.</operator><name>load_buffer</name><operator>=</operator> <operator>&amp;</operator><name>load_buffer</name></expr>,

<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <operator>&amp;</operator><name>destroy</name></expr>,

<expr><operator>.</operator><name>baddr</name> <operator>=</operator> <operator>&amp;</operator><name>baddr</name></expr>,

<expr><operator>.</operator><name>boffset</name> <operator>=</operator> <operator>&amp;</operator><name>boffset</name></expr>,

<expr><operator>.</operator><name>binsym</name> <operator>=</operator> <operator>&amp;</operator><name>binsym</name></expr>,

<expr><operator>.</operator><name>entries</name> <operator>=</operator> <operator>&amp;</operator><name>entries</name></expr>,

<expr><operator>.</operator><name>sections</name> <operator>=</operator> <operator>&amp;</operator><name>sections</name></expr>,

<expr><operator>.</operator><name>symbols</name> <operator>=</operator> <operator>&amp;</operator><name>symbols</name></expr>,

<expr><operator>.</operator><name>imports</name> <operator>=</operator> <operator>&amp;</operator><name>imports</name></expr>,

<expr><operator>.</operator><name>minstrlen</name> <operator>=</operator> <literal type="number">4</literal></expr>,

<expr><operator>.</operator><name>info</name> <operator>=</operator> <operator>&amp;</operator><name>info</name></expr>,

<expr><operator>.</operator><name>fields</name> <operator>=</operator> <operator>&amp;</operator><name>fields</name></expr>,

<expr><operator>.</operator><name>header</name> <operator>=</operator> <operator>&amp;</operator><name>headers64</name></expr>,

<expr><operator>.</operator><name>size</name> <operator>=</operator> <operator>&amp;</operator><name>size</name></expr>,

<expr><operator>.</operator><name>libs</name> <operator>=</operator> <operator>&amp;</operator><name>libs</name></expr>,

<expr><operator>.</operator><name>relocs</name> <operator>=</operator> <operator>&amp;</operator><name>relocs</name></expr>,

<expr><operator>.</operator><name>patch_relocs</name> <operator>=</operator> <operator>&amp;</operator><name>patch_relocs</name></expr>,

<expr><operator>.</operator><name>dbginfo</name> <operator>=</operator> <operator>&amp;</operator><name>r_bin_dbginfo_elf64</name></expr>,

<expr><operator>.</operator><name>create</name> <operator>=</operator> <operator>&amp;</operator><name>create</name></expr>,

<expr><operator>.</operator><name>write</name> <operator>=</operator> <operator>&amp;</operator><name>r_bin_write_elf64</name></expr>,

<expr><operator>.</operator><name>get_vaddr</name> <operator>=</operator> <operator>&amp;</operator><name>get_elf_vaddr64</name></expr>,

<expr><operator>.</operator><name>file_type</name> <operator>=</operator> <operator>&amp;</operator><name>get_file_type</name></expr>,

<expr><operator>.</operator><name>regstate</name> <operator>=</operator> <operator>&amp;</operator><name>regstate</name></expr>,

<expr><operator>.</operator><name>maps</name> <operator>=</operator> <operator>&amp;</operator><name>maps</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_BIN</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_bin_plugin_elf64</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
