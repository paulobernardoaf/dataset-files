<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\p\bin_dyldcache.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_io.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BIN_MACH064</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../format/mach0/mach0.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"objc/mach0_classes.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IS_PTR_AUTHENTICATED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>B_IS_SET(x, 63)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>ut8</name></type> <name>version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>slide</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>one_page_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>page_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>start_of_data</name></decl>;</decl_stmt>

}</block></struct></type> <name>RDyldRebaseInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>ut8</name></type> <name>version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>slide</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>one_page_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>page_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>start_of_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name> <modifier>*</modifier></type><name>page_starts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>page_starts_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>delta_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>delta_shift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>auth_value_add</name></decl>;</decl_stmt>

}</block></struct></type> <name>RDyldRebaseInfo3</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>ut8</name></type> <name>version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>slide</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>one_page_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>page_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>start_of_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name> <modifier>*</modifier></type><name>page_starts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>page_starts_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name> <modifier>*</modifier></type><name>page_extras</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>page_extras_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>delta_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>value_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>delta_shift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>value_add</name></decl>;</decl_stmt>

}</block></struct></type> <name>RDyldRebaseInfo2</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>ut8</name></type> <name>version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>slide</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>one_page_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>page_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>start_of_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name> <modifier>*</modifier></type><name>toc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>toc_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>entries_size</name></decl>;</decl_stmt>

}</block></struct></type> <name>RDyldRebaseInfo1</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>strings</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>strings_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>nlist</name></expr></argument>)</argument_list> <modifier>*</modifier><name>nlists</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>nlists_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cache_locsym_entry_t</name> <modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>entries_count</name></decl>;</decl_stmt>

}</block></struct></type> <name>RDyldLocSym</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_r_dyldcache</name> <block>{

<decl_stmt><decl><type><name>ut8</name></type> <name><name>magic</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>bins</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>original_io_read</name>)<parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>RDyldRebaseInfo</name> <modifier>*</modifier></type><name>rebase_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cache_hdr_t</name> <modifier>*</modifier></type><name>hdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cache_map_t</name> <modifier>*</modifier></type><name>maps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cache_accel_t</name> <modifier>*</modifier></type><name>accel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDyldLocSym</name> <modifier>*</modifier></type><name>locsym</name></decl>;</decl_stmt>

}</block></struct></type> <name>RDyldCache</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_r_bin_image</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>header_at</name></decl>;</decl_stmt>

}</block></struct></type> <name>RDyldBinImage</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type> <name>pending_bin_files</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>ut64</name></type> <name>va2pa</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>cache_hdr_t</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>cache_map_t</name> <modifier>*</modifier></type><name>maps</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>cache_buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>slide</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>left</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_bin</name><parameter_list>(<parameter><decl><type><name>RDyldBinImage</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rebase_info3_free</name><parameter_list>(<parameter><decl><type><name>RDyldRebaseInfo3</name> <modifier>*</modifier></type><name>rebase_info</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rebase_info</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>page_starts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>rebase_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rebase_info2_free</name><parameter_list>(<parameter><decl><type><name>RDyldRebaseInfo2</name> <modifier>*</modifier></type><name>rebase_info</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rebase_info</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>page_starts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>page_extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>rebase_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rebase_info1_free</name><parameter_list>(<parameter><decl><type><name>RDyldRebaseInfo1</name> <modifier>*</modifier></type><name>rebase_info</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rebase_info</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>toc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>rebase_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rebase_info_free</name><parameter_list>(<parameter><decl><type><name>RDyldRebaseInfo</name> <modifier>*</modifier></type><name>rebase_info</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rebase_info</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>one_page_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>version</name> <init>= <expr><name><name>rebase_info</name><operator>-&gt;</operator><name>version</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rebase_info1_free</name> <argument_list>(<argument><expr><operator>(</operator><name>RDyldRebaseInfo1</name><operator>*</operator><operator>)</operator> <name>rebase_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rebase_info2_free</name> <argument_list>(<argument><expr><operator>(</operator><name>RDyldRebaseInfo2</name><operator>*</operator><operator>)</operator> <name>rebase_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rebase_info3_free</name> <argument_list>(<argument><expr><operator>(</operator><name>RDyldRebaseInfo3</name><operator>*</operator><operator>)</operator> <name>rebase_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>rebase_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RDyldLocSym</name> <modifier>*</modifier></type><name>r_dyld_locsym_new</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>cache_buf</name></decl></parameter>, <parameter><decl><type><name>cache_hdr_t</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache_buf</name> <operator>||</operator> <operator>!</operator><name>hdr</name> <operator>||</operator> <operator>!</operator><name><name>hdr</name><operator>-&gt;</operator><name>localSymbolsSize</name></name> <operator>||</operator> <operator>!</operator><name><name>hdr</name><operator>-&gt;</operator><name>localSymbolsOffset</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>cache_locsym_info_t</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>strings</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cache_locsym_entry_t</name> <modifier>*</modifier></type><name>entries</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>nlist</name></expr></argument>)</argument_list> <modifier>*</modifier><name>nlists</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>info_size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>cache_locsym_info_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>cache_locsym_info_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>localSymbolsOffset</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>info</name></expr></argument>, <argument><expr><literal type="string">"6i"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>info_size</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>nlists_size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>nlist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>info</name><operator>-&gt;</operator><name>nlistCount</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>nlists</name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>nlist</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>nlistCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nlists</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>localSymbolsOffset</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>nlistOffset</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>nlists</name></expr></argument>, <argument><expr><literal type="string">"iccsl"</literal></expr></argument>,

<argument><expr><name><name>info</name><operator>-&gt;</operator><name>nlistCount</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nlists_size</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>strings</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stringsSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>strings</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>localSymbolsOffset</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>stringsOffset</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>strings</name></expr></argument>,

<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stringsSize</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>info</name><operator>-&gt;</operator><name>stringsSize</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>entries_size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>cache_locsym_entry_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>info</name><operator>-&gt;</operator><name>entriesCount</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>entries</name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>cache_locsym_entry_t</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>entriesCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entries</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>localSymbolsOffset</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>entriesOffset</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>entries</name></expr></argument>, <argument><expr><literal type="string">"3i"</literal></expr></argument>,

<argument><expr><name><name>info</name><operator>-&gt;</operator><name>entriesCount</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>entries_size</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RDyldLocSym</name> <modifier>*</modifier></type> <name>locsym</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RDyldLocSym</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>locsym</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>locsym</name><operator>-&gt;</operator><name>nlists</name></name> <operator>=</operator> <name>nlists</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>locsym</name><operator>-&gt;</operator><name>nlists_count</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>nlistCount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>locsym</name><operator>-&gt;</operator><name>strings</name></name> <operator>=</operator> <name>strings</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>locsym</name><operator>-&gt;</operator><name>strings_size</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>stringsSize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>locsym</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <name>entries</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>locsym</name><operator>-&gt;</operator><name>entries_count</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>entriesCount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>locsym</name></expr>;</return>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>strings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>nlists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"dyldcache: malformed local symbols metadata\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_dyld_locsym_free</name><parameter_list>(<parameter><decl><type><name>RDyldLocSym</name> <modifier>*</modifier></type><name>locsym</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>locsym</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>locsym</name><operator>-&gt;</operator><name>strings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>locsym</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>locsym</name><operator>-&gt;</operator><name>nlists</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>locsym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_dyld_locsym_entries_by_offset</name><parameter_list>(<parameter><decl><type><name>RDyldCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>symbols</name></decl></parameter>, <parameter><decl><type><name>HtPP</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>bin_header_offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RDyldLocSym</name> <modifier>*</modifier></type><name>locsym</name> <init>= <expr><name><name>cache</name><operator>-&gt;</operator><name>locsym</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>locsym</name><operator>-&gt;</operator><name>entries</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name><name>locsym</name><operator>-&gt;</operator><name>entries_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>cache_locsym_entry_t</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>locsym</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>dylibOffset</name></name> <operator>!=</operator> <name>bin_header_offset</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>nlistStartIndex</name></name> <operator>&gt;=</operator> <name><name>locsym</name><operator>-&gt;</operator><name>nlists_count</name></name> <operator>||</operator>

<name><name>entry</name><operator>-&gt;</operator><name>nlistStartIndex</name></name> <operator>+</operator> <name><name>entry</name><operator>-&gt;</operator><name>nlistCount</name></name> <operator>&gt;=</operator> <name><name>locsym</name><operator>-&gt;</operator><name>nlists_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"dyldcache: malformed local symbol entry\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>!=</operator> <name><name>entry</name><operator>-&gt;</operator><name>nlistCount</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>nlist</name></expr></argument>)</argument_list> <modifier>*</modifier><name>nlist</name> <init>= <expr><operator>&amp;</operator><name><name>locsym</name><operator>-&gt;</operator><name>nlists</name><index>[<expr><name>j</name> <operator>+</operator> <name><name>entry</name><operator>-&gt;</operator><name>nlistStartIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>nlist</name><operator>-&gt;</operator><name>n_value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ht_pp_find</name> <argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ht_pp_insert</name> <argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nlist</name><operator>-&gt;</operator><name>n_strx</name></name> <operator>&gt;=</operator> <name><name>locsym</name><operator>-&gt;</operator><name>strings_size</name></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>symstr</name> <init>= <expr><operator>&amp;</operator><name><name>locsym</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name><name>nlist</name><operator>-&gt;</operator><name>n_strx</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"LOCAL"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>nlist</name><operator>-&gt;</operator><name>n_value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <call><name>va2pa</name> <argument_list>(<argument><expr><name><name>nlist</name><operator>-&gt;</operator><name>n_value</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>maps</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>rebase_info</name><operator>-&gt;</operator><name>slide</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>locsym</name><operator>-&gt;</operator><name>strings_size</name></name> <operator>-</operator> <name><name>nlist</name><operator>-&gt;</operator><name>n_strx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>ut8</name><operator>)</operator> <name><name>symstr</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xff</literal> <operator>||</operator> <operator>!</operator><name><name>symstr</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_ndup</name> <argument_list>(<argument><expr><name>symstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"unk_local%d"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>symbols</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_dyldcache_free</name><parameter_list>(<parameter><decl><type><name>RDyldCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>bins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>bins</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rebase_info_free</name> <argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>rebase_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>rebase_info</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>maps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>accel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_dyld_locsym_free</name> <argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>locsym</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>va2pa</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>cache_hdr_t</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>cache_map_t</name> <modifier>*</modifier></type><name>maps</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>cache_buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>slide</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>left</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>res</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>addr</name> <operator>-=</operator> <name>slide</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>mappingCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <name><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>address</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;</operator> <name><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>address</name> <operator>+</operator> <name><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fileOffset</name> <operator>+</operator> <name>addr</name> <operator>-</operator> <name><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>address</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name>addr</name> <operator>-</operator> <name><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>address</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <name><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>-</operator> <operator>(</operator><name>addr</name> <operator>-</operator> <name><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>address</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>bin_obj_va2pa</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bf</name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RDyldCache</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>RDyldCache</name><operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call><operator>*</operator><operator>)</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name><operator>)</operator><operator>-&gt;</operator><name>user</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>res</name> <init>= <expr><call><name>va2pa</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>maps</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>rebase_info</name><operator>-&gt;</operator><name>slide</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>bin_to_mach0</name><argument_list>(<argument><expr><name>RBinFile</name> <operator>*</operator><name>bf</name></expr></argument>, <argument><expr><name>RDyldBinImage</name> <operator>*</operator><name>bin</name></expr></argument>)</argument_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name>bf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RDyldCache</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>RDyldCache</name><operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>opts_t</name></expr></argument>)</argument_list> <name>opts</name></decl>;</decl_stmt>

<expr_stmt><expr><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>opts_set_default</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>header_at</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header_at</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>mach0</name> <init>= <expr><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>new_buf</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mach0</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>cache</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mach0</name><operator>-&gt;</operator><name>va2pa</name></name> <operator>=</operator> <operator>&amp;</operator><name>bin_obj_va2pa</name></expr>;</expr_stmt>

<return>return <expr><name>mach0</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prot2perm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>|=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>dumb_ctzll</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>byte</name> <init>= <expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>byte</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>byte</name> <operator>&gt;&gt;</operator> <name>j</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>estimate_slide</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RDyldCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>value_mask</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>slide</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name> <modifier>*</modifier></type><name>classlist</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>classlist</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDyldBinImage</name> <modifier>*</modifier></type><name>bin</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>cache-&gt;bins</argument>, <argument>iter</argument>, <argument>bin</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>found_sample</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>opts_t</name></expr></argument>)</argument_list> <name>opts</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>verbose</name></name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>rbin</name><operator>-&gt;</operator><name>verbose</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>header_at</name></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>header_at</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>mach0</name> <init>= <expr><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>new_buf</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mach0</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>section_t</name></name> <modifier>*</modifier></type><name>sections</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sections</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_sections</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>mach0</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<function_decl><type><name>MACH0_</name></type>(<name>mach0_free</name>) <parameter_list>(<parameter><decl><type><name>mach0</name></type></decl></parameter>)</parameter_list>;</function_decl>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>incomplete</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>classlist_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>data_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name> <operator>&amp;&amp;</operator> <name>incomplete</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"__objc_classlist"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>incomplete</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>classlist_idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"__objc_data"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>incomplete</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>data_idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>incomplete</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>next_bin</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>classlist_sample_size</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name><name>sections</name><index>[<expr><name>classlist_idx</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n_classes</name> <init>= <expr><name>classlist_sample_size</name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>sections</name><index>[<expr><name>classlist_idx</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>classlist</name></expr></argument>, <argument><expr><literal type="string">"l"</literal></expr></argument>, <argument><expr><name>n_classes</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>classlist_sample_size</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>next_bin</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>data_addr</name> <init>= <expr><name><name>sections</name><index>[<expr><name>data_idx</name></expr>]</index></name><operator>.</operator><name>addr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>data_tail</name> <init>= <expr><name>data_addr</name> <operator>&amp;</operator> <literal type="number">0xfff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>data_tail_end</name> <init>= <expr><operator>(</operator><name>data_addr</name> <operator>+</operator> <name><name>sections</name><index>[<expr><name>data_idx</name></expr>]</index></name><operator>.</operator><name>size</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xfff</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_classes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>cl_tail</name> <init>= <expr><name><name>classlist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfff</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cl_tail</name> <operator>&gt;=</operator> <name>data_tail</name> <operator>&amp;&amp;</operator> <name>cl_tail</name> <operator>&lt;</operator> <name>data_tail_end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>off</name> <init>= <expr><name>cl_tail</name> <operator>-</operator> <name>data_tail</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>slide</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>classlist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>off</name><operator>)</operator> <operator>&amp;</operator> <name>value_mask</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>data_addr</name> <operator>&amp;</operator> <name>value_mask</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>found_sample</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<label><name>next_bin</name>:</label>

<function_decl><type><name>MACH0_</name></type>(<name>mach0_free</name>) <parameter_list>(<parameter><decl><type><name>mach0</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>found_sample</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>classlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>slide</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RDyldRebaseInfo</name> <modifier>*</modifier></type><name>get_rebase_info</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RDyldCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>tmp_buf_1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>tmp_buf_2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>one_page_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>cache_buf</name> <init>= <expr><name><name>cache</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>start_of_data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>mappingCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>perm</name> <init>= <expr><call><name>prot2perm</name> <argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>initProt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>perm</name> <operator>&amp;</operator> <name>R_PERM_X</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start_of_data</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fileOffset</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>start_of_data</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>slideInfoOffset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>slide_info_version</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>slide_info_version</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>slide_info_version</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>cache_slide3_t</name></type> <name>slide_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>cache_slide3_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>slide_info</name></expr></argument>, <argument><expr><literal type="string">"4i1l"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>page_starts_offset</name> <init>= <expr><name>offset</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>page_starts_size</name> <init>= <expr><name><name>slide_info</name><operator>.</operator><name>page_starts_count</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>page_starts_size</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>slideInfoSize</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>page_starts_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp_buf_1</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>page_starts_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp_buf_1</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><name>page_starts_offset</name></expr></argument>, <argument><expr><name>tmp_buf_1</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><name><name>slide_info</name><operator>.</operator><name>page_starts_count</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>page_starts_size</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slide_info</name><operator>.</operator><name>page_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>one_page_buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>slide_info</name><operator>.</operator><name>page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>one_page_buf</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RDyldRebaseInfo3</name> <modifier>*</modifier></type><name>rebase_info</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RDyldRebaseInfo3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rebase_info</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>delta_mask</name></name> <operator>=</operator> <literal type="number">0x3ff8000000000000ULL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>delta_shift</name></name> <operator>=</operator> <literal type="number">48</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>start_of_data</name></name> <operator>=</operator> <name>start_of_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>page_starts</name></name> <operator>=</operator> <operator>(</operator><name>ut16</name><operator>*</operator><operator>)</operator> <name>tmp_buf_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>page_starts_count</name></name> <operator>=</operator> <name><name>slide_info</name><operator>.</operator><name>page_starts_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>auth_value_add</name></name> <operator>=</operator> <name><name>slide_info</name><operator>.</operator><name>auth_value_add</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>page_size</name></name> <operator>=</operator> <name><name>slide_info</name><operator>.</operator><name>page_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>one_page_buf</name></name> <operator>=</operator> <name>one_page_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>slide</name></name> <operator>=</operator> <call><name>estimate_slide</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x7ffffffffffffULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rebase_info</name><operator>-&gt;</operator><name>slide</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"dyldcache is slid: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>slide</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>RDyldRebaseInfo</name><operator>*</operator><operator>)</operator> <name>rebase_info</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>slide_info_version</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>cache_slide2_t</name></type> <name>slide_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>cache_slide2_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>slide_info</name></expr></argument>, <argument><expr><literal type="string">"6i2l"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slide_info</name><operator>.</operator><name>page_starts_offset</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>slide_info</name><operator>.</operator><name>page_starts_offset</name></name> <operator>&gt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>slideInfoSize</name></name> <operator>||</operator>

<name><name>slide_info</name><operator>.</operator><name>page_starts_offset</name></name> <operator>+</operator> <name><name>slide_info</name><operator>.</operator><name>page_starts_count</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>slideInfoSize</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slide_info</name><operator>.</operator><name>page_extras_offset</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>slide_info</name><operator>.</operator><name>page_extras_offset</name></name> <operator>&gt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>slideInfoSize</name></name> <operator>||</operator>

<name><name>slide_info</name><operator>.</operator><name>page_extras_offset</name></name> <operator>+</operator> <name><name>slide_info</name><operator>.</operator><name>page_extras_count</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>slideInfoSize</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slide_info</name><operator>.</operator><name>page_starts_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><name><name>slide_info</name><operator>.</operator><name>page_starts_count</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>at</name> <init>= <expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>slideInfoOffset</name></name> <operator>+</operator> <name><name>slide_info</name><operator>.</operator><name>page_starts_offset</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp_buf_1</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp_buf_1</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>tmp_buf_1</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><name><name>slide_info</name><operator>.</operator><name>page_starts_count</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slide_info</name><operator>.</operator><name>page_extras_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><name><name>slide_info</name><operator>.</operator><name>page_extras_count</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>at</name> <init>= <expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>slideInfoOffset</name></name> <operator>+</operator> <name><name>slide_info</name><operator>.</operator><name>page_extras_offset</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp_buf_2</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp_buf_2</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>tmp_buf_2</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><name><name>slide_info</name><operator>.</operator><name>page_extras_count</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slide_info</name><operator>.</operator><name>page_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>one_page_buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>slide_info</name><operator>.</operator><name>page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>one_page_buf</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RDyldRebaseInfo2</name> <modifier>*</modifier></type><name>rebase_info</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RDyldRebaseInfo2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rebase_info</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>start_of_data</name></name> <operator>=</operator> <name>start_of_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>page_starts</name></name> <operator>=</operator> <operator>(</operator><name>ut16</name><operator>*</operator><operator>)</operator> <name>tmp_buf_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>page_starts_count</name></name> <operator>=</operator> <name><name>slide_info</name><operator>.</operator><name>page_starts_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>page_extras</name></name> <operator>=</operator> <operator>(</operator><name>ut16</name><operator>*</operator><operator>)</operator> <name>tmp_buf_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>page_extras_count</name></name> <operator>=</operator> <name><name>slide_info</name><operator>.</operator><name>page_extras_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>value_add</name></name> <operator>=</operator> <name><name>slide_info</name><operator>.</operator><name>value_add</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>delta_mask</name></name> <operator>=</operator> <name><name>slide_info</name><operator>.</operator><name>delta_mask</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>value_mask</name></name> <operator>=</operator> <operator>~</operator><name><name>rebase_info</name><operator>-&gt;</operator><name>delta_mask</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>delta_shift</name></name> <operator>=</operator> <call><name>dumb_ctzll</name> <argument_list>(<argument><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>delta_mask</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>page_size</name></name> <operator>=</operator> <name><name>slide_info</name><operator>.</operator><name>page_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>one_page_buf</name></name> <operator>=</operator> <name>one_page_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>slide</name></name> <operator>=</operator> <call><name>estimate_slide</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>value_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rebase_info</name><operator>-&gt;</operator><name>slide</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"dyldcache is slid: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>slide</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>RDyldRebaseInfo</name><operator>*</operator><operator>)</operator> <name>rebase_info</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>slide_info_version</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>cache_slide1_t</name></type> <name>slide_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>cache_slide1_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>slide_info</name></expr></argument>, <argument><expr><literal type="string">"6i"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slide_info</name><operator>.</operator><name>toc_offset</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>slide_info</name><operator>.</operator><name>toc_offset</name></name> <operator>&gt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>slideInfoSize</name></name> <operator>||</operator>

<name><name>slide_info</name><operator>.</operator><name>toc_offset</name></name> <operator>+</operator> <name><name>slide_info</name><operator>.</operator><name>toc_count</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>slideInfoSize</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slide_info</name><operator>.</operator><name>entries_offset</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>slide_info</name><operator>.</operator><name>entries_offset</name></name> <operator>&gt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>slideInfoSize</name></name> <operator>||</operator>

<name><name>slide_info</name><operator>.</operator><name>entries_offset</name></name> <operator>+</operator> <name><name>slide_info</name><operator>.</operator><name>entries_count</name></name> <operator>*</operator> <name><name>slide_info</name><operator>.</operator><name>entries_size</name></name> <operator>&gt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>slideInfoSize</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slide_info</name><operator>.</operator><name>toc_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><name><name>slide_info</name><operator>.</operator><name>toc_count</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>at</name> <init>= <expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>slideInfoOffset</name></name> <operator>+</operator> <name><name>slide_info</name><operator>.</operator><name>toc_offset</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp_buf_1</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp_buf_1</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>tmp_buf_1</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><name><name>slide_info</name><operator>.</operator><name>toc_count</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slide_info</name><operator>.</operator><name>entries_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><name><name>slide_info</name><operator>.</operator><name>entries_count</name></name> <operator>*</operator> <name><name>slide_info</name><operator>.</operator><name>entries_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>at</name> <init>= <expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>slideInfoOffset</name></name> <operator>+</operator> <name><name>slide_info</name><operator>.</operator><name>entries_offset</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp_buf_2</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp_buf_2</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>tmp_buf_2</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>one_page_buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>one_page_buf</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RDyldRebaseInfo1</name> <modifier>*</modifier></type><name>rebase_info</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RDyldRebaseInfo1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rebase_info</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>start_of_data</name></name> <operator>=</operator> <name>start_of_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>one_page_buf</name></name> <operator>=</operator> <name>one_page_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>page_size</name></name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>slide</name></name> <operator>=</operator> <call><name>estimate_slide</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>UT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>toc</name></name> <operator>=</operator> <operator>(</operator><name>ut16</name><operator>*</operator><operator>)</operator> <name>tmp_buf_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>toc_count</name></name> <operator>=</operator> <name><name>slide_info</name><operator>.</operator><name>toc_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <name>tmp_buf_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>entries_size</name></name> <operator>=</operator> <name><name>slide_info</name><operator>.</operator><name>entries_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rebase_info</name><operator>-&gt;</operator><name>slide</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"dyldcache is slid: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>rebase_info</name><operator>-&gt;</operator><name>slide</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>RDyldRebaseInfo</name><operator>*</operator><operator>)</operator> <name>rebase_info</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"unsupported slide info version %d\n"</literal></expr></argument>, <argument><expr><name>slide_info_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>tmp_buf_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>tmp_buf_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>one_page_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_buffer</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>hdr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>arch</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rarch</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>arch</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>arch</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rhdr</name> <init>= <expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rhdr</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <call><name>memcmp</name> <argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><literal type="string">"dyld"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rarch</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>arch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strstr</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>arch</name></expr></argument>, <argument><expr><literal type="string">"arm64"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cache_img_t</name> <modifier>*</modifier></type><name>read_cache_images</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>cache_buf</name></decl></parameter>, <parameter><decl><type><name>cache_hdr_t</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache_buf</name> <operator>||</operator> <operator>!</operator><name>hdr</name> <operator>||</operator> <operator>!</operator><name><name>hdr</name><operator>-&gt;</operator><name>imagesCount</name></name> <operator>||</operator> <operator>!</operator><name><name>hdr</name><operator>-&gt;</operator><name>imagesOffset</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>cache_img_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>hdr</name><operator>-&gt;</operator><name>imagesCount</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cache_img_t</name> <modifier>*</modifier></type><name>images</name> <init>= <expr><call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>cache_img_t</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>imagesCount</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>images</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>imagesOffset</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>images</name></expr></argument>, <argument><expr><literal type="string">"3l2i"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>imagesCount</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>images</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>images</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cache_imgxtr_t</name> <modifier>*</modifier></type><name>read_cache_imgextra</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>cache_buf</name></decl></parameter>, <parameter><decl><type><name>cache_hdr_t</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>cache_accel_t</name> <modifier>*</modifier></type><name>accel</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache_buf</name> <operator>||</operator> <operator>!</operator><name>hdr</name> <operator>||</operator> <operator>!</operator><name><name>hdr</name><operator>-&gt;</operator><name>imagesCount</name></name> <operator>||</operator> <operator>!</operator><name>accel</name> <operator>||</operator> <operator>!</operator><name><name>accel</name><operator>-&gt;</operator><name>imageExtrasCount</name></name> <operator>||</operator> <operator>!</operator><name><name>accel</name><operator>-&gt;</operator><name>imagesExtrasOffset</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>cache_imgxtr_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>accel</name><operator>-&gt;</operator><name>imageExtrasCount</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cache_imgxtr_t</name> <modifier>*</modifier></type><name>images</name> <init>= <expr><call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>cache_imgxtr_t</name></expr></argument>, <argument><expr><name><name>accel</name><operator>-&gt;</operator><name>imageExtrasCount</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>images</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><name><name>accel</name><operator>-&gt;</operator><name>imagesExtrasOffset</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>images</name></expr></argument>, <argument><expr><literal type="string">"ll4i"</literal></expr></argument>, <argument><expr><name><name>accel</name><operator>-&gt;</operator><name>imageExtrasCount</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>images</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>images</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_lib_name</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>cache_buf</name></decl></parameter>, <parameter><decl><type><name>cache_img_t</name> <modifier>*</modifier></type><name>img</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>file</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lib_name</name> <init>= <expr><name>file</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>pathFileOffset</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><index>[<expr><literal type="number">255</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>lib_name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"FAIL"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>string_contains</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>!</operator><call><name>strstr</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name>a</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>create_cache_bins</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>cache_buf</name></decl></parameter>, <parameter><decl><type><name>cache_hdr_t</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>cache_map_t</name> <modifier>*</modifier></type><name>maps</name></decl></parameter>, <parameter><decl><type><name>cache_accel_t</name> <modifier>*</modifier></type><name>accel</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>bins</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>free_bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bins</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>cache_img_t</name> <modifier>*</modifier></type><name>img</name> <init>= <expr><call><name>read_cache_images</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>img</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>bins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>deps</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>target_libs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>target_libs</name> <operator>=</operator> <call><name>r_sys_getenv</name> <argument_list>(<argument><expr><literal type="string">"R_DYLDCACHE_FILTER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>target_libs</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>target_lib_names</name> <init>= <expr><call><name>r_str_split_list</name> <argument_list>(<argument><expr><name>target_libs</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>target_lib_names</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>target_libs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>bins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>deps</name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>imagesCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>deps</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>target_lib_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>target_libs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>bins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut16</name> <modifier>*</modifier></type><name>depArray</name> <init>= <expr><call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>ut16</name></expr></argument>, <argument><expr><name><name>accel</name><operator>-&gt;</operator><name>depListCount</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>depArray</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>target_lib_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>target_libs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>bins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>deps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><name><name>accel</name><operator>-&gt;</operator><name>depListOffset</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>depArray</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><name><name>accel</name><operator>-&gt;</operator><name>depListCount</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>accel</name><operator>-&gt;</operator><name>depListCount</name></name> <operator>*</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>target_lib_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>target_libs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>bins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>deps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>depArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>cache_imgxtr_t</name> <modifier>*</modifier></type><name>extras</name> <init>= <expr><call><name>read_cache_imgextra</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>accel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>extras</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>target_lib_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>target_libs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>bins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>deps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>depArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>imagesCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lib_name</name> <init>= <expr><call><name>get_lib_name</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>img</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_find</name> <argument_list>(<argument><expr><name>target_lib_names</name></expr></argument>, <argument><expr><name>lib_name</name></expr></argument>, <argument><expr><name>string_contains</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>lib_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"FILTER: %s\n"</literal></expr></argument>, <argument><expr><name>lib_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>lib_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>deps</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>extras</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dependentsStartArrayIndex</name></expr>;</init> <condition><expr><name><name>depArray</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0xffff</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>upward</name> <init>= <expr><name><name>depArray</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>dep_index</name> <init>= <expr><name><name>depArray</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fff</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>upward</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>deps</name><index>[<expr><name>dep_index</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dep_name</name> <init>= <expr><call><name>get_lib_name</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>img</name><index>[<expr><name>dep_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"-&gt; %s\n"</literal></expr></argument>, <argument><expr><name>dep_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>dep_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>depArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>extras</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>target_libs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>target_lib_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>imagesCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>deps</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>deps</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>pa</name> <init>= <expr><call><name>va2pa</name> <argument_list>(<argument><expr><name><name>img</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>address</name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>maps</name></expr></argument>, <argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pa</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>magicbytes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><name>pa</name></expr></argument>, <argument><expr><name>magicbytes</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>magic</name> <init>= <expr><call><name>r_read_le32</name> <argument_list>(<argument><expr><name>magicbytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>magic</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MH_MAGIC</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>MH_MAGIC_64</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>file</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDyldBinImage</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RDyldBinImage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>bins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>deps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>header_at</name></name> <operator>=</operator> <name>pa</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><name><name>img</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pathFileOffset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><index>[<expr><literal type="number">255</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>last_slash</name> <init>= <expr><call><name>strrchr</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>last_slash</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>last_slash</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>last_slash</name> <operator>&gt;</operator> <name>file</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>scan</name> <init>= <expr><name>last_slash</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>scan</name> <operator>&gt;</operator> <name>file</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>scan</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>scan</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>scan</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>scan</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>last_slash</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>last_slash</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>bins</name></expr></argument>, <argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unknown sub-bin\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>deps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bins</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rebase_bytes_v1</name><parameter_list>(<parameter><decl><type><name>RDyldRebaseInfo1</name> <modifier>*</modifier></type><name>rebase_info</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start_of_write</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>in_buf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>in_buf</name> <operator>&lt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>offset_in_data</name> <init>= <expr><name>offset</name> <operator>-</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>start_of_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>page_index</name> <init>= <expr><name>offset_in_data</name> <operator>/</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>page_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>page_offset</name> <init>= <expr><name>offset_in_data</name> <operator>%</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>page_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>to_next_page</name> <init>= <expr><name><name>rebase_info</name><operator>-&gt;</operator><name>page_size</name></name> <operator>-</operator> <name>page_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>entry_index</name> <init>= <expr><name>page_offset</name> <operator>/</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>offset_in_entry</name> <init>= <expr><operator>(</operator><name>page_offset</name> <operator>%</operator> <literal type="number">32</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>entry_index</name> <operator>&gt;=</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>entries_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>in_buf</name> <operator>+=</operator> <name>to_next_page</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>to_next_page</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>page_index</name> <operator>&gt;=</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>toc_count</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>rebase_info</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name><name>rebase_info</name><operator>-&gt;</operator><name>toc</name><index>[<expr><name>page_index</name></expr>]</index></name> <operator>*</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>entries_size</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>b</name> <init>= <expr><name><name>entry</name><index>[<expr><name>entry_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>offset_in_entry</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>value</name> <init>= <expr><call><name>r_read_le64</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>in_buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>value</name> <operator>+=</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>slide</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_write_le64</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>in_buf</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in_buf</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>in_buf</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rebase_bytes_v2</name><parameter_list>(<parameter><decl><type><name>RDyldRebaseInfo2</name> <modifier>*</modifier></type><name>rebase_info</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start_of_write</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>in_buf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>in_buf</name> <operator>&lt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>offset_in_data</name> <init>= <expr><name>offset</name> <operator>-</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>start_of_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>page_index</name> <init>= <expr><name>offset_in_data</name> <operator>/</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>page_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>page_offset</name> <init>= <expr><name>offset_in_data</name> <operator>%</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>page_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>to_next_page</name> <init>= <expr><name><name>rebase_info</name><operator>-&gt;</operator><name>page_size</name></name> <operator>-</operator> <name>page_offset</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>page_index</name> <operator>&gt;=</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>page_starts_count</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>next_page</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>page_flag</name> <init>= <expr><name><name>rebase_info</name><operator>-&gt;</operator><name>page_starts</name><index>[<expr><name>page_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>page_flag</name> <operator>==</operator> <name>DYLD_CACHE_SLIDE_PAGE_ATTR_NO_REBASE</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>next_page</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>page_flag</name> <operator>&amp;</operator> <name>DYLD_CACHE_SLIDE_PAGE_ATTR_EXTRA</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>first_rebase_off</name> <init>= <expr><name><name>rebase_info</name><operator>-&gt;</operator><name>page_starts</name><index>[<expr><name>page_index</name></expr>]</index></name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>first_rebase_off</name> <operator>&gt;=</operator> <name>page_offset</name> <operator>&amp;&amp;</operator> <name>first_rebase_off</name> <operator>&lt;</operator> <name>page_offset</name> <operator>+</operator> <name>count</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>delta</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>delta</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>position</name> <init>= <expr><name>in_buf</name> <operator>+</operator> <name>first_rebase_off</name> <operator>-</operator> <name>page_offset</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>position</name> <operator>&gt;=</operator> <name>count</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>raw_value</name> <init>= <expr><call><name>r_read_le64</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>raw_value</name> <operator>&amp;</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>delta_mask</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>delta_shift</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>position</name> <operator>&gt;=</operator> <name>start_of_write</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>new_value</name> <init>= <expr><name>raw_value</name> <operator>&amp;</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>value_mask</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_value</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_value</name> <operator>+=</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>value_add</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_value</name> <operator>+=</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>slide</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_write_le64</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>position</name></expr></argument>, <argument><expr><name>new_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>first_rebase_off</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>next_page</name>:</label>

<expr_stmt><expr><name>in_buf</name> <operator>+=</operator> <name>to_next_page</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>to_next_page</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rebase_bytes_v3</name><parameter_list>(<parameter><decl><type><name>RDyldRebaseInfo3</name> <modifier>*</modifier></type><name>rebase_info</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start_of_write</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>in_buf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>in_buf</name> <operator>&lt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>offset_in_data</name> <init>= <expr><name>offset</name> <operator>-</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>start_of_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>page_index</name> <init>= <expr><name>offset_in_data</name> <operator>/</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>page_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>page_offset</name> <init>= <expr><name>offset_in_data</name> <operator>%</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>page_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>to_next_page</name> <init>= <expr><name><name>rebase_info</name><operator>-&gt;</operator><name>page_size</name></name> <operator>-</operator> <name>page_offset</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>page_index</name> <operator>&gt;=</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>page_starts_count</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>next_page</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>delta</name> <init>= <expr><name><name>rebase_info</name><operator>-&gt;</operator><name>page_starts</name><index>[<expr><name>page_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>==</operator> <name>DYLD_CACHE_SLIDE_V3_PAGE_ATTR_NO_REBASE</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>next_page</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>first_rebase_off</name> <init>= <expr><name>delta</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>first_rebase_off</name> <operator>&gt;=</operator> <name>page_offset</name> <operator>&amp;&amp;</operator> <name>first_rebase_off</name> <operator>&lt;</operator> <name>page_offset</name> <operator>+</operator> <name>count</name></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>position</name> <init>= <expr><name>in_buf</name> <operator>+</operator> <name>first_rebase_off</name> <operator>-</operator> <name>page_offset</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>position</name> <operator>&gt;=</operator> <name>count</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>raw_value</name> <init>= <expr><call><name>r_read_le64</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>raw_value</name> <operator>&amp;</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>delta_mask</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>delta_shift</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>position</name> <operator>&gt;=</operator> <name>start_of_write</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>new_value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>R_IS_PTR_AUTHENTICATED</name> <argument_list>(<argument><expr><name>raw_value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_value</name> <operator>=</operator> <operator>(</operator><name>raw_value</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal><operator>)</operator> <operator>+</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>auth_value_add</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>new_value</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>raw_value</name> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF00000000000000ULL</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>raw_value</name> <operator>&amp;</operator> <literal type="number">0x7ffffffffffULL</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>new_value</name> <operator>&amp;=</operator> <literal type="number">0x00FFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_value</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_value</name> <operator>+=</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>slide</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_write_le64</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>position</name></expr></argument>, <argument><expr><name>new_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>first_rebase_off</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>delta</name></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<label><name>next_page</name>:</label>

<expr_stmt><expr><name>in_buf</name> <operator>+=</operator> <name>to_next_page</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>to_next_page</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rebase_bytes</name><parameter_list>(<parameter><decl><type><name>RDyldRebaseInfo</name> <modifier>*</modifier></type><name>rebase_info</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start_of_write</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rebase_info</name> <operator>||</operator> <operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rebase_info</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rebase_bytes_v3</name> <argument_list>(<argument><expr><operator>(</operator><name>RDyldRebaseInfo3</name><operator>*</operator><operator>)</operator> <name>rebase_info</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>start_of_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rebase_info</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rebase_bytes_v2</name> <argument_list>(<argument><expr><operator>(</operator><name>RDyldRebaseInfo2</name><operator>*</operator><operator>)</operator> <name>rebase_info</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>start_of_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rebase_info</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rebase_bytes_v1</name> <argument_list>(<argument><expr><operator>(</operator><name>RDyldRebaseInfo1</name><operator>*</operator><operator>)</operator> <name>rebase_info</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>start_of_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dyldcache_io_read</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>io</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name><operator>*</operator><operator>)</operator> <name><name>io</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core</name> <operator>||</operator> <operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>bin</name></name> <operator>||</operator> <operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>binfiles</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RDyldCache</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>core-&gt;bin-&gt;binfiles</argument>, <argument>iter</argument>, <argument>bf</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bf</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <name><name>fd</name><operator>-&gt;</operator><name>fd</name></name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>, <argument><expr><literal type="string">"dyldcac"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cache</name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cache</name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call><operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name><operator>)</operator><operator>-&gt;</operator><name>user</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pending_bin_files</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>to_remove</name> <init>= <expr><call><name>r_list_contains</name> <argument_list>(<argument><expr><name>pending_bin_files</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>to_remove</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_delete</name> <argument_list>(<argument><expr><name>pending_bin_files</name></expr></argument>, <argument><expr><name>to_remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_list_empty</name> <argument_list>(<argument><expr><name>pending_bin_files</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>pending_bin_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pending_bin_files</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache</name></expr>)</condition> <block>{<block_content>

<macro><name>r_list_foreach</name> <argument_list>(<argument>pending_bin_files</argument>, <argument>iter</argument>, <argument>bf</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bf</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <name><name>fd</name><operator>-&gt;</operator><name>fd</name></name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></argument>, <argument><expr><literal type="string">"dyldcac"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cache</name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cache</name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list></call><operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name><operator>)</operator><operator>-&gt;</operator><name>user</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache</name> <operator>||</operator> <operator>!</operator><name><name>cache</name><operator>-&gt;</operator><name>original_io_read</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>plugin</name><operator>-&gt;</operator><name>read</name></name> <operator>==</operator> <operator>&amp;</operator><name>dyldcache_io_read</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name><name>fd</name><operator>-&gt;</operator><name>plugin</name><operator>-&gt;</operator><name>read</name></name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>includes_data</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>&gt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>rebase_info</name><operator>-&gt;</operator><name>start_of_data</name></name> <operator>||</operator>

<operator>(</operator><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>+</operator> <name>count</name><operator>)</operator> <operator>&gt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>rebase_info</name><operator>-&gt;</operator><name>start_of_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>includes_data</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RDyldRebaseInfo</name> <modifier>*</modifier></type><name>rebase_info</name> <init>= <expr><name><name>cache</name><operator>-&gt;</operator><name>rebase_info</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>offset_in_data</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>-</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>start_of_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>page_offset</name> <init>= <expr><name>offset_in_data</name> <operator>%</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>page_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>internal_offset</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name><name>rebase_info</name><operator>-&gt;</operator><name>page_size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>internal_end</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>+</operator> <name>count</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rounded_count</name> <init>= <expr><name>internal_end</name> <operator>-</operator> <name>internal_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>internal_buf</name> <init>= <expr><name><name>rebase_info</name><operator>-&gt;</operator><name>one_page_buf</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rounded_count</name> <operator>&gt;</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>page_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>internal_buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>rounded_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>internal_buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot allocate memory for 'internal_buf'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>original_off</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>internal_offset</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>internal_result</name> <init>= <expr><call><name><name>cache</name><operator>-&gt;</operator><name>original_io_read</name></name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>internal_buf</name></expr></argument>, <argument><expr><name>rounded_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>original_off</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>internal_result</name> <operator>&gt;=</operator> <name>page_offset</name> <operator>+</operator> <name>count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rebase_bytes</name> <argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>rebase_info</name></name></expr></argument>, <argument><expr><name>internal_buf</name></expr></argument>, <argument><expr><name>internal_offset</name></expr></argument>, <argument><expr><name>internal_result</name></expr></argument>, <argument><expr><name>page_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>internal_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>internal_buf</name> <operator>+</operator> <name>page_offset</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ERROR rebasing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>cache</name><operator>-&gt;</operator><name>original_io_read</name></name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>internal_buf</name> <operator>!=</operator> <name><name>rebase_info</name><operator>-&gt;</operator><name>one_page_buf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>internal_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>cache</name><operator>-&gt;</operator><name>original_io_read</name></name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>swizzle_io_read</name><parameter_list>(<parameter><decl><type><name>RDyldCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>io</name> <operator>||</operator> <operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>desc</name></name> <operator>||</operator> <operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>plugin</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RIOPlugin</name> <modifier>*</modifier></type><name>plugin</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>plugin</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>original_io_read</name></name> <operator>=</operator> <name><name>plugin</name><operator>-&gt;</operator><name>read</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>plugin</name><operator>-&gt;</operator><name>read</name></name> <operator>=</operator> <operator>&amp;</operator><name>dyldcache_io_read</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cache_hdr_t</name> <modifier>*</modifier></type><name>read_cache_header</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>cache_buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache_buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>cache_hdr_t</name> <modifier>*</modifier></type><name>hdr</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>cache_hdr_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hdr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>cache_hdr_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>hdr</name></expr></argument>, <argument><expr><literal type="string">"16c4i7l16clii4l"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>hdr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cache_map_t</name> <modifier>*</modifier></type><name>read_cache_maps</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>cache_buf</name></decl></parameter>, <parameter><decl><type><name>cache_hdr_t</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache_buf</name> <operator>||</operator> <operator>!</operator><name>hdr</name> <operator>||</operator> <operator>!</operator><name><name>hdr</name><operator>-&gt;</operator><name>mappingCount</name></name> <operator>||</operator> <operator>!</operator><name><name>hdr</name><operator>-&gt;</operator><name>mappingOffset</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>cache_map_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>hdr</name><operator>-&gt;</operator><name>mappingCount</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cache_map_t</name> <modifier>*</modifier></type><name>maps</name> <init>= <expr><call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>cache_map_t</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>mappingCount</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>maps</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>mappingOffset</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>maps</name></expr></argument>, <argument><expr><literal type="string">"3l2i"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>mappingCount</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>maps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>maps</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cache_accel_t</name> <modifier>*</modifier></type><name>read_cache_accel</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>cache_buf</name></decl></parameter>, <parameter><decl><type><name>cache_hdr_t</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>cache_map_t</name> <modifier>*</modifier></type><name>maps</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache_buf</name> <operator>||</operator> <operator>!</operator><name>hdr</name> <operator>||</operator> <operator>!</operator><name><name>hdr</name><operator>-&gt;</operator><name>accelerateInfoSize</name></name> <operator>||</operator> <operator>!</operator><name><name>hdr</name><operator>-&gt;</operator><name>accelerateInfoAddr</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><call><name>va2pa</name> <argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>accelerateInfoAddr</name></name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>maps</name></expr></argument>, <argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>offset</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>cache_accel_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cache_accel_t</name> <modifier>*</modifier></type><name>accel</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>cache_accel_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>accel</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name>cache_buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>accel</name></expr></argument>, <argument><expr><literal type="string">"16il"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>accel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>accel</name><operator>-&gt;</operator><name>imagesExtrasOffset</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>accel</name><operator>-&gt;</operator><name>bottomUpListOffset</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>accel</name><operator>-&gt;</operator><name>dylibTrieOffset</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>accel</name><operator>-&gt;</operator><name>initializersOffset</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>accel</name><operator>-&gt;</operator><name>dofSectionsOffset</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>accel</name><operator>-&gt;</operator><name>reExportListOffset</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>accel</name><operator>-&gt;</operator><name>depListOffset</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>accel</name><operator>-&gt;</operator><name>rangeTableOffset</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

<return>return <expr><name>accel</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>load_buffer</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>bin_obj</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>loadaddr</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RDyldCache</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RDyldCache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>, <argument><expr><literal type="string">"dyldcac"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>r_buf_ref</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name></name> <operator>=</operator> <call><name>read_cache_header</name> <argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cache</name><operator>-&gt;</operator><name>hdr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_dyldcache_free</name> <argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>maps</name></name> <operator>=</operator> <call><name>read_cache_maps</name> <argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cache</name><operator>-&gt;</operator><name>maps</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_dyldcache_free</name> <argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>accel</name></name> <operator>=</operator> <call><name>read_cache_accel</name> <argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>maps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cache</name><operator>-&gt;</operator><name>accel</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_dyldcache_free</name> <argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>locsym</name></name> <operator>=</operator> <call><name>r_dyld_locsym_new</name> <argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cache</name><operator>-&gt;</operator><name>locsym</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_dyldcache_free</name> <argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>bins</name></name> <operator>=</operator> <call><name>create_cache_bins</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>maps</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>accel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cache</name><operator>-&gt;</operator><name>bins</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_dyldcache_free</name> <argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>rebase_info</name></name> <operator>=</operator> <call><name>get_rebase_info</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cache</name><operator>-&gt;</operator><name>rebase_info</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_dyldcache_free</name> <argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cache</name><operator>-&gt;</operator><name>rebase_info</name><operator>-&gt;</operator><name>slide</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pending_bin_files</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pending_bin_files</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pending_bin_files</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_dyldcache_free</name> <argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name>pending_bin_files</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>swizzle_io_read</name> <argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>bf</name><operator>-&gt;</operator><name>rbin</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>bin_obj</name> <operator>=</operator> <name>cache</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>entries</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinAddr</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinAddr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBinInfo</name> <modifier>*</modifier></type><name>info</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinInfo</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bf</name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RDyldCache</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>RDyldCache</name><operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>big_endian</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinInfo</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>bclass</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"dyldcache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>rclass</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"ios"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>os</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"iOS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>arch</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"arm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>machine</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>subsystem</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"xnu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"library-cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>dyld64</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>, <argument><expr><literal type="string">"arm64"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <ternary><condition><expr><name>dyld64</name></expr>?</condition><then> <expr><literal type="number">64</literal></expr></then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>has_va</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>big_endian</name></name> <operator>=</operator> <name>big_endian</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>dbg_info</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static void parse_mach0 (RList *ret, ut64 paddr, RBinFile *bf) {

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>baddr</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><literal type="number">0x180000000</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>symbols_from_bin</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RDyldBinImage</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>HtPP</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>mach0</name> <init>= <expr><call><name>bin_to_mach0</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mach0</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>symbol_t</name></name> <modifier>*</modifier></type><name>symbols</name> <init>= <expr><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_symbols</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>mach0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>symbols</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"&lt;redacted&gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>forwarder</name></name> <operator>=</operator> <literal type="string">"NONE"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>R_BIN_MACH0_SYMBOL_TYPE_LOCAL</name><operator>)</operator></expr>?</condition><then> <expr><name>R_BIN_BIND_LOCAL_STR</name></expr></then><else>: <expr><name>R_BIN_BIND_GLOBAL_STR</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>R_BIN_TYPE_FUNC_STR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>+</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>boffset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ht_pp_insert</name> <argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<function_decl><type><name>MACH0_</name></type>(<name>mach0_free</name>) <parameter_list>(<parameter><decl><type><name>mach0</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__is_data_section</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"_cstring"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"_os_log"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"_objc_methname"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"_objc_classname"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"_objc_methtype"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sections_from_bin</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RDyldBinImage</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>mach0</name> <init>= <expr><call><name>bin_to_mach0</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mach0</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>section_t</name></name> <modifier>*</modifier></type><name>sections</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sections</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_sections</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>mach0</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"la_symbol_ptr"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"Cd %d[%d]"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>is_data</name></name> <operator>=</operator> <call><name>__is_data_section</name> <argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vsize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>+</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>boffset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>perm</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>MACH0_</name></type>(<name>mach0_free</name>) <parameter_list>(<parameter><decl><type><name>mach0</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>sections</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RDyldCache</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>RDyldCache</name><operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDyldBinImage</name> <modifier>*</modifier></type><name>bin</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>cache-&gt;bins</argument>, <argument>iter</argument>, <argument>bin</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>sections_from_bin</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>, <argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>mappingCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"cache_map.%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fileOffset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>address</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>is_segment</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <call><name>prot2perm</name> <argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>initProt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>rebase_info</name><operator>-&gt;</operator><name>slide</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>section</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>ret</argument>, <argument>iter</argument>, <argument>section</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+=</operator> <name><name>cache</name><operator>-&gt;</operator><name>rebase_info</name><operator>-&gt;</operator><name>slide</name></name></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>symbols</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RDyldCache</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>RDyldCache</name><operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDyldBinImage</name> <modifier>*</modifier></type><name>bin</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>cache-&gt;bins</argument>, <argument>iter</argument>, <argument>bin</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>HtPP</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><call><name>ht_pp_new0</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hash</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>symbols_from_bin</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>, <argument><expr><name>bin</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_dyld_locsym_entries_by_offset</name> <argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>header_at</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ht_pp_free</name> <argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>rebase_info</name><operator>-&gt;</operator><name>slide</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>ret</argument>, <argument>iter</argument>, <argument>sym</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+=</operator> <name><name>cache</name><operator>-&gt;</operator><name>rebase_info</name><operator>-&gt;</operator><name>slide</name></name></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroy</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RDyldCache</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>RDyldCache</name><operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_dyldcache_free</name> <argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type><name>classes</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RDyldCache</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>RDyldCache</name><operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDyldBinImage</name> <modifier>*</modifier></type><name>bin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>orig_buf</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>num_of_unnamed_class</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>cache-&gt;bins</argument>, <argument>iter</argument>, <argument>bin</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>obj_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>mach0</name> <init>= <expr><call><name>bin_to_mach0</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mach0</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>section_t</name></name> <modifier>*</modifier></type><name>sections</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sections</name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_sections</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>mach0</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<function_decl><type><name>MACH0_</name></type>(<name>mach0_free</name>) <parameter_list>(<parameter><decl><type><name>mach0</name></type></decl></parameter>)</parameter_list>;</function_decl>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_classlist</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"__objc_classlist"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_catlist</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"__objc_catlist"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_classlist</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_catlist</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>pointers</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>, <argument><expr><name>pointers</name></expr></argument>, <argument><expr><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>pointers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><name>pointers</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>pointers_end</name> <init>= <expr><name>pointers</name> <operator>+</operator> <name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>cursor</name> <operator>&lt;</operator> <name>pointers_end</name></expr>;</condition> <incr><expr><name>cursor</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>pointer_to_class</name> <init>= <expr><call><name>r_read_le64</name> <argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>klass</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>klass</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinClass</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>!</operator><operator>(</operator><name><name>klass</name><operator>-&gt;</operator><name>methods</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>!</operator><operator>(</operator><name><name>klass</name><operator>-&gt;</operator><name>fields</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>pointers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>MACH0_</name></type>(<name>mach0_free</name>) <parameter_list>(<parameter><decl><type><name>mach0</name></type></decl></parameter>)</parameter_list>;</function_decl>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name> <operator>=</operator> <name>mach0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_classlist</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_class_t</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name>pointer_to_class</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_category_t</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name>pointer_to_class</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name> <operator>=</operator> <name>cache</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>orig_buf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>klass</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>klass</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"UnnamedClass%"</literal> <name>PFMT64d</name></expr></argument>, <argument><expr><name>num_of_unnamed_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>klass</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>pointers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>MACH0_</name></type>(<name>mach0_free</name>) <parameter_list>(<parameter><decl><type><name>mach0</name></type></decl></parameter>)</parameter_list>;</function_decl>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num_of_unnamed_class</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>pointers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>MACH0_</name></type>(<name>mach0_free</name>) <parameter_list>(<parameter><decl><type><name>mach0</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block>

<return>return <expr><name>ret</name></expr>;</return>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>header</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bf</name> <operator>||</operator> <operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RDyldCache</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>RDyldCache</name><operator>*</operator><operator>)</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>rbin</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>slide</name> <init>= <expr><name><name>cache</name><operator>-&gt;</operator><name>rebase_info</name><operator>-&gt;</operator><name>slide</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"dyld cache header:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"magic: %s\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"mappingOffset: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>mappingOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"mappingCount: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>mappingCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"imagesOffset: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>imagesOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"imagesCount: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>imagesCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"dyldBaseAddress: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>dyldBaseAddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"codeSignatureOffset: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>codeSignatureOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"codeSignatureSize: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>codeSignatureSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"slideInfoOffset: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>slideInfoOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"slideInfoSize: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>slideInfoSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"localSymbolsOffset: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>localSymbolsOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"localSymbolsSize: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>localSymbolsSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>uuidstr</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_hex_bin2str</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>uuid</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>uuidstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"uuid: %s\n"</literal></expr></argument>, <argument><expr><name>uuidstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"cacheType: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>cacheType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"branchPoolsOffset: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>branchPoolsOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"branchPoolsCount: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>branchPoolsCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"accelerateInfoAddr: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>accelerateInfoAddr</name></name> <operator>+</operator> <name>slide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"accelerateInfoSize: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>accelerateInfoSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"imagesTextOffset: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>imagesTextOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"imagesTextCount: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>imagesTextCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\nacceleration info:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"version: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>accel</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"imageExtrasCount: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>accel</name><operator>-&gt;</operator><name>imageExtrasCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"imagesExtrasOffset: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>accel</name><operator>-&gt;</operator><name>imagesExtrasOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"bottomUpListOffset: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>accel</name><operator>-&gt;</operator><name>bottomUpListOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"dylibTrieOffset: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>accel</name><operator>-&gt;</operator><name>dylibTrieOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"dylibTrieSize: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>accel</name><operator>-&gt;</operator><name>dylibTrieSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"initializersOffset: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>accel</name><operator>-&gt;</operator><name>initializersOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"initializersCount: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>accel</name><operator>-&gt;</operator><name>initializersCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"dofSectionsOffset: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>accel</name><operator>-&gt;</operator><name>dofSectionsOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"dofSectionsCount: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>accel</name><operator>-&gt;</operator><name>dofSectionsCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"reExportListOffset: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>accel</name><operator>-&gt;</operator><name>reExportListOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"reExportCount: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>accel</name><operator>-&gt;</operator><name>reExportCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"depListOffset: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>accel</name><operator>-&gt;</operator><name>depListOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"depListCount: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>accel</name><operator>-&gt;</operator><name>depListCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"rangeTableOffset: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>accel</name><operator>-&gt;</operator><name>rangeTableOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"rangeTableCount: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>accel</name><operator>-&gt;</operator><name>rangeTableCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"dyldSectionAddr: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>accel</name><operator>-&gt;</operator><name>dyldSectionAddr</name></name> <operator>+</operator> <name>slide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>version</name> <init>= <expr><name><name>cache</name><operator>-&gt;</operator><name>rebase_info</name><operator>-&gt;</operator><name>version</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\nslide info (v%d):\n"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"slide: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>slide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RDyldRebaseInfo2</name> <modifier>*</modifier></type><name>info2</name> <init>= <expr><operator>(</operator><name>RDyldRebaseInfo2</name><operator>*</operator><operator>)</operator> <name><name>cache</name><operator>-&gt;</operator><name>rebase_info</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"page_starts_count: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>info2</name><operator>-&gt;</operator><name>page_starts_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"page_extras_count: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>info2</name><operator>-&gt;</operator><name>page_extras_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"delta_mask: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>info2</name><operator>-&gt;</operator><name>delta_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"value_mask: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>info2</name><operator>-&gt;</operator><name>value_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"delta_shift: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>info2</name><operator>-&gt;</operator><name>delta_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"page_size: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>info2</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RDyldRebaseInfo1</name> <modifier>*</modifier></type><name>info1</name> <init>= <expr><operator>(</operator><name>RDyldRebaseInfo1</name><operator>*</operator><operator>)</operator> <name><name>cache</name><operator>-&gt;</operator><name>rebase_info</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"toc_count: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>info1</name><operator>-&gt;</operator><name>toc_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"entries_size: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>info1</name><operator>-&gt;</operator><name>entries_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>bin</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"page_size: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RBinPlugin</name></type> <name>r_bin_plugin_dyldcache</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dyldcache"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"dyldcache bin plugin"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,

<expr><operator>.</operator><name>load_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>load_buffer</name></expr>,

<expr><operator>.</operator><name>entries</name> <operator>=</operator> <operator>&amp;</operator><name>entries</name></expr>,

<expr><operator>.</operator><name>baddr</name> <operator>=</operator> <operator>&amp;</operator><name>baddr</name></expr>,

<expr><operator>.</operator><name>symbols</name> <operator>=</operator> <operator>&amp;</operator><name>symbols</name></expr>,

<expr><operator>.</operator><name>sections</name> <operator>=</operator> <operator>&amp;</operator><name>sections</name></expr>,

<expr><operator>.</operator><name>check_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>check_buffer</name></expr>,

<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <operator>&amp;</operator><name>destroy</name></expr>,

<expr><operator>.</operator><name>classes</name> <operator>=</operator> <operator>&amp;</operator><name>classes</name></expr>,

<expr><operator>.</operator><name>header</name> <operator>=</operator> <operator>&amp;</operator><name>header</name></expr>,

<expr><operator>.</operator><name>info</name> <operator>=</operator> <operator>&amp;</operator><name>info</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_BIN</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_bin_plugin_dyldcache</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
