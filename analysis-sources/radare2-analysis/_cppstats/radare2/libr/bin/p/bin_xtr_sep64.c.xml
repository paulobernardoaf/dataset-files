<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\p\bin_xtr_sep64.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_BIN_MACH064</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../format/mach0/mach0.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../format/mach0/mach0_defines.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>_RSepHdr64</name> <block>{

<decl_stmt><decl><type><name>ut8</name></type> <name><name>kernel_uuid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>unknown0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>kernel_base_paddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>kernel_max_paddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>app_images_base_paddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>app_images_max_paddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>paddr_max</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut64</name></type> <name>unknown1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>unknown2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>unknown3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>init_base_paddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>unknown4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>unknown5</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>unknown6</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>unknown7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>unknown8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>unknown9</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>init_name</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>init_uuid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>unknown10</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>unknown11</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>n_apps</name></decl>;</decl_stmt>

}</block></struct></type> <name>RSepHdr64</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_RSepApp64</name> <block>{

<decl_stmt><decl><type><name>ut64</name></type> <name>phys_text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>size_text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>phys_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>size_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>virt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>unknown4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>unknown5</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>unknown6</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>minus_one</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>unknown7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>app_name</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>app_uuid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>unknown8</name></decl>;</decl_stmt>

}</block></struct></type> <name>RSepApp64</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_RSepMachoInfo</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>mach_header</name></expr></argument>)</argument_list> <modifier>*</modifier> <name>hdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>total_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>text_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>data_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>data_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>text_offset_in_whole</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>data_offset_in_whole</name></decl>;</decl_stmt>

}</block></struct></type> <name>RSepMachoInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_RSepSlice64</name> <block>{

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type> <name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinXtrMetadata</name> <modifier>*</modifier></type> <name>meta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>nominal_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>total_size</name></decl>;</decl_stmt>

}</block></struct></type> <name>RSepSlice64</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_RSepXtr64Ctx</name> <block>{

<decl_stmt><decl><type><name>RSepHdr64</name> <modifier>*</modifier></type> <name>hdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSepApp64</name> <modifier>*</modifier></type> <name>apps</name></decl>;</decl_stmt>

}</block></struct></type> <name>RSepXtr64Ctx</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>RSepXtr64Ctx</name> <modifier>*</modifier></type> <name>sep64_xtr_ctx_new</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sep64_xtr_ctx_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RSepSlice64</name> <modifier>*</modifier></type> <name>sep64_xtr_ctx_get_slice</name><parameter_list>(<parameter><decl><type><name>RSepXtr64Ctx</name> <modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type> <name>whole</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RSepMachoInfo</name> <modifier>*</modifier></type> <name>mach0_info_new</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>max_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>mach0_info_free</name><parameter_list>(<parameter><decl><type><name>RSepMachoInfo</name> <modifier>*</modifier></type> <name>info</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ut32</name></type> <name>read_arm64_ins</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>get_proper_name</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>app_name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RBuffer</name> <modifier>*</modifier></type> <name>extract_slice</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type> <name>whole</name></decl></parameter>, <parameter><decl><type><name>RSepMachoInfo</name> <modifier>*</modifier></type> <name>info</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>fill_metadata_info_from_hdr</name><argument_list>(<argument><expr><name>RBinXtrMetadata</name> <operator>*</operator><name>meta</name></expr></argument>, <argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>mach_header</name></expr></argument>)</argument_list></call> <operator>*</operator><name>hdr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BTW</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>min</name></type></parameter>, <parameter><type><name>max</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((val) &gt; min &amp;&amp; (val) &lt; max)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_buffer</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>sz</name> <init>= <expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <literal type="number">0x11c0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>msr_vbar_el1</name> <init>= <expr><call><name>read_arm64_ins</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>msr_vbar_el1</name> <operator>!=</operator> <literal type="number">0xd518c002</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>adr</name> <init>= <expr><call><name>read_arm64_ins</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>adr</name> <operator>!=</operator> <literal type="number">0x10003fe2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_arm64_ins</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x14000000</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_arm64_ins</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1023</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x14000000</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_arm64_ins</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1028</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x326e6f69</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>hdr_offset</name> <init>= <expr><call><name>read_arm64_ins</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1029</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hdr_offset</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_le64_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>hdr_offset</name> <operator>+</operator> <literal type="number">56</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>load</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>xtr_obj</name></name> <operator>=</operator> <call><name>sep64_xtr_ctx_new</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroy</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>sep64_xtr_ctx_free</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>xtr_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>size</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBinXtrData</name> <modifier>*</modifier></type><name>oneshot_buffer</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bin</name> <operator>&amp;&amp;</operator> <name><name>bin</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>xtr_obj</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>xtr_obj</name></name> <operator>=</operator> <call><name>sep64_xtr_ctx_new</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RSepXtr64Ctx</name> <modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>xtr_obj</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSepSlice64</name> <modifier>*</modifier></type> <name>slice</name> <init>= <expr><call><name>sep64_xtr_ctx_get_slice</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinXtrData</name> <modifier>*</modifier></type> <name>res</name> <init>= <expr><call><name>r_bin_xtrdata_new</name> <argument_list>(<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>nominal_offset</name></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>total_size</name></name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>n_apps</name></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type> <name>oneshotall_buffer</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinXtrData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>oneshot_buffer</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>narch</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>file_count</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_xtrdata_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_bin_xtrdata_free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>data</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>narch</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>oneshot_buffer</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RSepXtr64Ctx</name> <modifier>*</modifier></type> <name>sep64_xtr_ctx_new</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RSepHdr64</name> <modifier>*</modifier></type> <name>hdr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSepApp64</name> <modifier>*</modifier></type> <name>apps</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSepXtr64Ctx</name> <modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>hdr_offset</name> <init>= <expr><call><name>r_buf_read_le64_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x1014</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hdr_offset</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hdr</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RSepHdr64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hdr</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>hdr_offset</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <name>hdr</name></expr></argument>, <argument><expr><literal type="string">"16c16l16c16c3l"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>RSepHdr64</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hdr</name><operator>-&gt;</operator><name>n_apps</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>apps_at</name> <init>= <expr><name>hdr_offset</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>RSepHdr64</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>apps</name> <operator>=</operator> <call><name>R_NEWS0</name> <argument_list>(<argument><expr><name>RSepApp64</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>n_apps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>apps</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_fread_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>apps_at</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <name>apps</name></expr></argument>, <argument><expr><literal type="string">"9l2i16c16cl"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>n_apps</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>RSepApp64</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>hdr</name><operator>-&gt;</operator><name>n_apps</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RSepXtr64Ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hdr</name></name> <operator>=</operator> <name>hdr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>apps</name></name> <operator>=</operator> <name>apps</name></expr>;</expr_stmt>

<return>return <expr><name>ctx</name></expr>;</return>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>apps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sep64_xtr_ctx_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RSepXtr64Ctx</name> <modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>apps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RSepSlice64</name> <modifier>*</modifier></type> <name>sep64_xtr_ctx_get_slice</name><parameter_list>(<parameter><decl><type><name>RSepXtr64Ctx</name> <modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type> <name>whole</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>n_apps</name></name> <operator>+</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>whole_size</name> <init>= <expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>whole</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type> <name>slice_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSepSlice64</name> <modifier>*</modifier></type> <name>slice</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RSepMachoInfo</name> <modifier>*</modifier></type> <name>info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinXtrMetadata</name> <modifier>*</modifier></type> <name>meta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>nominal_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>total_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"boot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slice_buf</name> <operator>=</operator> <call><name>r_buf_new_slice</name> <argument_list>(<argument><expr><name>whole</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>kernel_base_paddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>total_size</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>kernel_base_paddr</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"kernel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>mach0_info_new</name> <argument_list>(<argument><expr><name>whole</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>kernel_base_paddr</name></name></expr></argument>, <argument><expr><name>whole_size</name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>kernel_base_paddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>slice_buf</name> <operator>=</operator> <call><name>r_buf_new_slice</name> <argument_list>(<argument><expr><name>whole</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>kernel_base_paddr</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>total_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nominal_offset</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>kernel_base_paddr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>total_size</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>total_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>get_proper_name</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>init_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>mach0_info_new</name> <argument_list>(<argument><expr><name>whole</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>init_base_paddr</name></name></expr></argument>, <argument><expr><name>whole_size</name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>init_base_paddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>slice_buf</name> <operator>=</operator> <call><name>extract_slice</name> <argument_list>(<argument><expr><name>whole</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nominal_offset</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>init_base_paddr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>total_size</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>total_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>app_idx</name> <init>= <expr><name>idx</name> <operator>-</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>get_proper_name</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>apps</name><index>[<expr><name>app_idx</name></expr>]</index></name><operator>.</operator><name>app_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>mach0_info_new</name> <argument_list>(<argument><expr><name>whole</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>apps</name><index>[<expr><name>app_idx</name></expr>]</index></name><operator>.</operator><name>phys_text</name></expr></argument>, <argument><expr><name>whole_size</name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>apps</name><index>[<expr><name>app_idx</name></expr>]</index></name><operator>.</operator><name>phys_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>data_offset_in_whole</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>apps</name><index>[<expr><name>app_idx</name></expr>]</index></name><operator>.</operator><name>phys_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>slice_buf</name> <operator>=</operator> <call><name>extract_slice</name> <argument_list>(<argument><expr><name>whole</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nominal_offset</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>apps</name><index>[<expr><name>app_idx</name></expr>]</index></name><operator>.</operator><name>phys_text</name></expr>;</expr_stmt>

<expr_stmt><expr><name>total_size</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>total_size</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><name>slice_buf</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>meta</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinXtrMetadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>meta</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fill_metadata_info_from_hdr</name> <argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>arch</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"arm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>machine</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"arm64e"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"Executable file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>xtr_type</name></name> <operator>=</operator> <literal type="string">"SEP"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>libname</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><name>slice</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RSepSlice64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>slice</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>slice_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>nominal_offset</name></name> <operator>=</operator> <name>nominal_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>total_size</name></name> <operator>=</operator> <name>total_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>meta</name></name> <operator>=</operator> <name>meta</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mach0_info_free</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>slice</name></expr>;</return>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name>slice_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mach0_info_free</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RSepMachoInfo</name> <modifier>*</modifier></type> <name>mach0_info_new</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>max_size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>max_size</name> <operator>&gt;=</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RSepMachoInfo</name> <modifier>*</modifier></type> <name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>mach_header</name></expr></argument>)</argument_list> <modifier>*</modifier><name>hdr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type> <name>commands</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>total_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>text_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>data_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>data_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>hdr_size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>mach_header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hdr</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>hdr_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hdr</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <name>hdr</name></expr></argument>, <argument><expr><name>hdr_size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>hdr_size</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>magic</name></name> <operator>!=</operator> <name>MH_MAGIC_64</name> <operator>||</operator> <operator>!</operator><call><name>BTW</name> <argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>sizeofcmds</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>commands</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>sizeofcmds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>commands</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>at</name> <operator>+</operator> <name>hdr_size</name></expr></argument>, <argument><expr><name>commands</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>sizeofcmds</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>sizeofcmds</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type> <name>cursor</name> <init>= <expr><name>commands</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>ncmds</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>load_command</name></name> <modifier>*</modifier></type> <name>cmd</name> <init>= <expr><operator>(</operator>struct <name>load_command</name> <operator>*</operator><operator>)</operator> <name>cursor</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>cmd</name></name> <operator>==</operator> <name>LC_SEGMENT_64</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>MACH0_</name></name></type><argument_list>(<argument><expr><name>segment_command</name></expr></argument>)</argument_list> <modifier>*</modifier> <name>seg</name> <init>= <expr><operator>(</operator>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>segment_command</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator> <name>cursor</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>end</name> <init>= <expr><name><name>seg</name><operator>-&gt;</operator><name>fileoff</name></name> <operator>+</operator> <name><name>seg</name><operator>-&gt;</operator><name>filesize</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>total_size</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>total_size</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>segname</name></name></expr></argument>, <argument><expr><literal type="string">"__TEXT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>text_size</name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>filesize</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>segname</name></name></expr></argument>, <argument><expr><literal type="string">"__DATA"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data_offset</name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>fileoff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>data_size</name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>filesize</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cursor</name> <operator>=</operator> <name>cursor</name> <operator>+</operator> <name><name>cmd</name><operator>-&gt;</operator><name>cmdsize</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>total_size</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>text_size</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>data_offset</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>data_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RSepMachoInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>hdr</name></name> <operator>=</operator> <name>hdr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>total_size</name></name> <operator>=</operator> <name>total_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>text_size</name></name> <operator>=</operator> <name>text_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>=</operator> <name>data_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name>data_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>text_offset_in_whole</name></name> <operator>=</operator> <name>at</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mach0_info_free</name><parameter_list>(<parameter><decl><type><name>RSepMachoInfo</name> <modifier>*</modifier></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBuffer</name> <modifier>*</modifier></type> <name>extract_slice</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type> <name>whole</name></decl></parameter>, <parameter><decl><type><name>RSepMachoInfo</name> <modifier>*</modifier></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type> <name>content</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>content</name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>total_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>content</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>whole</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>text_offset_in_whole</name></name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>text_size</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>info</name><operator>-&gt;</operator><name>text_size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>data_offset</name> <init>= <expr><ternary><condition><expr><name><name>info</name><operator>-&gt;</operator><name>data_offset_in_whole</name></name></expr> ?</condition><then> <expr><name><name>info</name><operator>-&gt;</operator><name>data_offset_in_whole</name></name></expr> </then><else>: <expr><name><name>info</name><operator>-&gt;</operator><name>text_offset_in_whole</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>data_offset</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name>whole</name></expr></argument>, <argument><expr><name>data_offset</name></expr></argument>, <argument><expr><name>content</name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>data_offset</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>info</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>beach</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>r_buf_new_with_pointers</name> <argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>total_size</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>beach</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>fill_metadata_info_from_hdr</name><argument_list>(<argument><expr><name>RBinXtrMetadata</name> <operator>*</operator><name>meta</name></expr></argument>, <argument><expr>struct <call><name>MACH0_</name><argument_list>(<argument><expr><name>mach_header</name></expr></argument>)</argument_list></call> <operator>*</operator><name>hdr</name></expr></argument>)</argument_list> <block>{<block_content>

<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>arch</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_cputype_from_hdr</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_bits_from_hdr</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>machine</name></name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_cpusubtype_from_hdr</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><call><name>MACH0_</name><argument_list>(<argument><expr><name>get_filetype_from_hdr</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>get_proper_name</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>app_name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>proper_name</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>proper_name</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">12</literal></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>app_name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>proper_name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>proper_name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>app_name</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>proper_name</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>read_arm64_ins</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_buf_read_le32_at</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>idx</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RBinXtrPlugin</name></type> <name>r_bin_xtr_plugin_xtr_sep64</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"xtr.sep64"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"64-bit SEP bin extractor plugin"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,

<expr><operator>.</operator><name>check_buffer</name> <operator>=</operator> <name>check_buffer</name></expr>,

<expr><operator>.</operator><name>load</name> <operator>=</operator> <operator>&amp;</operator><name>load</name></expr>,

<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <operator>&amp;</operator><name>destroy</name></expr>,

<expr><operator>.</operator><name>size</name> <operator>=</operator> <operator>&amp;</operator><name>size</name></expr>,

<expr><operator>.</operator><name>extract_from_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>oneshot_buffer</name></expr>,

<expr><operator>.</operator><name>extractall_from_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>oneshotall_buffer</name></expr>,

<expr><operator>.</operator><name>free_xtr</name> <operator>=</operator> <operator>&amp;</operator><name>sep64_xtr_ctx_free</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_BIN_XTR</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_bin_xtr_plugin_xtr_sep64</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
