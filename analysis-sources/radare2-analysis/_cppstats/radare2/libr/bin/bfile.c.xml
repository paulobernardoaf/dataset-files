<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\bfile.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_hash.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"i/private.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_STRING_SCAN_BUFFER_SIZE</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_STRING_MAX_UNI_BLOCKS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>RBinClass</name> <modifier>*</modifier></type><name>__getClass</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>classes_ht</name></name> <operator>&amp;&amp;</operator> <name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ht_pp_find</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>classes_ht</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBinSymbol</name> <modifier>*</modifier></type><name>__getMethod</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>klass</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>methods_ht</name></name> <operator>&amp;&amp;</operator> <name>klass</name> <operator>&amp;&amp;</operator> <name>method</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s::%s"</literal></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ht_pp_find</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>methods_ht</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBinString</name> <modifier>*</modifier></type><name>__stringAt</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>addr</name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>ht_up_find</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>strings_db</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>binobj_a2b</name><parameter_list>(<parameter><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name>o</name></expr> ?</condition><then> <expr><name>addr</name> <operator>+</operator> <name><name>o</name><operator>-&gt;</operator><name>baddr_shift</name></name></expr> </then><else>: <expr><name>addr</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_string</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RBinString</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>raw</name></decl></parameter>, <parameter><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>strmode</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>, <decl><type ref="prev"/><name>vaddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>rbin</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>section_name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>type_string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>io</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_bin_get_section_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr></argument>, <argument><expr><name><name>string</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>string</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+</operator> <operator>(</operator><name><name>string</name><operator>-&gt;</operator><name>paddr</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>paddr</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>section_name</name> <operator>=</operator> <ternary><condition><expr><name>s</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>type_string</name> <operator>=</operator> <call><name>r_bin_string_type</name> <argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vaddr</name> <operator>=</operator> <name>addr</name> <operator>=</operator> <call><name>r_bin_get_vaddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>string</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>, <argument><expr><name><name>string</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_MODE_JSON</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"vaddr"</literal></expr></argument>, <argument><expr><name>vaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"paddr"</literal></expr></argument>, <argument><expr><name><name>string</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"ordinal"</literal></expr></argument>, <argument><expr><name><name>string</name><operator>-&gt;</operator><name>ordinal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><name><name>string</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"length"</literal></expr></argument>, <argument><expr><name><name>string</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"section"</literal></expr></argument>, <argument><expr><name>section_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>type_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>, <argument><expr><name><name>string</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>R_MODE_SIMPLEST</name></expr>:</case>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>string</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_MODE_SIMPLE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>raw</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>string</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>string</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>R_MODE_RADARE</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>f_name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nstr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f_name</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_name_filter</name> <argument_list>(<argument><expr><name>f_name</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>prefix</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nstr</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s.str.%s"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name>f_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"f %s.str.%s %u @ 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal>

<literal type="string">"Cs %u @ 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name>f_name</name></expr></argument>, <argument><expr><name><name>string</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>,

<argument><expr><name><name>string</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>nstr</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"str.%s"</literal></expr></argument>, <argument><expr><name>f_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"f str.%s %u @ 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal>

<literal type="string">"Cs %u @ 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name>f_name</name></expr></argument>, <argument><expr><name><name>string</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>,

<argument><expr><name><name>string</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>nstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>f_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>R_MODE_PRINT</name></expr>:</case>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%03u 0x%08"</literal> <name>PFMT64x</name> <literal type="string">" 0x%08"</literal> <name>PFMT64x</name> <literal type="string">" %3u %3u "</literal>

<literal type="string">"(%s) %5s %s\n"</literal></expr></argument>,

<argument><expr><name><name>string</name><operator>-&gt;</operator><name>ordinal</name></name></expr></argument>, <argument><expr><name><name>string</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>, <argument><expr><name>vaddr</name></expr></argument>,

<argument><expr><name><name>string</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>string</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><name>section_name</name></expr></argument>, <argument><expr><name>type_string</name></expr></argument>, <argument><expr><name><name>string</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>string_scan_range</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>raw</name></decl></parameter>, <parameter><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>section</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>rbin</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>tmp</name><index>[<expr><name>R_STRING_SCAN_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>str_start</name></decl>, <decl><type ref="prev"/><name>needle</name> <init>= <expr><name>from</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>, <decl><type ref="prev"/><name>runes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>str_type</name> <init>= <expr><name>R_STRING_TYPE_DETECT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>R_STRING_TYPE_DETECT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>from</name> <operator>==</operator> <name>to</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&gt;</operator> <name>to</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid range to find strings 0x%"</literal><name>PFMT64x</name><literal type="string">" .. 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>to</name> <operator>-</operator> <name>from</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name> <operator>||</operator> <operator>!</operator><name>min</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>vdelta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pdelta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ascii_only</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bf</name><operator>-&gt;</operator><name>strmode</name></name> <operator>==</operator> <name>R_MODE_JSON</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pj</name> <operator>=</operator> <call><name>pj_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>needle</name> <operator>&lt;</operator> <name>to</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bin</name> <operator>&amp;&amp;</operator> <name><name>bin</name><operator>-&gt;</operator><name>consb</name><operator>.</operator><name>is_breaked</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name><name>bin</name><operator>-&gt;</operator><name>consb</name><operator>.</operator><name>is_breaked</name></name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>r_utf8_decode</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>needle</name> <operator>-</operator> <name>from</name></expr></argument>, <argument><expr><name>to</name> <operator>-</operator> <name>needle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>needle</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>R_STRING_TYPE_DETECT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <name>needle</name> <operator>+</operator> <name>rc</name> <operator>-</operator> <name>from</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>to</name> <operator>-</operator> <name>needle</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">5</literal> <operator>+</operator> <name>rc</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>is_wide32</name> <init>= <expr><operator>(</operator><name>needle</name> <operator>+</operator> <name>rc</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>to</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>w</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>w</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>w</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>w</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>w</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_wide32</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str_type</name> <operator>=</operator> <name>R_STRING_TYPE_WIDE32</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>is_wide</name> <init>= <expr><name>needle</name> <operator>+</operator> <name>rc</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>to</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>w</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>w</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>w</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>str_type</name> <operator>=</operator> <ternary><condition><expr><name>is_wide</name></expr>?</condition><then> <expr><name>R_STRING_TYPE_WIDE</name></expr></then><else>: <expr><name>R_STRING_TYPE_ASCII</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>str_type</name> <operator>=</operator> <name>R_STRING_TYPE_ASCII</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>str_type</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>runes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>str_start</name> <operator>=</operator> <name>needle</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>needle</name> <operator>&lt;</operator> <name>to</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>rc</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RRune</name></type> <name>r</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str_type</name> <operator>==</operator> <name>R_STRING_TYPE_WIDE32</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>r_utf32le_decode</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>needle</name> <operator>-</operator> <name>from</name></expr></argument>, <argument><expr><name>to</name> <operator>-</operator> <name>needle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>str_type</name> <operator>==</operator> <name>R_STRING_TYPE_WIDE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>r_utf16le_decode</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>needle</name> <operator>-</operator> <name>from</name></expr></argument>, <argument><expr><name>to</name> <operator>-</operator> <name>needle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>r_utf8_decode</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>needle</name> <operator>-</operator> <name>from</name></expr></argument>, <argument><expr><name>to</name> <operator>-</operator> <name>needle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str_type</name> <operator>=</operator> <name>R_STRING_TYPE_UTF8</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name> <operator>||</operator> <operator>(</operator><name>ascii_only</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>&gt;</operator> <literal type="number">0x7f</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>needle</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>needle</name> <operator>+=</operator> <name>rc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_isprint</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>r</name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>str_type</name> <operator>==</operator> <name>R_STRING_TYPE_WIDE32</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>r_utf8_encode</name> <argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>runes</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>r</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>&lt;</operator> <literal type="number">0x100</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name> <argument_list>(<argument><expr><literal type="string">"\b\v\f\n\r\t\a\033\\"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <name>r</name> <operator>&lt;</operator> <literal type="number">93</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">" abtnvfr e "</literal>

<literal type="string">" "</literal>

<literal type="string">" "</literal>

<literal type="string">" \\"</literal><index>[<expr><name>r</name></expr>]</index></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>runes</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>runes</name> <operator>&lt;</operator> <name>min</name> <operator>&amp;&amp;</operator> <name>runes</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>str_type</name> <operator>==</operator> <name>R_STRING_TYPE_ASCII</name> <operator>&amp;&amp;</operator> <name>needle</name> <operator>&lt;</operator> <name>to</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>needle</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>runes</name> <operator>&gt;=</operator> <name>min</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>num_blocks</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>block_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>freq_list</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>expected_ascii</name></decl>, <decl><type ref="prev"/><name>actual_ascii</name></decl>, <decl><type ref="prev"/><name>num_chars</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str_type</name> <operator>==</operator> <name>R_STRING_TYPE_ASCII</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><name><name>tmp</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <literal type="char">'\t'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_PRINTABLE</name> <argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>str_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_STRING_TYPE_UTF8</name></expr>:</case>

<case>case <expr><name>R_STRING_TYPE_WIDE</name></expr>:</case>

<case>case <expr><name>R_STRING_TYPE_WIDE32</name></expr>:</case>

<expr_stmt><expr><name>num_blocks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>block_list</name> <operator>=</operator> <call><name>r_utf_block_list</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>tmp</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>str_type</name> <operator>==</operator> <name>R_STRING_TYPE_WIDE</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>freq_list</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>block_list</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>block_list</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>num_blocks</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>freq_list</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num_chars</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>actual_ascii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>freq_list</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>num_chars</name> <operator>+=</operator> <name><name>freq_list</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>block_list</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>actual_ascii</name> <operator>=</operator> <name><name>freq_list</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>freq_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>expected_ascii</name> <operator>=</operator> <ternary><condition><expr><name>num_blocks</name></expr> ?</condition><then> <expr><name>num_chars</name> <operator>/</operator> <name>num_blocks</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>actual_ascii</name> <operator>&gt;</operator> <name>expected_ascii</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ascii_only</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>needle</name> <operator>=</operator> <name>str_start</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>block_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>block_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_blocks</name> <operator>&gt;</operator> <name>R_STRING_MAX_UNI_BLOCKS</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>RBinString</name> <modifier>*</modifier></type><name>bs</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bs</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>str_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>runes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>needle</name> <operator>-</operator> <name>str_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name>count</name><operator>++</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>str_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_STRING_TYPE_WIDE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>str_start</name> <operator>-</operator> <name>from</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>str_start</name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <name>from</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xfe</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str_start</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>R_STRING_TYPE_WIDE32</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>str_start</name> <operator>-</operator> <name>from</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>str_start</name> <operator>-</operator> <literal type="number">4</literal> <operator>-</operator> <name>from</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xfe</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str_start</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>section</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>section</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>r_bin_get_section_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr></argument>, <argument><expr><name>str_start</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vdelta</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>vaddr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pdelta</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>str_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>str_start</name> <operator>-</operator> <name>pdelta</name> <operator>+</operator> <name>vdelta</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <call><name>r_str_ndup</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ht_up_insert</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>strings_db</name></name></expr></argument>, <argument><expr><name><name>bs</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>print_string</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>raw</name></expr></argument>, <argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_bin_string_free</name> <argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>from</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>to</name> <operator>==</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ascii_only</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>io</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>pj_string</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pj_free</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__isDataSection</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>has_strings</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>is_data</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"_const"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_strings_range</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>raw</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>RBinSection</name> <modifier>*</modifier></type> <name>section</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinPlugin</name> <modifier>*</modifier></type><name>plugin</name> <init>= <expr><call><name>r_bin_file_cur_plugin</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>raw</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>plugin</name> <operator>||</operator> <operator>!</operator><name><name>plugin</name><operator>-&gt;</operator><name>info</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>min</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>min</name> <operator>=</operator> <ternary><condition><expr><name>plugin</name></expr>?</condition><then> <expr><name><name>plugin</name><operator>-&gt;</operator><name>minstrlen</name></name></expr></then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>min</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>min</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>min</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bf</name><operator>-&gt;</operator><name>rbin</name><operator>-&gt;</operator><name>is_debugger</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>to</name> <operator>||</operator> <name>to</name> <operator>&gt;</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>to</name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>to</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>raw</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><name>to</name> <operator>-</operator> <name>from</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bf</name><operator>-&gt;</operator><name>rbin</name><operator>-&gt;</operator><name>maxstrbuf</name></name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>rbin</name><operator>-&gt;</operator><name>maxstrbuf</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bf</name><operator>-&gt;</operator><name>rbin</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"WARNING: bin_strings buffer is too big (0x%08"</literal> <name>PFMT64x</name> <literal type="string">"). Use -zzz or set bin.maxstrbuf (RABIN2_MAXSTRBUF) in r2 (rabin2)\n"</literal></expr></argument>,

<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>string_scan_range</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>raw</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_IPI</name> <name>RBinFile</name> <modifier>*</modifier></type><name>r_bin_file_new</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>file_sz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rawstr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xtrname</name></decl></parameter>, <parameter><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>sdb</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>steal_ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>bf_id</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_id_pool_grab_id</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>ids</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bf_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>bf_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>rbin</name></name> <operator>=</operator> <name>bin</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <ternary><condition><expr><name>file</name></expr> ?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>rawstr</name></name> <operator>=</operator> <name>rawstr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>curxtr</name></name> <operator>=</operator> <ternary><condition><expr><name>xtrname</name></expr> ?</condition><then> <expr><call><name>r_bin_get_xtrplugin_by_name</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>xtrname</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>sdb</name></name> <operator>=</operator> <name>sdb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>file_sz</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>xtr_data</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator><name>r_bin_xtrdata_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>xtr_obj</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>sdb</name></name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>sdb_addrinfo</name></name> <operator>=</operator> <call><name>sdb_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<return>return <expr><name>bf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBinPlugin</name> <modifier>*</modifier></type><name>get_plugin_from_buffer</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pluginname</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinPlugin</name> <modifier>*</modifier></type><name>plugin</name> <init>= <expr><ternary><condition><expr><name><name>bin</name><operator>-&gt;</operator><name>force</name></name></expr>?</condition><then> <expr><call><name>r_bin_get_binplugin_by_name</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>force</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>plugin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>plugin</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>plugin</name> <operator>=</operator> <ternary><condition><expr><name>pluginname</name></expr>?</condition><then> <expr><call><name>r_bin_get_binplugin_by_name</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>pluginname</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>plugin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>plugin</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>plugin</name> <operator>=</operator> <call><name>r_bin_get_binplugin_by_buffer</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>plugin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>plugin</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>r_bin_get_binplugin_by_name</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><literal type="string">"any"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_bin_file_object_new_from_xtr_data</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>baseaddr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>loadaddr</name></decl></parameter>, <parameter><decl><type><name>RBinXtrData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bin</name> <operator>&amp;&amp;</operator> <name>bf</name> <operator>&amp;&amp;</operator> <name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>sz</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinPlugin</name> <modifier>*</modifier></type><name>plugin</name> <init>= <expr><call><name>get_plugin_from_buffer</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>r_buf_ref</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>r_bin_object_new</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>plugin</name></expr></argument>, <argument><expr><name>baseaddr</name></expr></argument>, <argument><expr><name>loadaddr</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>narch</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>file_count</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>info</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>machine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>arch</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>metadata</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>machine</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>metadata</name><operator>-&gt;</operator><name>machine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>metadata</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>metadata</name><operator>-&gt;</operator><name>bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>has_crypto</name></name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>has_crypto</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>loaded</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>xtr_metadata_match</name><parameter_list>(<parameter><decl><type><name>RBinXtrData</name> <modifier>*</modifier></type><name>xtr_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>xtr_data</name><operator>-&gt;</operator><name>metadata</name></name> <operator>||</operator> <operator>!</operator><name><name>xtr_data</name><operator>-&gt;</operator><name>metadata</name><operator>-&gt;</operator><name>arch</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>iter_arch</name> <init>= <expr><name><name>xtr_data</name><operator>-&gt;</operator><name>metadata</name><operator>-&gt;</operator><name>arch</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>iter_bits</name> <init>= <expr><name><name>xtr_data</name><operator>-&gt;</operator><name>metadata</name><operator>-&gt;</operator><name>bits</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>bits</name> <operator>==</operator> <name>iter_bits</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>iter_arch</name></expr></argument>, <argument><expr><name>arch</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>xtr_data</name><operator>-&gt;</operator><name>loaded</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_IPI</name> <name>RBinFile</name> <modifier>*</modifier></type><name>r_bin_file_new_from_buffer</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rawstr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>baseaddr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>loadaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pluginname</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bin</name> <operator>&amp;&amp;</operator> <name>file</name> <operator>&amp;&amp;</operator> <name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name> <init>= <expr><call><name>r_bin_file_new</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rawstr</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>pluginname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>r_buf_ref</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinPlugin</name> <modifier>*</modifier></type><name>plugin</name> <init>= <expr><call><name>get_plugin_from_buffer</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>pluginname</name></expr></argument>, <argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>r_bin_object_new</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>plugin</name></expr></argument>, <argument><expr><name>baseaddr</name></expr></argument>, <argument><expr><name>loadaddr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_bin_file_free</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>binfiles</name></name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>bf</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinFile</name> <modifier>*</modifier></type><name>r_bin_file_find_by_arch_bits</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>binfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinXtrData</name> <modifier>*</modifier></type><name>xtr_data</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bin</name> <operator>&amp;&amp;</operator> <name>arch</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;binfiles</argument>, <argument>iter</argument>, <argument>binfile</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter_xtr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>binfile</name><operator>-&gt;</operator><name>xtr_data</name></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>binfile-&gt;xtr_data</argument>, <argument>iter_xtr</argument>, <argument>xtr_data</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>xtr_metadata_match</name> <argument_list>(<argument><expr><name>xtr_data</name></expr></argument>, <argument><expr><name>arch</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_bin_file_object_new_from_xtr_data</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>binfile</name></expr></argument>, <argument><expr><name><name>xtr_data</name><operator>-&gt;</operator><name>baddr</name></name></expr></argument>,

<argument><expr><name><name>xtr_data</name><operator>-&gt;</operator><name>laddr</name></name></expr></argument>, <argument><expr><name>xtr_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>binfile</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block>

<return>return <expr><name>binfile</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_IPI</name> <name>RBinFile</name> <modifier>*</modifier></type><name>r_bin_file_find_by_id</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>bf_id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;binfiles</argument>, <argument>iter</argument>, <argument>bf</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bf</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>bf_id</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>bf</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_file_delete_all</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bin</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>counter</name> <init>= <expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>binfiles</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_purge</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>binfiles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>counter</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_bin_file_delete</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>bin_id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>r_bin_cur</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;binfiles</argument>, <argument>iter</argument>, <argument>bf</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>bin_id</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>&amp;&amp;</operator> <name><name>cur</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>bin_id</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_delete</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>binfiles</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinFile</name> <modifier>*</modifier></type><name>r_bin_file_find_by_fd</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>bin_fd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;binfiles</argument>, <argument>iter</argument>, <argument>bf</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bf</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <name>bin_fd</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>bf</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinFile</name> <modifier>*</modifier></type><name>r_bin_file_find_by_name</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bin</name> <operator>&amp;&amp;</operator> <name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;binfiles</argument>, <argument>iter</argument>, <argument>bf</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bf</name><operator>-&gt;</operator><name>file</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>bf</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_IPI</name> <name>RBinFile</name> <modifier>*</modifier></type><name>r_bin_file_find_by_name_n</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>bf</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;binfiles</argument>, <argument>iter</argument>, <argument>bf</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>file</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>idx</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name>bf</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_bin_file_set_cur_by_id</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>bin_id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name> <init>= <expr><call><name>r_bin_file_find_by_id</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>bin_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>bf</name></expr>?</condition><then> <expr><call><name>r_bin_file_set_cur_binfile</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_bin_file_set_cur_by_fd</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>bin_fd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name> <init>= <expr><call><name>r_bin_file_find_by_fd</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>bin_fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>bf</name></expr>?</condition><then> <expr><call><name>r_bin_file_set_cur_binfile</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_IPI</name> <name>bool</name></type> <name>r_bin_file_set_obj</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bin</name> <operator>&amp;&amp;</operator> <name>bf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>file</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name>bf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>narch</name></name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>narch</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>RBinPlugin</name> <modifier>*</modifier></type><name>plugin</name> <init>= <expr><call><name>r_bin_file_cur_plugin</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>minstrlen</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>minstrlen</name></name> <operator>=</operator> <ternary><condition><expr><name>plugin</name></expr>?</condition><then> <expr><name><name>plugin</name><operator>-&gt;</operator><name>minstrlen</name></name></expr></then><else>: <expr><name><name>bin</name><operator>-&gt;</operator><name>minstrlen</name></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>info</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>lang</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>lang</name></name> <operator>=</operator> <call><name>r_bin_lang_tostring</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>lang</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_bin_file_set_cur_binfile</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bin</name> <operator>&amp;&amp;</operator> <name>bf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_bin_file_set_obj</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>, <argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_bin_file_set_cur_by_name</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bin</name> <operator>&amp;&amp;</operator> <name>name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name> <init>= <expr><call><name>r_bin_file_find_by_name</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_bin_file_set_cur_binfile</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_bin_file_deref</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bin</name> <operator>&amp;&amp;</operator> <name>a</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_bin_cur_object</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_bin_file_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_bf</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name> <init>= <expr><name>_bf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinPlugin</name> <modifier>*</modifier></type><name>plugin</name> <init>= <expr><call><name>r_bin_file_cur_plugin</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>plugin</name> <operator>&amp;&amp;</operator> <name><name>plugin</name><operator>-&gt;</operator><name>destroy</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>plugin</name><operator>-&gt;</operator><name>destroy</name></name> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bf</name><operator>-&gt;</operator><name>curxtr</name></name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>curxtr</name><operator>-&gt;</operator><name>destroy</name></name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>xtr_obj</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>bf</name><operator>-&gt;</operator><name>curxtr</name><operator>-&gt;</operator><name>free_xtr</name></name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>bf</name><operator>-&gt;</operator><name>xtr_obj</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bf</name><operator>-&gt;</operator><name>sdb_addrinfo</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdb_free</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>sdb_addrinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>sdb_addrinfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_bin_object_free</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>xtr_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bf</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_id_pool_kick_id</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>rbin</name><operator>-&gt;</operator><name>ids</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>bf</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>r_bin_object_delete</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>rbin</name></name></expr></argument>, <argument><expr><name><name>bf</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_IPI</name> <name>RBinFile</name> <modifier>*</modifier></type><name>r_bin_file_xtr_load_buffer</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RBinXtrPlugin</name> <modifier>*</modifier></type><name>xtr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>baseaddr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>loadaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rawstr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bin</name> <operator>&amp;&amp;</operator> <name>xtr</name> <operator>&amp;&amp;</operator> <name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name> <init>= <expr><call><name>r_bin_file_find_by_name</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bf</name> <operator>=</operator> <call><name>r_bin_file_new</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rawstr</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>xtr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>sdb</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>binfiles</name></name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name>bf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>xtr_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>xtr_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xtr</name><operator>-&gt;</operator><name>extractall_from_buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>xtr_data</name></name> <operator>=</operator> <call><name><name>xtr</name><operator>-&gt;</operator><name>extractall_from_buffer</name></name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>xtr</name><operator>-&gt;</operator><name>extractall_from_bytes</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name> <init>= <expr><call><name>r_buf_data</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"TODO: Implement extractall_from_buffer in '%s' xtr.bin plugin\n"</literal></expr></argument>, <argument><expr><name><name>xtr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>xtr_data</name></name> <operator>=</operator> <call><name><name>xtr</name><operator>-&gt;</operator><name>extractall_from_bytes</name></name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bf</name><operator>-&gt;</operator><name>xtr_data</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinXtrData</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>bf-&gt;xtr_data</argument>, <argument>iter</argument>, <argument>x</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>baddr</name></name> <operator>=</operator> <ternary><condition><expr><name>baseaddr</name></expr>?</condition><then> <expr><name>baseaddr</name></expr> </then><else>: <expr><name>UT64_MAX</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>laddr</name></name> <operator>=</operator> <ternary><condition><expr><name>loadaddr</name></expr>?</condition><then> <expr><name>loadaddr</name></expr> </then><else>: <expr><name>UT64_MAX</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>loadaddr</name></name> <operator>=</operator> <name>loadaddr</name></expr>;</expr_stmt>

<return>return <expr><name>bf</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_IPI</name> <name>bool</name></type> <name>r_bin_file_set_bytes</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>steal_ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name>bytes</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>steal_ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>r_buf_new_with_pointers</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>r_buf_new_with_bytes</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinPlugin</name> <modifier>*</modifier></type><name>r_bin_file_cur_plugin</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name><operator>)</operator></expr>?</condition><then> <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>plugin</name></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_IPI</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_file_get_strings</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dump</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>raw</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>section</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><ternary><condition><expr><name>dump</name></expr>?</condition><then> <expr><name>NULL</name></expr></then><else>: <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>r_bin_string_free</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>raw</name> <operator>&amp;&amp;</operator> <name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>sections</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_list_empty</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>sections</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>o-&gt;sections</argument>, <argument>iter</argument>, <argument>section</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>__isDataSection</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_strings_range</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>raw</name></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>paddr</name></name></expr></argument>,

<argument><expr><name><name>section</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+</operator> <name><name>section</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<macro><name>r_list_foreach</name> <argument_list>(<argument>o-&gt;sections</argument>, <argument>iter</argument>, <argument>section</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bits</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>bits</name></name></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cfstr_size</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>bits</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">32</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cfstr_offs</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>bits</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"__cfstring"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>section</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>sbuf</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name><name>section</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sbuf</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_read_at</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+</operator> <name>cfstr_offs</name></expr></argument>, <argument><expr><name>sbuf</name></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>section</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>cfstr_size</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>sbuf</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>bits</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">8</literal></expr></then><else>: <expr><literal type="number">4</literal></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>&gt;=</operator> <name><name>section</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>cfstr_vaddr</name> <init>= <expr><name><name>section</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>cstr_vaddr</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>bits</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>r_read_le64</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>r_read_le32</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinString</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>__stringAt</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>cstr_vaddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RBinString</name> <modifier>*</modifier></type><name>bs</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>ordinal</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ordinal</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name>cfstr_vaddr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name>cfstr_vaddr</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"cstr.%s"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ht_up_insert</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>strings_db</name></name></expr></argument>, <argument><expr><name><name>bs</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>get_strings_range</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>raw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>bf</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_file_get_baddr</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>baddr</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>UT64_MAX</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_bin_file_close</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name> <init>= <expr><call><name>r_id_storage_take</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>ids</name></name></expr></argument>, <argument><expr><name>bd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_id_storage_delete</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>ids</name></name></expr></argument>, <argument><expr><name>bd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_bin_file_free</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_file_compute_hashes</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>limit</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bin</name> <operator>&amp;&amp;</operator> <name><name>bin</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>o</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>buf_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>cur</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>iod</name> <init>= <expr><call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>iob</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>bf</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iod</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf_len</name> <operator>=</operator> <call><name>r_io_desc_size</name> <argument_list>(<argument><expr><name>iod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_len</name> <operator>&gt;</operator> <name>limit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: r_bin_file_hash: file exceeds bin.hashlimit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>blocksize</name> <init>= <expr><literal type="number">64000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>blocksize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot allocate computation buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>r_hash_new</name> <argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>R_HASH_MD5</name> <operator>|</operator> <name>R_HASH_SHA1</name> <operator>|</operator> <name>R_HASH_SHA256</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>r</name> <operator>+</operator> <name>blocksize</name> <operator>&lt;</operator> <name>buf_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_io_desc_seek</name> <argument_list>(<argument><expr><name>iod</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>R_IO_SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>r_io_desc_read</name> <argument_list>(<argument><expr><name>iod</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>blocksize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_hash_do_md5</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>blocksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_hash_do_sha1</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>blocksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_hash_do_sha256</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>blocksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>buf_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_io_desc_seek</name> <argument_list>(<argument><expr><name>iod</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>R_IO_SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>rem_len</name> <init>= <expr><name>buf_len</name><operator>-</operator><name>r</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>r_io_desc_read</name> <argument_list>(<argument><expr><name>iod</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>rem_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_io_desc_read: error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_hash_do_md5</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_hash_do_sha1</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_hash_do_sha256</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_hash_do_end</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>R_HASH_MD5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_hex_bin2str</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><name>R_HASH_SIZE_MD5</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>file_hashes</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>RListFree</name><operator>)</operator> <name>r_bin_file_hash_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinFileHash</name> <modifier>*</modifier></type><name>md5h</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinFileHash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>md5h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>md5h</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"md5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md5h</name><operator>-&gt;</operator><name>hex</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name>file_hashes</name></expr></argument>, <argument><expr><name>md5h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_hash_do_end</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>R_HASH_SHA1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_hex_bin2str</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><name>R_HASH_SIZE_SHA1</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinFileHash</name> <modifier>*</modifier></type><name>sha1h</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinFileHash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sha1h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sha1h</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"sha1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sha1h</name><operator>-&gt;</operator><name>hex</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name>file_hashes</name></expr></argument>, <argument><expr><name>sha1h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_hash_do_end</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>R_HASH_SHA256</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_hex_bin2str</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><name>R_HASH_SIZE_SHA256</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinFileHash</name> <modifier>*</modifier></type><name>sha256h</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinFileHash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sha256h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sha256h</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"sha256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sha256h</name><operator>-&gt;</operator><name>hex</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_push</name> <argument_list>(<argument><expr><name>file_hashes</name></expr></argument>, <argument><expr><name>sha256h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>plugin</name></name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>plugin</name><operator>-&gt;</operator><name>hashes</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>plugin_hashes</name> <init>= <expr><call><name><name>o</name><operator>-&gt;</operator><name>plugin</name><operator>-&gt;</operator><name>hashes</name></name> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_list_join</name> <argument_list>(<argument><expr><name>file_hashes</name></expr></argument>, <argument><expr><name>plugin_hashes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>plugin_hashes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_hash_free</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>file_hashes</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_file_set_hashes</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>new_hashes</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bin</name> <operator>&amp;&amp;</operator> <name><name>bin</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>o</name></name> <operator>&amp;&amp;</operator> <name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name> <init>= <expr><name><name>bin</name><operator>-&gt;</operator><name>cur</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>prev_hashes</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>file_hashes</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>file_hashes</name></name> <operator>=</operator> <name>new_hashes</name></expr>;</expr_stmt>

<return>return <expr><name>prev_hashes</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_IPI</name> <name>RBinClass</name> <modifier>*</modifier></type><name>r_bin_class_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>super</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinClass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>super</name></name> <operator>=</operator> <ternary><condition><expr><name>super</name></expr>?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>super</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>methods</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fields</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>visibility</name></name> <operator>=</operator> <name>view</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_IPI</name> <name>void</name></type> <name>r_bin_class_free</name><parameter_list>(<parameter><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>k</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>super</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>methods</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinClass</name> <modifier>*</modifier></type><name>r_bin_file_add_class</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>super</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>name</name> <operator>&amp;&amp;</operator> <name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>__getClass</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>super</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>super</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>super</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>super</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>r_bin_class_new</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>super</name></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>classes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>classes</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ht_pp_insert</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>classes_ht</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinSymbol</name> <modifier>*</modifier></type><name>r_bin_file_add_method</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>klass</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nargs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>r_bin_file_add_class</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot allocate class %s\n"</literal></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><call><name>__getMethod</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sym</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RBinSymbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sym</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>methods</name></name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s::%s"</literal></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ht_pp_insert</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>methods_ht</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>sym</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RBinField</name> <modifier>*</modifier></type><name>r_bin_file_add_field</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>binfile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>classname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_bin_file_get_vaddr</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>paddr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>vaddr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr></argument>, <argument><expr><name>paddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name></name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>has_va</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>binobj_a2b</name> <argument_list>(<argument><expr><name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr></argument>, <argument><expr><name>vaddr</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>paddr</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_file_get_trycatch</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name></name> <operator>&amp;&amp;</operator> <name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>plugin</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>plugin</name><operator>-&gt;</operator><name>trycatch</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name><name>bf</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>plugin</name><operator>-&gt;</operator><name>trycatch</name></name> <argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_bin_file_get_symbols</name><parameter_list>(<parameter><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>bf</name><operator>-&gt;</operator><name>o</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>o</name></expr>?</condition><then> <expr><name><name>o</name><operator>-&gt;</operator><name>symbols</name></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

</unit>
