<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\dbginfo.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>

<function><type><name>R_API</name> <name>int</name></type> <name>r_bin_addr2line</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>binfile</name> <init>= <expr><call><name>r_bin_cur</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>r_bin_cur_object</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinPlugin</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>r_bin_file_cur_plugin</name> <argument_list>(<argument><expr><name>binfile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>baddr</name> <init>= <expr><call><name>r_bin_get_baddr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>&amp;&amp;</operator> <name><name>cp</name><operator>-&gt;</operator><name>dbginfo</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>o</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&gt;=</operator> <name>baddr</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;</operator> <name>baddr</name> <operator>+</operator> <name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cp</name><operator>-&gt;</operator><name>dbginfo</name><operator>-&gt;</operator><name>get_line</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name><name>cp</name><operator>-&gt;</operator><name>dbginfo</name><operator>-&gt;</operator><name>get_line</name></name> <argument_list>(

<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_addr2text</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>origin</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>file</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_nopath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name> <operator>||</operator> <operator>!</operator><name><name>bin</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_line</name> <init>= <expr><call><name>sdb_get</name> <argument_list>(<argument><expr><name><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>sdb_addrinfo</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>file_line</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>file_line</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>token</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>token</name> <operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_file_slurp_line</name> <argument_list>(<argument><expr><name>file_line</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>token</name> <operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>file_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>origin</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>file_nopath</name> <operator>=</operator> <name>file_line</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>file_nopath</name> <operator>=</operator> <call><name>strrchr</name> <argument_list>(<argument><expr><name>file_line</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>file_nopath</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>file_nopath</name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>file_nopath</name> <operator>=</operator> <name>file_line</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>origin</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s:%d%s%s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>file_nopath</name></expr>?</condition><then> <expr><name>file_nopath</name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>line</name></expr></argument>, <argument><expr><ternary><condition><expr><name>file_nopath</name></expr>?</condition><then> <expr><literal type="string">" "</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>out</name></expr>?</condition><then> <expr><name>out</name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>file_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_bin_addr2line</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bin</name><operator>-&gt;</operator><name>srcdir</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>bin</name><operator>-&gt;</operator><name>srcdir</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slash</name> <init>= <expr><call><name>strrchr</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nf</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name><name>bin</name><operator>-&gt;</operator><name>srcdir</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>slash</name></expr>?</condition><then> <expr><name>slash</name> <operator>+</operator> <literal type="number">1</literal></expr></then><else>: <expr><name>file</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>nf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>r_file_slurp_line</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s:%d"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><operator>(</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">64</literal> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>origin</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>file_nopath</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>file_nopath</name> <operator>=</operator> <call><name>strrchr</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>origin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">63</literal> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s:%d%s%s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>file_nopath</name></expr>?</condition><then> <expr><name>file_nopath</name> <operator>+</operator> <literal type="number">1</literal></expr></then><else>: <expr><name>file</name></expr></else></ternary></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>out</name></expr>?</condition><then> <expr><literal type="string">" "</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>out2</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_bin_addr2fileline</name><parameter_list>(<parameter><decl><type><name>RBin</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>file</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_nopath</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_bin_addr2line</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>file_nopath</name> <operator>=</operator> <call><name>strrchr</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%d"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>file_nopath</name></expr>?</condition><then> <expr><name>file_nopath</name> <operator>+</operator> <literal type="number">1</literal></expr></then><else>: <expr><name>file</name></expr></else></ternary></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

</unit>
