<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\pdb\dbi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dbi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stream_file.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tpi.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PDB_ALIGN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_dbi_stream</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SDbiStream</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>(</operator><name>SDbiStream</name> <operator>*</operator><operator>)</operator> <name>stream</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SDBIExHeader</name> <modifier>*</modifier></type><name>dbi_ex_header</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>r_list_iterator</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>dbiexhdrs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>r_list_iter_next</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dbi_ex_header</name> <operator>=</operator> <operator>(</operator><name>SDBIExHeader</name> <operator>*</operator><operator>)</operator> <call><name>r_list_iter_get</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dbi_ex_header</name><operator>-&gt;</operator><name>modName</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dbi_ex_header</name><operator>-&gt;</operator><name>objName</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dbi_ex_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>dbiexhdrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_dbi_header</name><parameter_list>(<parameter><decl><type><name>SDBIHeader</name> <modifier>*</modifier></type><name>dbi_header</name></decl></parameter>, <parameter><decl><type><name>R_STREAM_FILE</name> <modifier>*</modifier></type><name>stream_file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbi_header</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbi_header</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbi_header</name><operator>-&gt;</operator><name>age</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbi_header</name><operator>-&gt;</operator><name>gssymStream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbi_header</name><operator>-&gt;</operator><name>vers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>st16</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbi_header</name><operator>-&gt;</operator><name>pssymStream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbi_header</name><operator>-&gt;</operator><name>pdbver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>st16</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbi_header</name><operator>-&gt;</operator><name>symrecStream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbi_header</name><operator>-&gt;</operator><name>pdbver2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbi_header</name><operator>-&gt;</operator><name>module_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbi_header</name><operator>-&gt;</operator><name>seccon_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbi_header</name><operator>-&gt;</operator><name>secmap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbi_header</name><operator>-&gt;</operator><name>filinf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbi_header</name><operator>-&gt;</operator><name>tsmap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbi_header</name><operator>-&gt;</operator><name>mfc_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbi_header</name><operator>-&gt;</operator><name>dbghdr_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbi_header</name><operator>-&gt;</operator><name>ecinfo_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut16</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbi_header</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbi_header</name><operator>-&gt;</operator><name>machine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbi_header</name><operator>-&gt;</operator><name>resvd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_ssymbol_range</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_len</name></decl></parameter>, <parameter><decl><type><name>SSymbolRange</name> <modifier>*</modifier></type><name>symbol_range</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>read_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>READ2</name><argument_list>(<argument><expr><name>read_bytes</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name><name>symbol_range</name><operator>-&gt;</operator><name>section</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>st16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>READ2</name><argument_list>(<argument><expr><name>read_bytes</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name><name>symbol_range</name><operator>-&gt;</operator><name>padding1</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>st16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>READ4</name><argument_list>(<argument><expr><name>read_bytes</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name><name>symbol_range</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>st32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>READ4</name><argument_list>(<argument><expr><name>read_bytes</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name><name>symbol_range</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>st32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>READ4</name><argument_list>(<argument><expr><name>read_bytes</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name><name>symbol_range</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ut32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>READ4</name><argument_list>(<argument><expr><name>read_bytes</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name><name>symbol_range</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>st32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>READ4</name><argument_list>(<argument><expr><name>read_bytes</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name><name>symbol_range</name><operator>-&gt;</operator><name>data_crc</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ut32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>READ4</name><argument_list>(<argument><expr><name>read_bytes</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name><name>symbol_range</name><operator>-&gt;</operator><name>reloc_crc</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ut32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>read_bytes</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_dbi_ex_header</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_len</name></decl></parameter>, <parameter><decl><type><name>SDBIExHeader</name> <modifier>*</modifier></type><name>dbi_ex_header</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>read_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>before_read_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>READ4</name><argument_list>(<argument><expr><name>read_bytes</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name><name>dbi_ex_header</name><operator>-&gt;</operator><name>opened</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ut32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>before_read_bytes</name> <operator>=</operator> <name>read_bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>read_bytes</name> <operator>+=</operator> <call><name>parse_ssymbol_range</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dbi_ex_header</name><operator>-&gt;</operator><name>range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><name>read_bytes</name> <operator>-</operator> <name>before_read_bytes</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>READ2</name><argument_list>(<argument><expr><name>read_bytes</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name><name>dbi_ex_header</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ut16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>READ2</name><argument_list>(<argument><expr><name>read_bytes</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name><name>dbi_ex_header</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>st16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>READ4</name><argument_list>(<argument><expr><name>read_bytes</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name><name>dbi_ex_header</name><operator>-&gt;</operator><name>symSize</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ut32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>READ4</name><argument_list>(<argument><expr><name>read_bytes</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name><name>dbi_ex_header</name><operator>-&gt;</operator><name>oldLineSize</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ut32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>READ4</name><argument_list>(<argument><expr><name>read_bytes</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name><name>dbi_ex_header</name><operator>-&gt;</operator><name>lineSize</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ut32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>READ2</name><argument_list>(<argument><expr><name>read_bytes</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name><name>dbi_ex_header</name><operator>-&gt;</operator><name>nSrcFiles</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>st16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>READ2</name><argument_list>(<argument><expr><name>read_bytes</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name><name>dbi_ex_header</name><operator>-&gt;</operator><name>padding1</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>st16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>READ4</name><argument_list>(<argument><expr><name>read_bytes</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name><name>dbi_ex_header</name><operator>-&gt;</operator><name>offsets</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ut32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>READ4</name><argument_list>(<argument><expr><name>read_bytes</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name><name>dbi_ex_header</name><operator>-&gt;</operator><name>niSource</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ut32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>READ4</name><argument_list>(<argument><expr><name>read_bytes</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name><name>dbi_ex_header</name><operator>-&gt;</operator><name>niCompiler</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ut32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>before_read_bytes</name> <operator>=</operator> <name>read_bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_sctring</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbi_ex_header</name><operator>-&gt;</operator><name>modName</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_bytes</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><name>read_bytes</name> <operator>-</operator> <name>before_read_bytes</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>before_read_bytes</name> <operator>=</operator> <name>read_bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_sctring</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbi_ex_header</name><operator>-&gt;</operator><name>objName</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_bytes</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><name>read_bytes</name> <operator>-</operator> <name>before_read_bytes</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>read_bytes</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_dbg_header</name><parameter_list>(<parameter><decl><type><name>SDbiDbgHeader</name> <modifier>*</modifier></type><name>dbg_header</name></decl></parameter>, <parameter><decl><type><name>R_STREAM_FILE</name> <modifier>*</modifier></type><name>stream_file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbg_header</name><operator>-&gt;</operator><name>sn_fpo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbg_header</name><operator>-&gt;</operator><name>sn_exception</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbg_header</name><operator>-&gt;</operator><name>sn_fixup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbg_header</name><operator>-&gt;</operator><name>sn_omap_to_src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbg_header</name><operator>-&gt;</operator><name>sn_omap_from_src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbg_header</name><operator>-&gt;</operator><name>sn_section_hdr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbg_header</name><operator>-&gt;</operator><name>sn_token_rid_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbg_header</name><operator>-&gt;</operator><name>sn_xdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbg_header</name><operator>-&gt;</operator><name>sn_pdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbg_header</name><operator>-&gt;</operator><name>sn_new_fpo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dbg_header</name><operator>-&gt;</operator><name>sn_section_hdr_orig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>init_dbi_stream</name><parameter_list>(<parameter><decl><type><name>SDbiStream</name> <modifier>*</modifier></type><name>dbi_stream</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>dbi_stream</name><operator>-&gt;</operator><name>free_</name></name> <operator>=</operator> <name>free_dbi_stream</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>parse_dbi_stream</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>parsed_pdb_stream</name></decl></parameter>, <parameter><decl><type><name>R_STREAM_FILE</name> <modifier>*</modifier></type><name>stream_file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SDbiStream</name> <modifier>*</modifier></type><name>dbi_stream</name> <init>= <expr><operator>(</operator><name>SDbiStream</name> <operator>*</operator><operator>)</operator> <name>parsed_pdb_stream</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SDBIExHeader</name> <modifier>*</modifier></type><name>dbi_ex_header</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dbiexhdr_data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>parse_dbi_header</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbi_stream</name><operator>-&gt;</operator><name>dbi_header</name></name></expr></argument>, <argument><expr><name>stream_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>SDBIHeader</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>stream_file_seek</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>dbi_stream</name><operator>-&gt;</operator><name>dbi_header</name><operator>.</operator><name>module_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dbiexhdr_data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbiexhdr_data</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>dbiexhdr_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dbi_stream</name><operator>-&gt;</operator><name>dbiexhdrs</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_tmp</name> <operator>=</operator> <name>dbiexhdr_data</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dbi_ex_header</name> <operator>=</operator> <operator>(</operator><name>SDBIExHeader</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDBIExHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbi_ex_header</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>parse_dbi_ex_header</name> <argument_list>(<argument><expr><name>p_tmp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>dbi_ex_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sz</name> <operator>%</operator> <name>PDB_ALIGN</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <name>sz</name> <operator>+</operator> <operator>(</operator><name>PDB_ALIGN</name> <operator>-</operator> <operator>(</operator><name>sz</name> <operator>%</operator> <name>PDB_ALIGN</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_tmp</name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>dbi_stream</name><operator>-&gt;</operator><name>dbiexhdrs</name></name></expr></argument>, <argument><expr><name>dbi_ex_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dbiexhdr_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_seek</name><argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><name><name>dbi_stream</name><operator>-&gt;</operator><name>dbi_header</name><operator>.</operator><name>seccon_size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_seek</name><argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><name><name>dbi_stream</name><operator>-&gt;</operator><name>dbi_header</name><operator>.</operator><name>secmap_size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_seek</name><argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><name><name>dbi_stream</name><operator>-&gt;</operator><name>dbi_header</name><operator>.</operator><name>filinf_size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_seek</name><argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><name><name>dbi_stream</name><operator>-&gt;</operator><name>dbi_header</name><operator>.</operator><name>tsmap_size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_seek</name><argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><name><name>dbi_stream</name><operator>-&gt;</operator><name>dbi_header</name><operator>.</operator><name>ecinfo_size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_dbg_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbi_stream</name><operator>-&gt;</operator><name>dbg_header</name></name></expr></argument>, <argument><expr><name>stream_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
