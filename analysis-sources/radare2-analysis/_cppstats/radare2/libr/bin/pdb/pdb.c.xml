<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\pdb\pdb.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_pdb.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_bin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stream_pe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stream_file.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tpi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dbi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fpo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"omap.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PDB2_SIGNATURE</name></cpp:macro> <cpp:value>"Microsoft C/C++ program database 2.00\r\n\032JG\0\0"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PDB2_SIGNATURE_LEN</name></cpp:macro> <cpp:value>51</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PDB7_SIGNATURE</name></cpp:macro> <cpp:value>"Microsoft C/C++ MSF 7.00\r\n\x1A" "DS\0\0\0"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PDB7_SIGNATURE_LEN</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>parse_stream_</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>R_STREAM_FILE</name> <modifier>*</modifier></type><name>stream_file</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>indx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>parse_stream_</name></type> <name>parse_stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EStream</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>free_func</name></type> <name>free</name></decl>;</decl_stmt>

}</block></struct></type> <name>SStreamParseFunc</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_pdb_stream</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>R_PDB_STREAM</name> <modifier>*</modifier></type><name>pdb_stream</name> <init>= <expr><operator>(</operator><name>R_PDB_STREAM</name> <operator>*</operator><operator>)</operator> <name>stream</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pdb_stream</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pdb_stream</name><operator>-&gt;</operator><name>pages</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pdb_stream</name><operator>-&gt;</operator><name>pages</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_r_pdb_stream</name><parameter_list>(<parameter><decl><type><name>R_PDB_STREAM</name> <modifier>*</modifier></type><name>pdb_stream</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pages</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pages_amount</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>page_size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>pdb_stream</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdb_stream</name><operator>-&gt;</operator><name>pages</name></name> <operator>=</operator> <name>pages</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdb_stream</name><operator>-&gt;</operator><name>indx</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdb_stream</name><operator>-&gt;</operator><name>page_size</name></name> <operator>=</operator> <name>page_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdb_stream</name><operator>-&gt;</operator><name>pages_amount</name></name> <operator>=</operator> <name>pages_amount</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pdb_stream</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>pages_amount</name> <operator>*</operator> <name>page_size</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pdb_stream</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>init_r_stream_file</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pdb_stream</name><operator>-&gt;</operator><name>stream_file</name></name><operator>)</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pages</name></expr></argument>, <argument><expr><name>pages_amount</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>page_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdb_stream</name><operator>-&gt;</operator><name>free_</name></name> <operator>=</operator> <name>free_pdb_stream</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_int_var</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>var_name</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>R_PDB</name> <modifier>*</modifier></type><name>pdb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>var</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>var</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes_read</name> <init>= <expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name><name>pdb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <name>var</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error while reading from file '%s'\n"</literal></expr></argument>, <argument><expr><name>var_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>bytes_read</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>count_pages</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>page_size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num_pages</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>page_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num_pages</name> <operator>=</operator> <name>length</name> <operator>/</operator> <name>page_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>%</operator> <name>page_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num_pages</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>num_pages</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_pdb7_root_stream</name><parameter_list>(<parameter><decl><type><name>R_PDB</name> <modifier>*</modifier></type><name>pdb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>root_page_list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pages_amount</name></decl></parameter>,

<parameter><decl><type><name>EStream</name></type> <name>indx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>root_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>page_size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>R_PDB_STREAM</name> <modifier>*</modifier></type><name>pdb_stream</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tmp_data_max_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp_data</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>data_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stream_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_streams</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>sizes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_pages</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>data_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>R_PDB7_ROOT_STREAM</name> <modifier>*</modifier></type><name>root_stream7</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pdb</name><operator>-&gt;</operator><name>root_stream</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>R_PDB7_ROOT_STREAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_r_pdb_stream</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>pdb</name><operator>-&gt;</operator><name>root_stream</name><operator>-&gt;</operator><name>pdb_stream</name></name></expr></argument>, <argument><expr><name><name>pdb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>root_page_list</name></expr></argument>, <argument><expr><name>pages_amount</name></expr></argument>,

<argument><expr><name>indx</name></expr></argument>, <argument><expr><name>root_size</name></expr></argument>, <argument><expr><name>page_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>root_stream7</name> <operator>=</operator> <name><name>pdb</name><operator>-&gt;</operator><name>root_stream</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pdb_stream</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>root_stream7</name><operator>-&gt;</operator><name>pdb_stream</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>pdb_stream</name><operator>-&gt;</operator><name>stream_file</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stream_file_get_data</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>pdb_stream</name><operator>-&gt;</operator><name>stream_file</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_streams</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_data</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_data</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>root_stream7</name><operator>-&gt;</operator><name>num_streams</name></name> <operator>=</operator> <name>num_streams</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_data_max_size</name> <operator>=</operator> <operator>(</operator><name>data_size</name> <operator>-</operator> <operator>(</operator><name>num_streams</name> <operator>*</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>data_end</name> <operator>=</operator> <name>data</name> <operator>+</operator> <name>tmp_data_max_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp_data_max_size</name> <operator>&gt;</operator> <name>data_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid max tmp data size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_streams</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>tmp_data_max_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Too many streams: current PDB file is incorrect.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sizes</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>num_streams</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sizes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Size too big: current PDB file is incorrect.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_streams</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>tmp_data</name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;</operator> <name>data_end</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>stream_size</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>tmp_data</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_data</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_size</name> <operator>==</operator> <name>UT32_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>stream_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>sizes</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stream_size</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tmp_data</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>data</name> <operator>+</operator> <name>num_streams</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>root_stream7</name><operator>-&gt;</operator><name>streams_list</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>pList</name> <init>= <expr><name><name>root_stream7</name><operator>-&gt;</operator><name>streams_list</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>page</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>num_pages</name> <operator>=</operator> <call><name>count_pages</name> <argument_list>(<argument><expr><name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>page_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pos</name> <operator>+</operator> <name>num_pages</name><operator>)</operator> <operator>&gt;</operator> <name>tmp_data_max_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sizes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: looks like there is no correct values of stream size in PDB file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>size</name> <init>= <expr><name>num_pages</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>num_pages</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>page</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>SPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_pages</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pos</name> <operator>+</operator> <name>size</name><operator>)</operator> <operator>&gt;</operator> <name>tmp_data_max_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Data overrun by num_pages.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>sizes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp_data</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>num_pages</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>page</name><operator>-&gt;</operator><name>stream_size</name></name> <operator>=</operator> <name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>page</name><operator>-&gt;</operator><name>stream_pages</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>page</name><operator>-&gt;</operator><name>num_pages</name></name> <operator>=</operator> <name>num_pages</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>page</name><operator>-&gt;</operator><name>stream_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>page</name><operator>-&gt;</operator><name>stream_pages</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>page</name><operator>-&gt;</operator><name>num_pages</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sizes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_pdb_info_stream</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>parsed_pdb_stream</name></decl></parameter>, <parameter><decl><type><name>R_STREAM_FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SPDBInfoStream</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><operator>(</operator><name>SPDBInfoStream</name> <operator>*</operator><operator>)</operator> <name>parsed_pdb_stream</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>names</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator> <name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator> <name>time_date_stamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator> <name>age</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator> <name>guid</name><operator>.</operator><name>data1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator> <name>guid</name><operator>.</operator><name>data2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator> <name>guid</name><operator>.</operator><name>data3</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator> <name>guid</name><operator>.</operator><name>data4</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator> <name>cb_names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator> <name>names</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator> <name>cb_names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_file_read</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator> <name>cb_names</name></name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator> <name>names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_info_stream</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SPDBInfoStream</name> <modifier>*</modifier></type><name>info_stream</name> <init>= <expr><operator>(</operator><name>SPDBInfoStream</name> <operator>*</operator><operator>)</operator> <name>stream</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>info_stream</name><operator>-&gt;</operator><name>names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_INDX_TO_LIST</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>index</name></type></parameter>, <parameter><type><name>stream_size</name></type></parameter>, <parameter><type><name>stream_type</name></type></parameter>, <parameter><type><name>free_func</name></type></parameter>, <parameter><type><name>parse_func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{if ((index) != -1) { SStreamParseFunc *stream_parse_func = R_NEW0 (SStreamParseFunc);if (!stream_parse_func) { return; } stream_parse_func-&gt;indx = (index); stream_parse_func-&gt;type = (stream_type); stream_parse_func-&gt;parse_stream = (parse_func); stream_parse_func-&gt;free = (free_func); if (stream_size) { stream_parse_func-&gt;stream = calloc (1, stream_size); if (!stream_parse_func-&gt;stream) { R_FREE (stream_parse_func); return; } } else { stream_parse_func-&gt;stream = 0; } r_list_append ((list), stream_parse_func); } }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_list_for_stream_parsing</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>SDbiStream</name> <modifier>*</modifier></type><name>dbi_stream</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>ADD_INDX_TO_LIST</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>dbi_stream</name><operator>-&gt;</operator><name>dbi_header</name><operator>.</operator><name>symrecStream</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>SGDATAStream</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>ePDB_STREAM_GSYM</name></expr></argument>, <argument><expr><name>free_gdata_stream</name></expr></argument>, <argument><expr><name>parse_gdata_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_INDX_TO_LIST</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>dbi_stream</name><operator>-&gt;</operator><name>dbg_header</name><operator>.</operator><name>sn_section_hdr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>SPEStream</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>ePDB_STREAM_SECT_HDR</name></expr></argument>, <argument><expr><name>free_pe_stream</name></expr></argument>, <argument><expr><name>parse_pe_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_INDX_TO_LIST</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>dbi_stream</name><operator>-&gt;</operator><name>dbg_header</name><operator>.</operator><name>sn_section_hdr_orig</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SPEStream</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>ePDB_STREAM_SECT__HDR_ORIG</name></expr></argument>, <argument><expr><name>free_pe_stream</name></expr></argument>, <argument><expr><name>parse_pe_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_INDX_TO_LIST</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>dbi_stream</name><operator>-&gt;</operator><name>dbg_header</name><operator>.</operator><name>sn_omap_to_src</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOmapStream</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>ePDB_STREAM_OMAP_TO_SRC</name></expr></argument>, <argument><expr><name>free_omap_stream</name></expr></argument>, <argument><expr><name>parse_omap_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_INDX_TO_LIST</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>dbi_stream</name><operator>-&gt;</operator><name>dbg_header</name><operator>.</operator><name>sn_omap_from_src</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOmapStream</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>ePDB_STREAM_OMAP_FROM_SRC</name></expr></argument>, <argument><expr><name>free_omap_stream</name></expr></argument>, <argument><expr><name>parse_omap_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_INDX_TO_LIST</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>dbi_stream</name><operator>-&gt;</operator><name>dbg_header</name><operator>.</operator><name>sn_fpo</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFPOStream</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>ePDB_STREAM_FPO</name></expr></argument>, <argument><expr><name>free_fpo_stream</name></expr></argument>, <argument><expr><name>parse_fpo_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_INDX_TO_LIST</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>dbi_stream</name><operator>-&gt;</operator><name>dbg_header</name><operator>.</operator><name>sn_new_fpo</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFPONewStream</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>ePDB_STREAM_FPO_NEW</name></expr></argument>, <argument><expr><name>free_fpo_stream</name></expr></argument>, <argument><expr><name>parse_fpo_new_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_INDX_TO_LIST</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>dbi_stream</name><operator>-&gt;</operator><name>dbg_header</name><operator>.</operator><name>sn_xdata</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ePDB_STREAM_XDATA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_INDX_TO_LIST</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>dbi_stream</name><operator>-&gt;</operator><name>dbg_header</name><operator>.</operator><name>sn_pdata</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ePDB_STREAM_PDATA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_INDX_TO_LIST</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>dbi_stream</name><operator>-&gt;</operator><name>dbg_header</name><operator>.</operator><name>sn_token_rid_map</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ePDB_STREAM_TOKEN_RID_MAP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>find_indx_in_list</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>SStreamParseFunc</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SStreamParseFunc</name> <modifier>*</modifier></type><name>stream_parse_func</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>r_list_iterator</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>r_list_iter_next</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>stream_parse_func</name> <operator>=</operator> <operator>(</operator><name>SStreamParseFunc</name> <operator>*</operator><operator>)</operator> <call><name>r_list_iter_get</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name><name>stream_parse_func</name><operator>-&gt;</operator><name>indx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>stream_parse_func</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pdb_read_root</name><parameter_list>(<parameter><decl><type><name>R_PDB</name> <modifier>*</modifier></type><name>pdb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>pList</name> <init>= <expr><name><name>pdb</name><operator>-&gt;</operator><name>pdb_streams</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>R_PDB7_ROOT_STREAM</name> <modifier>*</modifier></type><name>root_stream</name> <init>= <expr><name><name>pdb</name><operator>-&gt;</operator><name>root_stream</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>R_PDB_STREAM</name> <modifier>*</modifier></type><name>pdb_stream</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SPDBInfoStream</name> <modifier>*</modifier></type><name>pdb_info_stream</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>STpiStream</name> <modifier>*</modifier></type><name>tpi_stream</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>R_STREAM_FILE</name></type> <name>stream_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>page</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SStreamParseFunc</name> <modifier>*</modifier></type><name>stream_parse_func</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>r_list_iterator</name> <argument_list>(<argument><expr><name><name>root_stream</name><operator>-&gt;</operator><name>streams_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>r_list_iter_next</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>page</name> <operator>=</operator> <operator>(</operator><name>SPage</name> <operator>*</operator><operator>)</operator> <call><name>r_list_iter_get</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>page</name><operator>-&gt;</operator><name>stream_pages</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_r_stream_file</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>stream_file</name></expr></argument>, <argument><expr><name><name>pdb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name><name>page</name><operator>-&gt;</operator><name>stream_pages</name></name></expr></argument>,

<argument><expr><name><name>page</name><operator>-&gt;</operator><name>num_pages</name></name></expr></argument> ,

<argument><expr><name><name>page</name><operator>-&gt;</operator><name>stream_size</name></name></expr></argument>,

<argument><expr><name><name>root_stream</name><operator>-&gt;</operator><name>pdb_stream</name><operator>.</operator><name>page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ePDB_STREAM_PDB</name></expr>:</case>

<expr_stmt><expr><name>pdb_info_stream</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>SPDBInfoStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pdb_info_stream</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pdb_info_stream</name><operator>-&gt;</operator><name>free_</name></name> <operator>=</operator> <name>free_info_stream</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_pdb_info_stream</name> <argument_list>(<argument><expr><name>pdb_info_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stream_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><name>pdb_info_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ePDB_STREAM_TPI</name></expr>:</case>

<expr_stmt><expr><name>tpi_stream</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>STpiStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tpi_stream</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_tpi_stream</name> <argument_list>(<argument><expr><name>tpi_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_tpi_stream</name> <argument_list>(<argument><expr><name>tpi_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stream_file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tpi_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><name>tpi_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ePDB_STREAM_DBI</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>SDbiStream</name> <modifier>*</modifier></type><name>dbi_stream</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>SDbiStream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbi_stream</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_dbi_stream</name> <argument_list>(<argument><expr><name>dbi_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_dbi_stream</name> <argument_list>(<argument><expr><name>dbi_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stream_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><name>dbi_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdb</name><operator>-&gt;</operator><name>pdb_streams2</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_list_for_stream_parsing</name> <argument_list>(<argument><expr><name><name>pdb</name><operator>-&gt;</operator><name>pdb_streams2</name></name></expr></argument>, <argument><expr><name>dbi_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>find_indx_in_list</name> <argument_list>(<argument><expr><name><name>pdb</name><operator>-&gt;</operator><name>pdb_streams2</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stream_parse_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_parse_func</name> <operator>&amp;&amp;</operator> <name><name>stream_parse_func</name><operator>-&gt;</operator><name>parse_stream</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>stream_parse_func</name><operator>-&gt;</operator><name>parse_stream</name></name> <argument_list>(<argument><expr><name><name>stream_parse_func</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stream_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pdb_stream</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>R_PDB_STREAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pdb_stream</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_r_pdb_stream</name> <argument_list>(<argument><expr><name>pdb_stream</name></expr></argument>, <argument><expr><name><name>pdb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name><name>page</name><operator>-&gt;</operator><name>stream_pages</name></name></expr></argument>,

<argument><expr><name><name>root_stream</name><operator>-&gt;</operator><name>pdb_stream</name><operator>.</operator><name>pages_amount</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><name><name>page</name><operator>-&gt;</operator><name>stream_size</name></name></expr></argument>, <argument><expr><name><name>root_stream</name><operator>-&gt;</operator><name>pdb_stream</name><operator>.</operator><name>page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><name>pdb_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>stream_file</name><operator>.</operator><name>error</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>pdb7_parse</name><parameter_list>(<parameter><decl><type><name>R_PDB</name> <modifier>*</modifier></type><name>pdb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>signature</name><index>[<expr><name>PDB7_SIGNATURE_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_root_index_pages</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>root_index_pages</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>root_page_data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>root_page_list</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_root_pages</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_file_pages</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alloc_tbl_ptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>page_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>root_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reserved</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>r_buf_read</name> <argument_list>(<argument><expr><name><name>pdb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>signature</name></expr></argument>, <argument><expr><name>PDB7_SIGNATURE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>!=</operator> <name>PDB7_SIGNATURE_LEN</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_int_var</name> <argument_list>(<argument><expr><literal type="string">"page_size"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>page_size</name></expr></argument>, <argument><expr><name>pdb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_int_var</name> <argument_list>(<argument><expr><literal type="string">"alloc_tbl_ptr"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>alloc_tbl_ptr</name></expr></argument>, <argument><expr><name>pdb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_int_var</name> <argument_list>(<argument><expr><literal type="string">"num_file_pages"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_file_pages</name></expr></argument>, <argument><expr><name>pdb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_int_var</name> <argument_list>(<argument><expr><literal type="string">"root_size"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>root_size</name></expr></argument>, <argument><expr><name>pdb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_int_var</name> <argument_list>(<argument><expr><literal type="string">"reserved"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>reserved</name></expr></argument>, <argument><expr><name>pdb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><name>signature</name></expr></argument>, <argument><expr><name>PDB7_SIGNATURE</name></expr></argument>, <argument><expr><name>PDB7_SIGNATURE_LEN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid signature for PDB7 format.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num_root_pages</name> <operator>=</operator> <call><name>count_pages</name> <argument_list>(<argument><expr><name>root_size</name></expr></argument>, <argument><expr><name>page_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_root_index_pages</name> <operator>=</operator> <call><name>count_pages</name> <argument_list>(<argument><expr><operator>(</operator><name>num_root_pages</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>, <argument><expr><name>page_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>root_index_pages</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>R_MAX</name> <argument_list>(<argument><expr><name>num_root_index_pages</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>root_index_pages</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error memory allocation.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>r_buf_read</name> <argument_list>(<argument><expr><name><name>pdb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>root_index_pages</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name>num_root_index_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>!=</operator> <literal type="number">4</literal> <operator>*</operator> <name>num_root_index_pages</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error while reading root_index_pages.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>page_size</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>num_root_index_pages</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid root index pages size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>root_page_data</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>page_size</name></expr></argument>, <argument><expr><name>num_root_index_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>root_page_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: memory allocation of root_page_data.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_tmp</name> <operator>=</operator> <name>root_page_data</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_root_index_pages</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name><name>pdb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>root_index_pages</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>page_size</name></expr></argument>,

<argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_read</name> <argument_list>(<argument><expr><name><name>pdb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>p_tmp</name></expr></argument>, <argument><expr><name>page_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_tmp</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>p_tmp</name> <operator>+</operator> <name>page_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>root_page_list</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>num_root_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>root_page_list</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: memory allocation of root page.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_tmp</name> <operator>=</operator> <name>root_page_data</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_root_pages</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>root_page_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>p_tmp</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p_tmp</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>p_tmp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>pdb</name><operator>-&gt;</operator><name>pdb_streams2</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_pdb7_root_stream</name> <argument_list>(<argument><expr><name>pdb</name></expr></argument>, <argument><expr><name>root_page_list</name></expr></argument>, <argument><expr><name>num_root_pages</name></expr></argument>,

<argument><expr><name>ePDB_STREAM_ROOT</name></expr></argument>, <argument><expr><name>root_size</name></expr></argument>, <argument><expr><name>page_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Could not initialize root stream.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pdb_read_root</name> <argument_list>(<argument><expr><name>pdb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"PDB root was not initialized.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>root_page_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>root_page_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>root_index_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>root_page_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>root_page_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>root_index_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>finish_pdb_parse</name><parameter_list>(<parameter><decl><type><name>R_PDB</name> <modifier>*</modifier></type><name>pdb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>R_PDB7_ROOT_STREAM</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>pdb</name><operator>-&gt;</operator><name>root_stream</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SPage</name> <modifier>*</modifier></type><name>page</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>r_list_iterator</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>streams_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>r_list_iter_next</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>page</name> <operator>=</operator> <operator>(</operator><name>SPage</name> <operator>*</operator><operator>)</operator> <call><name>r_list_iter_get</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>page</name><operator>-&gt;</operator><name>stream_pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>page</name><operator>-&gt;</operator><name>stream_pages</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>page</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>streams_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>streams_list</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SPDBInfoStream</name> <modifier>*</modifier></type><name>pdb_info_stream</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>STpiStream</name> <modifier>*</modifier></type><name>tpi_stream</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SDbiStream</name> <modifier>*</modifier></type><name>dbi_stream</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SStreamParseFunc</name> <modifier>*</modifier></type><name>stream_parse_func</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>R_PDB_STREAM</name> <modifier>*</modifier></type><name>pdb_stream</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>r_list_iterator</name> <argument_list>(<argument><expr><name><name>pdb</name><operator>-&gt;</operator><name>pdb_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>r_list_iter_next</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>pdb_info_stream</name> <operator>=</operator> <operator>(</operator><name>SPDBInfoStream</name> <operator>*</operator><operator>)</operator> <call><name>r_list_iter_get</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_pdb_stream</name> <argument_list>(<argument><expr><name>pdb_info_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pdb_info_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>tpi_stream</name> <operator>=</operator> <operator>(</operator><name>STpiStream</name> <operator>*</operator><operator>)</operator> <call><name>r_list_iter_get</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_pdb_stream</name> <argument_list>(<argument><expr><name>tpi_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tpi_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>dbi_stream</name> <operator>=</operator> <operator>(</operator><name>SDbiStream</name> <operator>*</operator><operator>)</operator> <call><name>r_list_iter_get</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_pdb_stream</name> <argument_list>(<argument><expr><name>dbi_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dbi_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>find_indx_in_list</name> <argument_list>(<argument><expr><name><name>pdb</name><operator>-&gt;</operator><name>pdb_streams2</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stream_parse_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_parse_func</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pdb_stream</name> <operator>=</operator> <operator>(</operator><name>R_PDB_STREAM</name> <operator>*</operator><operator>)</operator> <call><name>r_list_iter_get</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_pdb_stream</name> <argument_list>(<argument><expr><name>pdb_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pdb_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>pdb</name><operator>-&gt;</operator><name>pdb_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>r_list_iterator</name> <argument_list>(<argument><expr><name><name>pdb</name><operator>-&gt;</operator><name>pdb_streams2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>r_list_iter_next</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>stream_parse_func</name> <operator>=</operator> <operator>(</operator><name>SStreamParseFunc</name> <operator>*</operator><operator>)</operator> <call><name>r_list_iter_get</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream_parse_func</name><operator>-&gt;</operator><name>free</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>stream_parse_func</name><operator>-&gt;</operator><name>free</name></name> <argument_list>(<argument><expr><name><name>stream_parse_func</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>stream_parse_func</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>stream_parse_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>pdb</name><operator>-&gt;</operator><name>pdb_streams2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>pdb</name><operator>-&gt;</operator><name>stream_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_buf_free</name> <argument_list>(<argument><expr><name><name>pdb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<typedef>typedef <type><enum>enum <name>EStates</name> <block>{

<decl><name>ePointerState</name></decl>,

<decl><name>eUnionState</name></decl>,

<decl><name>eStructState</name></decl>,

<decl><name>eMemberState</name></decl>,

<decl><name>eUnsignedState</name></decl>,

<decl><name>eTypeNameState</name></decl>,

<decl><name>eShortState</name></decl>,

<decl><name>eLongState</name></decl>,

<decl><name>eCharState</name></decl>,

<decl><name>eModifierState</name></decl>,

<decl><name>eEnumState</name></decl>,

<decl><name>eArrayState</name></decl>,

<decl><name>eOneMethodState</name></decl>,

<decl><name>eVoidState</name></decl>,

<decl><name>eDoubleState</name></decl>,

<decl><name>eBitfieldState</name></decl>,

<decl><name>eStateMax</name></decl>

}</block></enum></type> <name>EStates</name>;</typedef>

<function><type><specifier>static</specifier> <name>EStates</name></type> <name>convert_to_state</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cstate</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>EStates</name></type> <name>state</name> <init>= <expr><name>eStateMax</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>cstate</name></expr></argument>, <argument><expr><literal type="string">"member"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>eMemberState</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>cstate</name></expr></argument>, <argument><expr><literal type="string">"pointer"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>ePointerState</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>cstate</name></expr></argument>, <argument><expr><literal type="string">"union"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>eUnionState</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>cstate</name></expr></argument>, <argument><expr><literal type="string">"struct"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>eStructState</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>cstate</name></expr></argument>, <argument><expr><literal type="string">"unsigned"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>eUnsignedState</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>cstate</name></expr></argument>, <argument><expr><literal type="string">"short"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>eShortState</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>cstate</name></expr></argument>, <argument><expr><literal type="string">"long"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>eLongState</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>cstate</name></expr></argument>, <argument><expr><literal type="string">"char"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>eCharState</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>cstate</name></expr></argument>, <argument><expr><literal type="string">"modifier"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>eModifierState</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>cstate</name></expr></argument>, <argument><expr><literal type="string">"enum"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>eEnumState</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>cstate</name></expr></argument>, <argument><expr><literal type="string">"array"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>eArrayState</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>cstate</name></expr></argument>, <argument><expr><literal type="string">"onemethod"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>eOneMethodState</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>cstate</name></expr></argument>, <argument><expr><literal type="string">"void"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>eVoidState</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>cstate</name></expr></argument>, <argument><expr><literal type="string">"double"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>eDoubleState</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>cstate</name></expr></argument>, <argument><expr><literal type="string">"bitfield"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>eBitfieldState</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>state</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>build_format_flags</name><parameter_list>(<parameter><decl><type><name>R_PDB</name> <modifier>*</modifier></type><name>pdb</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>res_field</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name_field</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>EStates</name></type> <name>curr_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strtok</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>curr_state</name> <operator>=</operator> <call><name>convert_to_state</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>curr_state</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>eMemberState</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>ePointerState</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>res_field</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>res_field</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">'p'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>eUnionState</name></expr>:</case>

<case>case <expr><name>eStructState</name></expr>:</case>

<expr_stmt><expr><name><name>res_field</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strtok</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><operator>*</operator><name>name_field</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_name_filter</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_name_filter</name> <argument_list>(<argument><expr><operator>*</operator><name>name_field</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"(%s)%s"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>*</operator><name>name_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><operator>*</operator><name>name_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>name_field</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>eUnsignedState</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>res_field</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>res_field</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">'u'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>eShortState</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>res_field</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>res_field</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">'w'</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>eCharState</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>res_field</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>res_field</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>res_field</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>res_field</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>eLongState</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>res_field</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>res_field</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>eModifierState</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>res_field</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>res_field</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">'w'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>eEnumState</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>res_field</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>res_field</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">'E'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strtok</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><operator>*</operator><name>name_field</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"(%s)%s"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>*</operator><name>name_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><operator>*</operator><name>name_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>name_field</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>eBitfieldState</name></expr>:</case>

<expr_stmt><expr><name><name>res_field</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">'B'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strtok</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><operator>*</operator><name>name_field</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"(%s)%s"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>*</operator><name>name_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><operator>*</operator><name>name_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>name_field</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>eVoidState</name></expr>:</case>

<case>case <expr><name>eArrayState</name></expr>:</case>

<case>case <expr><name>eOneMethodState</name></expr>:</case>

<expr_stmt><expr><name><name>res_field</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">'p'</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"to"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"nesttype"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"mfunction"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"proc"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"arglist"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>res_field</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strtok</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>build_command_field</name><parameter_list>(<parameter><decl><type><name>ELeafType</name></type> <name>lt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>command_field</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>lt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>eLF_STRUCTURE</name></expr>:</case>

<case>case <expr><name>eLF_UNION</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>command_field</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"\"pf."</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>command_field</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><operator>*</operator><name>command_field</name></expr></argument>, <argument><expr><literal type="string">"\"pf."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>eLF_ENUM</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>command_field</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"\"td enum "</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>command_field</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><operator>*</operator><name>command_field</name></expr></argument>, <argument><expr><literal type="string">"\"td enum "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>build_name_field</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name_field</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>name_field</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>name_field</name> <operator>=</operator> <ternary><condition><expr><name>name</name></expr>?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_name_filter</name> <argument_list>(<argument><expr><operator>*</operator><name>name_field</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><operator>*</operator><name>name_field</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>build_flags_format_and_members_field</name><parameter_list>(<parameter><decl><type><name>R_PDB</name> <modifier>*</modifier></type><name>pdb</name></decl></parameter>, <parameter><decl><type><name>ELeafType</name></type> <name>lt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>format_flags_field</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>members_field</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>lt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>eLF_STRUCTURE</name></expr>:</case>

<case>case <expr><name>eLF_UNION</name></expr>:</case>

<expr_stmt><expr><name><name>members_field</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>members_field</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>members_field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>build_format_flags</name> <argument_list>(<argument><expr><name>pdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>*</operator><name>pos</name></expr></argument>, <argument><expr><name>format_flags_field</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>members_field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <operator>*</operator><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>eLF_ENUM</name></expr>:</case>

<expr_stmt><expr><name><name>members_field</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s=0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

members_field[i] = (char *) malloc (sizeof(char) * strlen (name) + 8 + 1 + 1); 

if (!members_field[i]) {

return 0;

}

sprintf (members_field[i], "%s=%08X", name, offset);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>alloc_format_flag_and_member_fields</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>ptmp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>flags_format_field</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>members_amount</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>members_name_field</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it2</name> <init>= <expr><call><name>r_list_iterator</name> <argument_list>(<argument><expr><name>ptmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>r_list_iter_next</name> <argument_list>(<argument><expr><name>it2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>r_list_iter_get</name> <argument_list>(<argument><expr><name>it2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>members_amount</name> <operator>=</operator> <operator>*</operator><name>members_amount</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>members_amount</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>flags_format_field</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><operator>*</operator><name>members_amount</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>*</operator><name>flags_format_field</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>*</operator><name>members_amount</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof <name/></sizeof>*<name>members_name_field</name> <operator>*</operator> <operator>(</operator><operator>*</operator><name>members_amount</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>members_name_field</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>members_amount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>members_name_field</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_types</name><parameter_list>(<parameter><decl><type><name>R_PDB</name> <modifier>*</modifier></type><name>pdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ELeafType</name></type> <name>lt</name> <init>= <expr><name>eLF_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>command_field</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name_field</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>flags_format_field</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>members_name_field</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>members_amount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>sym</name> <init>= <expr><literal type="char">' '</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_first</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SType</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>STypeInfo</name> <modifier>*</modifier></type><name>tf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>it2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>plist</name> <init>= <expr><name><name>pdb</name><operator>-&gt;</operator><name>pdb_streams</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>STpiStream</name> <modifier>*</modifier></type><name>tpi_stream</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>plist</name></expr></argument>, <argument><expr><name>ePDB_STREAM_TPI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tpi_stream</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"There is no tpi stream in current pdb\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"{\"%s\":["</literal></expr></argument>, <argument><expr><literal type="string">"types"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>r_list_iterator</name> <argument_list>(<argument><expr><name><name>tpi_stream</name><operator>-&gt;</operator><name>types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>r_list_iter_next</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>members_amount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>SType</name> <operator>*</operator><operator>)</operator> <call><name>r_list_iter_get</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tf</name> <operator>=</operator> <operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>type_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>lt</name> <operator>=</operator> <name><name>tf</name><operator>-&gt;</operator><name>leaf_type</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tf</name><operator>-&gt;</operator><name>leaf_type</name></name> <operator>==</operator> <name>eLF_STRUCTURE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>tf</name><operator>-&gt;</operator><name>leaf_type</name></name> <operator>==</operator> <name>eLF_UNION</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>tf</name><operator>-&gt;</operator><name>leaf_type</name></name> <operator>==</operator> <name>eLF_ENUM</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tf</name><operator>-&gt;</operator><name>is_fwdref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>tf</name><operator>-&gt;</operator><name>is_fwdref</name></name> <argument_list>(<argument><expr><name>tf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>==</operator> <literal type="char">'j'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>is_first</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>is_first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tf</name><operator>-&gt;</operator><name>get_name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>tf</name><operator>-&gt;</operator><name>get_name</name></name> <argument_list>(<argument><expr><name>tf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tf</name><operator>-&gt;</operator><name>get_val</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>tf</name><operator>-&gt;</operator><name>get_val</name></name> <argument_list>(<argument><expr><name>tf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tf</name><operator>-&gt;</operator><name>get_members</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>tf</name><operator>-&gt;</operator><name>get_members</name></name> <argument_list>(<argument><expr><name>tf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'d'</literal></expr>:</case> <expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s: size 0x%x\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>

<expr_stmt><expr><call><name>build_command_field</name> <argument_list>(<argument><expr><name>lt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>command_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>build_name_field</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>alloc_format_flag_and_member_fields</name> <argument_list>(<argument><expr><name>ptmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags_format_field</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>members_amount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>members_name_field</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<switch>switch <condition>(<expr><name>lt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>eLF_ENUM</name></expr>:</case>

<expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"{\"type\":\"%s\", \"name\":\"%s\",\"%s\":["</literal></expr></argument>,

<argument><expr><literal type="string">"enum"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"enums"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>eLF_STRUCTURE</name></expr>:</case>

<case>case <expr><name>eLF_UNION</name></expr>:</case>

<expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"{\"type\":\"%s\",\"name\":\"%s\",\"size\":%d,\"%s\":["</literal></expr></argument>,

<argument><expr><literal type="string">"structure"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"members"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<continue>continue;</continue>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>it2</name> <operator>=</operator> <call><name>r_list_iterator</name> <argument_list>(<argument><expr><name>ptmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>r_list_iter_next</name> <argument_list>(<argument><expr><name>it2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>==</operator> <literal type="char">'j'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tf</name> <operator>=</operator> <operator>(</operator><name>STypeInfo</name> <operator>*</operator><operator>)</operator> <call><name>r_list_iter_get</name> <argument_list>(<argument><expr><name>it2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tf</name><operator>-&gt;</operator><name>get_name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>tf</name><operator>-&gt;</operator><name>get_name</name></name> <argument_list>(<argument><expr><name>tf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tf</name><operator>-&gt;</operator><name>get_val</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>tf</name><operator>-&gt;</operator><name>get_val</name></name> <argument_list>(<argument><expr><name>tf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tf</name><operator>-&gt;</operator><name>get_print_type</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>tf</name><operator>-&gt;</operator><name>get_print_type</name></name> <argument_list>(<argument><expr><name>tf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" 0x%x: %s type:"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>build_flags_format_and_members_field</name> <argument_list>(<argument><expr><name>pdb</name></expr></argument>, <argument><expr><name>lt</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>flags_format_field</name></expr></argument>, <argument><expr><name>members_name_field</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case> 

<switch>switch <condition>(<expr><name>lt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>eLF_ENUM</name></expr>:</case>

<expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"{\"%s\":\"%s\",\"%s\":%d}"</literal></expr></argument>,

<argument><expr><literal type="string">"enum_name"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"enum_val"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>eLF_STRUCTURE</name></expr>:</case>

<case>case <expr><name>eLF_UNION</name></expr>:</case>

<expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"{\"%s\":\"%s\",\"%s\":\"%s\",\"%s\":%d}"</literal></expr></argument>,

<argument><expr><literal type="string">"member_type"</literal></expr></argument>, <argument><expr><name>type</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><literal type="string">"(member)"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"member_name"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_name_filter</name> <argument_list>(<argument><expr><name>name_field</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s%s "</literal></expr></argument>, <argument><expr><name>command_field</name></expr></argument>, <argument><expr><name>name_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lt</name> <operator>!=</operator> <name>eLF_ENUM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name>flags_format_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%c "</literal></expr></argument>, <argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>sym</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>lt</name> <operator>==</operator> <name>eLF_ENUM</name><operator>)</operator></expr>?</condition><then> <expr><literal type="char">','</literal></expr></then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>members_amount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eq</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>lt</name> <operator>==</operator> <name>eLF_ENUM</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>strchr</name> <argument_list>(<argument><expr><name><name>members_name_field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_name_filter</name> <argument_list>(<argument><expr><name><name>members_name_field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>eq</name> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>members_name_field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <name>members_amount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>lt</name> <operator>==</operator> <name>eLF_ENUM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" };\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"]}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>err</name>:</label>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>command_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>name_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>flags_format_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>members_amount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>members_name_field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>members_name_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"]}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_gvars</name><parameter_list>(<parameter><decl><type><name>R_PDB</name> <modifier>*</modifier></type><name>pdb</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>img_base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SStreamParseFunc</name> <modifier>*</modifier></type><name>omap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sctns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sctns_orig</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>gsym</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SIMAGE_SECTION_HEADER</name> <modifier>*</modifier></type><name>sctn_header</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SGDATAStream</name> <modifier>*</modifier></type><name>gsym_data_stream</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SPEStream</name> <modifier>*</modifier></type><name>pe_stream</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SGlobal</name> <modifier>*</modifier></type><name>gdata</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_first</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>pdb</name><operator>-&gt;</operator><name>pdb_streams2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>r_list_iterator</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>r_list_iter_next</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>SStreamParseFunc</name> <operator>*</operator><operator>)</operator> <call><name>r_list_iter_get</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ePDB_STREAM_SECT__HDR_ORIG</name></expr>:</case>

<expr_stmt><expr><name>sctns_orig</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ePDB_STREAM_SECT_HDR</name></expr>:</case>

<expr_stmt><expr><name>sctns</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ePDB_STREAM_OMAP_FROM_SRC</name></expr>:</case>

<expr_stmt><expr><name>omap</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ePDB_STREAM_GSYM</name></expr>:</case>

<expr_stmt><expr><name>gsym</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gsym</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"There is no global symbols in current PDB.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"{\"%s\":["</literal></expr></argument>, <argument><expr><literal type="string">"gvars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>gsym_data_stream</name> <operator>=</operator> <operator>(</operator><name>SGDATAStream</name> <operator>*</operator><operator>)</operator> <name><name>gsym</name><operator>-&gt;</operator><name>stream</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>omap</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sctns_orig</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pe_stream</name> <operator>=</operator> <operator>(</operator><name>SPEStream</name> <operator>*</operator><operator>)</operator> <name><name>sctns_orig</name><operator>-&gt;</operator><name>stream</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sctns</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pe_stream</name> <operator>=</operator> <operator>(</operator><name>SPEStream</name> <operator>*</operator><operator>)</operator> <name><name>sctns</name><operator>-&gt;</operator><name>stream</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pe_stream</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>r_list_iterator</name> <argument_list>(<argument><expr><name><name>gsym_data_stream</name><operator>-&gt;</operator><name>globals_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>r_list_iter_next</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>gdata</name> <operator>=</operator> <operator>(</operator><name>SGlobal</name> <operator>*</operator><operator>)</operator> <call><name>r_list_iter_get</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sctn_header</name> <operator>=</operator> <call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>pe_stream</name><operator>-&gt;</operator><name>sections_hdrs</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>gdata</name><operator>-&gt;</operator><name>segment</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sctn_header</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>r_bin_demangle_msvc</name> <argument_list>(<argument><expr><name><name>gdata</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>name</name><operator>)</operator></expr>?</condition><then> <expr><name>name</name></expr></then><else>: <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>gdata</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <name>format</name> <operator>!=</operator> <literal type="char">'d'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_name</name> <init>= <expr><name>name</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>r_name_filter2</name> <argument_list>(<argument><expr><name>_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<case>case <expr><literal type="char">'j'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_first</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"{\"%s\":%d,\"%s\":%d,\"%s\":\"%.*s\",\"%s\":\"%s\"}"</literal></expr></argument>,

<argument><expr><literal type="string">"address"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <operator>(</operator><name>img_base</name> <operator>+</operator> <call><name>omap_remap</name> <argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>omap</name><operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><name><name>omap</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>gdata</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>sctn_header</name><operator>-&gt;</operator><name>virtual_address</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,

<argument><expr><literal type="string">"symtype"</literal></expr></argument>, <argument><expr><name><name>gdata</name><operator>-&gt;</operator><name>symtype</name></name></expr></argument>,

<argument><expr><literal type="string">"section_name"</literal></expr></argument>, <argument><expr><name>PDB_SIZEOF_SECTION_NAME</name></expr></argument>, <argument><expr><name><name>sctn_header</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><literal type="string">"gdata_name"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>

<expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"f pdb.%s = 0x%"</literal><name>PFMT64x</name> <literal type="string">" #%d %.*s\n"</literal></expr></argument>,

<argument><expr><name>name</name></expr></argument>,

<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <operator>(</operator><name>img_base</name> <operator>+</operator> <call><name>omap_remap</name> <argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>omap</name><operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><name><name>omap</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>gdata</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>sctn_header</name><operator>-&gt;</operator><name>virtual_address</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,

<argument><expr><name><name>gdata</name><operator>-&gt;</operator><name>symtype</name></name></expr></argument>, <argument><expr><name>PDB_SIZEOF_SECTION_NAME</name></expr></argument>, <argument><expr><name><name>sctn_header</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<default>default:</default>

<expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name> <literal type="string">" %d %.*s %s\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <operator>(</operator><name>img_base</name> <operator>+</operator> <call><name>omap_remap</name> <argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>omap</name><operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><name><name>omap</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>gdata</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>sctn_header</name><operator>-&gt;</operator><name>virtual_address</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,

<argument><expr><name><name>gdata</name><operator>-&gt;</operator><name>symtype</name></name></expr></argument>, <argument><expr><name>PDB_SIZEOF_SECTION_NAME</name></expr></argument>, <argument><expr><name><name>sctn_header</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>is_first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"]}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>init_pdb_parser</name><parameter_list>(<parameter><decl><type><name>R_PDB</name> <modifier>*</modifier></type><name>pdb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>signature</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pdb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"R_PDB structure is incorrect.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pdb</name><operator>-&gt;</operator><name>cb_printf</name></name> <operator>=</operator> <operator>(</operator><name>PrintfCallback</name><operator>)</operator> <name>printf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pdb</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>r_buf_new_slurp</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pdb</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"File reading error/empty file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>signature</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>PDB7_SIGNATURE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>signature</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Memory allocation error.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>r_buf_read</name> <argument_list>(<argument><expr><name><name>pdb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <name>signature</name></expr></argument>, <argument><expr><name>PDB7_SIGNATURE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>!=</operator> <name>PDB7_SIGNATURE_LEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"File reading error.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_buf_seek</name> <argument_list>(<argument><expr><name><name>pdb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>R_BUF_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>signature</name></expr></argument>, <argument><expr><name>PDB7_SIGNATURE</name></expr></argument>, <argument><expr><name>PDB7_SIGNATURE_LEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pdb</name><operator>-&gt;</operator><name>pdb_parse</name></name> <operator>=</operator> <name>pdb7_parse</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdb</name><operator>-&gt;</operator><name>pdb_streams</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdb</name><operator>-&gt;</operator><name>stream_map</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdb</name><operator>-&gt;</operator><name>finish_pdb_parse</name></name> <operator>=</operator> <name>finish_pdb_parse</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdb</name><operator>-&gt;</operator><name>print_types</name></name> <operator>=</operator> <name>print_types</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdb</name><operator>-&gt;</operator><name>print_gvars</name></name> <operator>=</operator> <name>print_gvars</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

</unit>
