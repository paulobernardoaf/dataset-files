<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\pdb\pdb_downloader.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pdb_downloader.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>checkExtract</name><parameter_list>()</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>r_sys_cmd</name> <argument_list>(<argument><expr><literal type="string">"expand -? &gt;nul"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><call><name>r_sys_cmd</name> <argument_list>(<argument><expr><literal type="string">"cabextract -v &gt; /dev/null"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>checkCurl</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>nul</name><index>[]</index></name> <init>= <expr><name>R_SYS_DEVNULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_sys_cmdf</name> <argument_list>(<argument><expr><literal type="string">"curl --version &gt; %s"</literal></expr></argument>, <argument><expr><name>nul</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>download</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SPDBDownloader</name></name> <modifier>*</modifier></type><name>pd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SPDBDownloaderOpt</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name><name>pd</name><operator>-&gt;</operator><name>opt</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>curl_cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>extractor_cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>abspath_to_archive</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>abspath_to_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>archive_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>archive_name_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>symbol_store_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dbg_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>guid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>archive_name_escaped</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>user_agent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>symbol_server</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cmd_ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>dbg_file</name></name> <operator>||</operator> <operator>!</operator><operator>*</operator><name><name>opt</name><operator>-&gt;</operator><name>dbg_file</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkCurl</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>archive_name_len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>dbg_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>archive_name</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>archive_name_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>archive_name</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>archive_name</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>dbg_file</name></name></expr></argument>, <argument><expr><name>archive_name_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>archive_name</name><index>[<expr><name>archive_name_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>symbol_store_path</name> <operator>=</operator> <call><name>r_str_escape</name> <argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>symbol_store_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dbg_file</name> <operator>=</operator> <call><name>r_str_escape</name> <argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>dbg_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>guid</name> <operator>=</operator> <call><name>r_str_escape</name> <argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>archive_name_escaped</name> <operator>=</operator> <call><name>r_str_escape</name> <argument_list>(<argument><expr><name>archive_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>user_agent</name> <operator>=</operator> <call><name>r_str_escape</name> <argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>user_agent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>symbol_server</name> <operator>=</operator> <call><name>r_str_escape</name> <argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>symbol_server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>abspath_to_archive</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s%s%s%s%s%s%s"</literal></expr></argument>,

<argument><expr><name>symbol_store_path</name></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>,

<argument><expr><name>dbg_file</name></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>,

<argument><expr><name>guid</name></expr></argument>, <argument><expr><name>R_SYS_DIR</name></expr></argument>,

<argument><expr><name>archive_name_escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>abspath_to_file</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>abspath_to_archive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>abspath_to_file</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>abspath_to_file</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_file_exists</name> <argument_list>(<argument><expr><name>abspath_to_file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"File already downloaded.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>user_agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>abspath_to_archive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>archive_name_escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>symbol_store_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>dbg_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>archive_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>abspath_to_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>symbol_server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>checkExtract</name> <argument_list>()</argument_list></call> <operator>||</operator> <name><name>opt</name><operator>-&gt;</operator><name>extract</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>curl_cmd</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"curl -sfLA \"%s\" \"%s/%s/%s/%s\" --create-dirs -o \"%s\""</literal></expr></argument>,

<argument><expr><name>user_agent</name></expr></argument>,

<argument><expr><name>symbol_server</name></expr></argument>,

<argument><expr><name>dbg_file</name></expr></argument>,

<argument><expr><name>guid</name></expr></argument>,

<argument><expr><name>archive_name_escaped</name></expr></argument>,

<argument><expr><name>abspath_to_archive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cabextractor</name> <init>= <expr><literal type="string">"expand"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name> <init>= <expr><literal type="string">"%s %s %s"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>extractor_cmd</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>cabextractor</name></expr></argument>,

<argument><expr><name>abspath_to_archive</name></expr></argument>, <argument><expr><name>abspath_to_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cabextractor</name> <init>= <expr><literal type="string">"cabextract"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name> <init>= <expr><literal type="string">"%s -d \"%s\" \"%s\""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>abspath_to_dir</name> <init>= <expr><call><name>r_file_dirname</name> <argument_list>(<argument><expr><name>abspath_to_archive</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>extractor_cmd</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>cabextractor</name></expr></argument>, <argument><expr><name>abspath_to_dir</name></expr></argument>, <argument><expr><name>abspath_to_archive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>abspath_to_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to download compressed pdb in %s\n"</literal></expr></argument>, <argument><expr><name>abspath_to_archive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd_ret</name> <operator>=</operator> <call><name>r_sys_cmd</name> <argument_list>(<argument><expr><name>curl_cmd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name><argument_list>(<argument><expr><literal type="string">"curl exited with error %d\n"</literal></expr></argument>, <argument><expr><name>cmd_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to decompress pdb\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>extract</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cmd_ret</name> <operator>=</operator> <call><name>r_sys_cmd</name> <argument_list>(<argument><expr><name>extractor_cmd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"cab extractor exited with error %d\n"</literal></expr></argument>, <argument><expr><name>cmd_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_file_rm</name> <argument_list>(<argument><expr><name>abspath_to_archive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>curl_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Falling back to uncompressed pdb\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>archive_name_escaped</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>archive_name_escaped</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>curl_cmd</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"curl -sfLA \"%s\" \"%s/%s/%s/%s\" --create-dirs -o \"%s\""</literal></expr></argument>,

<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>user_agent</name></name></expr></argument>,

<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>symbol_server</name></name></expr></argument>,

<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>dbg_file</name></name></expr></argument>,

<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>,

<argument><expr><name>archive_name_escaped</name></expr></argument>,

<argument><expr><name>abspath_to_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to download uncompressed pdb in %s\n"</literal></expr></argument>, <argument><expr><name>abspath_to_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd_ret</name> <operator>=</operator> <call><name>r_sys_cmd</name> <argument_list>(<argument><expr><name>curl_cmd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name><argument_list>(<argument><expr><literal type="string">"curl exited with error %d\n"</literal></expr></argument>, <argument><expr><name>cmd_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>curl_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>abspath_to_archive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>abspath_to_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>archive_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>extractor_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>symbol_store_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>dbg_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>archive_name_escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>user_agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>symbol_server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>init_pdb_downloader</name><parameter_list>(<parameter><decl><type><name>SPDBDownloaderOpt</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>SPDBDownloader</name> <modifier>*</modifier></type><name>pd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>opt</name></name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>SPDBDownloaderOpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pd</name><operator>-&gt;</operator><name>opt</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>download</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot allocate memory for SPDBDownloaderOpt.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>opt</name><operator>-&gt;</operator><name>dbg_file</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>dbg_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>opt</name><operator>-&gt;</operator><name>guid</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>opt</name><operator>-&gt;</operator><name>symbol_server</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>symbol_server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>opt</name><operator>-&gt;</operator><name>user_agent</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>user_agent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>opt</name><operator>-&gt;</operator><name>symbol_store_path</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>symbol_store_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>opt</name><operator>-&gt;</operator><name>extract</name></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>extract</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>download</name></name> <operator>=</operator> <name>download</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>deinit_pdb_downloader</name><parameter_list>(<parameter><decl><type><name>SPDBDownloader</name> <modifier>*</modifier></type><name>pd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>opt</name><operator>-&gt;</operator><name>dbg_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>opt</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>opt</name><operator>-&gt;</operator><name>symbol_server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>opt</name><operator>-&gt;</operator><name>user_agent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>opt</name><operator>-&gt;</operator><name>symbol_store_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>download</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>r_bin_pdb_download</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isradjson</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>actions_done</name></decl></parameter>, <parameter><decl><type><name>SPDBOptions</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SPDBDownloaderOpt</name></type> <name>opt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SPDBDownloader</name></type> <name>pdb_downloader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>r_bin_get_info</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name> <operator>||</operator> <operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>debug_file_name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Can't find debug filename\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>options</name> <operator>||</operator> <operator>!</operator><name><name>options</name><operator>-&gt;</operator><name>symbol_server</name></name> <operator>||</operator> <operator>!</operator><name><name>options</name><operator>-&gt;</operator><name>user_agent</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Can't retrieve pdb configurations\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>dbg_file</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>r_file_basename</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>debug_file_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>guid</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>guid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>symbol_server</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>symbol_server</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>user_agent</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>user_agent</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>symbol_store_path</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>symbol_store_path</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>extract</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>extract</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_pdb_downloader</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pdb_downloader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><name><name>pdb_downloader</name><operator>.</operator><name>download</name></name></expr> ?</condition><then> <expr><call><name><name>pdb_downloader</name><operator>.</operator><name>download</name></name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pdb_downloader</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>isradjson</name> <operator>&amp;&amp;</operator> <name>actions_done</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\"pdb\":{\"file\":\"%s\",\"download\":%s}"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>*</operator><name>actions_done</name></expr> ?</condition><then> <expr><literal type="string">","</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>dbg_file</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"PDB \"%s\" download %s\n"</literal></expr></argument>,

<argument><expr><name><name>opt</name><operator>.</operator><name>dbg_file</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><literal type="string">"success"</literal></expr> </then><else>: <expr><literal type="string">"failed"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>actions_done</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>actions_done</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>deinit_pdb_downloader</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pdb_downloader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
