<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\pdb\stream_pe.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stream_pe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stream_file.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>parse_pe_stream</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>R_STREAM_FILE</name> <modifier>*</modifier></type><name>stream_file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>data_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>read_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SIMAGE_SECTION_HEADER</name> <modifier>*</modifier></type><name>sctn_header</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SPEStream</name> <modifier>*</modifier></type><name>pe_stream</name> <init>= <expr><operator>(</operator><name>SPEStream</name> <operator>*</operator><operator>)</operator> <name>stream</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sctn_header_size</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stream_file_get_size</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stream_file_get_data</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sctn_header_size</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>SIMAGE_SECTION_HEADER</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>ptmp</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pe_stream</name><operator>-&gt;</operator><name>sections_hdrs</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>read_bytes</name> <operator>&lt;</operator> <name>data_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sctn_header</name> <operator>=</operator> <operator>(</operator><name>SIMAGE_SECTION_HEADER</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>sctn_header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sctn_header</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>sctn_header</name></expr></argument>, <argument><expr><name>ptmp</name></expr></argument>, <argument><expr><name>sctn_header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptmp</name> <operator>+=</operator> <name>sctn_header_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>pe_stream</name><operator>-&gt;</operator><name>sections_hdrs</name></name></expr></argument>, <argument><expr><name>sctn_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>read_bytes</name> <operator>+=</operator> <name>sctn_header_size</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_pe_stream</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SPEStream</name> <modifier>*</modifier></type><name>pe_stream</name> <init>= <expr><operator>(</operator><name>SPEStream</name> <operator>*</operator><operator>)</operator> <name>stream</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SIMAGE_SECTION_HEADER</name> <modifier>*</modifier></type><name>sctn_header</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>r_list_iterator</name> <argument_list>(<argument><expr><name><name>pe_stream</name><operator>-&gt;</operator><name>sections_hdrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>r_list_iter_next</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sctn_header</name> <operator>=</operator> <operator>(</operator><name>SIMAGE_SECTION_HEADER</name> <operator>*</operator><operator>)</operator> <call><name>r_list_iter_get</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sctn_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>pe_stream</name><operator>-&gt;</operator><name>sections_hdrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
