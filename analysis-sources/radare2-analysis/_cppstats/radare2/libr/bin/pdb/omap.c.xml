<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\bin\pdb\omap.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"omap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stream_file.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_omap_entry</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>data_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>read_bytes</name></decl></parameter>, <parameter><decl><type><name>SOmapEntry</name> <modifier>*</modifier></type><name>omap_entry</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>curr_read_bytes</name> <init>= <expr><operator>*</operator><name>read_bytes</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>omap_entry</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>SOmapEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>read_bytes</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>SOmapEntry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>*</operator><name>read_bytes</name> <operator>-</operator> <name>curr_read_bytes</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>parse_omap_stream</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>R_STREAM_FILE</name> <modifier>*</modifier></type><name>stream_file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>data_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>curr_read_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>read_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SOmapEntry</name> <modifier>*</modifier></type><name>omap_entry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SOmapStream</name> <modifier>*</modifier></type><name>omap_stream</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stream_file_get_size</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stream_file_get_data</name> <argument_list>(<argument><expr><name>stream_file</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>omap_stream</name> <operator>=</operator> <operator>(</operator><name>SOmapStream</name> <operator>*</operator><operator>)</operator> <name>stream</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>omap_stream</name><operator>-&gt;</operator><name>froms</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>omap_stream</name><operator>-&gt;</operator><name>omap_entries</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptmp</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>read_bytes</name> <operator>&lt;</operator> <name>data_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>omap_entry</name> <operator>=</operator> <operator>(</operator><name>SOmapEntry</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOmapEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>omap_entry</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curr_read_bytes</name> <operator>=</operator> <call><name>parse_omap_entry</name> <argument_list>(<argument><expr><name>ptmp</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_bytes</name></expr></argument>, <argument><expr><name>omap_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>curr_read_bytes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>omap_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptmp</name> <operator>+=</operator> <name>curr_read_bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>omap_stream</name><operator>-&gt;</operator><name>omap_entries</name></name></expr></argument>, <argument><expr><name>omap_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_omap_stream</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SOmapStream</name> <modifier>*</modifier></type><name>omap_stream</name> <init>= <expr><operator>(</operator><name>SOmapStream</name> <operator>*</operator><operator>)</operator> <name>stream</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SOmapEntry</name> <modifier>*</modifier></type><name>omap_entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>r_list_iterator</name> <argument_list>(<argument><expr><name><name>omap_stream</name><operator>-&gt;</operator><name>omap_entries</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>r_list_iter_next</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>omap_entry</name> <operator>=</operator> <operator>(</operator><name>SOmapEntry</name> <operator>*</operator><operator>)</operator> <call><name>r_list_iter_get</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>omap_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>omap_stream</name><operator>-&gt;</operator><name>omap_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>binary_search</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>imin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>imax</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>imid</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>imin</name> <operator>&lt;</operator> <name>imax</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>imid</name> <operator>=</operator> <operator>(</operator><name>imin</name> <operator>+</operator> <name>imax</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>A</name><index>[<expr><name>imid</name></expr>]</index></name> <operator>&lt;</operator> <name>key</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>imin</name> <operator>=</operator> <name>imid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>imax</name> <operator>=</operator> <name>imid</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>imax</name> <operator>==</operator> <name>imin</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>A</name><index>[<expr><name>imin</name></expr>]</index></name> <operator>==</operator> <name>key</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>imin</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>omap_remap</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SOmapStream</name> <modifier>*</modifier></type><name>omap_stream</name> <init>= <expr><operator>(</operator><name>SOmapStream</name> <operator>*</operator><operator>)</operator> <name>stream</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SOmapEntry</name> <modifier>*</modifier></type><name>omap_entry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>omap_stream</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>address</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>omap_stream</name><operator>-&gt;</operator><name>omap_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>omap_stream</name><operator>-&gt;</operator><name>froms</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>omap_stream</name><operator>-&gt;</operator><name>froms</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>omap_stream</name><operator>-&gt;</operator><name>froms</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>r_list_iterator</name> <argument_list>(<argument><expr><name><name>omap_stream</name><operator>-&gt;</operator><name>omap_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>r_list_iter_next</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>omap_entry</name> <operator>=</operator> <operator>(</operator><name>SOmapEntry</name> <operator>*</operator><operator>)</operator> <call><name>r_list_iter_get</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>omap_stream</name><operator>-&gt;</operator><name>froms</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>omap_entry</name><operator>-&gt;</operator><name>from</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>binary_search</name> <argument_list>(<argument><expr><name><name>omap_stream</name><operator>-&gt;</operator><name>froms</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>len</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>omap_stream</name><operator>-&gt;</operator><name>froms</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>!=</operator> <name>address</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>omap_entry</name> <operator>=</operator> <operator>(</operator><name>SOmapEntry</name> <operator>*</operator><operator>)</operator> <call><name>r_list_get_n</name> <argument_list>(<argument><expr><name><name>omap_stream</name><operator>-&gt;</operator><name>omap_entries</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>omap_entry</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>omap_entry</name><operator>-&gt;</operator><name>to</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>omap_entry</name><operator>-&gt;</operator><name>to</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>omap_entry</name><operator>-&gt;</operator><name>to</name></name> <operator>+</operator> <operator>(</operator><name>address</name> <operator>-</operator> <name><name>omap_entry</name><operator>-&gt;</operator><name>from</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

</unit>
