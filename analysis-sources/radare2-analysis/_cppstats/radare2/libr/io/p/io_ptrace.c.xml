<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\io\p\io_ptrace.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_userconf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_io.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_debug.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUGGER</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>__linux__</name> <operator>||</operator> <name>__BSD__</name><operator>)</operator></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ptrace.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opid</name></decl>;</decl_stmt>

}</block></struct></type> <name>RIOPtrace</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIOPTRACE_OPID</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((RIOPtrace*)(x)-&gt;data)-&gt;opid)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIOPTRACE_PID</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((RIOPtrace*)(x)-&gt;data)-&gt;pid)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIOPTRACE_FD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((RIOPtrace*)(x)-&gt;data)-&gt;fd)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>open_pidmem</name> <parameter_list>(<parameter><decl><type><name>RIOPtrace</name> <modifier>*</modifier></type><name>iop</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>R_IO_NFDS</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_IO_NFDS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>errno</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

procpidmem is buggy.. running this sometimes results in ffff

while : ; do r2 -qc 'oo;x' -d ls ; done

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_PROC_PID_MEM</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__waitpid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>st</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>waitpid</name> <argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug_read_raw</name><parameter_list>(<parameter><type><name>io</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_io_ptrace((io), PTRACE_PEEKTEXT, (x), (void *)(y), R_PTRACE_NODATA)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug_write_raw</name><parameter_list>(<parameter><type><name>io</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r_io_ptrace((io), PTRACE_POKEDATA, (x), (void *)(y), (r_ptrace_data_t)(z))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__OpenBSD__</name> <operator>||</operator> <name>__KFBSD__</name></expr></cpp:if>

<typedef>typedef <type><name>int</name></type> <name>ptrace_word</name>;</typedef> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>size_t</name></type> <name>ptrace_word</name>;</typedef> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>debug_os_read_at</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>words</name> <init>= <expr><name>sz</name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>last</name> <init>= <expr><name>sz</name> <operator>%</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>lr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>at</name> <init>= <expr><operator>(</operator><name>ut32</name><operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>addr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>addr</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>words</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><call><name>debug_read_raw</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>at</name><operator>++</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lr</name> <operator>=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><call><name>debug_read_raw</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lr</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>sz</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__read</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_PROC_PID_MEM</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>fd</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name> <operator>||</operator> <operator>!</operator><name><name>desc</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\xff'</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_PROC_PID_MEM</name></expr></cpp:if>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>RIOPTRACE_FD</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RIOPTRACE_PID</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>RIOPTRACE_OPID</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>open_pidmem</name> <argument_list>(<argument><expr><operator>(</operator><name>RIOPtrace</name><operator>*</operator><operator>)</operator><name><name>desc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>RIOPTRACE_FD</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RIOPTRACE_OPID</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>RIOPTRACE_PID</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lseek</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>read</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>ut32</name> <modifier>*</modifier></type><name>aligned_buf</name> <init>= <expr><operator>(</operator><name>ut32</name><operator>*</operator><operator>)</operator><call><name>r_malloc_aligned</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>aligned_buf</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>debug_os_read_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><call><name>RIOPTRACE_PID</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>*</operator><operator>)</operator><name>aligned_buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>aligned_buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_free_aligned</name> <argument_list>(<argument><expr><name>aligned_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ptrace_write_at</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>pbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ptrace_word</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>ptrace_word</name><operator>*</operator><operator>)</operator><name>pbuf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>words</name> <init>= <expr><name>sz</name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ptrace_word</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>last</name> <init>= <expr><name>sz</name> <operator>%</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ptrace_word</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrace_word</name></type> <name>x</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>at</name> <init>= <expr><operator>(</operator><name>ptrace_word</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>addr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrace_word</name></type> <name>lr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>addr</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>words</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>debug_write_raw</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>at</name><operator>++</operator></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lr</name> <operator>=</operator> <call><name>debug_read_raw</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>lr</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>debug_write_raw</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>at</name></expr></argument>, <argument><expr><name>lr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>sz</name> <operator>-</operator> <name>last</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>sz</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__write</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name> <operator>||</operator> <operator>!</operator><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ptrace_write_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><call><name>RIOPTRACE_PID</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>open_pidmem</name> <parameter_list>(<parameter><decl><type><name>RIOPtrace</name> <modifier>*</modifier></type><name>iop</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_PROC_PID_MEM</name></expr></cpp:if>

<decl_stmt><decl><type><name>char</name></type> <name><name>pidmem</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>pidmem</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>pidmem</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/proc/%d/mem"</literal></expr></argument>, <argument><expr><name><name>iop</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iop</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>open</name> <argument_list>(<argument><expr><name>pidmem</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iop</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>iop</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>open</name> <argument_list>(<argument><expr><name>pidmem</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (iop-&gt;fd == -1)

eprintf ("Warning: Cannot open /proc/%d/mem. "

"Fallback to ptrace io.\n", iop-&gt;pid);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>iop</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>close_pidmem</name><parameter_list>(<parameter><decl><type><name>RIOPtrace</name> <modifier>*</modifier></type><name>iop</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>iop</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>iop</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iop</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__plugin_open</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>many</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"ptrace://"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"attach://"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_pid_already_attached</name> <parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>siginfo_t</name> <modifier>*</modifier></type><name>sig</name> <init>= <expr><operator>(</operator><name>siginfo_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal> <operator>!=</operator> <call><name>r_io_ptrace</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>PTRACE_GETSIGINFO</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><name><name>struct</name> <name>ptrace_lwpinfo</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>(</operator>struct <name>ptrace_lwpinfo</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal> <operator>!=</operator> <call><name>r_io_ptrace</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>PT_LWPINFO</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>false</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RIODesc</name> <modifier>*</modifier></type><name>__open</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>siginfo_t</name></type> <name>sig</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><name><name>struct</name> <name>ptrace_lwpinfo</name></name></type> <name>sig</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>sig</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__plugin_open</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pid</name> <init>= <expr><call><name>atoi</name> <argument_list>(<argument><expr><name>file</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_pid_already_attached</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sig</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_io_ptrace</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>PTRACE_ATTACH</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ptrace_attach: Operation not permitted\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<switch>switch <condition>(<expr><name>errno</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>EPERM</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ptrace_attach: Operation not permitted\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EINVAL</name></expr>:</case>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"ptrace: Cannot attach"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ERRNO: %d (EINVAL)\n"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>__waitpid</name> <argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error in waitpid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RIOPtrace</name> <modifier>*</modifier></type><name>riop</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RIOPtrace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>riop</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>riop</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name><name>riop</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>open_pidmem</name> <argument_list>(<argument><expr><name>riop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>r_io_desc_new</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_io_plugin_ptrace</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>rw</name> <operator>|</operator> <name>R_PERM_X</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>riop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_sys_pid_to_path</name> <argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>desc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>__lseek</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>whence</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_IO_SEEK_SET</name></expr>:</case>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_IO_SEEK_CUR</name></expr>:</case>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_IO_SEEK_END</name></expr>:</case>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>ST64_MAX</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__close</name><parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>, <decl><type ref="prev"/><name>fd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name> <operator>||</operator> <operator>!</operator><name><name>desc</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>RIOPTRACE_PID</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>RIOPTRACE_FD</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RIOPtrace</name> <modifier>*</modifier></type><name>riop</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>ret</name> <init>= <expr><call><name>r_io_ptrace</name> <argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>PTRACE_DETACH</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>riop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__system</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIOPtrace</name> <modifier>*</modifier></type><name>iop</name> <init>= <expr><operator>(</operator><name>RIOPtrace</name><operator>*</operator><operator>)</operator><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Usage: =!cmd args\n"</literal>

<literal type="string">" =!ptrace - use ptrace io\n"</literal>

<literal type="string">" =!mem - use /proc/pid/mem io if possible\n"</literal>

<literal type="string">" =!pid - show targeted pid\n"</literal>

<literal type="string">" =!pid &lt;#&gt; - select new pid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"ptrace"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close_pidmem</name> <argument_list>(<argument><expr><name>iop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"mem"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>open_pidmem</name> <argument_list>(<argument><expr><name>iop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"pid"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>iop</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cmd</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pid</name> <init>= <expr><call><name>atoi</name> <argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pid</name> <operator>!=</operator> <name><name>iop</name><operator>-&gt;</operator><name>pid</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_io_ptrace</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>PTRACE_ATTACH</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iop</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name><name>iop</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name><name>iop</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>iop</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Try: '=!pid'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__getpid</name> <parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIOPtrace</name> <modifier>*</modifier></type><name>iop</name> <init>= <expr><operator>(</operator><name>RIOPtrace</name> <operator>*</operator><operator>)</operator><name><name>fd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iop</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>iop</name><operator>-&gt;</operator><name>pid</name></name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RIOPlugin</name></type> <name>r_io_plugin_ptrace</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ptrace"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Ptrace and /proc/pid/mem (if available) io plugin"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,

<expr><operator>.</operator><name>uris</name> <operator>=</operator> <literal type="string">"ptrace://,attach://"</literal></expr>,

<expr><operator>.</operator><name>open</name> <operator>=</operator> <name>__open</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>__close</name></expr>,

<expr><operator>.</operator><name>read</name> <operator>=</operator> <name>__read</name></expr>,

<expr><operator>.</operator><name>check</name> <operator>=</operator> <name>__plugin_open</name></expr>,

<expr><operator>.</operator><name>lseek</name> <operator>=</operator> <name>__lseek</name></expr>,

<expr><operator>.</operator><name>system</name> <operator>=</operator> <name>__system</name></expr>,

<expr><operator>.</operator><name>write</name> <operator>=</operator> <name>__write</name></expr>,

<expr><operator>.</operator><name>getpid</name> <operator>=</operator> <name>__getpid</name></expr>,

<expr><operator>.</operator><name>gettid</name> <operator>=</operator> <name>__getpid</name></expr>,

<expr><operator>.</operator><name>isdbg</name> <operator>=</operator> <name>true</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name><name>struct</name> <name>r_io_plugin_t</name></name></type> <name>r_io_plugin_ptrace</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_IO</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_io_plugin_ptrace</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
