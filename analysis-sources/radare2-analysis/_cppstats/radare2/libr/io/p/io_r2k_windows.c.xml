<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\io\p\io_r2k_windows.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"io_r2k_windows.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>gHandleDriver</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>BOOL</name></type> <name>InstallService</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>rutaDriver</name></decl></parameter>, <parameter><decl><type><name>LPCTSTR</name></type> <name>lpServiceName</name></decl></parameter>, <parameter><decl><type><name>LPCTSTR</name></type> <name>lpDisplayName</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hService</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>ret</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hSCManager</name> <init>= <expr><call><name>OpenSCManager</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SC_MANAGER_CREATE_SERVICE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hSCManager</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>LPTSTR</name></type> <name>rutaDriver_</name> <init>= <expr><call><name>r_sys_conv_utf8_to_win</name> <argument_list>(<argument><expr><name>rutaDriver</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hService</name> <operator>=</operator> <call><name>CreateService</name> <argument_list>(<argument><expr><name>hSCManager</name></expr></argument>, <argument><expr><name>lpServiceName</name></expr></argument>, <argument><expr><name>lpDisplayName</name></expr></argument>, <argument><expr><name>SERVICE_START</name> <operator>|</operator> <name>DELETE</name> <operator>|</operator> <name>SERVICE_STOP</name></expr></argument>, <argument><expr><name>SERVICE_KERNEL_DRIVER</name></expr></argument>, <argument><expr><name>SERVICE_DEMAND_START</name></expr></argument>, <argument><expr><name>SERVICE_ERROR_IGNORE</name></expr></argument>, <argument><expr><name>rutaDriver_</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hService</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CloseServiceHandle</name> <argument_list>(<argument><expr><name>hService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>rutaDriver_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseServiceHandle</name> <argument_list>(<argument><expr><name>hSCManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name></type> <name>RemoveService</name><parameter_list>(<parameter><decl><type><name>LPCTSTR</name></type> <name>lpServiceName</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hService</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>ret</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hSCManager</name> <init>= <expr><call><name>OpenSCManager</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SC_MANAGER_CREATE_SERVICE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hSCManager</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hService</name> <operator>=</operator> <call><name>OpenService</name> <argument_list>(<argument><expr><name>hSCManager</name></expr></argument>, <argument><expr><name>lpServiceName</name></expr></argument>, <argument><expr><name>SERVICE_START</name> <operator>|</operator> <name>DELETE</name> <operator>|</operator> <name>SERVICE_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hService</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DeleteService</name> <argument_list>(<argument><expr><name>hService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseServiceHandle</name> <argument_list>(<argument><expr><name>hService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CloseServiceHandle</name> <argument_list>(<argument><expr><name>hSCManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>BOOL</name></type> <name>StartStopService</name><parameter_list>(<parameter><decl><type><name>LPCTSTR</name></type> <name>lpServiceName</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>bStop</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hSCManager</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hService</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SERVICE_STATUS</name></type> <name>ssStatus</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>ret</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hSCManager</name> <operator>=</operator> <call><name>OpenSCManager</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SC_MANAGER_CREATE_SERVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hSCManager</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hService</name> <operator>=</operator> <call><name>OpenService</name> <argument_list>(<argument><expr><name>hSCManager</name></expr></argument>, <argument><expr><name>lpServiceName</name></expr></argument>, <argument><expr><name>SERVICE_START</name> <operator>|</operator> <name>DELETE</name> <operator>|</operator> <name>SERVICE_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hService</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bStop</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>StartService</name> <argument_list>(<argument><expr><name>hService</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Service started [OK]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Service started [FAIL]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ControlService</name> <argument_list>(<argument><expr><name>hService</name></expr></argument>, <argument><expr><name>SERVICE_CONTROL_STOP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssStatus</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Service Stopped [OK]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Service Stopped [FAIL]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>CloseServiceHandle</name> <argument_list>(<argument><expr><name>hService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteService</name> <argument_list>(<argument><expr><name>hService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CloseServiceHandle</name> <argument_list>(<argument><expr><name>hSCManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name></type> <name>InitDriver</name><parameter_list>(<parameter><decl><type><name>VOID</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>genericFlags</name> <init>= <expr><name>GENERIC_READ</name> <operator>|</operator> <name>GENERIC_WRITE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>shareFlags</name> <init>= <expr><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>gHandleDriver</name> <operator>=</operator> <call><name>CreateFile</name> <argument_list>(<argument><expr><call><name>TEXT</name> <argument_list>(<argument><expr><name>R2K_DEVICE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>genericFlags</name></expr></argument>, <argument><expr><name>shareFlags</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPEN_ALWAYS</name></expr></argument>, <argument><expr><name>FILE_ATTRIBUTE_DIRECTORY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>gHandleDriver</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetFileName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pfile</name> <init>= <expr><name>path</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>pfile</name> <operator>&gt;</operator> <name>path</name></expr>;</condition> <incr><expr><name>pfile</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>pfile</name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>pfile</name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pfile</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>pfile</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>GetSystemModules</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>bRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPVOID</name></type> <name>lpBufMods</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bufmodsize</name> <init>= <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>gHandleDriver</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lpBufMods</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>bufmodsize</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[r2k] GetSystemModules: Error can't allocate %i bytes of memory.\n"</literal></expr></argument>, <argument><expr><name>bufmodsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DeviceIoControl</name> <argument_list>(<argument><expr><name>gHandleDriver</name></expr></argument>, <argument><expr><name>IOCTL_GET_SYSTEM_MODULES</name></expr></argument>, <argument><expr><name>lpBufMods</name></expr></argument>, <argument><expr><name>bufmodsize</name></expr></argument>, <argument><expr><name>lpBufMods</name></expr></argument>, <argument><expr><name>bufmodsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bRead</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>PRTL_PROCESS_MODULES</name></type> <name>pm</name> <init>= <expr><operator>(</operator><name>PRTL_PROCESS_MODULES</name><operator>)</operator><name>lpBufMods</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PRTL_PROCESS_MODULE_INFORMATION</name></type> <name>pMod</name> <init>= <expr><name><name>pm</name><operator>-&gt;</operator><name>Modules</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pm</name><operator>-&gt;</operator><name>NumberOfModules</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name> <init>= <expr><call><name>GetFileName</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name><name>pMod</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>FullPathName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"f nt.%s 0x%x @ 0x%p\n"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name><name>pMod</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ImageSize</name></expr></argument>, <argument><expr><name><name>pMod</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ImageBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Driver not initialized.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ReadKernelMemory</name> <parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>bRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPVOID</name></type> <name>lpBuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bufsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PPA</name></type> <name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\xff'</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>gHandleDriver</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bufsize</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>PA</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lpBuffer</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>bufsize</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[r2k] ReadKernelMemory: Error can't allocate %i bytes of memory.\n"</literal></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>PPA</name><operator>)</operator><name>lpBuffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>address</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DeviceIoControl</name> <argument_list>(<argument><expr><name>gHandleDriver</name></expr></argument>, <argument><expr><name>IOCTL_READ_KERNEL_MEM</name></expr></argument>, <argument><expr><name>lpBuffer</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><name>lpBuffer</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bRead</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lpBuffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>lpBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Driver not initialized.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>WriteKernelMemory</name> <parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>bRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPVOID</name></type> <name>lpBuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bufsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PPA</name></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>gHandleDriver</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bufsize</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>PA</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lpBuffer</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>bufsize</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[r2k] WriteKernelMemory: Error can't allocate %i bytes of memory.\n"</literal></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>PPA</name><operator>)</operator><name>lpBuffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>address</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DeviceIoControl</name> <argument_list>(<argument><expr><name>gHandleDriver</name></expr></argument>, <argument><expr><name>IOCTL_WRITE_KERNEL_MEM</name></expr></argument>, <argument><expr><name>lpBuffer</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><name>lpBuffer</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bRead</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[r2k] WriteKernelMemory: Error IOCTL_WRITE_KERNEL_MEM.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>lpBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Driver not initialized.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>Init</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>driverPath</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>BOOL</name></type> <name>ret</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>InitDriver</name> <argument_list>()</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>driverPath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>StartStopService</name> <argument_list>(<argument><expr><call><name>TEXT</name> <argument_list>(<argument><expr><literal type="string">"r2k"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RemoveService</name> <argument_list>(<argument><expr><call><name>TEXT</name> <argument_list>(<argument><expr><literal type="string">"r2k"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Installing driver: %s\n"</literal></expr></argument>, <argument><expr><name>driverPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>InstallService</name> <argument_list>(<argument><expr><name>driverPath</name></expr></argument>, <argument><expr><call><name>TEXT</name> <argument_list>(<argument><expr><literal type="string">"r2k"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TEXT</name> <argument_list>(<argument><expr><literal type="string">"r2k"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>StartStopService</name> <argument_list>(<argument><expr><call><name>TEXT</name> <argument_list>(<argument><expr><literal type="string">"r2k"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>InitDriver</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error initalizating driver, try r2k://pathtodriver\nEx: radare2.exe r2k://c:\\r2k.sys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Driver present [OK]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
