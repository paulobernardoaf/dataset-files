<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\io\p\io_qnx.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_io.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_socket.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IRAPI</name></cpp:macro> <cpp:value>static inline</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libqnxr.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>libqnxr_t</name></type> <name>desc</name></decl>;</decl_stmt>

}</block></struct></type> <name>RIOQnx</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>libqnxr_t</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RIODesc</name> <modifier>*</modifier></type><name>rioqnx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__plugin_open</name> <parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>many</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"qnx://"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut64</name></type> <name>c_addr</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut32</name></type> <name>c_size</name> <init>= <expr><name>UT32_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut8</name> <modifier>*</modifier></type><name>c_buff</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SILLY_CACHE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>debug_qnx_read_at</name> <parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>size_max</name> <init>= <expr><literal type="number">500</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>packets</name> <init>= <expr><name>sz</name> <operator>/</operator> <name>size_max</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>last</name> <init>= <expr><name>sz</name> <operator>%</operator> <name>size_max</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c_buff</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>!=</operator> <name>UT64_MAX</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>==</operator> <name>c_addr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>c_buff</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>sz</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>addr</name> <operator>&gt;=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>packets</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>qnxr_read_memory</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>size_max</name></expr></argument>, <argument><expr><operator>(</operator><name>buf</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>size_max</name><operator>)</operator></expr></argument>, <argument><expr><name>size_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>qnxr_read_memory</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>size_max</name></expr></argument>, <argument><expr><operator>(</operator><name>buf</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>size_max</name><operator>)</operator></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c_addr</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c_size</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SILLY_CACHE</name></expr></cpp:if>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>c_buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c_buff</name> <operator>=</operator> <call><name>r_mem_dup</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>sz</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>debug_qnx_write_at</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>size_max</name> <init>= <expr><literal type="number">500</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>packets</name> <init>= <expr><name>sz</name> <operator>/</operator> <name>size_max</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>last</name> <init>= <expr><name>sz</name> <operator>%</operator> <name>size_max</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>addr</name> <operator>&gt;=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c_addr</name> <operator>!=</operator> <name>UT64_MAX</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&gt;=</operator> <name>c_addr</name> <operator>&amp;&amp;</operator> <name>c_addr</name> <operator>+</operator> <name>sz</name> <operator>&lt;</operator> <operator>(</operator><name>c_addr</name> <operator>+</operator> <name>c_size</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>c_buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c_addr</name> <operator>=</operator> <name>UT64_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>packets</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>qnxr_write_memory</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>size_max</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>size_max</name><operator>)</operator></expr></argument>, <argument><expr><name>size_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>qnxr_write_memory</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>size_max</name></expr></argument>,

<argument><expr><operator>(</operator><name>buf</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>size_max</name><operator>)</operator></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>sz</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RIODesc</name> <modifier>*</modifier></type><name>__open</name> <parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIOQnx</name> <modifier>*</modifier></type><name>rioq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>host</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>port</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__plugin_open</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rioqnx</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>rioqnx</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>file</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>host</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>port</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Port not specified. Please use qnx://[host]:[port]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>port</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_sandbox_enable</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"sandbox: Cannot use network\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rioq</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RIOQnx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>qnxr_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>rioq</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_port</name> <init>= <expr><call><name>atoi</name> <argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>qnxr_connect</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>rioq</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>i_port</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <operator>&amp;</operator><name><name>rioq</name><operator>-&gt;</operator><name>desc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rioqnx</name> <operator>=</operator> <call><name>r_io_desc_new</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_io_plugin_qnx</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>rioq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rioqnx</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"qnx.io.open: Cannot connect to host.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>rioq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__write</name> <parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>debug_qnx_write_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>__lseek</name> <parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>offset</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__read</name> <parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>debug_qnx_read_at</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__close</name> <parameter_list>(<parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__system</name> <parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RIOPlugin</name></type> <name>r_io_plugin_qnx</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"qnx"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Attach to QNX pdebug instance"</literal></expr>,

<expr><operator>.</operator><name>uris</name> <operator>=</operator> <literal type="string">"qnx://"</literal></expr>,

<expr><operator>.</operator><name>open</name> <operator>=</operator> <name>__open</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>__close</name></expr>,

<expr><operator>.</operator><name>read</name> <operator>=</operator> <name>__read</name></expr>,

<expr><operator>.</operator><name>write</name> <operator>=</operator> <name>__write</name></expr>,

<expr><operator>.</operator><name>check</name> <operator>=</operator> <name>__plugin_open</name></expr>,

<expr><operator>.</operator><name>lseek</name> <operator>=</operator> <name>__lseek</name></expr>,

<expr><operator>.</operator><name>system</name> <operator>=</operator> <name>__system</name></expr>,

<expr><operator>.</operator><name>isdbg</name> <operator>=</operator> <name>true</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_IO</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_io_plugin_qnx</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
