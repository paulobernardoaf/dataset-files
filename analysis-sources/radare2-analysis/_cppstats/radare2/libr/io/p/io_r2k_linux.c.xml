<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\io\p\io_r2k_linux.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNU__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"io_r2k_linux.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fset</name><parameter_list>(<parameter><type><name>num</name></type></parameter>, <parameter><type><name>shift</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((num) &amp; (((ut64) 1) &lt;&lt; (shift))) == 0) ? 0 : 1)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__i386__</name> <operator>||</operator> <name>__x86_64__</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>x86_ctrl_reg_pretty_print</name> <parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r2k_control_reg</name></name></type> <name>ctrl</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"CR0: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>ctrl</name><operator>.</operator><name>cr0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" [*] PG: %d\n"</literal>

<literal type="string">" [*] CD: %d\n"</literal>

<literal type="string">" [*] NW: %d\n"</literal>

<literal type="string">" [*] AM: %d\n"</literal>

<literal type="string">" [*] WP: %d\n"</literal>

<literal type="string">" [*] NE: %d\n"</literal>

<literal type="string">" [*] ET: %d\n"</literal>

<literal type="string">" [*] TS: %d\n"</literal>

<literal type="string">" [*] EM: %d\n"</literal>

<literal type="string">" [*] MP: %d\n"</literal>

<literal type="string">" [*] PE: %d\n"</literal></expr></argument>,

<argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr0</name></name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr0</name></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr0</name></name></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr0</name></name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr0</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr0</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr0</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr0</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr0</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr0</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr0</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"CR2: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>ctrl</name><operator>.</operator><name>cr2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"Page-Fault Linear Address: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>ctrl</name><operator>.</operator><name>cr2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"CR3: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>ctrl</name><operator>.</operator><name>cr3</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" [*] Page-Directory Base: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal>

<literal type="string">" [*] PCD: %d\n"</literal>

<literal type="string">" [*] PWT: %d\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>ctrl</name><operator>.</operator><name>cr3</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xfffffffffffff000</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr3</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr3</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"CR4: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>ctrl</name><operator>.</operator><name>cr4</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" [*] PKE: %d\n"</literal>

<literal type="string">" [*] SMAP: %d\n"</literal>

<literal type="string">" [*] SMEP: %d\n"</literal>

<literal type="string">" [*] OSXSAVE: %d\n"</literal>

<literal type="string">" [*] PCIDE: %d\n"</literal>

<literal type="string">" [*] FSGSBASE: %d\n"</literal>

<literal type="string">" [*] SMXE: %d\n"</literal>

<literal type="string">" [*] VMXE: %d\n"</literal>

<literal type="string">" [*] UMIP: %d\n"</literal>

<literal type="string">" [*] OSXMMEXCPT: %d\n"</literal>

<literal type="string">" [*] OSFXSR: %d\n"</literal>

<literal type="string">" [*] PCE: %d\n"</literal>

<literal type="string">" [*] PGE: %d\n"</literal>

<literal type="string">" [*] MCE: %d\n"</literal>

<literal type="string">" [*] PAE: %d\n"</literal>

<literal type="string">" [*] PSE: %d\n"</literal>

<literal type="string">" [*] DE: %d\n"</literal>

<literal type="string">" [*] TSD: %d\n"</literal>

<literal type="string">" [*] PVI: %d\n"</literal>

<literal type="string">" [*] VME: %d\n"</literal></expr></argument>,

<argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr4</name></name></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr4</name></name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr4</name></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr4</name></name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr4</name></name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr4</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr4</name></name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr4</name></name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr4</name></name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr4</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr4</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr4</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr4</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr4</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr4</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr4</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr4</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr4</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr4</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>cr4</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__x86_64__</name></expr></cpp:if>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"CR8: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>ctrl</name><operator>.</operator><name>cr8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" [*] TPL: %d\n"</literal></expr></argument>, <argument><expr><name><name>ctrl</name><operator>.</operator><name>cr8</name></name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__arm__</name></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>arm_ctrl_reg_pretty_print</name> <parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r2k_control_reg</name></name></type> <name>ctrl</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"TTBR0: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>ctrl</name><operator>.</operator><name>ttbr0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" [*] Translation table base 0: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal>

<literal type="string">" [*] UNP/SBZ: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal>

<literal type="string">" [*] RGN: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal>

<literal type="string">" [*] P: %d\n"</literal>

<literal type="string">" [*] S: %d\n"</literal>

<literal type="string">" [*] C: %d\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>ctrl</name><operator>.</operator><name>ttbr0</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0xffffffff</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">14</literal> <operator>-</operator> <operator>(</operator><name><name>ctrl</name><operator>.</operator><name>ttbcr</name></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">14</literal> <operator>-</operator> <operator>(</operator><name><name>ctrl</name><operator>.</operator><name>ttbcr</name></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>ctrl</name><operator>.</operator><name>ttbr0</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">13</literal> <operator>-</operator> <operator>(</operator><name><name>ctrl</name><operator>.</operator><name>ttbcr</name></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>ctrl</name><operator>.</operator><name>ttbr0</name></name> <operator>&amp;</operator> <literal type="number">0x18</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>ttbr0</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>ttbr0</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>ttbr0</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"TTBR1: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>ctrl</name><operator>.</operator><name>ttbr1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" [*] Translation table base 1: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal>

<literal type="string">" [*] UNP/SBZ: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal>

<literal type="string">" [*] RGN: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal>

<literal type="string">" [*] P: %d\n"</literal>

<literal type="string">" [*] S: %d\n"</literal>

<literal type="string">" [*] C: %d\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>ctrl</name><operator>.</operator><name>ttbr1</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0xffffffff</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>ctrl</name><operator>.</operator><name>ttbr1</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">13</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>ctrl</name><operator>.</operator><name>ttbr1</name></name> <operator>&amp;</operator> <literal type="number">0x18</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>ttbr1</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>ttbr1</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>ttbr1</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"TTBCR: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>ctrl</name><operator>.</operator><name>ttbcr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" [*] N: %d\n"</literal></expr></argument>, <argument><expr><name><name>ctrl</name><operator>.</operator><name>ttbcr</name></name> <operator>&amp;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"C1: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>ctrl</name><operator>.</operator><name>c1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" [*] AFE: %d\n"</literal>

<literal type="string">" [*] TRE: %d\n"</literal>

<literal type="string">" [*] EE: %d\n"</literal>

<literal type="string">" [*] VE: %d\n"</literal>

<literal type="string">" [*] XP: %d\n"</literal>

<literal type="string">" [*] U: %d\n"</literal>

<literal type="string">" [*] FI: %d\n"</literal>

<literal type="string">" [*] IT: %d\n"</literal>

<literal type="string">" [*] DT: %d\n"</literal>

<literal type="string">" [*] L4: %d\n"</literal>

<literal type="string">" [*] RR: %d\n"</literal>

<literal type="string">" [*] V: %d\n"</literal>

<literal type="string">" [*] I: %d\n"</literal>

<literal type="string">" [*] Z: %d\n"</literal>

<literal type="string">" [*] F: %d\n"</literal>

<literal type="string">" [*] R: %d\n"</literal>

<literal type="string">" [*] S: %d\n"</literal>

<literal type="string">" [*] B: %d\n"</literal>

<literal type="string">" [*] W: %d\n"</literal>

<literal type="string">" [*] C: %d\n"</literal>

<literal type="string">" [*] A: %d\n"</literal>

<literal type="string">" [*] M: %d\n"</literal></expr></argument>,

<argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>c1</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"C3: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>ctrl</name><operator>.</operator><name>c3</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__arm64__</name> <operator>||</operator> <name>__aarch64__</name></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>arm64_ctrl_reg_pretty_print</name> <parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r2k_control_reg</name></name></type> <name>ctrl</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"SCTLR_EL1: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ctrl</name><operator>.</operator><name>sctlr_el1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" [*] UCI: %d\n"</literal>

<literal type="string">" [*] EE: %d\n"</literal>

<literal type="string">" [*] E0E: %d\n"</literal>

<literal type="string">" [*] WXN: %d\n"</literal>

<literal type="string">" [*] nTWE: %d\n"</literal>

<literal type="string">" [*] nTWI: %d\n"</literal>

<literal type="string">" [*] UCT: %d\n"</literal>

<literal type="string">" [*] DZE: %d\n"</literal>

<literal type="string">" [*] I: %d\n"</literal>

<literal type="string">" [*] UMA: %d\n"</literal>

<literal type="string">" [*] SED: %d\n"</literal>

<literal type="string">" [*] ITD: %d\n"</literal>

<literal type="string">" [*] THEE: %d\n"</literal>

<literal type="string">" [*] CP15BEN: %d\n"</literal>

<literal type="string">" [*] SAO: %d\n"</literal>

<literal type="string">" [*] SA: %d\n"</literal>

<literal type="string">" [*] C: %d\n"</literal>

<literal type="string">" [*] A: %d\n"</literal>

<literal type="string">" [*] M: %d\n"</literal></expr></argument>,

<argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>sctlr_el1</name></name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>sctlr_el1</name></name></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>sctlr_el1</name></name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>sctlr_el1</name></name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>sctlr_el1</name></name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>sctlr_el1</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>sctlr_el1</name></name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>sctlr_el1</name></name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>sctlr_el1</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>sctlr_el1</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>sctlr_el1</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>sctlr_el1</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>sctlr_el1</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>sctlr_el1</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>sctlr_el1</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>sctlr_el1</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>sctlr_el1</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>sctlr_el1</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>sctlr_el1</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"TTBR0_EL1: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ctrl</name><operator>.</operator><name>ttbr0_el1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" [*] ASID [63:48]: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal>

<literal type="string">" [*] BADDR [47:10]: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name><name>ctrl</name><operator>.</operator><name>ttbr0_el1</name></name> <operator>&amp;</operator> <literal type="number">0xffff000000000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>ctrl</name><operator>.</operator><name>ttbr0_el1</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">47</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"TTBR1_EL1: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ctrl</name><operator>.</operator><name>ttbr1_el1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" [*] ASID [63:48]: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal>

<literal type="string">" [*] BADDR [47:10]: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name><name>ctrl</name><operator>.</operator><name>ttbr1_el1</name></name> <operator>&amp;</operator> <literal type="number">0xffff000000000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>ctrl</name><operator>.</operator><name>ttbr1_el1</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">47</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"TCR_EL1: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ctrl</name><operator>.</operator><name>tcr_el1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">" [*] TBI1: %d\n"</literal>

<literal type="string">" [*] TBI0: %d\n"</literal>

<literal type="string">" [*] AS: %d\n"</literal>

<literal type="string">" [*] IPS: %d\n"</literal>

<literal type="string">" [*] TG1: %d\n"</literal>

<literal type="string">" [*] SH1: %d\n"</literal>

<literal type="string">" [*] ORGN1: %d\n"</literal>

<literal type="string">" [*] IRGN1: %d\n"</literal>

<literal type="string">" [*] EPD1: %d\n"</literal>

<literal type="string">" [*] A1: %d\n"</literal>

<literal type="string">" [*] T1SZ: %d\n"</literal>

<literal type="string">" [*] TG0: %d\n"</literal>

<literal type="string">" [*] SH0: %d\n"</literal>

<literal type="string">" [*] ORGN0: %d\n"</literal>

<literal type="string">" [*] IRGN0: %d\n"</literal>

<literal type="string">" [*] EPD0: %d\n"</literal>

<literal type="string">" [*] T0SZ: %d\n"</literal></expr></argument>,

<argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>tcr_el1</name></name></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>tcr_el1</name></name></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>tcr_el1</name></name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name><name>ctrl</name><operator>.</operator><name>tcr_el1</name></name> <operator>&amp;</operator> <literal type="number">0x700000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>tcr_el1</name></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name><name>ctrl</name><operator>.</operator><name>tcr_el1</name></name> <operator>&amp;</operator> <literal type="number">0x30000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28</literal></expr></argument>,

<argument><expr><operator>(</operator><name><name>ctrl</name><operator>.</operator><name>tcr_el1</name></name> <operator>&amp;</operator> <literal type="number">0xc000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">26</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>ctrl</name><operator>.</operator><name>tcr_el1</name></name> <operator>&amp;</operator> <literal type="number">0x3000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>tcr_el1</name></name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>tcr_el1</name></name></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name><name>ctrl</name><operator>.</operator><name>tcr_el1</name></name> <operator>&amp;</operator> <literal type="number">0x3f0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>tcr_el1</name></name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name><name>ctrl</name><operator>.</operator><name>tcr_el1</name></name> <operator>&amp;</operator> <literal type="number">0x3000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>ctrl</name><operator>.</operator><name>tcr_el1</name></name> <operator>&amp;</operator> <literal type="number">0xc00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>ctrl</name><operator>.</operator><name>tcr_el1</name></name> <operator>&amp;</operator> <literal type="number">0x300</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>,

<argument><expr><call><name>fset</name> <argument_list>(<argument><expr><name><name>ctrl</name><operator>.</operator><name>tcr_el1</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name><name>ctrl</name><operator>.</operator><name>tcr_el1</name></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>getargpos</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>buf</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>pos</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_str_ichr</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>getvalue</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>getargpos</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>strtoul</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_help</name> <parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p_usage</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cmd_len</name> <init>= <expr><ternary><condition><expr><name>cmd</name></expr> ?</condition><then> <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>usage</name> <init>= <expr><literal type="string">"Usage: \\[MprRw][lpP] [args...]"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>help_msg</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"\\dm Print kernel memory map (or process if r2k.io==1)"</literal></expr>,

<expr><literal type="string">"\\dr Print control registers"</literal></expr>,

<expr><literal type="string">"\\dR Print control registers in detailed mode"</literal></expr>,

<expr><literal type="string">"\\dp [pid] Print current selected pid or change it"</literal></expr>,

<expr><literal type="string">"\\e r2k.io=[012] Read/Write from 0: Linear, 1: Process, 2: Physical addresses"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help_msg_old</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"\\M Print kernel memory map"</literal></expr>,

<expr><literal type="string">"\\b beid [pid] Change r2k backend. pid is required when beid is 1."</literal></expr>,

<expr><literal type="string">" 0: linear address; 1: process address; 2: physical address"</literal></expr>,

<expr><literal type="string">"\\p pid Print process information"</literal></expr>,

<expr><literal type="string">"\\rl addr len Read from linear address"</literal></expr>,

<expr><literal type="string">"\\rp pid addr len Read from process address"</literal></expr>,

<expr><literal type="string">"\\rP addr len Read physical address"</literal></expr>,

<expr><literal type="string">"\\R[p] Print control registers. Use =!Rp for detailed description"</literal></expr>,

<expr><literal type="string">"\\wl[x] addr input Write at linear address. Use =!wlx for input in hex"</literal></expr>,

<expr><literal type="string">"\\wp[x] pid addr input Write at process address. Use =!wpx for input in hex"</literal></expr>,

<expr><literal type="string">"\\wP[x] addr input Write at physical address. Use =!wPx for input in hex"</literal></expr>,

<expr><literal type="string">"\\W 1|0 Honor arch write protect (1 enable WP, 0 disable WP)"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_usage</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>help_msg</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name> <operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name><name>help_msg</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>cmd_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>help_msg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\nOld Commands: (deprecated)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>help_msg_old</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name> <operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name><name>help_msg_old</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>cmd_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>help_msg_old</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ReadMemory</name> <parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>iodesc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ioctl_n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pagesize</name></decl>, <decl><type ref="prev"/><name>newlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>pageaddr</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>garbage</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>iodesc</name> <operator>&amp;&amp;</operator> <name><name>iodesc</name><operator>-&gt;</operator><name>data</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>buf</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r2k_data</name></name></type> <name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>buff</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>.</operator><name>buff</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>iodesc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>ioctl_n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>buff</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>garbage</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pagesize</name> <operator>=</operator> <call><name>getpagesize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pageaddr</name> <operator>=</operator> <name>address</name> <operator>+</operator> <name>pagesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pageaddr</name> <operator>-=</operator> <operator>(</operator><name>pageaddr</name> <operator>%</operator> <name>pagesize</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>pageaddr</name> <operator>-</operator> <name>address</name><operator>)</operator><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>pageaddr</name> <operator>-</operator> <name>address</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>iodesc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>ioctl_n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>buff</name></name></expr></argument>, <argument><expr><name>pageaddr</name> <operator>-</operator> <name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>garbage</name></expr></argument>, <argument><expr><name>pageaddr</name> <operator>-</operator> <name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>pageaddr</name> <operator>-</operator> <name>address</name></expr>;</expr_stmt>

<expr_stmt><expr><name>newlen</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>newlen</name> <operator>&gt;=</operator> <name>pagesize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>pageaddr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>pagesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>iodesc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>ioctl_n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>buff</name></name></expr></argument>, <argument><expr><name>pagesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>garbage</name></expr></argument>, <argument><expr><name>pagesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>pageaddr</name> <operator>+=</operator> <name>pagesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>pagesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>newlen</name> <operator>-=</operator> <name>pagesize</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>pageaddr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>newlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>iodesc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>ioctl_n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>buff</name></name></expr></argument>, <argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>garbage</name></expr></argument>, <argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><name>flag</name></expr> ?</condition><then> <expr><name>len</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"Invalid input buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"IOCTL device not initialized.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>WriteMemory</name> <parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>iodesc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ioctl_n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>iodesc</name> <operator>&amp;&amp;</operator> <name><name>iodesc</name><operator>-&gt;</operator><name>data</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>buf</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r2k_data</name></name></type> <name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>buff</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>wp</name></name> <operator>=</operator> <name><name>r2k_struct</name><operator>.</operator><name>wp</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>.</operator><name>buff</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>buff</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>iodesc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>ioctl_n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"Write failed. ioctl err: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name> <argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"Invalid input buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"IOCTL device not initialized.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>run_old_command</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>iodesc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>inphex</name></decl>, <decl><type ref="prev"/><name>ioctl_n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pid</name></decl>, <decl><type ref="prev"/><name>addr</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>databuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'W'</literal></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"Write Protect: %d\n"</literal></expr></argument>, <argument><expr><name><name>r2k_struct</name><operator>.</operator><name>wp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"Usage:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_help</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="string">"W"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wp</name> <init>= <expr><call><name>getvalue</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>wp</name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"Invalid usage of W\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_help</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="string">"W"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r2k_struct</name><operator>.</operator><name>wp</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><name>wp</name></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"beid: %d\n"</literal></expr></argument>, <argument><expr><name><name>r2k_struct</name><operator>.</operator><name>beid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"pid: %d\n"</literal></expr></argument>, <argument><expr><name><name>r2k_struct</name><operator>.</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"Usage:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_help</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>beid</name> <init>= <expr><call><name>getvalue</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pid</name> <init>= <expr><call><name>getvalue</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>beid</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>beid</name></expr></argument> &gt;</argument_list></name> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"Invalid usage of b\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_help</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>beid</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>pid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"Invalid pid read.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_help</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r2k_struct</name><operator>.</operator><name>beid</name></name> <operator>=</operator> <name>beid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r2k_struct</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>beid</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>pid</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"io_r2k_linux : Malloc failed. Seeking to 0x0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_core_cmd</name></name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><literal type="string">"s 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"s 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_core_cmd</name></name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>RPrint</name> <modifier>*</modifier></type><name>print</name> <init>= <expr><call><name>r_print_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>print_help</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="string">"rl"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>getvalue</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>getvalue</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"Invalid number of arguments.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_help</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="string">"rl"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ioctl_n</name> <operator>=</operator> <name>IOCTL_READ_KERNEL_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>print_help</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="string">"rp"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>getvalue</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>getvalue</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>getvalue</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>addr</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"Invalid number of arguments.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_help</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="string">"rp"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto><empty_stmt>;</empty_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ioctl_n</name> <operator>=</operator> <name>IOCTL_READ_PROCESS_ADDR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'P'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>print_help</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="string">"rP"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>getvalue</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>getvalue</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"Invalid number of arguments.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_help</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="string">"rP"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ioctl_n</name> <operator>=</operator> <name>IOCTL_READ_PHYSICAL_ADDR</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>print_help</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_print_free</name> <argument_list>(<argument><expr><name>print</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></switch>

<expr_stmt><expr><name>databuf</name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>databuf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ReadMemory</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>iodesc</name></expr></argument>, <argument><expr><name>ioctl_n</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>databuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_print_hexdump</name> <argument_list>(<argument><expr><name>print</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator> <name>databuf</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"Failed to allocate buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_print_free</name> <argument_list>(<argument><expr><name>print</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'w'</literal></expr>:</case>

<expr_stmt><expr><name>inphex</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>inphex</name> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>inphex</name> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>print_help</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="string">"wl"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>getvalue</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>getargpos</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"Invalid number of arguments.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_help</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="string">"wl"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ioctl_n</name> <operator>=</operator> <name>IOCTL_WRITE_KERNEL_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>inphex</name> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>inphex</name> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>print_help</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="string">"wp"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>getvalue</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>getvalue</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>getargpos</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>addr</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"Invalid number of arguments.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_help</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="string">"wp"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ioctl_n</name> <operator>=</operator> <name>IOCTL_WRITE_PROCESS_ADDR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'P'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>inphex</name> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>inphex</name> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>print_help</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="string">"wP"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>getvalue</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>getargpos</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"Invalid number of arguments.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_help</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="string">"wP"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ioctl_n</name> <operator>=</operator> <name>IOCTL_WRITE_PHYSICAL_ADDR</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>print_help</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>databuf</name> <operator>=</operator> <operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>databuf</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>inphex</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_hex_str2bin</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>databuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>databuf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>r_str_unescape</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>databuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WriteMemory</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>iodesc</name></expr></argument>, <argument><expr><name>ioctl_n</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator> <name>databuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Failed to allocate buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'M'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r2k_kernel_maps</name></name></type> <name>map_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r2k_kernel_map_info</name></name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>page_size</name> <init>= <expr><call><name>sysconf</name> <argument_list>(<argument><expr><name>_SC_PAGESIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ioctl_n</name> <operator>=</operator> <name>IOCTL_GET_KERNEL_MAP</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>iodesc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>ioctl_n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>map_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"ioctl err: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name> <argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"map_data.size: %d, map_data.n_entries: %d\n"</literal></expr></argument>, <argument><expr><name><name>map_data</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>map_data</name><operator>.</operator><name>n_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>mmap</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>map_data</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>PROT_READ</name></expr></argument>, <argument><expr><name>MAP_SHARED</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>iodesc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"mmap err: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name> <argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>map_data</name><operator>.</operator><name>n_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r2k_kernel_map_info</name></name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>&amp;</operator><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"start_addr: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>in</name><operator>-&gt;</operator><name>start_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"end_addr: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>in</name><operator>-&gt;</operator><name>end_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"n_pages: %d (%ld Kbytes)\n"</literal></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>n_pages</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>n_pages</name></name> <operator>*</operator> <name>page_size</name><operator>)</operator> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"n_phys_addr: %d\n"</literal></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>n_phys_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>n_phys_addr</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\tphys_addr: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>in</name><operator>-&gt;</operator><name>phys_addr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>munmap</name> <argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>map_data</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"munmap failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'R'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>r2k_control_reg</name></name></type> <name>reg_data</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ioctl_n</name> <operator>=</operator> <name>IOCTL_READ_CONTROL_REG</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>iodesc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>ioctl_n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reg_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"ioctl err: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name> <argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__i386__</name> <operator>||</operator> <name>__x86_64__</name></expr></cpp:if>

<expr_stmt><expr><name><name>reg_data</name><operator>.</operator><name>cr1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>x86_ctrl_reg_pretty_print</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>reg_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"cr0 = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>reg_data</name><operator>.</operator><name>cr0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"cr1 = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>reg_data</name><operator>.</operator><name>cr1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"cr2 = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>reg_data</name><operator>.</operator><name>cr2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"cr3 = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>reg_data</name><operator>.</operator><name>cr3</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"cr4 = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>reg_data</name><operator>.</operator><name>cr4</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__x86_64__</name></expr></cpp:if>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"cr8 = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>reg_data</name><operator>.</operator><name>cr8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__arm__</name></expr></cpp:elif>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>arm_ctrl_reg_pretty_print</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>reg_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"ttbr0 = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>reg_data</name><operator>.</operator><name>ttbr0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"ttbr1 = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>reg_data</name><operator>.</operator><name>ttbr1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"ttbcr = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>reg_data</name><operator>.</operator><name>ttbcr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"c1 = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>reg_data</name><operator>.</operator><name>c1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"c3 = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>reg_data</name><operator>.</operator><name>c3</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__arm64__</name> <operator>||</operator> <name>__aarch64__</name></expr></cpp:elif>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>arm64_ctrl_reg_pretty_print</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>reg_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"sctlr_el1 = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>reg_data</name><operator>.</operator><name>sctlr_el1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"ttbr0_el1 = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>reg_data</name><operator>.</operator><name>ttbr0_el1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"ttbr1_el1 = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>reg_data</name><operator>.</operator><name>ttbr1_el1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"tcr_el1 = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>reg_data</name><operator>.</operator><name>tcr_el1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>nextstart</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>buffsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>fflag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>r2k_proc_info</name></name></type> <name>proc_data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>buf</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><operator>(</operator><name>buf</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>

<expr_stmt><expr><name>fflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>buf</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>print_help</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="string">"p*"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>print_help</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="string">"p"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></switch>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>getvalue</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"Invalid number of arguments.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_help</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="string">"p"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>proc_data</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ioctl_n</name> <operator>=</operator> <name>IOCTL_PRINT_PROC_INFO</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>iodesc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>ioctl_n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>proc_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"ioctl err: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name> <argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buffsize</name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name><name>proc_data</name><operator>.</operator><name>vmareastruct</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>proc_data</name><operator>.</operator><name>vmareastruct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fflag</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>buffsize</name></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>nextstart</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">7</literal> <operator>&lt;</operator> <name>buffsize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nextstart</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">7</literal> <operator>+</operator> <operator>(</operator><call><name>strlen</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>proc_data</name><operator>.</operator><name>vmareastruct</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proc_data</name><operator>.</operator><name>vmareastruct</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>buffsize</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>proc_data</name><operator>.</operator><name>vmareastruct</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<name>nextstart</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nextstart</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>buffsize</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"f pid.%d.%s.%d.start=0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>proc_data</name><operator>.</operator><name>pid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>proc_data</name><operator>.</operator><name>vmareastruct</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>proc_data</name><operator>.</operator><name>vmareastruct</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"f pid.%d.%s.%d.end=0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>proc_data</name><operator>.</operator><name>pid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>proc_data</name><operator>.</operator><name>vmareastruct</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>proc_data</name><operator>.</operator><name>vmareastruct</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>nextstart</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"f pid.%d.task_struct = 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>proc_data</name><operator>.</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>proc_data</name><operator>.</operator><name>task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"pid = %d\nprocess name = %s\n"</literal></expr></argument>, <argument><expr><name><name>proc_data</name><operator>.</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>proc_data</name><operator>.</operator><name>comm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"task_struct = 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>proc_data</name><operator>.</operator><name>task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buffsize</name></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>nextstart</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">7</literal> <operator>&lt;</operator> <name>buffsize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nextstart</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">7</literal> <operator>+</operator> <operator>(</operator><call><name>strlen</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>proc_data</name><operator>.</operator><name>vmareastruct</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proc_data</name><operator>.</operator><name>vmareastruct</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>proc_data</name><operator>.</operator><name>vmareastruct</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<name>nextstart</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nextstart</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>buffsize</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name><literal type="string">" - 0x%08"</literal><name>PFMT64x</name><literal type="string">" %c%c%c%c 0x%08"</literal><name>PFMT64x</name><literal type="string">" %02x:%02x %-8"</literal><name>PFMT64u</name><literal type="string">""</literal></expr></argument>,

<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>proc_data</name><operator>.</operator><name>vmareastruct</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>proc_data</name><operator>.</operator><name>vmareastruct</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>proc_data</name><operator>.</operator><name>vmareastruct</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name>VM_READ</name></expr> ?</condition><then> <expr><literal type="char">'r'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>proc_data</name><operator>.</operator><name>vmareastruct</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name>VM_WRITE</name></expr> ?</condition><then> <expr><literal type="char">'w'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>proc_data</name><operator>.</operator><name>vmareastruct</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name>VM_EXEC</name></expr> ?</condition><then> <expr><literal type="char">'x'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>proc_data</name><operator>.</operator><name>vmareastruct</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name>VM_MAYSHARE</name></expr> ?</condition><then> <expr><literal type="char">'s'</literal></expr> </then><else>: <expr><literal type="char">'p'</literal></expr></else></ternary></expr></argument>,

<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>proc_data</name><operator>.</operator><name>vmareastruct</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>proc_data</name><operator>.</operator><name>vmareastruct</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>proc_data</name><operator>.</operator><name>vmareastruct</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>proc_data</name><operator>.</operator><name>vmareastruct</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\t%s\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>proc_data</name><operator>.</operator><name>vmareastruct</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>nextstart</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"STACK BASE ADDRESS = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>proc_data</name><operator>.</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<block>{<block_content>

<expr_stmt><expr><call><name>print_help</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></switch>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>databuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>run_new_command</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>iodesc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"dm"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"p %d"</literal></expr></argument>, <argument><expr><call><name>atoi</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>run_old_command</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>iodesc</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>r2k_struct</name><operator>.</operator><name>beid</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"p %d"</literal></expr></argument>, <argument><expr><name><name>r2k_struct</name><operator>.</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>run_old_command</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>iodesc</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>run_old_command</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>iodesc</name></expr></argument>, <argument><expr><literal type="string">"M"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"dr"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>run_old_command</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>iodesc</name></expr></argument>, <argument><expr><literal type="string">"R"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"dR"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>run_old_command</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>iodesc</name></expr></argument>, <argument><expr><literal type="string">"Rp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"dp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r2k_struct</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name><name>r2k_struct</name><operator>.</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"e r2k.io"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"0: Linear memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"1: Process memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"2: Physical memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eq</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>eq</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>atoi</name> <argument_list>(<argument><expr><name>eq</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name><name>r2k_struct</name><operator>.</operator><name>pid</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"b %d %d"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>run_old_command</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>iodesc</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>run_new_command</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>iodesc</name></expr></argument>, <argument><expr><literal type="string">"dp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"e r2k.wp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"&lt;bool&gt; enable write protection (disabled by default)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eq</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>eq</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>atoi</name> <argument_list>(<argument><expr><name>eq</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r2k_struct</name><operator>.</operator><name>wp</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><name>v</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>r_str_bool</name> <argument_list>(<argument><expr><name><name>r2k_struct</name><operator>.</operator><name>wp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>run_ioctl_command</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>iodesc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>r_str_ichr</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>run_new_command</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>iodesc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>run_old_command</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>iodesc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
