<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\io\undo.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_io.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

* TODO:

* - make path of indirections shortr (io-&gt;undo.foo is slow) */

* - Plugin changes in write and seeks

* - Per-fd history log

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>R_API</name> <name>int</name></type> <name>r_io_undo_init</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_io_sundo_reset</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>w_init</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>w_enable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>w_enable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>w_list</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_io_undo_enable</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>s_enable</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>w_enable</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RIOUndos</name> <modifier>*</modifier></type><name>r_io_sundo</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>s_enable</name></name> <operator>||</operator> <operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>undos</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RIOUndos</name> <modifier>*</modifier></type><name>undo</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>redos</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>undo</name> <operator>=</operator> <operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>seek</name><index>[<expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>idx</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>undo</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>undo</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <operator>(</operator><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>idx</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>R_IO_UNDOS</name><operator>)</operator> <operator>%</operator> <name>R_IO_UNDOS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>undos</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>redos</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>undo</name> <operator>=</operator> <operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>seek</name><index>[<expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>idx</name></name></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><call><name>r_io_map_get</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>undo</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name> <operator>||</operator> <operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>delta</name></name> <operator>==</operator> <name><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name><name>undo</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name><name>undo</name><operator>-&gt;</operator><name>off</name></name> <operator>-</operator> <operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name><name>map</name><operator>-&gt;</operator><name>delta</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>undo</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RIOUndos</name> <modifier>*</modifier></type><name>r_io_sundo_redo</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIOUndos</name> <modifier>*</modifier></type><name>undo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>s_enable</name></name> <operator>||</operator> <operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>redos</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <operator>(</operator><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>idx</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>R_IO_UNDOS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>undos</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>redos</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>undo</name> <operator>=</operator> <operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>seek</name><index>[<expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>idx</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>r_io_map_get</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>undo</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name> <operator>||</operator> <operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>delta</name></name> <operator>==</operator> <name><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name><name>undo</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name><name>undo</name><operator>-&gt;</operator><name>off</name></name> <operator>-</operator> <name><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name><name>map</name><operator>-&gt;</operator><name>delta</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>undo</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_io_sundo_push</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIOUndos</name> <modifier>*</modifier></type><name>undo</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>s_enable</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>undos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>undo</name> <operator>=</operator> <operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>seek</name><index>[<expr><operator>(</operator><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>idx</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>R_IO_UNDOS</name><operator>)</operator> <operator>%</operator> <name>R_IO_UNDOS</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>undo</name><operator>-&gt;</operator><name>off</name></name> <operator>==</operator> <name>off</name> <operator>&amp;&amp;</operator> <name><name>undo</name><operator>-&gt;</operator><name>cursor</name></name> <operator>==</operator> <name>cursor</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>undo</name> <operator>=</operator> <operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>seek</name><index>[<expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>idx</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>undo</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>undo</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name>cursor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <operator>(</operator><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>idx</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>R_IO_UNDOS</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>undos</name></name> <operator>&lt;</operator> <name>R_IO_UNDOS</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>undos</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>redos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_io_sundo_reset</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>undos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>redos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name> <modifier>*</modifier></type><name>r_io_sundo_list</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>undos</name></decl>, <decl><type ref="prev"/><name>redos</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name><modifier>*</modifier></type> <name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>s_enable</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>undos</name> <operator>=</operator> <name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>undos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>redos</name> <operator>=</operator> <name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>redos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>idx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <operator>(</operator><name>idx</name> <operator>-</operator> <name>undos</name> <operator>+</operator> <name>R_IO_UNDOS</name><operator>)</operator> <operator>%</operator> <name>R_IO_UNDOS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>(</operator><name>idx</name> <operator>+</operator> <name>redos</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>R_IO_UNDOS</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name></expr>;</init><condition>;</condition> <incr><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>R_IO_UNDOS</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>j</name> <operator>&lt;</operator> <name>undos</name><operator>)</operator></expr>?</condition><then> <expr><name>undos</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr></then><else>: <expr><name>j</name> <operator>-</operator> <name>undos</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIOUndos</name> <modifier>*</modifier></type><name>undo</name> <init>= <expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>seek</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name><name>undo</name><operator>-&gt;</operator><name>off</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>notLast</name> <init>= <expr><operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>undos</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'='</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>undos</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><ternary><condition><expr><name>notLast</name></expr>?</condition><then> <expr><literal type="string">" &gt; "</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>undos</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"f undo_%d @ 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>j</name> <operator>==</operator> <name>undos</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>redos</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"#Current undo/redo position.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>j</name> <operator>!=</operator> <name>undos</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"f redo_%d @ 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RIOUndos</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RIOUndos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>u</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>j</name> <operator>==</operator> <name>undos</name> <operator>&amp;&amp;</operator> <name>redos</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>undo</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RIOUndos</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'='</literal></expr>:</case>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_io_wundo_new</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIOUndoWrite</name> <modifier>*</modifier></type><name>uw</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>w_enable</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>uw</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RIOUndoWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>uw</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>uw</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>uw</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>uw</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>uw</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>uw</name><operator>-&gt;</operator><name>n</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>uw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>uw</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>uw</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>uw</name><operator>-&gt;</operator><name>o</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>uw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>uw</name><operator>-&gt;</operator><name>o</name></name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name><name>uw</name><operator>-&gt;</operator><name>o</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>w_list</name></name></expr></argument>, <argument><expr><name>uw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_io_wundo_clear</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>w_list</name></name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_io_wundo_size</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>w_list</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_io_wundo_list</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BW</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIOUndoWrite</name> <modifier>*</modifier></type><name>u</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>w_init</name></name></expr>)</condition> <block>{<block_content>

<macro><name>r_list_foreach</name> <argument_list>(<argument>io-&gt;undo.w_list</argument>, <argument>iter</argument>, <argument>u</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%02d %c %d %08"</literal> <name>PFMT64x</name> <literal type="string">": "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>u</name><operator>-&gt;</operator><name>set</name></name></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>u</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>u</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>u</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>BW</name><operator>)</operator></expr> ?</condition><then> <expr><name>BW</name></expr> </then><else>: <expr><name><name>u</name><operator>-&gt;</operator><name>len</name></name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><name><name>u</name><operator>-&gt;</operator><name>o</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>BW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">".. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"=&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><name><name>u</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>BW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">".. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>cb_printf</name></name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_io_wundo_apply</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIOUndoWrite</name> <modifier>*</modifier></type><name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>set</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>orig</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>w_enable</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>w_enable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>set</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_io_write_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>u</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name><name>u</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>u</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_io_write_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>u</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name><name>u</name><operator>-&gt;</operator><name>o</name></name></expr></argument>, <argument><expr><name><name>u</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>w_enable</name></name> <operator>=</operator> <name>orig</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_io_wundo_apply_all</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>set</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIOUndoWrite</name> <modifier>*</modifier></type><name>u</name></decl>;</decl_stmt>

<macro><name>r_list_foreach_prev</name> <argument_list>(<argument>io-&gt;undo.w_list</argument>, <argument>iter</argument>, <argument>u</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_io_wundo_apply</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>set</name></expr>?</condition><then><expr><literal type="string">"redo"</literal></expr></then><else>:<expr><literal type="string">"undo"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>u</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_io_wundo_set</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>set</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIOUndoWrite</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>w_init</name></name></expr>)</condition> <block>{<block_content>

<macro><name>r_list_foreach_prev</name> <argument_list>(<argument>io-&gt;undo.w_list</argument>, <argument>iter</argument>, <argument>u</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name><operator>++</operator> <operator>==</operator> <name>n</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>u</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_io_wundo_apply</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"invalid undo-write index\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"no writes done\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

</unit>
