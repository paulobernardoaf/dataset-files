<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\io\map.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_io.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sdb.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_binheap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_util.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_vector.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_OF_MAP_IDS</name></cpp:macro> <cpp:value>UT32_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_USE_HALF_CLOSED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP_END_GTE</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>, <parameter><type><name>itv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((addr) &lt; r_itv_end (*(RInterval *)(itv))) ? -1 : 1)</cpp:value></cpp:define>

<struct>struct <name>map_event_t</name> <block>{

<decl_stmt><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>is_to</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_cmp_map_event</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a_</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b_</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>map_event_t</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>a_</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>b_</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr0</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>is_to</name></name></expr></init></decl>, <decl><type ref="prev"/><name>addr1</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>is_to</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr0</name> <operator>!=</operator> <name>addr1</name></expr>)</condition> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name>addr0</name> <operator>&lt;</operator> <name>addr1</name></expr>?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>is_to</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>is_to</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>is_to</name></name></expr>?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>id</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>id</name></name></expr>?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_cmp_map_event_by_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a_</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b_</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>map_event_t</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>a_</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>b_</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>a</name><operator>-&gt;</operator><name>id</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>id</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_map_skyline_push</name><parameter_list>(<parameter><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>map_skyline</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIOMapSkyline</name> <modifier>*</modifier></type><name>part</name> <init>= <expr><call><name>R_NEW</name> <argument_list>(<argument><expr><name>RIOMapSkyline</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>part1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>part</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>part</name><operator>-&gt;</operator><name>map</name></name> <operator>=</operator> <name>map</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>part</name><operator>-&gt;</operator><name>itv</name></name> <operator>=</operator> <operator>(</operator><name>RInterval</name><operator>)</operator><block>{ <expr><name>from</name></expr>, <expr><name>to</name> <operator>-</operator> <name>from</name></expr> }</block></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>from</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>to</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>part1</name> <operator>=</operator> <call><name>R_NEW</name> <argument_list>(<argument><expr><name>RIOMapSkyline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>part1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>part1</name><operator>-&gt;</operator><name>map</name></name> <operator>=</operator> <name>map</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>part1</name><operator>-&gt;</operator><name>itv</name></name> <operator>=</operator> <operator>(</operator><name>RInterval</name><operator>)</operator><block>{ <expr><name>UT64_MAX</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_pvector_push</name> <argument_list>(<argument><expr><name>map_skyline</name></expr></argument>, <argument><expr><name>part1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>part1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_pvector_push</name> <argument_list>(<argument><expr><name>map_skyline</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>io_map_calculate_skyline</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPVector</name></type> <name>events</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinHeap</name></type> <name>heap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>map_event_t</name></name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>deleted</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>map_skyline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>map_skyline_shadow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>events</name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_pvector_reserve</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>events</name></expr></argument>, <argument><expr><call><name>ls_length</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>maps</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><operator>(</operator><name>deleted</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><call><name>ls_length</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>maps</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>ls_foreach_prev</name> <argument_list>(<argument>io-&gt;maps</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ev</name> <operator>=</operator> <call><name>R_NEW</name> <argument_list>(<argument><expr>struct <name>map_event_t</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>map</name></name> <operator>=</operator> <name>map</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>is_to</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>events</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ev</name> <operator>=</operator> <call><name>R_NEW</name> <argument_list>(<argument><expr>struct <name>map_event_t</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>map</name></name> <operator>=</operator> <name>map</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <call><name>r_itv_end</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>is_to</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>events</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_pvector_sort</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>events</name></expr></argument>, <argument><expr><name>_cmp_map_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_binheap_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>, <argument><expr><name>_cmp_map_event_by_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>last_map</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>r_pvector_len</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>events</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>r_pvector_at</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>events</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>is_to</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>deleted</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>id</name></name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_binheap_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>r_binheap_empty</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>deleted</name><index>[<expr><operator>(</operator><operator>(</operator></expr></index></name>struct <name>map_event_t</name> <operator>*</operator></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><call><name>r_binheap_top</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></while>)</block_content>-&gt;id]</block></for>)</block_content> <block>{<block_content>

<expr_stmt><expr><call><name>r_binheap_pop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

ut64 to = ev-&gt;addr</block>;</function>

<expr_stmt><expr><name>map</name> <operator>=</operator> <ternary><condition><expr><call><name>r_binheap_empty</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>(</operator><operator>(</operator>struct <name>map_event_t</name> <operator>*</operator><operator>)</operator><call><name>r_binheap_top</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>map</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_map</name> <operator>=</operator> <name>map</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>last</name> <operator>!=</operator> <name>to</name> <operator>||</operator> <operator>(</operator><operator>!</operator><name>to</name> <operator>&amp;&amp;</operator> <name><name>ev</name><operator>-&gt;</operator><name>is_to</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>last_map</name> <operator>!=</operator> <name>map</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>last_map</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>_map_skyline_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>map_skyline</name></name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>last_map</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_map</name> <operator>=</operator> <name>map</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>to</name> <operator>&amp;&amp;</operator> <name><name>ev</name><operator>-&gt;</operator><name>is_to</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>map</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_map_skyline_push</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>map_skyline</name></name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>map</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>last_map</name> <operator>||</operator> <name><name>map</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;</operator> <name><name>last_map</name><operator>-&gt;</operator><name>id</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last_map</name> <operator>=</operator> <name>map</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

}

r_binheap_clear <expr_stmt><expr><operator>(</operator><operator>&amp;</operator><name>heap</name><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>RPVector</name> <modifier>*</modifier></type><name>skyline</name> <init>= <expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>map_skyline</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RPVector</name> <modifier>*</modifier></type><name>shadow</name> <init>= <expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>map_skyline_shadow</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RInterval</name> <modifier>*</modifier></type><name>cur_itv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>r_pvector_len</name> <argument_list>(<argument><expr><name>skyline</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>RIOMapSkyline</name> <modifier>*</modifier></type><name>part</name> <init>= <expr><call><name>r_pvector_at</name> <argument_list>(<argument><expr><name>skyline</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>part</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>part_from</name> <init>= <expr><name><name>part</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>part_size</name> <init>= <expr><name><name>part</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur_itv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur_itv</name> <operator>=</operator> <call><name>r_itv_new</name> <argument_list>(<argument><expr><name>part_from</name></expr></argument>, <argument><expr><name>part_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur_itv</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>part_from</name> <operator>==</operator> <call><name>r_itv_end</name> <argument_list>(<argument><expr><operator>*</operator><name>cur_itv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur_itv</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>part_size</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_pvector_push</name> <argument_list>(<argument><expr><name>shadow</name></expr></argument>, <argument><expr><name>cur_itv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>cur_itv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur_itv</name> <operator>=</operator> <call><name>r_itv_new</name> <argument_list>(<argument><expr><name>part_from</name></expr></argument>, <argument><expr><name>part_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur_itv</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>cur_itv</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_pvector_push</name> <argument_list>(<argument><expr><name>shadow</name></expr></argument>, <argument><expr><name>cur_itv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>cur_itv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>deleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}

RIOMap<expr_stmt><expr><operator>*</operator> <macro><name>io_map_new</name><argument_list>(<argument>RIO* io</argument>, <argument>int fd</argument>, <argument>int perm</argument>, <argument>ut64 delta</argument>, <argument>ut64 addr</argument>, <argument>ut64 size</argument>, <argument>bool do_skyline</argument>)</argument_list></macro> <block>{

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size</name> <operator>||</operator> <operator>!</operator><name>io</name> <operator>||</operator> <operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>maps</name></name> <operator>||</operator> <operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>map_ids</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

<expr_stmt/></block_content></block></if></if_stmt>}</block>

<name>RIOMap</name><operator>*</operator> <name>map</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RIOMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name> <operator>||</operator> <operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>map_ids</name></name> <operator>||</operator> <operator>!</operator><call><name>r_id_pool_grab_id</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>map_ids</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>UT64_MAX</name> <operator>-</operator> <name>size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>addr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>io_map_new</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>delta</name> <operator>-</operator> <name>addr</name></expr></argument>, <argument><expr><literal type="number">0LL</literal></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <name>addr</name></expr></argument>, <argument><expr><name>do_skyline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>st64</name><operator>)</operator><name>addr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>itv</name></name> <operator>=</operator> <operator>(</operator><name>RInterval</name><operator>)</operator><block>{ <expr><name>addr</name></expr>, <expr><name>size</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>perm</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_append</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>maps</name></name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_skyline</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>io_map_calculate_skyline</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>map</name></expr>;</return>

}

R_API <function><type><name>RIOMap</name> <modifier>*</modifier></type><name>r_io_map_new</name> <parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>io_map_new</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_map_remap</name> <parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><call><name>r_io_map_resolve</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>map</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><name><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>UT64_MAX</name> <operator>-</operator> <name>size</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>addr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>-</operator><name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_map_new</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>perm</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>delta</name></name> <operator>-</operator> <name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>io_map_calculate_skyline</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_map_remap_fd</name> <parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>retval</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>maps</name> <init>= <expr><call><name>r_io_map_get_for_fd</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>maps</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>maps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>map</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>r_io_map_remap</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>maps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_map_free</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIOMap</name><modifier>*</modifier></type> <name>map</name> <init>= <expr><operator>(</operator><name>RIOMap</name><operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>map</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_io_map_init</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>io</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>maps</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>maps</name></name> <operator>=</operator> <call><name>ls_newf</name> <argument_list>(<argument><expr><operator>(</operator><name>SdbListFree</name><operator>)</operator><name>_map_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>map_ids</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_id_pool_free</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>map_ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>map_ids</name></name> <operator>=</operator> <call><name>r_id_pool_new</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>END_OF_MAP_IDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_map_exists</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>RIOMap</name><modifier>*</modifier></type> <name>map</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SdbListIter</name><modifier>*</modifier></type> <name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIOMap</name><modifier>*</modifier></type> <name>m</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>io</name> <operator>||</operator> <operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>maps</name></name> <operator>||</operator> <operator>!</operator><name>map</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>io-&gt;maps</argument>, <argument>iter</argument>, <argument>m</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RIOMap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_map_exists_for_id</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_io_map_resolve</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RIOMap</name><modifier>*</modifier></type> <name>r_io_map_resolve</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SdbListIter</name><modifier>*</modifier></type> <name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIOMap</name><modifier>*</modifier></type> <name>map</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>io</name> <operator>||</operator> <operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>maps</name></name> <operator>||</operator> <operator>!</operator><name>id</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>io-&gt;maps</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>map</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RIOMap</name><modifier>*</modifier></type> <name>io_map_add</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>do_skyline</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIODesc</name><modifier>*</modifier></type> <name>desc</name> <init>= <expr><call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>io_map_new</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>perm</name> <operator>&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>perm</name></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>perm</name> <operator>&amp;</operator> <name>R_PERM_X</name><operator>)</operator></expr></argument>,

<argument><expr><name>delta</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>do_skyline</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RIOMap</name> <modifier>*</modifier></type><name>r_io_map_add</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>io_map_add</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RIOMap</name> <modifier>*</modifier></type><name>r_io_map_add_batch</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>io_map_add</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_io_update</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>io_map_calculate_skyline</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RIOMap</name><modifier>*</modifier></type> <name>r_io_map_get_paddr</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>paddr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RIOMap</name><modifier>*</modifier></type> <name>map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListIter</name><modifier>*</modifier></type> <name>iter</name></decl>;</decl_stmt>

<macro><name>ls_foreach_prev</name> <argument_list>(<argument>io-&gt;maps</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>delta</name></name> <operator>&lt;=</operator> <name>paddr</name> <operator>&amp;&amp;</operator> <name>paddr</name> <operator>&lt;=</operator> <name><name>map</name><operator>-&gt;</operator><name>delta</name></name> <operator>+</operator> <name><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>map</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RIOMap</name><modifier>*</modifier></type> <name>r_io_map_get</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RIOMap</name><modifier>*</modifier></type> <name>map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListIter</name><modifier>*</modifier></type> <name>iter</name></decl>;</decl_stmt>

<macro><name>ls_foreach_prev</name> <argument_list>(<argument>io-&gt;maps</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_itv_contain</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>map</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_map_is_mapped</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>RPVector</name> <modifier>*</modifier></type><name>shadow</name> <init>= <expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>map_skyline_shadow</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>r_pvector_len</name> <argument_list>(<argument><expr><name>shadow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_pvector_lower_bound</name> <argument_list>(<argument><expr><name>shadow</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>CMP_END_GTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>RInterval</name> <modifier>*</modifier></type><name>itv</name> <init>= <expr><call><name>r_pvector_at</name> <argument_list>(<argument><expr><name>shadow</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>itv</name><operator>-&gt;</operator><name>addr</name></name> <operator>&lt;=</operator> <name>addr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_io_map_reset</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_io_map_fini</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_map_init</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>io_map_calculate_skyline</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_map_del</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RIOMap</name><modifier>*</modifier></type> <name>map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListIter</name><modifier>*</modifier></type> <name>iter</name></decl>;</decl_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>io-&gt;maps</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ls_delete</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>maps</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_id_pool_kick_id</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>map_ids</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>io_map_calculate_skyline</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_map_del_for_fd</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SdbListIter</name><modifier>*</modifier></type> <name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type> <name>ator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIOMap</name><modifier>*</modifier></type> <name>map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<macro><name>ls_foreach_safe</name> <argument_list>(<argument>io-&gt;maps</argument>, <argument>iter</argument>, <argument>ator</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ls_delete</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>maps</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <name>fd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_id_pool_kick_id</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>map_ids</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_delete</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>maps</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>io_map_calculate_skyline</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_map_priorize</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>io-&gt;maps</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ls_split_iter</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>maps</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_append</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>maps</name></name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>io_map_calculate_skyline</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_map_depriorize</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>io-&gt;maps</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ls_split_iter</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>maps</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_prepend</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>maps</name></name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>io_map_calculate_skyline</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_map_priorize_for_fd</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SdbListIter</name><modifier>*</modifier></type> <name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type> <name>ator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbList</name><modifier>*</modifier></type> <name>list</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>io</name> <operator>||</operator> <operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>maps</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>list</name> <operator>=</operator> <call><name>ls_new</name> <argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_io_map_cleanup</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>maps</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<macro><name>ls_foreach_safe</name> <argument_list>(<argument>io-&gt;maps</argument>, <argument>iter</argument>, <argument>ator</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <name>fd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ls_prepend</name> <argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_delete</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>maps</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>ls_join</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>maps</name></name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>maps</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>_map_free</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>io_map_calculate_skyline</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_io_map_cleanup</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SdbListIter</name><modifier>*</modifier></type> <name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type> <name>ator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIOMap</name><modifier>*</modifier></type> <name>map</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>io</name> <operator>||</operator> <operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>maps</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>files</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_io_map_fini</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_map_init</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>del</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<macro><name>ls_foreach_safe</name> <argument_list>(<argument>io-&gt;maps</argument>, <argument>iter</argument>, <argument>ator</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ls_delete</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>maps</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>del</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_id_pool_kick_id</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>map_ids</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_delete</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>maps</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>del</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>del</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>io_map_calculate_skyline</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_io_map_fini</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>maps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>maps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_id_pool_free</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>map_ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>map_ids</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>map_skyline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_clear</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>map_skyline_shadow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_io_map_set_name</name><parameter_list>(<parameter><decl><type><name>RIOMap</name><modifier>*</modifier></type> <name>map</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name> <operator>||</operator> <operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_io_map_del_name</name><parameter_list>(<parameter><decl><type><name>RIOMap</name><modifier>*</modifier></type> <name>map</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>map</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_io_map_next_available</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>load_align</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>load_align</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>load_align</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RIOMap</name><modifier>*</modifier></type> <name>map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListIter</name><modifier>*</modifier></type> <name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>next_addr</name> <init>= <expr><name>addr</name></expr></init></decl>,

<decl><type ref="prev"/><name>end_addr</name> <init>= <expr><name>next_addr</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>io-&gt;maps</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>to</name> <init>= <expr><call><name>r_itv_end</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>next_addr</name> <operator>=</operator> <call><name>R_MAX</name> <argument_list>(<argument><expr><name>next_addr</name></expr></argument>, <argument><expr><name>to</name> <operator>+</operator> <operator>(</operator><name>load_align</name> <operator>-</operator> <operator>(</operator><name>to</name> <operator>%</operator> <name>load_align</name><operator>)</operator><operator>)</operator> <operator>%</operator> <name>load_align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name> <operator>&lt;=</operator> <name>next_addr</name> <operator>&amp;&amp;</operator> <name>next_addr</name> <operator>&lt;</operator> <name>to</name><operator>)</operator> <operator>||</operator> <call><name>r_itv_contain</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>, <argument><expr><name>end_addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next_addr</name> <operator>=</operator> <name>to</name> <operator>+</operator> <operator>(</operator><name>load_align</name> <operator>-</operator> <operator>(</operator><name>to</name> <operator>%</operator> <name>load_align</name><operator>)</operator><operator>)</operator> <operator>%</operator> <name>load_align</name></expr>;</expr_stmt>

<return>return <expr><call><name>r_io_map_next_available</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>next_addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>load_align</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<return>return <expr><name>next_addr</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_io_map_next_address</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIOMap</name><modifier>*</modifier></type> <name>map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListIter</name><modifier>*</modifier></type> <name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>lowest</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>io-&gt;maps</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>from</name> <init>= <expr><call><name>r_itv_begin</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&gt;</operator> <name>addr</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;</operator> <name>lowest</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lowest</name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>to</name> <init>= <expr><call><name>r_itv_end</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&gt;</operator> <name>addr</name> <operator>&amp;&amp;</operator> <name>to</name> <operator>&lt;</operator> <name>lowest</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lowest</name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>lowest</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name><modifier>*</modifier></type> <name>r_io_map_get_for_fd</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name><modifier>*</modifier></type> <name>map_list</name> <init>= <expr><call><name>r_list_newf</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListIter</name><modifier>*</modifier></type> <name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIOMap</name><modifier>*</modifier></type> <name>map</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map_list</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>io-&gt;maps</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>map</name> <operator>&amp;&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <name>fd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>map_list</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>map_list</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_map_resize</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>newsize</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newsize</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>map</name> <operator>=</operator> <call><name>r_io_map_resolve</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>UT64_MAX</name> <operator>-</operator> <name>newsize</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>addr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>-</operator><name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_map_new</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>perm</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>delta</name></name> <operator>-</operator> <name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>newsize</name> <operator>+</operator> <name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>io_map_calculate_skyline</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_io_map_location</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>base</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>io</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">0x60000000000LL</literal></expr></then><else>: <expr><literal type="number">0x60000000</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>r_io_map_get</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>base</name> <operator>+=</operator> <literal type="number">0x200000</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>base</name></expr>;</return>

</block_content>}</block></function>

</unit>
