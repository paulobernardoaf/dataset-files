<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\io\io.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_io.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sdb.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"io_private.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>R_LIB_VERSION</name> <argument_list>(<argument><expr><name>r_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fd_read_at_wrap</name> <parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_io_fd_read_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fd_write_at_wrap</name> <parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_io_fd_write_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cbOnIterMap</name>)<parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <name>st64</name></type> <name>on_map_skyline</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>vaddr</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>match_flg</name></decl></parameter>, <parameter><decl><type><name>cbOnIterMap</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>prefix_mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>RPVector</name> <modifier>*</modifier></type><name>skyline</name> <init>= <expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>map_skyline</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name>vaddr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>, <decl><type ref="prev"/><name>wrap</name> <init>= <expr><operator>!</operator><name>prefix_mode</name> <operator>&amp;&amp;</operator> <name>vaddr</name> <operator>+</operator> <name>len</name> <operator>&lt;</operator> <name>vaddr</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>, <parameter><type><name>part</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((addr) &lt; r_itv_end (((RIOMapSkyline *)(part))-&gt;itv) - 1 ? -1 : (addr) &gt; r_itv_end (((RIOMapSkyline *)(part))-&gt;itv) - 1 ? 1 : 0)</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>r_pvector_len</name> <argument_list>(<argument><expr><name>skyline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_pvector_lower_bound</name> <argument_list>(<argument><expr><name>skyline</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>CMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name>r_pvector_len</name> <argument_list>(<argument><expr><name>skyline</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>wrap</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>wrap</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CMP</name></cpp:undef>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name>r_pvector_len</name> <argument_list>(<argument><expr><name>skyline</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>RIOMapSkyline</name> <modifier>*</modifier></type><name>part</name> <init>= <expr><call><name>r_pvector_at</name> <argument_list>(<argument><expr><name>skyline</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_itv_end</name> <argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>addr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wrap</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <call><name>r_pvector_len</name> <argument_list>(<argument><expr><name>skyline</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>wrap</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&lt;</operator> <name><name>part</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prefix_mode</name> <operator>||</operator> <name>len</name> <operator>&lt;=</operator> <name><name>part</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name> <operator>-</operator> <name>vaddr</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>part</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>len1</name> <init>= <expr><call><name>R_MIN</name> <argument_list>(<argument><expr><name>vaddr</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>addr</name></expr></argument>, <argument><expr><call><name>r_itv_end</name> <argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>itv</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len1</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>part</name><operator>-&gt;</operator><name>map</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <name>match_flg</name><operator>)</operator> <operator>==</operator> <name>match_flg</name> <operator>||</operator> <name><name>io</name><operator>-&gt;</operator><name>p_cache</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>st64</name></type> <name>result</name> <init>= <expr><call><name>op</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>part</name><operator>-&gt;</operator><name>map</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>part</name><operator>-&gt;</operator><name>map</name><operator>-&gt;</operator><name>delta</name></name> <operator>+</operator> <name>addr</name> <operator>-</operator> <name><name>part</name><operator>-&gt;</operator><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name></expr></argument>,

<argument><expr><name>buf</name> <operator>+</operator> <operator>(</operator><name>addr</name> <operator>-</operator> <name>vaddr</name><operator>)</operator></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><name><name>part</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prefix_mode</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>addr</name> <operator>+=</operator> <name>result</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>len1</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>len1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>addr</name> <operator>+=</operator> <name>len1</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>prefix_mode</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>addr</name> <operator>+=</operator> <name>len1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>vaddr</name> <operator>+</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>addr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><ternary><condition><expr><name>prefix_mode</name></expr> ?</condition><then> <expr><name>addr</name> <operator>-</operator> <name>vaddr</name></expr> </then><else>: <expr><name>ret</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RIO</name><modifier>*</modifier></type> <name>r_io_new</name><parameter_list>()</parameter_list> <block>{<block_content>

<return>return <expr><call><name>r_io_init</name> <argument_list>(<argument><expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RIO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RIO</name><modifier>*</modifier></type> <name>r_io_init</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>addrbytes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_desc_init</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>map_skyline</name></name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_pvector_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>map_skyline_shadow</name></name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_map_init</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_cache_init</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_plugin_init</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_undo_init</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>io</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_io_free</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>io</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_io_fini</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cache_free</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RIODesc</name> <modifier>*</modifier></type><name>r_io_open_buffer</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>bufSize</name> <init>= <expr><call><name>r_buf_size</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uri</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"malloc://%d"</literal></expr></argument>, <argument><expr><name>bufSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>r_io_open_nomap</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>r_buf_data</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_io_desc_write</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>bufSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>desc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RIODesc</name> <modifier>*</modifier></type><name>r_io_open_nomap</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name> <operator>&amp;&amp;</operator> <name>uri</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>r_io_desc_open</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>io</name><operator>-&gt;</operator><name>autofd</name></name> <operator>||</operator> <operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>desc</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>desc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>desc</name></name> <operator>=</operator> <name>desc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>desc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RIODesc</name><modifier>*</modifier></type> <name>r_io_open</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name> <operator>&amp;&amp;</operator> <name><name>io</name><operator>-&gt;</operator><name>maps</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RIODesc</name><modifier>*</modifier></type> <name>desc</name> <init>= <expr><call><name>r_io_open_nomap</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_io_map_new</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>perm</name></name></expr></argument>, <argument><expr><literal type="number">0LL</literal></expr></argument>, <argument><expr><literal type="number">0LL</literal></expr></argument>, <argument><expr><call><name>r_io_desc_size</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>desc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RIODesc</name><modifier>*</modifier></type> <name>r_io_open_at</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>at</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name> <operator>&amp;&amp;</operator> <name><name>io</name><operator>-&gt;</operator><name>maps</name></name> <operator>&amp;&amp;</operator> <name>uri</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RIODesc</name><modifier>*</modifier></type> <name>desc</name> <init>= <expr><call><name>r_io_open_nomap</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>size</name> <init>= <expr><call><name>r_io_desc_size</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>UT64_MAX</name> <operator>-</operator> <name>size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>at</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>io_map_new</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>perm</name></name></expr></argument>, <argument><expr><name>UT64_MAX</name> <operator>-</operator> <name>at</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0LL</literal></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <operator>(</operator><name>UT64_MAX</name> <operator>-</operator> <name>at</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>UT64_MAX</name> <operator>-</operator> <name>at</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_io_map_new</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>perm</name></name></expr></argument>, <argument><expr><literal type="number">0LL</literal></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>desc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>RList</name><modifier>*</modifier></type> <name>r_io_open_many</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name><modifier>*</modifier></type> <name>desc_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name><modifier>*</modifier></type> <name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIODesc</name><modifier>*</modifier></type> <name>desc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name> <operator>&amp;&amp;</operator> <name><name>io</name><operator>-&gt;</operator><name>files</name></name> <operator>&amp;&amp;</operator> <name>uri</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RIOPlugin</name><modifier>*</modifier></type> <name>plugin</name> <init>= <expr><call><name>r_io_plugin_resolve</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>plugin</name> <operator>||</operator> <operator>!</operator><name><name>plugin</name><operator>-&gt;</operator><name>open_many</name></name> <operator>||</operator> <operator>!</operator><name><name>plugin</name><operator>-&gt;</operator><name>close</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>desc_list</name> <operator>=</operator> <call><name><name>plugin</name><operator>-&gt;</operator><name>open_many</name></name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>desc_list</argument>, <argument>iter</argument>, <argument>desc</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>desc</name><operator>-&gt;</operator><name>plugin</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>plugin</name></name> <operator>=</operator> <name>plugin</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>desc</name><operator>-&gt;</operator><name>uri</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>uri</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_io_desc_add</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>desc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>desc</name></name> <operator>=</operator> <name>desc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>desc_list</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_reopen</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>old</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uri</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>old</name> <operator>=</operator> <call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>uri</name> <operator>=</operator> <ternary><condition><expr><name><name>old</name><operator>-&gt;</operator><name>referer</name></name></expr>?</condition><then> <expr><name><name>old</name><operator>-&gt;</operator><name>referer</name></name></expr></then><else>: <expr><name><name>old</name><operator>-&gt;</operator><name>uri</name></name></expr></else></ternary></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WINDOWS__</name></expr></cpp:if> 

<if_stmt><if>if <condition>(<expr><name><name>old</name><operator>-&gt;</operator><name>plugin</name><operator>-&gt;</operator><name>close</name></name> <operator>&amp;&amp;</operator> <call><name><name>old</name><operator>-&gt;</operator><name>plugin</name><operator>-&gt;</operator><name>close</name></name> <argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>new</name> <operator>=</operator> <call><name>r_io_open_nomap</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_io_desc_exchange</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>old</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_desc_del</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>old</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>new</name> <operator>=</operator> <call><name>r_io_open_nomap</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_io_desc_exchange</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>old</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_io_desc_close</name> <argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</return> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_io_close_all</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>)</parameter_list> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>io</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_io_desc_fini</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_map_fini</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>plugins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_desc_init</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_map_init</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_cache_fini</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_plugin_init</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_io_pread_at</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>paddr</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>ff</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>Oxff</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>r_io_desc_read_at</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name>paddr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_io_pwrite_at</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>paddr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_io_desc_write_at</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name>paddr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_vread_at_mapped</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>vaddr</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>ff</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>Oxff</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>on_map_skyline</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>vaddr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>R_PERM_R</name></expr></argument>, <argument><expr><name>fd_read_at_wrap</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_io_vwrite_at</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>vaddr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>on_map_skyline</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>vaddr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>R_PERM_W</name></expr></argument>, <argument><expr><name>fd_write_at_wrap</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_read_at</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>io</name><operator>-&gt;</operator><name>va</name></name><operator>)</operator></expr>

?</condition><then> <expr><call><name>r_io_vread_at_mapped</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>r_io_pread_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>cached</name></name> <operator>&amp;</operator> <name>R_PERM_R</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_io_cache_read</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_read_at_mapped</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name> <operator>&amp;&amp;</operator> <name>buf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>ff</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>Oxff</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>va</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>on_map_skyline</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>R_PERM_R</name></expr></argument>, <argument><expr><name>fd_read_at_wrap</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_io_pread_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>cached</name></name> <operator>&amp;</operator> <name>R_PERM_R</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_io_cache_read</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_io_nread_at</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>va</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>ff</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>Oxff</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>on_map_skyline</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>R_PERM_R</name></expr></argument>, <argument><expr><name>fd_read_at_wrap</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_io_pread_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>io</name><operator>-&gt;</operator><name>cached</name></name> <operator>&amp;</operator> <name>R_PERM_R</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_io_cache_read</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_write_at</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>mybuf</name> <init>= <expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>io</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>write_mask</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mybuf</name> <operator>=</operator> <call><name>r_mem_dup</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>mybuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;=</operator> <name><name>io</name><operator>-&gt;</operator><name>write_mask</name><index>[<expr><name>i</name> <operator>%</operator> <name><name>io</name><operator>-&gt;</operator><name>write_mask_len</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>cached</name></name> <operator>&amp;</operator> <name>R_PERM_W</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_io_cache_write</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>mybuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>va</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_io_vwrite_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>mybuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_io_pwrite_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>mybuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>mybuf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>mybuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_read</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>io</name> <operator>&amp;&amp;</operator> <call><name>r_io_read_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_write</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>io</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>r_io_write_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_io_size</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name>io</name></expr>?</condition><then> <expr><call><name>r_io_desc_size</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="number">0LL</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_is_listener</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>io</name> <operator>&amp;&amp;</operator> <name><name>io</name><operator>-&gt;</operator><name>desc</name></name> <operator>&amp;&amp;</operator> <name><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>plugin</name></name> <operator>&amp;&amp;</operator> <name><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>plugin</name><operator>-&gt;</operator><name>listener</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>plugin</name><operator>-&gt;</operator><name>listener</name></name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>char</name> <modifier>*</modifier></type><name>r_io_system</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>io</name> <operator>&amp;&amp;</operator> <name><name>io</name><operator>-&gt;</operator><name>desc</name></name> <operator>&amp;&amp;</operator> <name><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>plugin</name></name> <operator>&amp;&amp;</operator> <name><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>plugin</name><operator>-&gt;</operator><name>system</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>plugin</name><operator>-&gt;</operator><name>system</name></name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_resize</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>newsize</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>io</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>maps</name> <init>= <expr><call><name>r_io_map_get_for_fd</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>current_map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>fd_size</name> <init>= <expr><call><name>r_io_fd_size</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>maps</argument>, <argument>iter</argument>, <argument>current_map</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>current_map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>size</name></name> <operator>==</operator> <name>fd_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_io_map_resize</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name><name>current_map</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>maps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>r_io_desc_resize</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_close</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name>io</name></expr> ?</condition><then> <expr><call><name>r_io_desc_close</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_io_extend_at</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>cur_size</name></decl>, <decl><type ref="prev"/><name>tmp_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>io</name> <operator>||</operator> <operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>desc</name></name> <operator>||</operator> <operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>plugin</name></name> <operator>||</operator> <operator>!</operator><name>size</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>plugin</name><operator>-&gt;</operator><name>extend</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>cur_off</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_io_seek</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>R_IO_SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>r_io_desc_extend</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>cur_off</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <name>R_PERM_RW</name><operator>)</operator> <operator>!=</operator> <name>R_PERM_RW</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur_size</name> <operator>=</operator> <call><name>r_io_desc_size</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;</operator> <name>cur_size</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>UT64_MAX</name> <operator>-</operator> <name>size</name><operator>)</operator> <operator>&lt;</operator> <name>cur_size</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_io_resize</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>cur_size</name> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp_size</name> <operator>=</operator> <name>cur_size</name> <operator>-</operator> <name>addr</name><operator>)</operator> <operator>==</operator> <literal type="number">0LL</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buffer</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>tmp_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_io_pread_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>tmp_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>empty</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>empty</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_io_pwrite_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_io_pwrite_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>addr</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>tmp_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_io_set_write_mask</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>io</name> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>write_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mask</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>write_mask</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>write_mask_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>write_mask</name></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>write_mask</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>write_mask_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_io_p2v</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>pa</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><call><name>r_io_map_get_paddr</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>pa</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>map</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>pa</name> <operator>-</operator> <name><name>map</name><operator>-&gt;</operator><name>delta</name></name> <operator>+</operator> <name><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>UT64_MAX</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_io_v2p</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>va</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><call><name>r_io_map_get</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>map</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>st64</name></type> <name>delta</name> <init>= <expr><name>va</name> <operator>-</operator> <name><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name><name>map</name><operator>-&gt;</operator><name>delta</name></name> <operator>+</operator> <name>delta</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>UT64_MAX</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_io_bind</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>RIOBind</name> <modifier>*</modifier></type><name>bnd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_if_fail</name> <argument_list>(<argument><expr><name>io</name> <operator>&amp;&amp;</operator> <name>bnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>io</name></name> <operator>=</operator> <name>io</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>desc_use</name></name> <operator>=</operator> <name>r_io_use_fd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>desc_get</name></name> <operator>=</operator> <name>r_io_desc_get</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>desc_size</name></name> <operator>=</operator> <name>r_io_desc_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>p2v</name></name> <operator>=</operator> <name>r_io_p2v</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>v2p</name></name> <operator>=</operator> <name>r_io_v2p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <name>r_io_open_nomap</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>open_at</name></name> <operator>=</operator> <name>r_io_open_at</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>close</name></name> <operator>=</operator> <name>r_io_fd_close</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>read_at</name></name> <operator>=</operator> <name>r_io_read_at</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>write_at</name></name> <operator>=</operator> <name>r_io_write_at</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>system</name></name> <operator>=</operator> <name>r_io_system</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>fd_open</name></name> <operator>=</operator> <name>r_io_fd_open</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>fd_close</name></name> <operator>=</operator> <name>r_io_fd_close</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>fd_seek</name></name> <operator>=</operator> <name>r_io_fd_seek</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>fd_size</name></name> <operator>=</operator> <name>r_io_fd_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>fd_resize</name></name> <operator>=</operator> <name>r_io_fd_resize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>fd_read</name></name> <operator>=</operator> <name>r_io_fd_read</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>fd_write</name></name> <operator>=</operator> <name>r_io_fd_write</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>fd_read_at</name></name> <operator>=</operator> <name>r_io_fd_read_at</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>fd_write_at</name></name> <operator>=</operator> <name>r_io_fd_write_at</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>fd_is_dbg</name></name> <operator>=</operator> <name>r_io_fd_is_dbg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>fd_get_name</name></name> <operator>=</operator> <name>r_io_fd_get_name</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>fd_get_map</name></name> <operator>=</operator> <name>r_io_map_get_for_fd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>fd_remap</name></name> <operator>=</operator> <name>r_io_map_remap_fd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>is_valid_offset</name></name> <operator>=</operator> <name>r_io_is_valid_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>map_get</name></name> <operator>=</operator> <name>r_io_map_get</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>map_get_paddr</name></name> <operator>=</operator> <name>r_io_map_get_paddr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>addr_is_mapped</name></name> <operator>=</operator> <name>r_io_addr_is_mapped</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>map_add</name></name> <operator>=</operator> <name>r_io_map_add</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PTRACE</name></expr></cpp:if>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>ptrace</name></name> <operator>=</operator> <name>r_io_ptrace</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd</name><operator>-&gt;</operator><name>ptrace_func</name></name> <operator>=</operator> <name>r_io_ptrace_func</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_io_shift</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>st64</name></type> <name>move</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name><modifier>*</modifier></type> <name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>chunksize</name> <init>= <expr><literal type="number">0x10000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>saved_off</name> <init>= <expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>src</name></decl>, <decl><type ref="prev"/><name>shiftsize</name> <init>= <expr><call><name>r_num_abs</name> <argument_list>(<argument><expr><name>move</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shiftsize</name> <operator>||</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>&lt;=</operator> <name>shiftsize</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>rest</name> <init>= <expr><operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>-</operator> <name>shiftsize</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>chunksize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>move</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>shiftsize</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>start</name> <operator>+</operator> <name>shiftsize</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><name>rest</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>chunksize</name> <operator>&gt;</operator> <name>rest</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>chunksize</name> <operator>=</operator> <name>rest</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>move</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>chunksize</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>chunksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_write_at</name> <argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>move</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>chunksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>move</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>chunksize</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rest</name> <operator>-=</operator> <name>chunksize</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <call><name>r_io_desc_seek</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name>saved_off</name></expr></argument>, <argument><expr><name>R_IO_SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut64</name></type> <name>r_io_seek</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>io</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0LL</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>whence</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_IO_SEEK_SET</name></expr>:</case>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_IO_SEEK_CUR</name></expr>:</case>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_IO_SEEK_END</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <call><name>r_io_desc_seek</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name><name>io</name><operator>-&gt;</operator><name>off</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PTRACE</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_PTRACE_WRAP</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ptrace_wrap.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>ptrace_wrap_instance</name> <modifier>*</modifier></type><name>io_ptrace_wrap_instance</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>ptrace_wrap</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>ptrace_wrap</name></name> <operator>=</operator> <call><name>R_NEW</name> <argument_list>(<argument><expr><name>ptrace_wrap_instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>io</name><operator>-&gt;</operator><name>ptrace_wrap</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ptrace_wrap_instance_start</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>ptrace_wrap</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>ptrace_wrap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>io</name><operator>-&gt;</operator><name>ptrace_wrap</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>R_API</name> <name>long</name></type> <name>r_io_ptrace</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>r_ptrace_request_t</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>r_ptrace_data_t</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_PTRACE_WRAP</name></expr></cpp:if>

<decl_stmt><decl><type><name>ptrace_wrap_instance</name> <modifier>*</modifier></type><name>wrap</name> <init>= <expr><call><name>io_ptrace_wrap_instance</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wrap</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ptrace_wrap</name> <argument_list>(<argument><expr><name>wrap</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>ptrace</name> <argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>pid_t</name></type> <name>r_io_ptrace_fork</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>child_callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>child_callback_user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_PTRACE_WRAP</name></expr></cpp:if>

<decl_stmt><decl><type><name>ptrace_wrap_instance</name> <modifier>*</modifier></type><name>wrap</name> <init>= <expr><call><name>io_ptrace_wrap_instance</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wrap</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ptrace_wrap_fork</name> <argument_list>(<argument><expr><name>wrap</name></expr></argument>, <argument><expr><name>child_callback</name></expr></argument>, <argument><expr><name>child_callback_user</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>pid_t</name></type> <name>r</name> <init>= <expr><call><name>r_sys_fork</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>child_callback</name> <argument_list>(<argument><expr><name>child_callback_user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name> <modifier>*</modifier></type><name>r_io_ptrace_func</name><parameter_list>(<parameter><decl><type><name>RIO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_PTRACE_WRAP</name></expr></cpp:if>

<decl_stmt><decl><type><name>ptrace_wrap_instance</name> <modifier>*</modifier></type><name>wrap</name> <init>= <expr><call><name>io_ptrace_wrap_instance</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wrap</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>ptrace_wrap_func</name> <argument_list>(<argument><expr><name>wrap</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>func</name> <argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>R_API</name> <name>int</name></type> <name>r_io_fini</name><parameter_list>(<parameter><decl><type><name>RIO</name><modifier>*</modifier></type> <name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>io</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_io_desc_cache_fini_all</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_desc_fini</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_map_fini</name> <argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ls_free</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>plugins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>undo</name><operator>.</operator><name>w_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>runprofile</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>runprofile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_IO_USE_PTRACE_WRAP</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>ptrace_wrap</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ptrace_wrap_instance_stop</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>ptrace_wrap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>ptrace_wrap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

</unit>
