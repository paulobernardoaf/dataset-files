<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\hash\sha1.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_hash.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha1.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA_ROT</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((X) &lt;&lt; (n)) | ((X) &gt;&gt; (32 - (n))))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>shaHashBlock</name><parameter_list>(<parameter><decl><type><name>R_SHA_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>, <decl><type ref="prev"/><name>C</name></decl>, <decl><type ref="prev"/><name>D</name></decl>, <decl><type ref="prev"/><name>E</name></decl>, <decl><type ref="prev"/><name>TEMP</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;=</operator> <literal type="number">79</literal></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>W</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator>

<call><name>SHA_ROT</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>W</name><index>[<expr><name>t</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>W</name><index>[<expr><name>t</name> <operator>-</operator> <literal type="number">8</literal></expr>]</index></name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>W</name><index>[<expr><name>t</name> <operator>-</operator> <literal type="number">14</literal></expr>]</index></name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>W</name><index>[<expr><name>t</name> <operator>-</operator> <literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>H</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>H</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>C</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>H</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>D</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>H</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>E</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>H</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;=</operator> <literal type="number">19</literal></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>TEMP</name> <operator>=</operator> <call><name>SHA_ROT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>C</name> <operator>^</operator> <name>D</name><operator>)</operator> <operator>&amp;</operator> <name>B</name><operator>)</operator> <operator>^</operator> <name>D</name><operator>)</operator> <operator>+</operator> <name>E</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>W</name><index>[<expr><name>t</name></expr>]</index></name> <operator>+</operator> <literal type="number">0x5a827999</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>E</name> <operator>=</operator> <name>D</name></expr>;</expr_stmt> <expr_stmt><expr><name>D</name> <operator>=</operator> <name>C</name></expr>;</expr_stmt> <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>SHA_ROT</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>B</name> <operator>=</operator> <name>A</name></expr>;</expr_stmt> <expr_stmt><expr><name>A</name> <operator>=</operator> <name>TEMP</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">20</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;=</operator> <literal type="number">39</literal></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>TEMP</name> <operator>=</operator> <call><name>SHA_ROT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>B</name> <operator>^</operator> <name>C</name> <operator>^</operator> <name>D</name><operator>)</operator> <operator>+</operator> <name>E</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>W</name><index>[<expr><name>t</name></expr>]</index></name> <operator>+</operator> <literal type="number">0x6ed9eba1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>E</name> <operator>=</operator> <name>D</name></expr>;</expr_stmt> <expr_stmt><expr><name>D</name> <operator>=</operator> <name>C</name></expr>;</expr_stmt> <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>SHA_ROT</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>B</name> <operator>=</operator> <name>A</name></expr>;</expr_stmt> <expr_stmt><expr><name>A</name> <operator>=</operator> <name>TEMP</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">40</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;=</operator> <literal type="number">59</literal></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>TEMP</name> <operator>=</operator> <call><name>SHA_ROT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><operator>(</operator><name>B</name> <operator>&amp;</operator> <name>C</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>D</name> <operator>&amp;</operator> <operator>(</operator><name>B</name> <operator>|</operator> <name>C</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>+</operator> <name>E</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>W</name><index>[<expr><name>t</name></expr>]</index></name> <operator>+</operator> <literal type="number">0x8f1bbcdc</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>E</name> <operator>=</operator> <name>D</name></expr>;</expr_stmt> <expr_stmt><expr><name>D</name> <operator>=</operator> <name>C</name></expr>;</expr_stmt> <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>SHA_ROT</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>B</name> <operator>=</operator> <name>A</name></expr>;</expr_stmt> <expr_stmt><expr><name>A</name> <operator>=</operator> <name>TEMP</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">60</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;=</operator> <literal type="number">79</literal></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>TEMP</name> <operator>=</operator> <call><name>SHA_ROT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>B</name> <operator>^</operator> <name>C</name> <operator>^</operator> <name>D</name><operator>)</operator> <operator>+</operator> <name>E</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>W</name><index>[<expr><name>t</name></expr>]</index></name> <operator>+</operator> <literal type="number">0xca62c1d6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>E</name> <operator>=</operator> <name>D</name></expr>;</expr_stmt> <expr_stmt><expr><name>D</name> <operator>=</operator> <name>C</name></expr>;</expr_stmt> <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>SHA_ROT</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>B</name> <operator>=</operator> <name>A</name></expr>;</expr_stmt> <expr_stmt><expr><name>A</name> <operator>=</operator> <name>TEMP</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>H</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>A</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>H</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>B</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>H</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>C</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>H</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>D</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>H</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name>E</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>SHA1_Init</name><parameter_list>(<parameter><decl><type><name>R_SHA_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>lenW</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sizeHi</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sizeLo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>H</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x67452301</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>H</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xefcdab89</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>H</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x98badcfe</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>H</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x10325476</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>H</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xc3d2e1f0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>W</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>SHA1_Update</name><parameter_list>(<parameter><decl><type><name>R_SHA_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_dataIn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>dataIn</name> <init>= <expr><name>_dataIn</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>W</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>lenW</name></name> <operator>/</operator> <literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>W</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>lenW</name></name> <operator>/</operator> <literal type="number">4</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>dataIn</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>++</operator><name><name>ctx</name><operator>-&gt;</operator><name>lenW</name></name><operator>)</operator> <operator>%</operator> <literal type="number">64</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>shaHashBlock</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>lenW</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sizeLo</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sizeHi</name></name> <operator>+=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>sizeLo</name></name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>SHA1_Final</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name><name>hashout</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>R_SHA_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>pad0x80</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>pad0x00</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>padlen</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>padlen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>sizeHi</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>padlen</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>sizeHi</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>padlen</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>sizeHi</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>padlen</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>sizeHi</name></name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>padlen</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>sizeLo</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>padlen</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>sizeLo</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>padlen</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>sizeLo</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>padlen</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>sizeLo</name></name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SHA1_Update</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pad0x80</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>lenW</name></name> <operator>!=</operator> <literal type="number">56</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SHA1_Update</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pad0x00</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>SHA1_Update</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>padlen</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>hashout</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>H</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>H</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>SHA1_Init</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
