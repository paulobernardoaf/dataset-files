<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\hash\xxhash.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xxhash.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_rotl32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &lt;&lt; (r)) | ((x) &gt;&gt; (32 - (r))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIME32_1</name></cpp:macro> <cpp:value>2654435761U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIME32_2</name></cpp:macro> <cpp:value>2246822519U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIME32_3</name></cpp:macro> <cpp:value>3266489917U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIME32_4</name></cpp:macro> <cpp:value>668265263U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIME32_5</name></cpp:macro> <cpp:value>374761393U</cpp:value></cpp:define>

<function><type><name>ut32</name></type> <name>XXH32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>seed</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator> <name>input</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier><specifier>const</specifier></type> <name>bEnd</name> <init>= <expr><name>p</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>h32</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier><specifier>const</specifier></type> <name>limit</name> <init>= <expr><name>bEnd</name> <operator>-</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>v1</name> <init>= <expr><name>seed</name> <operator>+</operator> <name>PRIME32_1</name> <operator>+</operator> <name>PRIME32_2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>v2</name> <init>= <expr><name>seed</name> <operator>+</operator> <name>PRIME32_2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>v3</name> <init>= <expr><name>seed</name> <operator>+</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>v4</name> <init>= <expr><name>seed</name> <operator>-</operator> <name>PRIME32_1</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>v1</name> <operator>+=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>XXH_rotl32</name> <argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v1</name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v2</name> <operator>+=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name>XXH_rotl32</name> <argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v2</name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v3</name> <operator>+=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v3</name> <operator>=</operator> <call><name>XXH_rotl32</name> <argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v3</name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v4</name> <operator>+=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v4</name> <operator>=</operator> <call><name>XXH_rotl32</name> <argument_list>(<argument><expr><name>v4</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v4</name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>p</name> <operator>&lt;=</operator> <name>limit</name></expr>)</condition>;</do>

<expr_stmt><expr><name>h32</name> <operator>=</operator> <call><name>XXH_rotl32</name> <argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>XXH_rotl32</name> <argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>XXH_rotl32</name> <argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>XXH_rotl32</name> <argument_list>(<argument><expr><name>v4</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>h32</name> <operator>=</operator> <name>seed</name> <operator>+</operator> <name>PRIME32_5</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>h32</name> <operator>+=</operator> <operator>(</operator><name>ut32</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;=</operator> <name>bEnd</name> <operator>-</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>h32</name> <operator>+=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h32</name> <operator>=</operator> <call><name>XXH_rotl32</name> <argument_list>(<argument><expr><name>h32</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>bEnd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>h32</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>*</operator> <name>PRIME32_5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h32</name> <operator>=</operator> <call><name>XXH_rotl32</name> <argument_list>(<argument><expr><name>h32</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>h32</name> <operator>^=</operator> <name>h32</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h32</name> <operator>*=</operator> <name>PRIME32_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h32</name> <operator>^=</operator> <name>h32</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h32</name> <operator>*=</operator> <name>PRIME32_3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h32</name> <operator>^=</operator> <name>h32</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<return>return <expr><name>h32</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>XXH_state32_t</name> <block>{

<decl_stmt><decl><type><name>ut32</name></type> <name>seed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>v1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>v2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>v3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>v4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>total_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>memory</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>memsize</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><name>void</name> <modifier>*</modifier></type><name>XXH32_init</name> <parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>seed</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>XXH_state32_t</name></name> <modifier>*</modifier></type><name>state</name> <init>=

<expr><operator>(</operator>struct <name>XXH_state32_t</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>XXH_state32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>state</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <name>seed</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name> <operator>=</operator> <name>seed</name> <operator>+</operator> <name>PRIME32_1</name> <operator>+</operator> <name>PRIME32_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name> <operator>=</operator> <name>seed</name> <operator>+</operator> <name>PRIME32_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name> <operator>=</operator> <name>seed</name> <operator>+</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name> <operator>=</operator> <name>seed</name> <operator>-</operator> <name>PRIME32_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>total_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>state</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>XXH32_feed</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>state_in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>XXH_state32_t</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>state_in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator> <name>input</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier><specifier>const</specifier></type> <name>bEnd</name> <init>= <expr><name>p</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>total_len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name> <operator>+</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>memory</name></name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>memsize</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>memory</name></name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>memsize</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>memsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name> <modifier>*</modifier></type><name>p32</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ut32</name> <operator>*</operator><operator>)</operator> <name><name>state</name><operator>-&gt;</operator><name>memory</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name> <operator>+=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>p32</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name> <operator>=</operator> <call><name>XXH_rotl32</name> <argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p32</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name> <operator>+=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>p32</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name> <operator>=</operator> <call><name>XXH_rotl32</name> <argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p32</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name> <operator>+=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>p32</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name> <operator>=</operator> <call><name>XXH_rotl32</name> <argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p32</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name> <operator>+=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>p32</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name> <operator>=</operator> <call><name>XXH_rotl32</name> <argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p32</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">16</literal> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>memsize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier><specifier>const</specifier></type> <name>limit</name> <init>= <expr><name>bEnd</name> <operator>-</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>v1</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>v2</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>v3</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>v4</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;=</operator> <name>limit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v1</name> <operator>+=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>XXH_rotl32</name> <argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v1</name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v2</name> <operator>+=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name>XXH_rotl32</name> <argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v2</name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v3</name> <operator>+=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v3</name> <operator>=</operator> <call><name>XXH_rotl32</name> <argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v3</name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v4</name> <operator>+=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v4</name> <operator>=</operator> <call><name>XXH_rotl32</name> <argument_list>(<argument><expr><name>v4</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v4</name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name> <operator>=</operator> <name>v2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name> <operator>=</operator> <name>v3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name> <operator>=</operator> <name>v4</name></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>bEnd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name> <operator>=</operator> <call><name>R_MIN</name> <argument_list>(<argument><expr><name>bEnd</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>memory</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>memory</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>ut32</name></type> <name>XXH32_getIntermediateResult</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>state_in</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>XXH_state32_t</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>state_in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <name><name>state</name><operator>-&gt;</operator><name>memory</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>bEnd</name> <init>= <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <name><name>state</name><operator>-&gt;</operator><name>memory</name></name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>memsize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>h32</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>total_len</name></name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>h32</name> <operator>=</operator> <call><name>XXH_rotl32</name> <argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>XXH_rotl32</name> <argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>XXH_rotl32</name> <argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>XXH_rotl32</name> <argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>h32</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>seed</name></name> <operator>+</operator> <name>PRIME32_5</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>h32</name> <operator>+=</operator> <operator>(</operator><name>ut32</name><operator>)</operator> <name><name>state</name><operator>-&gt;</operator><name>total_len</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;=</operator> <name>bEnd</name> <operator>-</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>h32</name> <operator>+=</operator> <call><name>r_read_le32</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h32</name> <operator>=</operator> <call><name>XXH_rotl32</name> <argument_list>(<argument><expr><name>h32</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>bEnd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>h32</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>*</operator> <name>PRIME32_5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h32</name> <operator>=</operator> <call><name>XXH_rotl32</name> <argument_list>(<argument><expr><name>h32</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>h32</name> <operator>^=</operator> <name>h32</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h32</name> <operator>*=</operator> <name>PRIME32_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h32</name> <operator>^=</operator> <name>h32</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h32</name> <operator>*=</operator> <name>PRIME32_3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h32</name> <operator>^=</operator> <name>h32</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<return>return <expr><name>h32</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ut32</name></type> <name>XXH32_result</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>state_in</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>h32</name> <init>= <expr><call><name>XXH32_getIntermediateResult</name> <argument_list>(<argument><expr><name>state_in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>state_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>h32</name></expr>;</return>

</block_content>}</block></function>

</unit>
