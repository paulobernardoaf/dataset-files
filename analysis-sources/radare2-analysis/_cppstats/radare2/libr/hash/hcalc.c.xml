<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\hash\hcalc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_hash.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_CRC_PRESET</name><parameter_list>(<parameter><type><name>rbits</name></type></parameter>, <parameter><type><name>aname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (algobit &amp; R_HASH_##aname) { ut##rbits res = r_hash_crc_preset (buf, len, CRC_PRESET_##aname); r_write_be##rbits (ctx-&gt;digest, res); return R_HASH_SIZE_##aname; } } while(0)</cpp:value></cpp:define>

<function><type><name>R_API</name> <name>int</name></type> <name>r_hash_calculate</name><parameter_list>(<parameter><decl><type><name>RHash</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>algobit</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_MD4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_hash_do_md4</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_MD4</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_MD5</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_hash_do_md5</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_MD5</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_SHA1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_hash_do_sha1</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_SHA1</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_SHA256</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_hash_do_sha256</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_SHA256</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_SHA384</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_hash_do_sha384</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_SHA384</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_SHA512</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_hash_do_sha512</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_SHA512</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_XXHASH</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>res</name> <init>= <expr><call><name>r_hash_xxhash</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name>R_HASH_SIZE_XXHASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_XXHASH</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_FLETCHER8</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>res</name> <init>= <expr><call><name>r_hash_fletcher8</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name>R_HASH_SIZE_FLETCHER8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_FLETCHER8</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_FLETCHER16</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>res</name> <init>= <expr><call><name>r_hash_fletcher16</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name>R_HASH_SIZE_FLETCHER16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_FLETCHER16</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_FLETCHER32</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>res</name> <init>= <expr><call><name>r_hash_fletcher32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name>R_HASH_SIZE_FLETCHER32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_FLETCHER32</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_FLETCHER64</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>res</name> <init>= <expr><call><name>r_hash_fletcher64</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name>R_HASH_SIZE_FLETCHER64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_FLETCHER64</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_ADLER32</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>res</name> <init>= <expr><call><name>r_hash_adler32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name>R_HASH_SIZE_ADLER32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_ADLER32</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_HAMDIST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name> <operator>=</operator> <call><name>r_hash_hamdist</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_HAMDIST</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_PCPRINT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name> <operator>=</operator> <call><name>r_hash_pcprint</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_PCPRINT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_PARITY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name> <operator>=</operator> <call><name>r_hash_parity</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_PARITY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_ENTROPY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_mem_memzero</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>entropy</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>entropy</name></name> <operator>=</operator> <call><name>r_hash_entropy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_ENTROPY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_XOR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name> <operator>=</operator> <call><name>r_hash_xor</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_XOR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_XORPAIR</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>res</name> <init>= <expr><call><name>r_hash_xorpair</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_XORPAIR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_MOD255</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name> <operator>=</operator> <call><name>r_hash_mod255</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_MOD255</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_LUHN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name> <operator>=</operator> <call><name>r_hash_luhn</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_LUHN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_CRC8_SMBUS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>res</name> <init>= <expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_8_SMBUS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name>R_HASH_SIZE_CRC8_SMBUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_CRC8_SMBUS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC8_EXTRA</name></expr></cpp:if>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>CRC8_CDMA2000</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>CRC8_CDMA2000</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>CRC8_DARC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>CRC8_DVB_S2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>CRC8_EBU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>CRC8_ICODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>CRC8_ITU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>CRC8_MAXIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>CRC8_ROHC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>CRC8_WCDMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC15_EXTRA</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_CRC15_CAN</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>res</name> <init>= <expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_15_CAN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_write_be16</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_CRC15_CAN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_CRC16</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>res</name> <init>= <expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_16</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_write_be16</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_CRC16</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_CRC16_HDLC</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>res</name> <init>= <expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_16_HDLC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_write_be16</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_CRC16_HDLC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_CRC16_USB</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>res</name> <init>= <expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_16_USB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_write_be16</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_CRC16_USB</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_CRC16_CITT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>res</name> <init>= <expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_16_CITT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_write_be16</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_CRC16_CITT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC16_EXTRA</name></expr></cpp:if>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>CRC16_AUG_CCITT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>CRC16_BUYPASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>CRC16_CDMA2000</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>CRC16_DDS110</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>CRC16_DECT_R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>CRC16_DECT_X</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>CRC16_DNP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>CRC16_EN13757</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>CRC16_GENIBUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>CRC16_MAXIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>CRC16_MCRF4XX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>CRC16_RIELLO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>CRC16_T10_DIF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>CRC16_TELEDISK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>CRC16_TMS37157</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>CRCA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>CRC16_KERMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>CRC16_MODBUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>CRC16_X25</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>CRC16_XMODEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC24</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_CRC24</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>res</name> <init>= <expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_24</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_write_be24</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_CRC24</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_CRC32</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>res</name> <init>= <expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_32</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_write_be32</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_CRC32</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_CRC32C</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>res</name> <init>= <expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_32C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_write_be32</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_CRC32C</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algobit</name> <operator>&amp;</operator> <name>R_HASH_CRC32_ECMA_267</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>res</name> <init>= <expr><call><name>r_hash_crc_preset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CRC_PRESET_32_ECMA_267</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_write_be32</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>R_HASH_SIZE_CRC32_ECMA_267</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC32_EXTRA</name></expr></cpp:if>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>CRC32_BZIP2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>CRC32D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>CRC32_MPEG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>CRC32_POSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>CRC32Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>CRC32_JAMCRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>CRC32_XFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC64</name></expr></cpp:if>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>CRC64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>R_HAVE_CRC64_EXTRA</name></expr></cpp:if>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>CRC64_ECMA182</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>CRC64_WE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>CRC64_XZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE_CRC_PRESET</name> <argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>CRC64_ISO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
