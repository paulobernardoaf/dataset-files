<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\p\asm_rsp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rsp_idec.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>disassemble</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAsmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>rsp_instruction</name></type> <name>r_instr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>iw</name> <init>= <expr><call><name>r_read_ble32</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>big_endian</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>r_instr</name> <operator>=</operator> <call><name>rsp_instruction_decode</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>, <argument><expr><name>iw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><name><name>r_instr</name><operator>.</operator><name>mnemonic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>r_instr</name><operator>.</operator><name>noperands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">", "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>RSP_OPND_GP_REG</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><name><name>rsp_gp_reg_soft_names</name><index>[<expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OPND_OFFSET</name></expr>:</case>

<case>case <expr><name>RSP_OPND_TARGET</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OPND_ZIMM</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xffff</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"0x%04"</literal><name>PFMT64x</name></expr></argument>,

<argument><expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>RSP_OPND_SIMM</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s0x%04"</literal><name>PFMT64x</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name><operator>&lt;</operator><literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"-"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name><operator>&lt;</operator><literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><operator>-</operator><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name></expr></then><else>:<expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OPND_SHIFT_AMOUNT</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PFMT64u</name></expr></argument>, <argument><expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OPND_BASE_OFFSET</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s0x%04x(%s)"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name><operator>&lt;</operator><literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"-"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name><operator>&lt;</operator><literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><operator>-</operator><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name></expr></then><else>:<expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name><name>rsp_gp_reg_soft_names</name><index>[<expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OPND_C0_REG</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><name><name>rsp_c0_reg_soft_names</name><index>[<expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OPND_C2_CREG</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><name><name>rsp_c2_creg_names</name><index>[<expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OPND_C2_ACCU</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><name><name>rsp_c2_accu_names</name><index>[<expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OPND_C2_VREG</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><name><name>rsp_c2_vreg_names</name><index>[<expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OPND_C2_VREG_BYTE</name></expr>:</case>

<case>case <expr><name>RSP_OPND_C2_VREG_SCALAR</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s[%u]"</literal></expr></argument>, <argument><expr><name><name>rsp_c2_vreg_names</name><index>[<expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RSP_OPND_C2_VREG_ELEMENT</name></expr>:</case>

<expr_stmt><expr><call><name>r_strbuf_appendf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name><name>rsp_c2_vreg_names</name><index>[<expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>rsp_c2_vreg_element_names</name><index>[<expr><name><name>r_instr</name><operator>.</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<expr_stmt><expr><call><name>r_strbuf_append</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"???"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RAsmPlugin</name></type> <name>r_asm_plugin_rsp</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"rsp"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Reality Signal Processor"</literal></expr>,

<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"rsp"</literal></expr>,

<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>,

<expr><operator>.</operator><name>endian</name> <operator>=</operator> <name>R_SYS_ENDIAN_BI</name></expr>, 

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,

<expr><operator>.</operator><name>disassemble</name> <operator>=</operator> <operator>&amp;</operator><name>disassemble</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ASM</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_asm_plugin_rsp</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
