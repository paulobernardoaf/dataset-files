<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\p\asm_x86_nz.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_flag.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>ut64</name></type> <name>getnum</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODING_SHIFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTYPE_SHIFT</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGMASK_SHIFT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPSIZE_SHIFT</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_REGMEM</name></cpp:macro> <cpp:value>(1 &lt;&lt; (ENCODING_SHIFT + 0))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_SPECIAL</name></cpp:macro> <cpp:value>(1 &lt;&lt; (ENCODING_SHIFT + 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_IMMEDIATE</name></cpp:macro> <cpp:value>(1 &lt;&lt; (ENCODING_SHIFT + 2))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_JMPADDRESS</name></cpp:macro> <cpp:value>(1 &lt;&lt; (ENCODING_SHIFT + 3))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_REGALL</name></cpp:macro> <cpp:value>(0xff &lt;&lt; REGMASK_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_MEMORY</name></cpp:macro> <cpp:value>(1 &lt;&lt; (OPTYPE_SHIFT + 0))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_CONSTANT</name></cpp:macro> <cpp:value>(1 &lt;&lt; (OPTYPE_SHIFT + 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_GPREG</name></cpp:macro> <cpp:value>((1 &lt;&lt; (OPTYPE_SHIFT + 2)) | OT_REGALL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_SEGMENTREG</name></cpp:macro> <cpp:value>((1 &lt;&lt; (OPTYPE_SHIFT + 3)) | OT_REGALL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_FPUREG</name></cpp:macro> <cpp:value>((1 &lt;&lt; (OPTYPE_SHIFT + 4)) | OT_REGALL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_MMXREG</name></cpp:macro> <cpp:value>((1 &lt;&lt; (OPTYPE_SHIFT + 5)) | OT_REGALL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_XMMREG</name></cpp:macro> <cpp:value>((1 &lt;&lt; (OPTYPE_SHIFT + 6)) | OT_REGALL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_CONTROLREG</name></cpp:macro> <cpp:value>((1 &lt;&lt; (OPTYPE_SHIFT + 7)) | OT_REGALL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_DEBUGREG</name></cpp:macro> <cpp:value>((1 &lt;&lt; (OPTYPE_SHIFT + 8)) | OT_REGALL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_SREG</name></cpp:macro> <cpp:value>((1 &lt;&lt; (OPTYPE_SHIFT + 9)) | OT_REGALL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_REGTYPE</name></cpp:macro> <cpp:value>((OT_GPREG | OT_SEGMENTREG | OT_FPUREG | OT_MMXREG | OT_XMMREG | OT_CONTROLREG | OT_DEBUGREG) &amp; ~OT_REGALL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_REG</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((1 &lt;&lt; (REGMASK_SHIFT + (num))) | OT_REGTYPE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_UNKNOWN</name></cpp:macro> <cpp:value>(0 &lt;&lt; OPSIZE_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_BYTE</name></cpp:macro> <cpp:value>(1 &lt;&lt; OPSIZE_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_WORD</name></cpp:macro> <cpp:value>(2 &lt;&lt; OPSIZE_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_DWORD</name></cpp:macro> <cpp:value>(4 &lt;&lt; OPSIZE_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_QWORD</name></cpp:macro> <cpp:value>(8 &lt;&lt; OPSIZE_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_OWORD</name></cpp:macro> <cpp:value>(16 &lt;&lt; OPSIZE_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_TBYTE</name></cpp:macro> <cpp:value>(32 &lt;&lt; OPSIZE_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL_SIZE</name></cpp:macro> <cpp:value>(OT_BYTE | OT_WORD | OT_DWORD | OT_QWORD | OT_OWORD)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_FPUSIZE</name></cpp:macro> <cpp:value>(OT_DWORD | OT_QWORD | OT_TBYTE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_XMMSIZE</name></cpp:macro> <cpp:value>(OT_DWORD | OT_QWORD | OT_OWORD)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_REGMEMOP</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(OT_##type##REG | OT_MEMORY | OT_REGMEM)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_REGONLYOP</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(OT_##type##REG | OT_REGMEM)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_MEMONLYOP</name></cpp:macro> <cpp:value>(OT_MEMORY | OT_REGMEM)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_MEMIMMOP</name></cpp:macro> <cpp:value>(OT_MEMORY | OT_IMMEDIATE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_REGSPECOP</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(OT_##type##REG | OT_SPECIAL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_IMMOP</name></cpp:macro> <cpp:value>(OT_CONSTANT | OT_IMMEDIATE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OT_MEMADDROP</name></cpp:macro> <cpp:value>(OT_MEMORY | OT_IMMEDIATE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPECIAL_SPEC</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPECIAL_MASK</name></cpp:macro> <cpp:value>0x00000007</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_OPERANDS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_REPOP_LENGTH</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_valid_registers</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>if (is_debug_or_control(op-&gt;operands[0]) || is_debug_or_control(op-&gt;operands[1]))return -1;</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name></type> <name><name>SEG_REG_PREFIXES</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x65</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <name>tokentype_t</name> <block>{

<decl><name>TT_EOF</name></decl>,

<decl><name>TT_WORD</name></decl>,

<decl><name>TT_NUMBER</name></decl>,

<decl><name>TT_SPECIAL</name></decl>

}</block></enum></type> <name>x86newTokenType</name>;</typedef>

<typedef>typedef <type><enum>enum <name>register_t</name> <block>{

<decl><name>X86R_UNDEFINED</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>X86R_EAX</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>X86R_ECX</name></decl>, <decl><name>X86R_EDX</name></decl>, <decl><name>X86R_EBX</name></decl>, <decl><name>X86R_ESP</name></decl>, <decl><name>X86R_EBP</name></decl>, <decl><name>X86R_ESI</name></decl>, <decl><name>X86R_EDI</name></decl>, <decl><name>X86R_EIP</name></decl>,

<decl><name>X86R_AX</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>X86R_CX</name></decl>, <decl><name>X86R_DX</name></decl>, <decl><name>X86R_BX</name></decl>, <decl><name>X86R_SP</name></decl>, <decl><name>X86R_BP</name></decl>, <decl><name>X86R_SI</name></decl>, <decl><name>X86R_DI</name></decl>,

<decl><name>X86R_AL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>X86R_CL</name></decl>, <decl><name>X86R_DL</name></decl>, <decl><name>X86R_BL</name></decl>, <decl><name>X86R_AH</name></decl>, <decl><name>X86R_CH</name></decl>, <decl><name>X86R_DH</name></decl>, <decl><name>X86R_BH</name></decl>,

<decl><name>X86R_RAX</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>X86R_RCX</name></decl>, <decl><name>X86R_RDX</name></decl>, <decl><name>X86R_RBX</name></decl>, <decl><name>X86R_RSP</name></decl>, <decl><name>X86R_RBP</name></decl>, <decl><name>X86R_RSI</name></decl>, <decl><name>X86R_RDI</name></decl>, <decl><name>X86R_RIP</name></decl>,

<decl><name>X86R_R8</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>X86R_R9</name></decl>, <decl><name>X86R_R10</name></decl>, <decl><name>X86R_R11</name></decl>, <decl><name>X86R_R12</name></decl>, <decl><name>X86R_R13</name></decl>, <decl><name>X86R_R14</name></decl>, <decl><name>X86R_R15</name></decl>,

<decl><name>X86R_CS</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>X86R_SS</name></decl>, <decl><name>X86R_DS</name></decl>, <decl><name>X86R_ES</name></decl>, <decl><name>X86R_FS</name></decl>, <decl><name>X86R_GS</name></decl>, 

<decl><name>X86R_CR0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>X86R_CR1</name></decl>, <decl><name>X86R_CR2</name></decl>, <decl><name>X86R_CR3</name></decl>, <decl><name>X86R_CR4</name></decl>, <decl><name>X86R_CR5</name></decl>, <decl><name>X86R_CR6</name></decl>, <decl><name>X86R_CR7</name></decl>,

<decl><name>X86R_DR0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>X86R_DR1</name></decl>, <decl><name>X86R_DR2</name></decl>, <decl><name>X86R_DR3</name></decl>, <decl><name>X86R_DR4</name></decl>, <decl><name>X86R_DR5</name></decl>, <decl><name>X86R_DR6</name></decl>, <decl><name>X86R_DR7</name></decl>

}</block></enum></type> <name>Register</name>;</typedef>

<typedef>typedef <type><struct>struct <name>operand_t</name> <block>{

<decl_stmt><decl><type><name>ut32</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st8</name></type> <name>sign</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>Register</name></type> <name>reg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>extended</name></decl>;</decl_stmt>

}</block>;</struct>

<union>union <block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st8</name></type> <name>offset_sign</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Register</name></type> <name><name>regs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>scale</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>ut64</name></type> <name>immediate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_good_flag</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>rep_op</name><index>[<expr><name>MAX_REPOP_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

}</block>;</union>

<decl_stmt><decl><type><name>bool</name></type> <name>explicit_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>dest_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>reg_size</name></decl>;</decl_stmt>

}</block></struct></type> <name>Operand</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Opcode_t</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mnemonic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>op_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_short</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>opcode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>operands_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Operand</name></type> <name><name>operands</name><index>[<expr><name>MAX_OPERANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_bnd</name></decl>;</decl_stmt>

}</block></struct></type> <name>Opcode</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_debug_or_control</name><parameter_list>(<parameter><decl><type><name>Operand</name></type> <name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name><name>op</name><operator>.</operator><name>type</name></name> <operator>&amp;</operator> <name>OT_REGTYPE</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>OT_CONTROLREG</name> <operator>|</operator> <name>OT_DEBUGREG</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>getsib</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>sib</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sib</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>sib</name> <operator>&amp;</operator> <literal type="number">0x8</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><call><name>getsib</name> <argument_list>(<argument><expr><operator>(</operator><name>sib</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_al_reg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Operand</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>reg</name></name> <operator>==</operator> <name>X86R_AL</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>OT_BYTE</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>oprep</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_16bit_group_1</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op1</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>immediate</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sign</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x66</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x83</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>|</operator> <operator>(</operator><literal type="number">0xc0</literal> <operator>+</operator> <name>op1</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_AX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x05</literal> <operator>+</operator> <name>op1</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x81</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">0xc0</literal> <operator>+</operator> <name>op1</name><operator>)</operator> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>&gt;</operator> <literal type="number">127</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_group_1</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>modrm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mod_byte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mem_ref</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>immediate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_good_flag</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x48</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"adc"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>modrm</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"add"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>modrm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"or"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>modrm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"and"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>modrm</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"xor"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>modrm</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"sbb"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>modrm</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"sub"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>modrm</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"cmp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>modrm</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>immediate</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name> <operator>||</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x83</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>!=</operator> <name>X86R_EAX</name> <operator>||</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x81</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: Immediate exceeds bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset_sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>||</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_EBP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod_byte</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>offset</name> <argument_list type="generic">&lt; <argument><expr><name>ST8_MIN</name> <operator>||</operator> <name>offset</name></expr></argument> &gt;</argument_list></name> <name>ST8_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod_byte</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reg0</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reg0</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mem_ref</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg0</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mod_byte</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>mod_byte</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <name>modrm</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name>reg0</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_ESP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mod_byte</name> <operator>||</operator> <name>mem_ref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mod_byte</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>mem_ref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>&gt;</operator> <literal type="number">127</literal> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_EAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal> <operator>|</operator> <name>modrm</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mod_byte</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>mod_byte</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <name>modrm</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>immediate</name> <operator>&gt;</operator> <literal type="number">127</literal> <operator>||</operator> <name>immediate</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">128</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_group_2</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>modrm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mod_byte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reg0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x48</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"rol"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>modrm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"ror"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>modrm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"rcl"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>modrm</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"rcr"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>modrm</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"shl"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>modrm</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"shr"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>modrm</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"sal"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>modrm</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"sar"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>modrm</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>immediate</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sign</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>immediate</name> <operator>&gt;</operator> <literal type="number">255</literal> <operator>||</operator> <name>immediate</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: Immediate exceeds bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <operator>(</operator><name>OT_DWORD</name> <operator>|</operator> <name>OT_QWORD</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <operator>(</operator><name>OT_GPREG</name> <operator>|</operator> <name>OT_BYTE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>immediate</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>Operand</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x44</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>|</operator> <operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>offset</name></name><operator>*</operator><name><name>o</name><operator>-&gt;</operator><name>offset_sign</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <operator>(</operator><name>OT_GPREG</name> <operator>|</operator> <name>OT_WORD</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>immediate</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>reg0</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mod_byte</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>reg0</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mod_byte</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>mod_byte</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <name>modrm</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name>reg0</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>immediate</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_1byte_op</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op1</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mod_byte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mem_ref</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ebp_reg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_good_flag</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_AL</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_CONSTANT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>op1</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sign</name></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>extended</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rex</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>extended</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rex</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x48</literal> <operator>|</operator> <name>rex</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_REGALL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x67</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>op1</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <operator>(</operator><name>OT_DWORD</name> <operator>|</operator> <name>OT_QWORD</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <operator>(</operator><name>OT_DWORD</name> <operator>|</operator> <name>OT_QWORD</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>op1</name> <operator>+</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: mismatched operand sizes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset_sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rm</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mem_ref</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod_byte</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>offset</name> <argument_list type="generic">&lt; <argument><expr><name>ST8_MIN</name> <operator>||</operator> <name>offset</name></expr></argument> &gt;</argument_list></name> <name>ST8_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod_byte</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>X86R_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_REGALL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>op1</name> <operator>+</operator> <literal type="number">0x2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <operator>(</operator><name>OT_DWORD</name> <operator>|</operator> <name>OT_QWORD</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <operator>(</operator><name>OT_DWORD</name> <operator>|</operator> <name>OT_QWORD</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>op1</name> <operator>+</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: mismatched operand sizes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>X86R_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>getsib</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>getsib</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset_sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset_sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod_byte</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>offset</name> <argument_list type="generic">&lt; <argument><expr><name>ST8_MIN</name> <operator>||</operator> <name>offset</name></expr></argument> &gt;</argument_list></name> <name>ST8_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod_byte</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_REGALL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>op1</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>op1</name> <operator>+</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>op1</name> <operator>+</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mod_byte</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_EBP</name> <operator>||</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_EBP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ebp_reg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>mod_byte</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name>rm</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_ESP</name> <operator>||</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_ESP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>||</operator> <name>mem_ref</name> <operator>||</operator> <name>ebp_reg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mod_byte</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>mem_ref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opadc</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_CONSTANT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>process_16bit_group_1</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_al_reg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>process_group_1</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>process_1byte_op</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opadd</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_CONSTANT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>process_16bit_group_1</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_al_reg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>process_group_1</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>process_1byte_op</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opand</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_CONSTANT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>process_16bit_group_1</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_al_reg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>process_group_1</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>process_1byte_op</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opcmp</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_CONSTANT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>process_16bit_group_1</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0x38</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_al_reg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>process_group_1</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>process_1byte_op</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0x38</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opsub</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_CONSTANT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>process_16bit_group_1</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0x28</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_al_reg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>process_group_1</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>process_1byte_op</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0x28</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opor</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_CONSTANT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>process_16bit_group_1</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0x08</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_al_reg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>process_group_1</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>process_1byte_op</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0x08</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opxadd</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x48</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_REGALL</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_REGALL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>|=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opxor</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_CONSTANT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>process_16bit_group_1</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_al_reg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>process_group_1</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>process_1byte_op</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opneg</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x66</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x48</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf6</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf7</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd8</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opnot</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>ALL_SIZE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>explicit_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dest_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rex</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_rex</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>use_rex</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rex</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>extended</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>use_rex</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rex</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_rex</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>rex</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opsbb</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_CONSTANT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>process_16bit_group_1</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0x18</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_al_reg</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>process_group_1</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>process_1byte_op</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0x18</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opbs</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>&gt;=</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg_size</name> <operator>&amp;</operator> <name>OT_WORD</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name><operator>)</operator> <operator>&amp;&amp;</operator> 

<operator>!</operator><operator>(</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>ALL_SIZE</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>ALL_SIZE</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name> <operator>&amp;&amp;</operator> 

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg_size</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x67</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x66</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x48</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x66</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"bsf"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xbc</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xbd</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name></expr>]</index></name> <operator>+=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>+=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opbswap</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_REGALL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x48</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc8</literal> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc8</literal> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opcall</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>immediate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>extended</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x41</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>mod</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset_sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <literal type="number">127</literal> <operator>||</operator> <name>offset</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>mod</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mod</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mod</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>instr_offset</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>pc</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>immediate</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name>immediate</name> <operator>-=</operator> <name>instr_offset</name> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opcmov</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mod_byte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name> <operator>||</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_CONSTANT</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmov</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"o"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name> <index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x41</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"nae"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name> <index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x42</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"ae"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"nb"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"nc"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name> <index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x43</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"e"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name> <index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x44</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"ne"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"nz"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name> <index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x45</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"be"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"na"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name> <index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x46</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"nbe"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name> <index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x47</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name> <index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x48</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"ns"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name> <index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x49</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"p"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"pe"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name> <index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x4a</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"np"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"po"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name> <index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x4b</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"l"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"nge"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name> <index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x4c</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"ge"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"nl"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name> <index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x4d</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"le"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"ng"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name> <index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x4e</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"g"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>cmov</name></expr></argument>, <argument><expr><literal type="string">"nle"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name> <index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x4f</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_REGALL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>X86R_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>getsib</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset_sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x40</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>getsib</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>offset</name> <argument_list type="generic">&lt; <argument><expr><name>ST8_MIN</name> <operator>||</operator> <name>offset</name></expr></argument> &gt;</argument_list></name> <name>ST8_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>X86R_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset_sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>||</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_EBP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod_byte</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>offset</name> <argument_list type="generic">&lt; <argument><expr><name>ST8_MIN</name> <operator>||</operator> <name>offset</name></expr></argument> &gt;</argument_list></name> <name>ST8_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod_byte</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>mod_byte</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mod_byte</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mod_byte</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opmovx</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>word</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>movx</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_REGTYPE</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>word</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>movx</name></expr></argument>, <argument><expr><literal type="string">"zx"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xb6</literal> <operator>+</operator> <name>word</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>movx</name></expr></argument>, <argument><expr><literal type="string">"sx"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xbe</literal> <operator>+</operator> <name>word</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_ESP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opaam</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>immediate</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sign</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>immediate</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0a</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>immediate</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">256</literal> <operator>&amp;&amp;</operator> <name>immediate</name></expr></argument> &gt;</argument_list></name> <operator>-</operator><literal type="number">129</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opdec</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: Invalid operands\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>ALL_SIZE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>explicit_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dest_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&amp;</operator> <name>OT_WORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x66</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rex</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_rex</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>use_rex</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rex</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>extended</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>use_rex</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rex</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opcode</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&amp;</operator> <name>OT_BYTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <literal type="number">0xfe</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>use_rex</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>rex</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>&gt;</operator> <literal type="number">32</literal> <operator>||</operator> <name>size</name> <operator>&amp;</operator> <name>OT_BYTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>opcode</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>size</name> <operator>&amp;</operator> <operator>(</operator><name>OT_DWORD</name> <operator>|</operator> <name>OT_WORD</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x48</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc8</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>rip_rel</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_RIP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset_sign</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>modrm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_sib</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sib</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>offset</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">128</literal> <operator>&amp;&amp;</operator> <name>offset</name></expr></argument> &gt;</argument_list></name> <operator>-</operator><literal type="number">129</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>OT_WORD</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_BX</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>X86R_SI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name>B0000</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_BX</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>X86R_DI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name>B0001</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_BP</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>X86R_SI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name>B0010</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_BP</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>X86R_DI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name>B0011</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_SI</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name>B0100</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_DI</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name>B0101</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_BX</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name>B0111</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>modrm</name> <operator>=</operator> <operator>(</operator><name>mod</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <name>rm</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>extended</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rm</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name>mod</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><call><name>getsib</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>scale</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>use_sib</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sib</name> <operator>=</operator> <operator>(</operator><name>scale</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>index</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <name>rm</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rm</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>use_sib</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sib</name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_sib</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name>B0100</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rip_rel</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>modrm</name> <operator>=</operator> <operator>(</operator><name>B0000</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <name>B0101</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sib</name> <operator>=</operator> <operator>(</operator><name>scale</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>B0100</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <name>B0101</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>modrm</name> <operator>=</operator> <operator>(</operator><name>mod</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <name>rm</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>modrm</name> <operator>|=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_rex</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>rex</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>opcode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>modrm</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_sib</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>sib</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mod</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>OT_WORD</name> <operator>&amp;&amp;</operator> <name>mod</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mod</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>rip_rel</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opidiv</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x48</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x66</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf6</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf7</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x38</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf8</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opdiv</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x48</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x66</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf6</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf7</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x30</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opimul</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>immediate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x48</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x66</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf6</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf7</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x28</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe8</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_CONSTANT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: Immediate exceeds max\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>immediate</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>immediate</name> <operator>&gt;=</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x69</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x6b</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>immediate</name> <operator>&gt;=</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <name>immediate</name> <operator>&gt;</operator> <name>UT32_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">40</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">56</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xaf</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>X86R_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset_sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <literal type="number">128</literal> <operator>||</operator> <name>offset</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>|=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <literal type="number">128</literal> <operator>||</operator> <name>offset</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>X86R_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x04</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>immediate</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <literal type="number">0x5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xaf</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name> <operator>||</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_CONSTANT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x6b</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>X86R_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x04</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset_sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <literal type="number">128</literal> <operator>||</operator> <name>offset</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>|=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <literal type="number">128</literal> <operator>||</operator> <name>offset</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>immediate</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>immediate</name> <operator>&gt;=</operator> <literal type="number">128</literal> <operator>||</operator> <name>immediate</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opin</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>immediate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_DX</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_AL</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xec</literal></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_AX</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x66</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xed</literal></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_EAX</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xed</literal></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_CONSTANT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>immediate</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>immediate</name> <operator>&gt;</operator> <literal type="number">255</literal> <operator>||</operator> <name>immediate</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_AL</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_AX</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x66</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe5</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_EAX</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe5</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opclflush</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mod_byte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xae</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset_sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>offset</name> <argument_list type="generic">&lt; <argument><expr><name>ST8_MIN</name> <operator>||</operator> <name>offset</name></expr></argument> &gt;</argument_list></name> <name>ST8_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod_byte</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mod_byte</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mod_byte</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">7</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mod_byte</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mod_byte</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opinc</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: Invalid operands\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>ALL_SIZE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>explicit_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dest_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&amp;</operator> <name>OT_WORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x66</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rex</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_rex</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>use_rex</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rex</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>extended</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>use_rex</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rex</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opcode</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&amp;</operator> <name>OT_BYTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <literal type="number">0xfe</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>use_rex</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>rex</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>&gt;</operator> <literal type="number">32</literal> <operator>||</operator> <name>size</name> <operator>&amp;</operator> <name>OT_BYTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>opcode</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>size</name> <operator>&amp;</operator> <operator>(</operator><name>OT_DWORD</name> <operator>|</operator> <name>OT_WORD</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x40</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>rip_rel</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_RIP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset_sign</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>modrm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_sib</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sib</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>offset</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">128</literal> <operator>&amp;&amp;</operator> <name>offset</name></expr></argument> &gt;</argument_list></name> <operator>-</operator><literal type="number">129</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>OT_WORD</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_BX</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>X86R_SI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name>B0000</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_BX</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>X86R_DI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name>B0001</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_BP</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>X86R_SI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name>B0010</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_BP</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>X86R_DI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name>B0011</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_SI</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name>B0100</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_DI</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name>B0101</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_BX</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name>B0111</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>modrm</name> <operator>=</operator> <operator>(</operator><name>mod</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <name>rm</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>extended</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rm</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name>mod</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><call><name>getsib</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>scale</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>use_sib</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sib</name> <operator>=</operator> <operator>(</operator><name>scale</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>index</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <name>rm</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rm</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>use_sib</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sib</name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_sib</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name>B0100</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rip_rel</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>modrm</name> <operator>=</operator> <operator>(</operator><name>B0000</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <name>B0101</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sib</name> <operator>=</operator> <operator>(</operator><name>scale</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>B0100</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <name>B0101</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>modrm</name> <operator>=</operator> <operator>(</operator><name>mod</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <name>rm</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_rex</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>rex</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>opcode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>modrm</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_sib</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>sib</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mod</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>OT_WORD</name> <operator>&amp;&amp;</operator> <name>mod</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mod</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>rip_rel</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opint</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_CONSTANT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>st32</name></type> <name>immediate</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sign</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>immediate</name> <operator>&lt;=</operator> <literal type="number">255</literal> <operator>&amp;&amp;</operator> <name>immediate</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xcd</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opjc</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_short</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>is_short</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>immediate</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sign</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_short</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>immediate</name> <operator>&gt;</operator> <name>ST8_MAX</name> <operator>||</operator> <name>immediate</name> <operator>&lt;</operator> <name>ST8_MIN</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>immediate</name> <operator>-=</operator> <name><name>a</name><operator>-&gt;</operator><name>pc</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>immediate</name> <operator>&gt;</operator> <name>ST32_MAX</name> <operator>||</operator> <name>immediate</name> <operator>&lt;</operator> <operator>-</operator><name>ST32_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jmp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset_sign</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <literal type="number">128</literal> <operator>||</operator> <name>offset</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">129</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xa0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x60</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>|=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_ESP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x20</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">0x80</literal> <operator>&lt;=</operator> <operator>(</operator><name>immediate</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>immediate</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0x7f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xeb</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>immediate</name> <operator>-=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>immediate</name> <operator>&lt;=</operator> <literal type="number">0x81</literal> <operator>&amp;&amp;</operator> <name>immediate</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">0x7f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_short</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>immediate</name> <operator>&gt;</operator> <literal type="number">0x81</literal> <operator>||</operator> <name>immediate</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">0x7e</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x66</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>is_short</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>immediate</name> <operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_short</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"ja"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jnbe"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x87</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jae"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jnb"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jnc"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x83</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jz"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"je"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x84</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jb"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jnae"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jc"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x82</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jbe"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jna"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x86</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jg"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jnle"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x8f</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jge"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jnl"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x8d</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jl"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jnge"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x8c</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jle"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jng"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x8e</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jne"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jnz"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x85</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jno"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x81</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jnp"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jpo"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x8b</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jns"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x89</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jo"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jp"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jpe"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x8a</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"js"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"jz"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x88</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_short</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>immediate</name> <operator>-=</operator> <ternary><condition><expr><name>is_short</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_short</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>oplea</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_REGALL</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <operator>(</operator><name>OT_MEMORY</name> <operator>|</operator> <name>OT_CONSTANT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x48</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x8d</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>offset</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>pc</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x48</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>-=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>high</name> <init>= <expr><literal type="number">0xff00</literal> <operator>&amp;</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>high</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset_sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_RIP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_EBP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <literal type="number">128</literal> <operator>||</operator> <name>offset</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>mod</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name>rm</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_ESP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mod</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_ESP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>oples</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset_sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <literal type="number">128</literal> <operator>||</operator> <name>offset</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>mod</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mod</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mod</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset_sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x05</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opmov</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>base</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>immediate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_CONSTANT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_good_flag</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>immediate</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_CONSTANT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>extended</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x49</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x48</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>extended</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x41</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x66</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xb0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<name>immediate</name> <operator>&lt;</operator> <name>UT32_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xb8</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <name>immediate</name> <operator>&gt;</operator> <name>UT32_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">40</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">56</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>explicit_size</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>Opcode</name> <operator>*</operator><operator>)</operator><name>op</name><operator>)</operator><operator>-&gt;</operator><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dest_size</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_size</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dest_bits</name> <init>= <expr><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dest_size</name> <operator>&amp;</operator> <name>ALL_SIZE</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>OPSIZE_SHIFT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reg_bits</name> <init>= <expr><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_size</name> <operator>&amp;</operator> <name>ALL_SIZE</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>OPSIZE_SHIFT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset_sign</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_aso</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reg_bits</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>use_aso</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_oso</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dest_bits</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>use_oso</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>rip_rel</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_RIP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rex</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_rex</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dest_bits</name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>use_rex</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rex</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>extended</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>use_rex</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rex</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opcode</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dest_bits</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <literal type="number">0xc6</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <literal type="number">0xc7</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>modrm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_sib</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sib</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>offset</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">128</literal> <operator>&amp;&amp;</operator> <name>offset</name></expr></argument> &gt;</argument_list></name> <operator>-</operator><literal type="number">129</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reg_bits</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_BX</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>X86R_SI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name>B0000</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_BX</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>X86R_DI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name>B0001</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_BP</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>X86R_SI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name>B0010</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_BP</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>X86R_DI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name>B0011</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_SI</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name>B0100</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_DI</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name>B0101</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_BX</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name>B0111</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>modrm</name> <operator>=</operator> <operator>(</operator><name>mod</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <name>rm</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>extended</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rm</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name>mod</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><call><name>getsib</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>scale</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>use_sib</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sib</name> <operator>=</operator> <operator>(</operator><name>scale</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>index</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <name>rm</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rm</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>use_sib</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sib</name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_sib</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name>B0100</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rip_rel</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>modrm</name> <operator>=</operator> <operator>(</operator><name>B0000</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <name>B0101</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sib</name> <operator>=</operator> <operator>(</operator><name>scale</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>B0100</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <name>B0101</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>modrm</name> <operator>=</operator> <operator>(</operator><name>mod</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <name>rm</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_aso</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x67</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_oso</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x66</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_rex</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>rex</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>opcode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>modrm</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_sib</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>sib</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mod</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>reg_bits</name> <operator>==</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>mod</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mod</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>rip_rel</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>byte</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>byte</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>byte</name> <operator>&lt;</operator> <name>dest_bits</name> <operator>&amp;&amp;</operator> <name>byte</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>byte</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>immediate</name> <operator>&gt;&gt;</operator> <name>byte</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_REGALL</name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_CONSTANT</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_REGTYPE</name> <operator>&amp;</operator> <name>OT_SEGMENTREG</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_REGTYPE</name> <operator>&amp;</operator> <name>OT_SEGMENTREG</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_debug_or_control</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_REGTYPE</name> <operator>&amp;</operator> <name>OT_GPREG</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_debug_or_control</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_REGTYPE</name> <operator>&amp;</operator> <name>OT_GPREG</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_REGTYPE</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_REGTYPE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>ALL_SIZE</name><operator>)</operator> <operator>&amp;</operator>

<operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>ALL_SIZE</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>extended</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rex</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>extended</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rex</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x67</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x48</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x48</literal> <operator>|</operator> <name>rex</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x40</literal> <operator>|</operator> <name>rex</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>extended</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>extended</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x45</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset_sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_REGTYPE</name> <operator>&amp;</operator> <name>OT_SEGMENTREG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x8c</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_debug_or_control</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_REGTYPE</name> <operator>&amp;</operator> <name>OT_DEBUGREG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x23</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x22</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_debug_or_control</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_REGTYPE</name> <operator>&amp;</operator> <name>OT_DEBUGREG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x21</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x66</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x88</literal></expr> </then><else>: <expr><literal type="number">0x89</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>getsib</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_UNDEFINED</name> <operator>||</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>is_debug_or_control</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>

?</condition><then> <expr><name>mod</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>

</then><else>: <expr><name>mod</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <literal type="number">0x5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>X86R_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <literal type="number">0x4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>offset</name> <operator>&gt;</operator> <literal type="number">128</literal> <operator>||</operator> <name>offset</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">129</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x2</literal></expr> </then><else>: <expr><literal type="number">0x1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_EBP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">0x2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>mod</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_ESP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mod</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset_sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_EAX</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x48</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x66</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xa0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xa1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">40</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">56</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <name>X86R_R8</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x41</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x8a</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_REGTYPE</name> <operator>&amp;</operator> <name>OT_SEGMENTREG</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>SEG_REG_PREFIXES</name><index>[<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>%</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x8b</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ut32</name><operator>)</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x67</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x48</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x44</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x67</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x48</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x66</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name></expr> ?</condition><then> <expr><literal type="number">0x8a</literal></expr> </then><else>: <expr><literal type="number">0x8b</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name> <operator>||</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name><operator>)</operator></expr> ?</condition><then>

<expr><literal type="number">0x8a</literal></expr> </then><else>: <expr><literal type="number">0x8b</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <literal type="number">0x4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x25</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <literal type="number">0x5</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>base</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>getsib</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name>base</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>getsib</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>||</operator> <name>base</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>X86R_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <literal type="number">0x4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>||</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_EBP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">0x2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>&gt;</operator> <literal type="number">127</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">0x4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <name>offset</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_RIP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x5</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>pfx</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>&gt;</operator> <literal type="number">127</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">0x80</literal></expr></then><else>: <expr><literal type="number">0x40</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>pfx</name> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>&gt;</operator> <literal type="number">127</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_EIP</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0d</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_RIP</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x05</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>mod</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_ESP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mod</name> <operator>&gt;=</operator> <literal type="number">0x2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>&gt;</operator> <literal type="number">128</literal> <operator>||</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_EIP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>offset</name> <operator>||</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_RIP</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>&gt;</operator> <literal type="number">127</literal> <operator>||</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_RIP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opmul</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x48</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x66</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf6</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf7</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x20</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>oppop</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_REGTYPE</name> <operator>&amp;</operator> <name>OT_SEGMENTREG</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>base</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&amp;</operator> <name>X86R_FS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">0x81</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>base</name> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>base</name> <init>= <expr><literal type="number">0x58</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>base</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x8f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset_sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_EBP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <literal type="number">128</literal> <operator>||</operator> <name>offset</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>mod</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_ESP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mod</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_ESP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>oppush</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>immediate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_REGTYPE</name> <operator>&amp;</operator> <name>OT_SEGMENTREG</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>base</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&amp;</operator> <name>X86R_FS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">0x6</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>base</name> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>extended</name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x41</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>base</name> <init>= <expr><literal type="number">0x50</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_RIP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid register\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>base</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset_sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_EBP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <literal type="number">128</literal> <operator>||</operator> <name>offset</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>mod</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <literal type="number">6</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_ESP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mod</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>mod</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>X86R_ESP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>immediate</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>immediate</name> <operator>&gt;=</operator> <literal type="number">128</literal> <operator>||</operator> <name>immediate</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x68</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x6a</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opout</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>immediate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_DX</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_AL</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xee</literal></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_AX</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x66</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xef</literal></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_EAX</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xef</literal></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_CONSTANT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>immediate</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>immediate</name> <operator>&gt;</operator> <literal type="number">255</literal> <operator>||</operator> <name>immediate</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_AL</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe6</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_AX</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x66</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe7</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_EAX</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe7</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>oploop</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>st8</name></type> <name>delta</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>pc</name></name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ut8</name><operator>)</operator><name>delta</name></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opret</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>immediate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc3</literal></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>OT_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <operator>(</operator><name>OT_CONSTANT</name> <operator>|</operator> <name>OT_WORD</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>immediate</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opretf</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>immediate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_CONSTANT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>immediate</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xca</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>OT_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xcb</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opstos</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"stosw"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x66</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"stosb"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xaa</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"stosw"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xab</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"stosd"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xab</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opset</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <operator>(</operator><name>OT_GPREG</name> <operator>|</operator> <name>OT_BYTE</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reg</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"seto"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x90</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"setno"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x91</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"setb"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"setnae"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"setc"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x92</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"setnb"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"setae"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"setnc"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x93</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"setz"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"sete"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x94</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"setnz"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"setne"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x95</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"setbe"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"setna"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x96</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"setnbe"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"seta"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x97</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"sets"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x98</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"setns"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x99</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"setp"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"setpe"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x9a</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"setnp"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"setpo"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x9b</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"setl"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"setnge"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x9c</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"setnl"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"setge"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x9d</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"setle"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"setng"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x9e</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"setnle"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"setg"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x9f</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>mod</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <name>reg</name></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>optest</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>||</operator> <operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: Invalid operands\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg_size</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x67</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>extended</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>extended</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x4d</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x48</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_CONSTANT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf6</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x66</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf7</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name> <operator>||</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_BYTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x84</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x85</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opxchg</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mod_byte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name> <operator>||</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x87</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset_sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset_sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod_byte</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>offset</name> <argument_list type="generic">&lt; <argument><expr><name>ST8_MIN</name> <operator>||</operator> <name>offset</name></expr></argument> &gt;</argument_list></name> <name>ST8_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod_byte</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_EAX</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x90</literal> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_EAX</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x90</literal> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod_byte</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x87</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rm</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>mod_byte</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <name>rm</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mod_byte</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mod_byte</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mod_byte</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opcdqe</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>is_valid_registers</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x48</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x98</literal></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfcmov</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>fcmov</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"fcmov"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>fcmov</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xda</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>fcmov</name></expr></argument>, <argument><expr><literal type="string">"e"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xda</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc8</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>fcmov</name></expr></argument>, <argument><expr><literal type="string">"be"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xda</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>fcmov</name></expr></argument>, <argument><expr><literal type="string">"u"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xda</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd8</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>fcmov</name></expr></argument>, <argument><expr><literal type="string">"nb"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdb</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>fcmov</name></expr></argument>, <argument><expr><literal type="string">"ne"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdb</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc8</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>fcmov</name></expr></argument>, <argument><expr><literal type="string">"nbe"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdb</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>fcmov</name></expr></argument>, <argument><expr><literal type="string">"nu"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdb</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd8</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opffree</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdd</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfrstor</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdd</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x20</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfxch</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc9</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc8</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfucom</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdd</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdd</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfucomp</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdd</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe8</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdd</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe9</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfaddp</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xde</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xde</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfiadd</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xde</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xda</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfadd</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdc</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdc</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opficom</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xde</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x10</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xda</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x10</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opficomp</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xde</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x18</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xda</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x18</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfild</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdf</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdb</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdf</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x28</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfldcw</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x28</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfldenv</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x20</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfbld</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_TBYTE</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdf</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x20</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfbstp</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_TBYTE</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdf</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x30</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfxrstor</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xae</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x08</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfxsave</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xae</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfist</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdf</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x10</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdb</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x10</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfistp</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdf</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x18</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdb</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x18</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdf</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x38</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfisttp</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdf</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x08</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdb</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x08</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdd</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x08</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfstenv</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x9b</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x30</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfnstenv</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x30</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfdiv</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x30</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdc</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x30</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdc</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf8</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfdivp</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xde</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf9</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xde</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf8</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfidiv</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xda</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x30</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xde</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x30</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfdivr</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x38</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdc</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x38</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf8</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdc</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfdivrp</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xde</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xde</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfidivr</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xda</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x38</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xde</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x38</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfmul</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x08</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdc</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x08</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc8</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdc</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc8</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfmulp</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xde</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc9</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xde</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc8</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfimul</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xda</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x08</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xde</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x08</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfsub</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x20</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdc</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x20</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdc</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe8</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfsubp</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xde</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe9</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xde</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe8</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfisub</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xda</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x20</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xde</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x20</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfsubr</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x28</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdc</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x28</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe8</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdc</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfsubrp</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xde</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xde</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfisubr</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xda</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x28</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xde</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x28</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfnstcw</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x38</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfstcw</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x9b</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x38</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfnstsw</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdd</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x38</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_AX</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdf</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfstsw</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x9b</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdd</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x38</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>==</operator> <name>X86R_AX</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x9b</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdf</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfnsave</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdd</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x30</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opfsave</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x9b</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdd</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x30</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>oplldt</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x10</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>oplmsw</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x30</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>oplgdt</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x10</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>oplidt</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x18</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opsgdt</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opstmxcsr</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xae</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x18</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opstr</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x08</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_GPREG</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_DWORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc8</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opsidt</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x08</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opsldt</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x48</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opsmsw</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x48</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x20</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opverr</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x20</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe0</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opverw</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_WORD</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x28</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xe8</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opvmclear</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x66</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x30</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opvmon</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x30</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opvmptrld</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x30</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opvmptrst</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>operands_count</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_MEMORY</name> <operator>&amp;&amp;</operator>

<name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>OT_QWORD</name></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xc7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x38</literal> <operator>|</operator> <name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>lookup_t</name> <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>mnemonic</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>only_x32</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>opdo</name>)<parameter_list>(<parameter><decl><type><name>RAsm</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>ut64</name></type> <name>opcode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

}</block></struct></type> <name>LookupTable</name>;</typedef>

<decl_stmt><decl><type><name>LookupTable</name></type> <name><name>oplookup</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"aaa"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"aad"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd50a</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"aam"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>opaam</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"aas"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"adc"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opadc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"add"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opadd</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"adx"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"amx"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"and"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opand</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bsf"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opbs</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bsr"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opbs</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bswap"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opbswap</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"call"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcall</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cbw"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x6698</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cdq"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cdqe"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcdqe</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cwde"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcdqe</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"clc"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cld"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"clflush"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opclflush</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"clgi"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f01dd</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cli"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"clts"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f06</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmc"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovo"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovno"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovb"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovc"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovnae"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovae"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovnb"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovnc"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmove"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovne"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovnz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovbe"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovna"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmova"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovnbe"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovne"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovnz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovs"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovns"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovpe"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovnp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovpo"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovl"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovnge"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovge"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovnl"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovle"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovng"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovg"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmovnle"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opcmp</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmpsb"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmpsd"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmpsw"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x66a7</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cpuid"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0fa2</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cwd"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x6699</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cwde"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"daa"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"das"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"dec"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opdec</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"div"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opdiv</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"emms"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f77</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"f2xm1"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9f0</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fabs"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9e1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fadd"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfadd</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"faddp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfaddp</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fbld"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfbld</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fbstp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfbstp</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fchs"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9e0</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fclex"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x9bdbe2</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fcmovb"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fcmove"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fcmovbe"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fcmovu"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fcmovnb"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fcmovne"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fcmovnbe"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fcmovnu"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfcmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fcos"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9ff</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fdecstp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9f6</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fdiv"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfdiv</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fdivp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfdivp</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fdivr"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfdivr</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fdivrp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfdivrp</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"femms"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f0e</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ffree"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opffree</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fiadd"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfiadd</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ficom"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opficom</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ficomp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opficomp</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fidiv"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfidiv</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fidivr"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfidivr</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fild"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfild</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fimul"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfimul</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fincstp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9f7</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"finit"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x9bdbe3</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fist"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfist</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fistp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfistp</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fisttp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfisttp</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fisub"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfisub</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fisubr"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfisubr</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fld1"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9e8</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fldcw"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfldcw</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fldenv"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfldenv</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fldl2t"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9e9</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fldl2e"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9ea</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fldlg2"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9ec</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fldln2"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9ed</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fldpi"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9eb</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fldz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9ee</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fmul"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfmul</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fmulp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfmulp</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fnclex"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xdbe2</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fninit"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xdbe3</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fnop"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9d0</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fnsave"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfnsave</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fnstcw"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfnstcw</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fnstenv"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfnstenv</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fnstsw"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfnstsw</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fpatan"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9f3</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fprem"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9f8</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fprem1"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9f5</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fptan"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9f2</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"frndint"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9fc</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"frstor"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfrstor</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fsave"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfsave</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fscale"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9fd</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fsin"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9fe</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fsincos"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9fb</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fsqrt"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9fa</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fstcw"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfstcw</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fstenv"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfstenv</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fstsw"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfstsw</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fsub"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfsub</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fsubp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfsubp</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fsubr"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfsubr</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fsubrp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfsubrp</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ftst"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9e4</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fucom"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfucom</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fucomp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfucomp</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fucompp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xdae9</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fwait"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fxam"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9e5</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fxch"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfxch</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fxrstor"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfxrstor</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fxsave"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opfxsave</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fxtract"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9f4</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fyl2x"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9f1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fyl2xp1"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd9f9</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getsec"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f37</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hlt"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"idiv"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opidiv</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"imul"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opimul</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"in"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opin</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"inc"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opinc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ins"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"insb"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"insd"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"insw"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x666d</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"int"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opint</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"int1"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"int3"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"into"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"invd"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f08</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"iret"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x66cf</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"iretd"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ja"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jae"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jb"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jbe"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jc"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"je"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jg"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jge"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jl"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jle"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jmp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jna"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jnae"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jnb"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jnbe"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jnc"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jne"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jng"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jnge"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jnl"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jnle"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jno"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jnp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jns"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jnz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jo"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jpe"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jpo"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"js"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opjc</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"lahf"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"lea"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>oplea</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"leave"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"les"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>oples</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"lfence"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0faee8</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"lgdt"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>oplgdt</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"lidt"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>oplidt</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"lldt"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>oplldt</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"lmsw"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>oplmsw</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"lodsb"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"lodsd"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"lodsw"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x66ad</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"loop"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>oploop</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mfence"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0faef0</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"monitor"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f01c8</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mov"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opmov</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"movsb"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"movsd"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"movsw"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x66a5</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"movzx"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opmovx</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"movsx"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opmovx</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mul"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opmul</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mwait"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f01c9</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"neg"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opneg</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"nop"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"not"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opnot</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"or"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opor</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"out"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opout</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"outsb"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"outs"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"outsd"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"outsw"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x666f</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"pop"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>oppop</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"popa"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"popad"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"popal"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"popaw"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x6661</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"popfd"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"prefetch"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f0d</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"push"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>oppush</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"pusha"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"pushad"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"pushal"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"pushfd"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rcl"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>process_group_2</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rcr"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>process_group_2</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rep"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>oprep</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"repe"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>oprep</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"repne"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>oprep</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"repz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>oprep</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"repnz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>oprep</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rdmsr"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f32</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rdpmc"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f33</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rdtsc"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f31</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rdtscp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f01f9</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ret"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opret</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"retf"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opretf</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"retw"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x66c3</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rol"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>process_group_2</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ror"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>process_group_2</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rsm"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0faa</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sahf"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sal"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>process_group_2</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"salc"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sar"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>process_group_2</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sbb"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opsbb</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"scasb"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"scasd"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"scasw"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x66af</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"seto"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setno"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setb"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setnae"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setc"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setnb"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setae"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setnc"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sete"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setnz"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setne"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setbe"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setna"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setnbe"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"seta"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sets"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setns"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setpe"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setnp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setpo"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setl"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setnge"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setnl"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setge"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setle"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setng"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setnle"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setg"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opset</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sfence"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0faef8</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sgdt"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opsgdt</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"shl"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>process_group_2</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"shr"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>process_group_2</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sidt"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opsidt</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sldt"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opsldt</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"smsw"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opsmsw</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"stc"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"std"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"stgi"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f01dc</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sti"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"stmxcsr"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opstmxcsr</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"stosb"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opstos</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"stosd"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opstos</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"stosw"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opstos</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"str"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opstr</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sub"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opsub</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"swapgs"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f1ff8</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"syscall"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f05</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sysenter"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f34</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sysexit"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f35</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sysret"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f07</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ud2"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f0b</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"verr"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opverr</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"verw"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opverw</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"vmcall"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f01c1</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"vmclear"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opvmclear</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"vmlaunch"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f01c2</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"vmload"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f01da</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"vmmcall"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f01d9</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"vmptrld"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opvmptrld</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"vmptrst"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opvmptrst</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"vmresume"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f01c3</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"vmrun"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f01d8</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"vmsave"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f01db</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"vmxoff"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f01c4</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"vmxon"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opvmon</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"vzeroall"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xc5fc77</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"vzeroupper"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xc5f877</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"wait"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"wbinvd"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f09</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"wrmsr"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f30</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"xadd"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opxadd</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"xchg"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opxchg</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"xgetbv"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f01d0</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"xlatb"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"xor"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>opxor</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"xsetbv"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0x0f01d1</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"test"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>optest</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"null"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>x86newTokenType</name></type> <name>getToken</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>begin</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>begin</name> <operator>&gt;</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>TT_EOF</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>begin</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><operator>*</operator><name>begin</name></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>isspace</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name><name>str</name><index>[<expr><operator>*</operator><name>begin</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>begin</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>str</name><index>[<expr><operator>*</operator><name>begin</name></expr>]</index></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <operator>*</operator><name>begin</name></expr>;</expr_stmt>

<return>return <expr><name>TT_EOF</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isalpha</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name><name>str</name><index>[<expr><operator>*</operator><name>begin</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <operator>*</operator><name>begin</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>end</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><operator>*</operator><name>end</name></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>isalnum</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name><name>str</name><index>[<expr><operator>*</operator><name>end</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>end</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>TT_WORD</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isdigit</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name><name>str</name><index>[<expr><operator>*</operator><name>begin</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <operator>*</operator><name>begin</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>end</name> <operator>&amp;&amp;</operator> <call><name>isalnum</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name><name>str</name><index>[<expr><operator>*</operator><name>end</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>end</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>TT_NUMBER</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <operator>*</operator><name>begin</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>TT_SPECIAL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Register</name></type> <name>parseReg</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>regs</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"eax"</literal></expr>, <expr><literal type="string">"ecx"</literal></expr>, <expr><literal type="string">"edx"</literal></expr>, <expr><literal type="string">"ebx"</literal></expr>, <expr><literal type="string">"esp"</literal></expr>, <expr><literal type="string">"ebp"</literal></expr>, <expr><literal type="string">"esi"</literal></expr>, <expr><literal type="string">"edi"</literal></expr>, <expr><literal type="string">"eip"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>regsext</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"r8d"</literal></expr>, <expr><literal type="string">"r9d"</literal></expr>, <expr><literal type="string">"r10d"</literal></expr>, <expr><literal type="string">"r11d"</literal></expr>, <expr><literal type="string">"r12d"</literal></expr>, <expr><literal type="string">"r13d"</literal></expr>, <expr><literal type="string">"r14d"</literal></expr>, <expr><literal type="string">"r15d"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>regs8</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"al"</literal></expr>, <expr><literal type="string">"cl"</literal></expr>, <expr><literal type="string">"dl"</literal></expr>, <expr><literal type="string">"bl"</literal></expr>, <expr><literal type="string">"ah"</literal></expr>, <expr><literal type="string">"ch"</literal></expr>, <expr><literal type="string">"dh"</literal></expr>, <expr><literal type="string">"bh"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>regs16</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"ax"</literal></expr>, <expr><literal type="string">"cx"</literal></expr>, <expr><literal type="string">"dx"</literal></expr>, <expr><literal type="string">"bx"</literal></expr>, <expr><literal type="string">"sp"</literal></expr>, <expr><literal type="string">"bp"</literal></expr>, <expr><literal type="string">"si"</literal></expr>, <expr><literal type="string">"di"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>regs64</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"rax"</literal></expr>, <expr><literal type="string">"rcx"</literal></expr>, <expr><literal type="string">"rdx"</literal></expr>, <expr><literal type="string">"rbx"</literal></expr>, <expr><literal type="string">"rsp"</literal></expr>, <expr><literal type="string">"rbp"</literal></expr>, <expr><literal type="string">"rsi"</literal></expr>, <expr><literal type="string">"rdi"</literal></expr>, <expr><literal type="string">"rip"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>regs64ext</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"r8"</literal></expr>, <expr><literal type="string">"r9"</literal></expr>, <expr><literal type="string">"r10"</literal></expr>, <expr><literal type="string">"r11"</literal></expr>, <expr><literal type="string">"r12"</literal></expr>, <expr><literal type="string">"r13"</literal></expr>, <expr><literal type="string">"r14"</literal></expr>, <expr><literal type="string">"r15"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>sregs</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"es"</literal></expr>, <expr><literal type="string">"cs"</literal></expr>, <expr><literal type="string">"ss"</literal></expr>, <expr><literal type="string">"ds"</literal></expr>, <expr><literal type="string">"fs"</literal></expr>, <expr><literal type="string">"gs"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>cregs</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"cr0"</literal></expr>, <expr><literal type="string">"cr1"</literal></expr>, <expr><literal type="string">"cr2"</literal></expr>,<expr><literal type="string">"cr3"</literal></expr>, <expr><literal type="string">"cr4"</literal></expr>, <expr><literal type="string">"cr5"</literal></expr>, <expr><literal type="string">"cr6"</literal></expr>, <expr><literal type="string">"cr7"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>dregs</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"dr0"</literal></expr>, <expr><literal type="string">"dr1"</literal></expr>, <expr><literal type="string">"dr2"</literal></expr>,<expr><literal type="string">"dr3"</literal></expr>, <expr><literal type="string">"dr4"</literal></expr>, <expr><literal type="string">"dr5"</literal></expr>, <expr><literal type="string">"dr6"</literal></expr>, <expr><literal type="string">"dr7"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nextpos</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>getToken</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <name>str</name> <operator>+</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name>nextpos</name> <operator>-</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>nextpos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>regs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><name><name>regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <operator>(</operator><name>OT_GPREG</name> <operator>&amp;</operator> <call><name>OT_REG</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>|</operator> <name>OT_DWORD</name></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cregs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><name><name>cregs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <operator>(</operator><name>OT_CONTROLREG</name> <operator>&amp;</operator> <call><name>OT_REG</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>|</operator> <name>OT_DWORD</name></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cregs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><name><name>dregs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <operator>(</operator><name>OT_DEBUGREG</name> <operator>&amp;</operator> <call><name>OT_REG</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>|</operator> <name>OT_DWORD</name></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal> <operator>||</operator> <name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'h'</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>regs8</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><name><name>regs8</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <operator>(</operator><name>OT_GPREG</name> <operator>&amp;</operator> <call><name>OT_REG</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>|</operator> <name>OT_BYTE</name></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>regs16</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><name><name>regs16</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <operator>(</operator><name>OT_GPREG</name> <operator>&amp;</operator> <call><name>OT_REG</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>|</operator> <name>OT_WORD</name></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>sregs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><name><name>sregs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <operator>(</operator><name>OT_SEGMENTREG</name> <operator>&amp;</operator> <call><name>OT_REG</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>|</operator> <name>OT_WORD</name></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>regs64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><name><name>regs64</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <operator>(</operator><name>OT_GPREG</name> <operator>&amp;</operator> <call><name>OT_REG</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>|</operator> <name>OT_QWORD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>regs64ext</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><name><name>regs64ext</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <operator>(</operator><name>OT_GPREG</name> <operator>&amp;</operator> <call><name>OT_REG</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>|</operator> <name>OT_QWORD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<return>return <expr><name>i</name> <operator>+</operator> <literal type="number">9</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>regsext</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><name><name>regsext</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <operator>(</operator><name>OT_GPREG</name> <operator>&amp;</operator> <call><name>OT_REG</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>|</operator> <name>OT_DWORD</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>i</name> <operator>+</operator> <literal type="number">9</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><literal type="string">"st"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <operator>(</operator><name>OT_FPUREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><literal type="string">"mm"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <operator>(</operator><name>OT_MMXREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><literal type="string">"xmm"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <operator>(</operator><name>OT_XMMREG</name> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>type</name> <operator>&amp;</operator> <operator>(</operator><name>OT_FPUREG</name> <operator>|</operator> <name>OT_MMXREG</name> <operator>|</operator> <name>OT_XMMREG</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Register</name></type> <name>reg</name> <init>= <expr><name>X86R_UNDEFINED</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getToken</name> <argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextpos</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TT_SPECIAL</name> <operator>&amp;&amp;</operator> <name><name>token</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>nextpos</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getToken</name> <argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextpos</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TT_NUMBER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Expected register number '%s'\n"</literal></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <operator>*</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>X86R_UNDEFINED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>token</name> <operator>+</operator> <operator>*</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>type</name> <operator>&amp;</operator> <operator>(</operator><name>OT_FPUREG</name> <operator>|</operator> <name>OT_MMXREG</name> <operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>OT_REGALL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>reg</name> <operator>&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Too large register index!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>X86R_UNDEFINED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>nextpos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getToken</name> <argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextpos</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TT_SPECIAL</name> <operator>&amp;&amp;</operator> <name><name>token</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>nextpos</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>|=</operator> <operator>(</operator><call><name>OT_REG</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>OT_REGTYPE</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>reg</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>X86R_UNDEFINED</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_segment_offset</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>,

<parameter><decl><type><name>Operand</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reg_index</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nextpos</name> <init>= <expr><operator>*</operator><name>pos</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>nextpos</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nextpos</name> <operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>nextpos</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><name>nextpos</name> <operator>++</operator></expr>;</expr_stmt></block_content>}</block></if></if_stmt> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>regs</name><index>[<expr><name>reg_index</name></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>reg</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>OT_MEMORY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>offset_sign</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>nextpos</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>offset_sign</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nextpos</name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>scale</name><index>[<expr><name>reg_index</name></expr>]</index></name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <name>nextpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>scale</name><index>[<expr><name>reg_index</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parseOperand</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>Operand</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isrepop</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>nextpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>x86newTokenType</name></type> <name>last_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size_token</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>explicit_size</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reg_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>size_token</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>nextpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_type</name> <operator>=</operator> <call><name>getToken</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">"ptr"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">"byte"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>OT_MEMORY</name> <operator>|</operator> <name>OT_BYTE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dest_size</name></name> <operator>=</operator> <name>OT_BYTE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit_size</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">"word"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>OT_MEMORY</name> <operator>|</operator> <name>OT_WORD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dest_size</name></name> <operator>=</operator> <name>OT_WORD</name></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit_size</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">"dword"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>OT_MEMORY</name> <operator>|</operator> <name>OT_DWORD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dest_size</name></name> <operator>=</operator> <name>OT_DWORD</name></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit_size</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">"qword"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>OT_MEMORY</name> <operator>|</operator> <name>OT_QWORD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dest_size</name></name> <operator>=</operator> <name>OT_QWORD</name></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit_size</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">"oword"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>OT_MEMORY</name> <operator>|</operator> <name>OT_OWORD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dest_size</name></name> <operator>=</operator> <name>OT_OWORD</name></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit_size</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">"tbyte"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>OT_MEMORY</name> <operator>|</operator> <name>OT_TBYTE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dest_size</name></name> <operator>=</operator> <name>OT_TBYTE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>explicit_size</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>size_token</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>OT_MEMORY</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>scale</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>temp</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Register</name></type> <name>reg</name> <init>= <expr><name>X86R_UNDEFINED</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>first_reg</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>str</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <name>nextpos</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>nextpos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>str</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_type</name> <operator>=</operator> <call><name>getToken</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>last_type</name> <operator>==</operator> <name>TT_SPECIAL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name><name>str</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name><name>str</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>!=</operator> <name>X86R_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>reg_index</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>regs</name><index>[<expr><name>reg_index</name></expr>]</index></name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>scale</name><index>[<expr><name>reg_index</name></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>reg_index</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>temp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reg_index</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>regs</name><index>[<expr><name>reg_index</name></expr>]</index></name> <operator>=</operator> <name>X86R_UNDEFINED</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <name>X86R_UNDEFINED</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>str</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>last_type</name> <operator>==</operator> <name>TT_WORD</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>reg_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>!=</operator> <name>X86R_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nextpos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>parseReg</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reg_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first_reg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>extended</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>extended</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <name>reg</name> <operator>-</operator> <literal type="number">9</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>first_reg</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>reg</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <name>reg</name> <operator>-</operator> <literal type="number">9</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reg_type</name> <operator>&amp;</operator> <name>OT_REGTYPE</name> <operator>&amp;</operator> <name>OT_SEGMENTREG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>reg_type</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_segment_offset</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextpos</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>reg_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>nextpos</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>explicit_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>reg_type</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>reg_size</name></name> <operator>=</operator> <name>reg_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>explicit_size</name></name> <operator>=</operator> <name>explicit_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>reg_type</name> <operator>&amp;</operator> <name>OT_GPREG</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>offset_sign</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>offset_sign</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>plus</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>minus</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>closeB</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>plus</name> <operator>&amp;&amp;</operator> <name>minus</name> <operator>&amp;&amp;</operator> <name>plus</name> <operator>&lt;</operator> <name>closeB</name> <operator>&amp;&amp;</operator> <name>minus</name> <operator>&lt;</operator> <name>closeB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>offset_sign</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>pos</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strtok</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"+-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>st64</name></type> <name>read</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>*=</operator> <name>read</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>last_type</name> <operator>==</operator> <name>TT_WORD</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>nextpos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RFlagItem</name> <modifier>*</modifier></type><name>flag</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>isrepop</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>is_good_flag</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>rep_op</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>MAX_REPOP_LENGTH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>rep_op</name><index>[<expr><name>MAX_REPOP_LENGTH</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>nextpos</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>parseReg</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>extended</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>reg</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>extended</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>reg</name></name> <operator>-=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>OT_REGTYPE</name> <operator>&amp;</operator> <name>OT_SEGMENTREG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>parse_segment_offset</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextpos</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>reg_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>nextpos</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>reg</name></name> <operator>==</operator> <name>X86R_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>is_good_flag</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>nextpos</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>OT_CONSTANT</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>num</name></name></expr>?</condition><then> <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>num</name><operator>-&gt;</operator><name>userptr</name></name><operator>)</operator></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>core</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flag</name> <operator>=</operator> <call><name>r_flag_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>is_good_flag</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>++</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>immediate</name></name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>reg</name></name> <operator>&lt;</operator> <name>X86R_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>rep_op</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>MAX_REPOP_LENGTH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>rep_op</name><index>[<expr><name>MAX_REPOP_LENGTH</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>OT_CONSTANT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>++</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>immediate</name></name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>nextpos</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parseOpcode</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>Opcode</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>has_bnd</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isrepop</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"bnd "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>has_bnd</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>op</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>mnemonic</name></name> <operator>=</operator> <ternary><condition><expr><name>args</name></expr> ?</condition><then> <expr><call><name>r_str_ndup</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>args</name> <operator>-</operator> <name>op</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>extended</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>extended</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>X86R_UNDEFINED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reg</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>X86R_UNDEFINED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>immediate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sign</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_good_flag</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_good_flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>is_short</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>operands_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>args</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>args</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"short"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>is_short</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>args</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"rep"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>isrepop</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>parseOperand</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>isrepop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>operands_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>operands_count</name></name> <operator>&lt;</operator> <name>MAX_OPERANDS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>args</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>args</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parseOperand</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name><name>out</name><operator>-&gt;</operator><name>operands_count</name></name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>isrepop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>operands_count</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>getnum</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>oprep</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Opcode</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LookupTable</name> <modifier>*</modifier></type><name>lt_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"rep"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"repe"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"repz"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"repne"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"repnz"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xf2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>Opcode</name></type> <name>instr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>parseOpcode</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rep_op</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>lt_ptr</name> <operator>=</operator> <name>oplookup</name></expr>;</init> <condition><expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>lt_ptr</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>lt_ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name><name>instr</name><operator>.</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name><name>lt_ptr</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lt_ptr</name><operator>-&gt;</operator><name>opcode</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lt_ptr</name><operator>-&gt;</operator><name>only_x32</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>instr</name><operator>.</operator><name>mnemonic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>lt_ptr</name><operator>-&gt;</operator><name>opcode</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>lt_ptr</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <name>l</name></expr>]</index></name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name><name>lt_ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>instr</name><operator>.</operator><name>mnemonic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>l</name> <operator>+</operator> <name><name>lt_ptr</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lt_ptr</name><operator>-&gt;</operator><name>opdo</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>instr</name><operator>.</operator><name>has_bnd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xf2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>lt_ptr</name><operator>-&gt;</operator><name>opdo</name></name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>instr</name><operator>.</operator><name>has_bnd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>l</name> <operator>+</operator> <name>retval</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>instr</name><operator>.</operator><name>mnemonic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>assemble</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAsmOp</name> <modifier>*</modifier></type><name>ao</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>__data</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>__data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>op</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LookupTable</name> <modifier>*</modifier></type><name>lt_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Opcode</name></type> <name>instr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parseOpcode</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>lt_ptr</name> <operator>=</operator> <name>oplookup</name></expr>;</init> <condition><expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>lt_ptr</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>lt_ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name><name>instr</name><operator>.</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name><name>lt_ptr</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lt_ptr</name><operator>-&gt;</operator><name>opcode</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lt_ptr</name><operator>-&gt;</operator><name>only_x32</name></name> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>!=</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>lt_ptr</name><operator>-&gt;</operator><name>opcode</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>lt_ptr</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name><name>lt_ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name><name>lt_ptr</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lt_ptr</name><operator>-&gt;</operator><name>opdo</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>instr</name><operator>.</operator><name>has_bnd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xf2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>lt_ptr</name><operator>-&gt;</operator><name>opdo</name></name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>instr</name><operator>.</operator><name>has_bnd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_asm_op_set_buf</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>__data</name></expr></argument>, <argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>instr</name><operator>.</operator><name>mnemonic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RAsmPlugin</name></type> <name>r_asm_plugin_x86_nz</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"x86.nz"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"x86 handmade assembler"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,

<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"x86"</literal></expr>,

<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">16</literal> <operator>|</operator> <literal type="number">32</literal> <operator>|</operator> <literal type="number">64</literal></expr>,

<expr><operator>.</operator><name>endian</name> <operator>=</operator> <name>R_SYS_ENDIAN_LITTLE</name></expr>,

<expr><operator>.</operator><name>assemble</name> <operator>=</operator> <operator>&amp;</operator><name>assemble</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ASM</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_asm_plugin_x86_nz</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
