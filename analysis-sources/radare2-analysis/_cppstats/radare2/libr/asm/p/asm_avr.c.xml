<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\p\asm_avr.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../arch/avr/disasm.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>disassemble</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAsmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf_asm</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>avrdis</name> <argument_list>(<argument><expr><name>buf_asm</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf_asm</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>buf_asm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><name>buf_asm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>extern</specifier> <name>instructionInfo</name></type> <name><name>instructionSet</name><index>[<expr><name>AVR_TOTAL_INSTRUCTIONS</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TOKEN_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOKEN_DELIM</name></cpp:macro> <cpp:value>" ,\t"</cpp:value></cpp:define>

<struct>struct <name>_specialregs</name> <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>reg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>operandType</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>_specialregs</name></name></type> <name>specialregs</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGS_TABLE</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<decl_stmt><decl><type><name>specialregs</name></type> <name><name>RegsTable</name><index>[<expr><name>REGS_TABLE</name></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"-x"</literal></expr>, <expr><name>OPERAND_XP</name></expr>}</block></expr>, <expr><block>{<expr><literal type="string">"x"</literal></expr>, <expr><name>OPERAND_X</name></expr>}</block></expr>, <expr><block>{<expr><literal type="string">"x+"</literal></expr>, <expr><name>OPERAND_XP</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-y"</literal></expr>, <expr><name>OPERAND_YP</name></expr>}</block></expr>, <expr><block>{<expr><literal type="string">"y"</literal></expr>, <expr><name>OPERAND_Y</name></expr>}</block></expr>, <expr><block>{<expr><literal type="string">"y+"</literal></expr>, <expr><name>OPERAND_YP</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-z"</literal></expr>, <expr><name>OPERAND_ZP</name></expr>}</block></expr>, <expr><block>{<expr><literal type="string">"z"</literal></expr>, <expr><name>OPERAND_Z</name></expr>}</block></expr>, <expr><block>{<expr><literal type="string">"z+"</literal></expr>, <expr><name>OPERAND_ZP</name></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_specialreg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>found</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>REGS_TABLE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>RegsTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>reg</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name><name>RegsTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>operandType</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>found</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>reg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'y'</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>OPERAND_YPQ</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>reg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'z'</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>OPERAND_ZPQ</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>found</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>reg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'y'</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>OPERAND_YPQ</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>reg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'z'</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>OPERAND_ZPQ</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>found</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getnum</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>search_instruction</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>instr</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>MAX_TOKEN_SIZE</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>op1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>op2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AVR_TOTAL_INSTRUCTIONS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>instr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>instructionSet</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mnemonic</name></expr></argument>, <argument><expr><name>MAX_TOKEN_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>instructionSet</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numOperands</name> <operator>==</operator> <name>args</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>args</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>i</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>instructionSet</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>opcodeMask</name> <operator>&gt;=</operator> <literal type="number">0x9004</literal> <operator>&amp;&amp;</operator>

<name><name>instructionSet</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>opcodeMask</name> <operator>&lt;=</operator> <literal type="number">0x9007</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>instructionSet</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>operandTypes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <call><name>parse_specialreg</name> <argument_list>(<argument><expr><name><name>instr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>instructionSet</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mnemonic</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal>

<operator>&amp;&amp;</operator> <name><name>instructionSet</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mnemonic</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>instructionSet</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mnemonic</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal> <operator>||</operator> <name><name>instructionSet</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mnemonic</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>instructionSet</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>operandTypes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <call><name>parse_specialreg</name> <argument_list>(<argument><expr><name><name>instr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>instructionSet</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mnemonic</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal>

<operator>&amp;&amp;</operator> <name><name>instructionSet</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mnemonic</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal>

<operator>&amp;&amp;</operator> <name><name>instructionSet</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mnemonic</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal>

<operator>&amp;&amp;</operator> <name><name>instructionSet</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>operandTypes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>OPERAND_LONG_ABSOLUTE_ADDRESS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>instr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>op2</name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>instr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op2</name> <operator>&gt;</operator> <literal type="number">127</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>instructionSet</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mnemonic</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal>

<operator>&amp;&amp;</operator> <name><name>instructionSet</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mnemonic</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>instructionSet</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mnemonic</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal> <operator>||</operator> <name><name>instructionSet</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mnemonic</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>instructionSet</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>operandTypes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <call><name>parse_specialreg</name> <argument_list>(<argument><expr><name><name>instr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>instructionSet</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mnemonic</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal>

<operator>&amp;&amp;</operator> <name><name>instructionSet</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mnemonic</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal>

<operator>&amp;&amp;</operator> <name><name>instructionSet</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mnemonic</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal>

<operator>&amp;&amp;</operator> <name><name>instructionSet</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>operandTypes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>OPERAND_LONG_ABSOLUTE_ADDRESS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>instr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>op1</name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>instr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op1</name> <operator>&gt;</operator> <literal type="number">127</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>i</name></expr>;</return> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint16_t</name></type> <name>packDataByMask</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>data</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>j</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_registerpair</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>first</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>second</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fnum</name></decl>, <decl><type ref="prev"/><name>snum</name></decl>;</decl_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <call><name>strtok</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name> <operator>||</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>second</name> <operator>=</operator> <call><name>strtok</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>second</name> <operator>&amp;&amp;</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>second</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>first</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'r'</literal> <operator>&amp;&amp;</operator> <name><name>second</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fnum</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>first</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>snum</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>second</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fnum</name> <operator>&gt;</operator> <name>snum</name> <operator>&amp;&amp;</operator> <name>snum</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>snum</name> <operator>&lt;=</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>snum</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>first</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'x'</literal> <operator>&amp;&amp;</operator> <name><name>first</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'z'</literal>

<operator>&amp;&amp;</operator> <name><name>second</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'x'</literal> <operator>&amp;&amp;</operator> <name><name>second</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'z'</literal>

<operator>&amp;&amp;</operator> <name><name>first</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'h'</literal> <operator>&amp;&amp;</operator> <name><name>second</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <operator>(</operator><literal type="char">'z'</literal> <operator>-</operator> <name><name>first</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>first</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>snum</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>first</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>snum</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>snum</name> <operator>&lt;=</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>snum</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>first</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'x'</literal> <operator>&amp;&amp;</operator> <name><name>first</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <operator>(</operator><literal type="char">'z'</literal> <operator>-</operator> <name><name>first</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>assemble_operand</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>OPERAND_REGISTER_EVEN_PAIR</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <call><name>parse_registerpair</name><argument_list>(<argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>res</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>OPERAND_REGISTER_EVEN_PAIR_STARTR24</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <call><name>parse_registerpair</name><argument_list>(<argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>res</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>res</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>OPERAND_BRANCH_ADDRESS</name></expr>:</case>

<case>case <expr><name>OPERAND_RELATIVE_ADDRESS</name></expr>:</case> 

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>pc</name></name> <operator>||</operator> <operator>(</operator><name><name>operand</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator> <name><name>operand</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>temp</name> <operator>-=</operator> <name><name>a</name><operator>-&gt;</operator><name>pc</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>temp</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">64</literal> <operator>&amp;&amp;</operator> <name>temp</name> <operator>&lt;=</operator> <literal type="number">63</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OPERAND_IO_REGISTER</name></expr>:</case>

<case>case <expr><name>OPERAND_BIT</name></expr>:</case>

<case>case <expr><name>OPERAND_DES_ROUND</name></expr>:</case>

<case>case <expr><name>OPERAND_LONG_ABSOLUTE_ADDRESS</name></expr>:</case>

<case>case <expr><name>OPERAND_DATA</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <call><name>getnum</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OPERAND_COMPLEMENTED_DATA</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <call><name>getnum</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <operator>~</operator><operator>(</operator><operator>*</operator><name>res</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OPERAND_MX</name></expr>:</case>

<case>case <expr><name>OPERAND_X</name></expr>:</case>

<case>case <expr><name>OPERAND_XP</name></expr>:</case>

<case>case <expr><name>OPERAND_MY</name></expr>:</case>

<case>case <expr><name>OPERAND_Y</name></expr>:</case>

<case>case <expr><name>OPERAND_YP</name></expr>:</case>

<case>case <expr><name>OPERAND_MZ</name></expr>:</case>

<case>case <expr><name>OPERAND_Z</name></expr>:</case>

<case>case <expr><name>OPERAND_ZP</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OPERAND_YPQ</name></expr>:</case>

<case>case <expr><name>OPERAND_ZPQ</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>operand</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <call><name>getnum</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>operand</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>OPERAND_REGISTER</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>operand</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <call><name>getnum</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>operand</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>res</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>OPERAND_REGISTER_STARTR16</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>operand</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <call><name>getnum</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>operand</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>res</name> <operator>&gt;=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>res</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>res</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>assemble</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAsmOp</name> <modifier>*</modifier></type><name>ao</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>tokens</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>MAX_TOKEN_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>coded</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>op1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>op2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tokens_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>instr_idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>strtok</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><name>TOKEN_DELIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>token</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>tokens_cnt</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>tokens_cnt</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_TOKEN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>tokens_cnt</name></expr>]</index></name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>MAX_TOKEN_SIZE</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>strtok</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TOKEN_DELIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tokens_cnt</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>tokens_cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>instr_idx</name> <operator>=</operator> <call><name>search_instruction</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>tokens_cnt</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>instr_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>instructionSet</name><index>[<expr><name>instr_idx</name></expr>]</index></name><operator>.</operator><name>numOperands</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>tokens_cnt</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>coded</name> <operator>=</operator> <name><name>instructionSet</name><index>[<expr><name>instr_idx</name></expr>]</index></name><operator>.</operator><name>opcodeMask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>instructionSet</name><index>[<expr><name>instr_idx</name></expr>]</index></name><operator>.</operator><name>numOperands</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>tokens_cnt</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>assemble_operand</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>tokens</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>instructionSet</name><index>[<expr><name>instr_idx</name></expr>]</index></name><operator>.</operator><name><name>operandTypes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op1</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>instructionSet</name><index>[<expr><name>instr_idx</name></expr>]</index></name><operator>.</operator><name><name>operandTypes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>OPERAND_LONG_ABSOLUTE_ADDRESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>op1</name> <operator>=</operator> <name>op1</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>coded</name> <operator>=</operator> <name><name>instructionSet</name><index>[<expr><name>instr_idx</name></expr>]</index></name><operator>.</operator><name>opcodeMask</name>

<operator>|</operator> <call><name>packDataByMask</name><argument_list>(<argument><expr><operator>(</operator><name>op1</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>instructionSet</name><index>[<expr><name>instr_idx</name></expr>]</index></name><operator>.</operator><name><name>operandMasks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>coded</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name>op1</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>instructionSet</name><index>[<expr><name>instr_idx</name></expr>]</index></name><operator>.</operator><name><name>operandTypes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>OPERAND_REGISTER_GHOST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>coded</name> <operator>=</operator> <name><name>instructionSet</name><index>[<expr><name>instr_idx</name></expr>]</index></name><operator>.</operator><name>opcodeMask</name>

<operator>|</operator> <call><name>packDataByMask</name><argument_list>(<argument><expr><name>op1</name></expr></argument>, <argument><expr><name><name>instructionSet</name><index>[<expr><name>instr_idx</name></expr>]</index></name><operator>.</operator><name><name>operandMasks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>|</operator> <call><name>packDataByMask</name><argument_list>(<argument><expr><name>op1</name></expr></argument>, <argument><expr><name><name>instructionSet</name><index>[<expr><name>instr_idx</name></expr>]</index></name><operator>.</operator><name><name>operandMasks</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>coded</name> <operator>=</operator> <name><name>instructionSet</name><index>[<expr><name>instr_idx</name></expr>]</index></name><operator>.</operator><name>opcodeMask</name>

<operator>|</operator> <call><name>packDataByMask</name><argument_list>(<argument><expr><name>op1</name></expr></argument>, <argument><expr><name><name>instructionSet</name><index>[<expr><name>instr_idx</name></expr>]</index></name><operator>.</operator><name><name>operandMasks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>instructionSet</name><index>[<expr><name>instr_idx</name></expr>]</index></name><operator>.</operator><name>numOperands</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>tokens_cnt</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>assemble_operand</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>tokens</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>instructionSet</name><index>[<expr><name>instr_idx</name></expr>]</index></name><operator>.</operator><name><name>operandTypes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op1</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<call><name>assemble_operand</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>tokens</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>instructionSet</name><index>[<expr><name>instr_idx</name></expr>]</index></name><operator>.</operator><name><name>operandTypes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op2</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>coded</name> <operator>=</operator> <name><name>instructionSet</name><index>[<expr><name>instr_idx</name></expr>]</index></name><operator>.</operator><name>opcodeMask</name>

<operator>|</operator> <call><name>packDataByMask</name><argument_list>(<argument><expr><name>op1</name></expr></argument>, <argument><expr><name><name>instructionSet</name><index>[<expr><name>instr_idx</name></expr>]</index></name><operator>.</operator><name><name>operandMasks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>|</operator> <call><name>packDataByMask</name><argument_list>(<argument><expr><name>op2</name></expr></argument>, <argument><expr><name><name>instructionSet</name><index>[<expr><name>instr_idx</name></expr>]</index></name><operator>.</operator><name><name>operandMasks</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>instructionSet</name><index>[<expr><name>instr_idx</name></expr>]</index></name><operator>.</operator><name><name>operandTypes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>OPERAND_LONG_ABSOLUTE_ADDRESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>coded</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name>op1</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>instructionSet</name><index>[<expr><name>instr_idx</name></expr>]</index></name><operator>.</operator><name><name>operandTypes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>OPERAND_LONG_ABSOLUTE_ADDRESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>coded</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name>op2</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_setbin</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ao</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>coded</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RAsmPlugin</name></type> <name>r_asm_plugin_avr</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"avr"</literal></expr>,

<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"avr"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"GPL"</literal></expr>,

<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">8</literal><operator>|</operator><literal type="number">16</literal></expr>,

<expr><operator>.</operator><name>endian</name> <operator>=</operator> <name>R_SYS_ENDIAN_LITTLE</name> <operator>|</operator> <name>R_SYS_ENDIAN_BIG</name></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"AVR Atmel"</literal></expr>,

<expr><operator>.</operator><name>disassemble</name> <operator>=</operator> <operator>&amp;</operator><name>disassemble</name></expr>,

<expr><operator>.</operator><name>assemble</name> <operator>=</operator> <operator>&amp;</operator><name>assemble</name></expr>,

<expr><operator>.</operator><name>cpus</name> <operator>=</operator>

<literal type="string">"ATmega8,"</literal> 

<literal type="string">"ATmega1280,"</literal>

<literal type="string">"ATmega1281,"</literal>

<literal type="string">"ATmega168,"</literal>

<literal type="string">"ATmega2560,"</literal>

<literal type="string">"ATmega2561,"</literal>

<literal type="string">"ATmega328p,"</literal>

<literal type="string">"ATmega32u4,"</literal>

<literal type="string">"ATmega48,"</literal>

<literal type="string">"ATmega640,"</literal>

<literal type="string">"ATmega88,"</literal>

<literal type="string">"ATxmega128a4u"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ASM</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_asm_plugin_avr</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
