<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\p\asm_x86_as.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_BINARY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>assemble</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAsmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ipath</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>opath</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>syntaxstr</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ifd</name> <init>= <expr><call><name>r_file_mkstemp</name> <argument_list>(<argument><expr><literal type="string">"r_as"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ipath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ifd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ofd</name> <init>= <expr><call><name>r_file_mkstemp</name> <argument_list>(<argument><expr><literal type="string">"r_as"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>opath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ofd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ipath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name>ifd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>syntax</name></name> <operator>==</operator> <name>R_ASM_SYNTAX_INTEL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>syntaxstr</name> <operator>=</operator> <literal type="string">".intel_syntax noprefix\n"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>syntax</name></name> <operator>==</operator> <name>R_ASM_SYNTAX_ATT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>syntaxstr</name> <operator>=</operator> <literal type="string">".att_syntax\n"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>asm_buf</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(

<argument><expr><literal type="string">"%s.code%i\n"</literal> 

<literal type="string">".ascii \"BEGINMARK\"\n"</literal>

<literal type="string">"%s\n"</literal>

<literal type="string">".ascii \"ENDMARK\"\n"</literal></expr></argument>,

<argument><expr><name>syntaxstr</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>write</name> <argument_list>(<argument><expr><name>ifd</name></expr></argument>, <argument><expr><name>asm_buf</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>asm_buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name>ifd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>asm_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_sys_cmdf</name> <argument_list>(<argument><expr><literal type="string">"as %s -o %s"</literal></expr></argument>, <argument><expr><name>ipath</name></expr></argument>, <argument><expr><name>opath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>begin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name>ofd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ofd</name> <operator>=</operator> <call><name>r_sandbox_open</name> <argument_list>(<argument><expr><name>opath</name></expr></argument>, <argument><expr><name>O_BINARY</name><operator>|</operator><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ofd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ipath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>opath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>opbuf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>read</name> <argument_list>(<argument><expr><name>ofd</name></expr></argument>, <argument><expr><name>opbuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>opbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <call><name>r_mem_mem</name> <argument_list>(<argument><expr><name>opbuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><literal type="string">"BEGINMARK"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>r_mem_mem</name> <argument_list>(<argument><expr><name>opbuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><literal type="string">"ENDMARK"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>begin</name> <operator>||</operator> <operator>!</operator><name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot find water marks\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name> <operator>-</operator> <literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_asm_op_set_buf</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>begin</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error running: as %s -o %s"</literal></expr></argument>, <argument><expr><name>ipath</name></expr></argument>, <argument><expr><name>opath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name>ofd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlink</name> <argument_list>(<argument><expr><name>ipath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlink</name> <argument_list>(<argument><expr><name>opath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ipath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>opath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RAsmPlugin</name></type> <name>r_asm_plugin_x86_as</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"x86.as"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Intel X86 GNU Assembler"</literal></expr>,

<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"x86"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,

<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">16</literal><operator>|</operator><literal type="number">32</literal><operator>|</operator><literal type="number">64</literal></expr>,

<expr><operator>.</operator><name>endian</name> <operator>=</operator> <name>R_SYS_ENDIAN_LITTLE</name></expr>,

<expr><operator>.</operator><name>assemble</name> <operator>=</operator> <operator>&amp;</operator><name>assemble</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ASM</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_asm_plugin_x86_as</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
