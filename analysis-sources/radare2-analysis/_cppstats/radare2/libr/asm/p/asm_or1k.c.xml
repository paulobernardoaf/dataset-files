<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\p\asm_or1k.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../arch/or1k/or1k_disas.h"</cpp:file></cpp:include>

<struct>struct <name>operands</name> <block>{

<decl_stmt><decl><type><name>ut32</name></type> <name>rd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>ra</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>rb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>k1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>k2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>l</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>insn_to_str</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>insn_t</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name>insn_extra_t</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>insn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>operands</name></name></type> <name>o</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>insn_type_t</name></type> <name>type</name> <init>= <expr><call><name>type_of_opcode</name><argument_list>(<argument><expr><name>descr</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>insn_type_descr_t</name> <modifier>*</modifier></type><name>type_descr</name> <init>= <expr><operator>&amp;</operator><name><name>types</name><index>[<expr><name>INSN_X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_type_descriptor</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is_type_descriptor_defined</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type_descr</name> <operator>=</operator> <operator>&amp;</operator><name><name>types</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>o</name><operator>.</operator><name>rd</name></name> <operator>=</operator> <call><name>get_operand_value</name><argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><name>type_descr</name></expr></argument>, <argument><expr><name>INSN_OPER_D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>.</operator><name>ra</name></name> <operator>=</operator> <call><name>get_operand_value</name><argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><name>type_descr</name></expr></argument>, <argument><expr><name>INSN_OPER_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>.</operator><name>rb</name></name> <operator>=</operator> <call><name>get_operand_value</name><argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><name>type_descr</name></expr></argument>, <argument><expr><name>INSN_OPER_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>.</operator><name>k1</name></name> <operator>=</operator> <call><name>get_operand_value</name><argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><name>type_descr</name></expr></argument>, <argument><expr><name>INSN_OPER_K1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>.</operator><name>k2</name></name> <operator>=</operator> <call><name>get_operand_value</name><argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><name>type_descr</name></expr></argument>, <argument><expr><name>INSN_OPER_K2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>get_operand_value</name><argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><name>type_descr</name></expr></argument>, <argument><expr><name>INSN_OPER_N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>.</operator><name>k</name></name> <operator>=</operator> <call><name>get_operand_value</name><argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><name>type_descr</name></expr></argument>, <argument><expr><name>INSN_OPER_K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>.</operator><name>i</name></name> <operator>=</operator> <call><name>get_operand_value</name><argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><name>type_descr</name></expr></argument>, <argument><expr><name>INSN_OPER_I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>.</operator><name>l</name></name> <operator>=</operator> <call><name>get_operand_value</name><argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><name>type_descr</name></expr></argument>, <argument><expr><name>INSN_OPER_L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <ternary><condition><expr><name>extra</name></expr>?</condition><then> <expr><name><name>extra</name><operator>-&gt;</operator><name>name</name></name></expr></then><else>: <expr><name><name>descr</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><name><name>type_descr</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <call><name>sdb_fmt</name><argument_list>(<argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>INSN_X</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <call><name>sdb_fmt</name><argument_list>(<argument><expr><name><name>type_descr</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INSN_N</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <call><name>sdb_fmt</name><argument_list>(<argument><expr><name><name>type_descr</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>,

<argument><expr><operator>(</operator><call><name>sign_extend</name><argument_list>(<argument><expr><name><name>o</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><call><name>get_operand_mask</name><argument_list>(<argument><expr><name>type_descr</name></expr></argument>, <argument><expr><name>INSN_OPER_N</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>

<name><name>a</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INSN_K</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <call><name>sdb_fmt</name><argument_list>(<argument><expr><name><name>type_descr</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INSN_DK</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <call><name>sdb_fmt</name><argument_list>(<argument><expr><name><name>type_descr</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>rd</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INSN_DN</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <call><name>sdb_fmt</name><argument_list>(<argument><expr><name><name>type_descr</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>rd</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>n</name></name> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INSN_B</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <call><name>sdb_fmt</name><argument_list>(<argument><expr><name><name>type_descr</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>rb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INSN_D</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <call><name>sdb_fmt</name><argument_list>(<argument><expr><name><name>type_descr</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>rd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INSN_AI</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <call><name>sdb_fmt</name><argument_list>(<argument><expr><name><name>type_descr</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>ra</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INSN_DAI</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <call><name>sdb_fmt</name><argument_list>(<argument><expr><name><name>type_descr</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>rd</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>ra</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INSN_DAK</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <call><name>sdb_fmt</name><argument_list>(<argument><expr><name><name>type_descr</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>rd</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>ra</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INSN_DAL</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <call><name>sdb_fmt</name><argument_list>(<argument><expr><name><name>type_descr</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>rd</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>ra</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>l</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INSN_DA</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <call><name>sdb_fmt</name><argument_list>(<argument><expr><name><name>type_descr</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>rd</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>ra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INSN_DAB</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <call><name>sdb_fmt</name><argument_list>(<argument><expr><name><name>type_descr</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>rd</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>ra</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>rb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INSN_AB</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <call><name>sdb_fmt</name><argument_list>(<argument><expr><name><name>type_descr</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>ra</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>rb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INSN_IABI</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <call><name>sdb_fmt</name><argument_list>(<argument><expr><name><name>type_descr</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>,

<argument><expr><name><name>o</name><operator>.</operator><name>ra</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>rb</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>o</name><operator>.</operator><name>k1</name></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>|</operator> <name><name>o</name><operator>.</operator><name>k2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INSN_KABK</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <call><name>sdb_fmt</name><argument_list>(<argument><expr><name><name>type_descr</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>,

<argument><expr><name><name>o</name><operator>.</operator><name>ra</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>rb</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>o</name><operator>.</operator><name>k1</name></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>|</operator> <name><name>o</name><operator>.</operator><name>k2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <call><name>sdb_fmt</name><argument_list>(<argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>disassemble</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAsmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>insn</name></decl>, <decl><type ref="prev"/><name>opcode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>opcode_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>insn_t</name> <modifier>*</modifier></type><name>insn_descr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>insn_extra_t</name> <modifier>*</modifier></type><name>extra_descr</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdb_fmt</name><argument_list>(<argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>insn</name> <operator>=</operator> <call><name>r_read_be32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <operator>(</operator><name>insn</name> <operator>&amp;</operator> <name>INSN_OPCODE_MASK</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>opcode_idx</name> <operator>=</operator> <name>opcode</name> <operator>&gt;&gt;</operator> <name>INSN_OPCODE_SHIFT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opcode_idx</name> <operator>&gt;=</operator> <name>insns_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdb_fmt</name><argument_list>(<argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>insn_descr</name> <operator>=</operator> <operator>&amp;</operator><name><name>or1k_insns</name><index>[<expr><name>opcode_idx</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>insn_descr</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>INSN_INVAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdb_fmt</name><argument_list>(<argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>insn_descr</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <name><name>insn_descr</name><operator>-&gt;</operator><name>extra</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>extra_descr</name> <operator>=</operator> <call><name>find_extra_descriptor</name><argument_list>(<argument><expr><name><name>insn_descr</name><operator>-&gt;</operator><name>extra</name></name></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>insn_to_str</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><name>insn_descr</name></expr></argument>, <argument><expr><name>extra_descr</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <literal type="string">"invalid"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>insn_to_str</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><name>insn_descr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RAsmPlugin</name></type> <name>r_asm_plugin_or1k</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"or1k"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"OpenRISC 1000"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"LGPL3"</literal></expr>,

<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"or1k"</literal></expr>,

<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>,

<expr><operator>.</operator><name>endian</name> <operator>=</operator> <name>R_SYS_ENDIAN_BIG</name></expr>,

<expr><operator>.</operator><name>disassemble</name> <operator>=</operator> <operator>&amp;</operator><name>disassemble</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ASM</name></expr>, <expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_asm_plugin_or1k</name></expr>, <expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
