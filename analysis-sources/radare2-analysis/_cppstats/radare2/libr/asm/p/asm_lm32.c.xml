<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\p\asm_lm32.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../arch/lm32/lm32_isa.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LM32_UNUSED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>reg_number_to_string</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>match_idx</name> <init>= <expr><literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RAsmLm32RegNumber</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>RAsmLm32Regs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>number</name> <operator>==</operator> <name>reg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>match_idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>match_idx</name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>RAsmLm32Regs</name><index>[<expr><name>match_idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LM32_UNUSED</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>string_to_reg_number</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>match_idx</name> <init>= <expr><literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RAsmLm32RegNumber</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>RAsmLm32Regs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>match_idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>match_idx</name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <name><name>RAsmLm32Regs</name><index>[<expr><name>match_idx</name></expr>]</index></name><operator>.</operator><name>number</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>string_to_csr_number</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>match_idx</name> <init>= <expr><literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RAsmLm32CsrNumber</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>RAsmLm32Csrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>match_idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>match_idx</name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <name><name>RAsmLm32Csrs</name><index>[<expr><name>match_idx</name></expr>]</index></name><operator>.</operator><name>number</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>string_to_opcode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>tmp_num</name> <init>= <expr><literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RAsmLm32OpcodeNumber</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>RAsmLm32OpcodeList</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp_num</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>tmp_num</name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <name>tmp_num</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>csr_number_to_string</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>csr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>match_idx</name> <init>= <expr><literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RAsmLm32CsrNumber</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>RAsmLm32Csrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>number</name> <operator>==</operator> <name>csr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>match_idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>match_idx</name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>RAsmLm32Csrs</name><index>[<expr><name>match_idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st32</name></type> <name>shift_and_signextend</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>sign_loc</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>tmp</name> <init>= <expr><name>val</name> <operator>&lt;&lt;</operator> <name>shift</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>+</operator> <name>sign_loc</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>|=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>+</operator> <name>sign_loc</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>tmp</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_invalid_imm5_instr</name><parameter_list>(<parameter><decl><type><name>RAsmLm32Instruction</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;</operator> <name>RAsmLm32InstrImm5InvalidBitsMask</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_invalid_one_reg_instr</name><parameter_list>(<parameter><decl><type><name>RAsmLm32Instruction</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;</operator> <name>RAsmLm32InstrOneRegInvalidBitsMask</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_invalid_two_reg_instr</name><parameter_list>(<parameter><decl><type><name>RAsmLm32Instruction</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;</operator> <name>RAsmLm32InstrTwoRegsInvalidBitsMask</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_invalid_wcsr_instr</name><parameter_list>(<parameter><decl><type><name>RAsmLm32Instruction</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;</operator> <name>RAsmLm32InstrWcsrInvalidBitsMask</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_pseudo_instr_ret</name><parameter_list>(<parameter><decl><type><name>RAsmLm32Instruction</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name><name>instr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>lm32_op_b</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>instr</name><operator>-&gt;</operator><name>src0_reg</name></name> <operator>==</operator> <literal type="number">0x1d</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_pseudo_instr_mv</name><parameter_list>(<parameter><decl><type><name>RAsmLm32Instruction</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name><name>instr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>lm32_op_or</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>instr</name><operator>-&gt;</operator><name>src1_reg</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_pseudo_instr_mvhi</name><parameter_list>(<parameter><decl><type><name>RAsmLm32Instruction</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name><name>instr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>lm32_op_orhi</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>instr</name><operator>-&gt;</operator><name>src0_reg</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_pseudo_instr_not</name><parameter_list>(<parameter><decl><type><name>RAsmLm32Instruction</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name><name>instr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>lm32_op_xnor</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>instr</name><operator>-&gt;</operator><name>src1_reg</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_pseudo_instr_mvi</name><parameter_list>(<parameter><decl><type><name>RAsmLm32Instruction</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name><name>instr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>lm32_op_addi</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>instr</name><operator>-&gt;</operator><name>src0_reg</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_pseudo_instr_nop</name><parameter_list>(<parameter><decl><type><name>RAsmLm32Instruction</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name><name>instr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>lm32_op_addi</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>instr</name><operator>-&gt;</operator><name>dest_reg</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>instr</name><operator>-&gt;</operator><name>src0_reg</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>instr</name><operator>-&gt;</operator><name>immediate</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_pseudo_instr_raise</name><parameter_list>(<parameter><decl><type><name>RAsmLm32Instruction</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>instr</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>raise_instr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_asm_lm32_decode</name><parameter_list>(<parameter><decl><type><name>RAsmLm32Instruction</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <call><name>extract_opcode</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>op</name></name> <operator>&gt;=</operator> <name>RAsmLm32OpcodeNumber</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>op_decode</name></name> <operator>=</operator> <name><name>RAsmLm32OpcodeList</name><index>[<expr><name><name>instr</name><operator>-&gt;</operator><name>op</name></name></expr>]</index></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>op_decode</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>reg_imm16_signextend</name></expr>:</case>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>dest_reg</name></name> <operator>=</operator> <call><name>extract_reg_v</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>src0_reg</name></name> <operator>=</operator> <call><name>extract_reg_u</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>immediate</name></name> <operator>=</operator> <call><name>shift_and_signextend</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RAsmLm32Imm16SignBitPos</name></expr></argument>,

<argument><expr><call><name>extract_imm16</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>reg_imm16_shift2_signextend</name></expr>:</case>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>dest_reg</name></name> <operator>=</operator> <call><name>extract_reg_v</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>src0_reg</name></name> <operator>=</operator> <call><name>extract_reg_u</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>immediate</name></name> <operator>=</operator> <call><name>shift_and_signextend</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>RAsmLm32Imm16SignBitPos</name></expr></argument>,

<argument><expr><call><name>extract_imm16</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>reg_imm16_zeroextend</name></expr>:</case>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>dest_reg</name></name> <operator>=</operator> <call><name>extract_reg_v</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>src0_reg</name></name> <operator>=</operator> <call><name>extract_reg_u</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>immediate</name></name> <operator>=</operator> <call><name>extract_imm16</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>reg_imm5</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>is_invalid_imm5_instr</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>dest_reg</name></name> <operator>=</operator> <call><name>extract_reg_v</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>src0_reg</name></name> <operator>=</operator> <call><name>extract_reg_u</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>immediate</name></name> <operator>=</operator> <call><name>extract_imm5</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>raise_instr</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>is_invalid_imm5_instr</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>immediate</name></name> <operator>=</operator> <call><name>extract_imm5</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>one_reg</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>is_invalid_one_reg_instr</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>src0_reg</name></name> <operator>=</operator> <call><name>extract_reg_u</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>two_regs</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>is_invalid_two_reg_instr</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>dest_reg</name></name> <operator>=</operator> <call><name>extract_reg_w</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>src0_reg</name></name> <operator>=</operator> <call><name>extract_reg_u</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>three_regs</name></expr>:</case>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>dest_reg</name></name> <operator>=</operator> <call><name>extract_reg_w</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>src0_reg</name></name> <operator>=</operator> <call><name>extract_reg_v</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>src1_reg</name></name> <operator>=</operator> <call><name>extract_reg_u</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>reg_csr</name></expr>:</case> 

<if_stmt><if>if <condition>(<expr><call><name>is_invalid_wcsr_instr</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>src0_reg</name></name> <operator>=</operator> <call><name>extract_reg_v</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>csr</name></name> <operator>=</operator> <call><name>extract_reg_u</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>csr_reg</name></expr>:</case> 

<if_stmt><if>if <condition>(<expr><call><name>is_invalid_two_reg_instr</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>dest_reg</name></name> <operator>=</operator> <call><name>extract_reg_w</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>csr</name></name> <operator>=</operator> <call><name>extract_reg_u</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>imm26</name></expr>:</case>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>immediate</name></name> <operator>=</operator> <call><name>shift_and_signextend</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>RAsmLm32Imm26SignBitPos</name></expr></argument>,

<argument><expr><call><name>extract_imm26</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>reserved</name></expr>:</case>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>pseudoInstruction</name></name> <operator>=</operator> <call><name>is_pseudo_instr_ret</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_pseudo_instr_mv</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>is_pseudo_instr_mvhi</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_pseudo_instr_not</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_pseudo_instr_mvi</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>is_pseudo_instr_nop</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_pseudo_instr_raise</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_reg_names_to_struct</name><parameter_list>(<parameter><decl><type><name>RAsmLm32Instruction</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>op_decode</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>reg_imm16_signextend</name></expr>:</case>

<case>case <expr><name>reg_imm16_shift2_signextend</name></expr>:</case>

<case>case <expr><name>reg_imm16_zeroextend</name></expr>:</case>

<case>case <expr><name>reg_imm5</name></expr>:</case>

<case>case <expr><name>two_regs</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>reg_number_to_string</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>dest_reg</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>dest_reg_str</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>reg_number_to_string</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>src0_reg</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>src0_reg_str</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>one_reg</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>reg_number_to_string</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>src0_reg</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>src0_reg_str</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>three_regs</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>reg_number_to_string</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>dest_reg</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>dest_reg_str</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>reg_number_to_string</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>src0_reg</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>src0_reg_str</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>reg_number_to_string</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>src1_reg</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>src1_reg_str</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>reg_csr</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>reg_number_to_string</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>src0_reg</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>src0_reg_str</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>csr_number_to_string</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>csr</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>csr_reg_str</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>csr_reg</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>reg_number_to_string</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>dest_reg</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>dest_reg_str</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>csr_number_to_string</name> <argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>csr</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>csr_reg_str</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>raise_instr</name></expr>:</case>

<case>case <expr><name>imm26</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>print_pseudo_instruction</name><parameter_list>(<parameter><decl><type><name>RAsmLm32Instruction</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>instr</name><operator>-&gt;</operator><name>pseudoInstruction</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>op</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>lm32_op_b</name></expr>:</case>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"ret"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>lm32_op_or</name></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"mv %s, %s"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>dest_reg_str</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>src0_reg_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>lm32_op_orhi</name></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"mvhi %s, 0x%x"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>dest_reg_str</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>immediate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>lm32_op_xnor</name></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"not %s, %s"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>dest_reg_str</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>src0_reg_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>lm32_op_addi</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>is_pseudo_instr_nop</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"nop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"mvi %s, 0x%x"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>dest_reg_str</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>immediate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>lm32_op_raise</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>immediate</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x2</literal></expr>:</case> 

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"break"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x7</literal></expr>:</case> 

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"scall"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_asm_lm32_stringify</name><parameter_list>(<parameter><decl><type><name>RAsmLm32Instruction</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>write_reg_names_to_struct</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>pseudoInstruction</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>print_pseudo_instruction</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>op_decode</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>op_decode</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>reg_imm16_signextend</name></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%s %s, %s, 0x%x"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>op_decode</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>dest_reg_str</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>src0_reg_str</name></name></expr></argument>,

<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>immediate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>reg_imm16_zeroextend</name></expr>:</case>

<case>case <expr><name>reg_imm5</name></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%s %s, %s, 0x%x"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>op_decode</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>dest_reg_str</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>src0_reg_str</name></name></expr></argument>,

<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>immediate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>reg_imm16_shift2_signextend</name></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%s %s, %s, 0x%x"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>op_decode</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>dest_reg_str</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>src0_reg_str</name></name></expr></argument>,

<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>immediate</name></name> <operator>+</operator> <name><name>instr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>one_reg</name></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>op_decode</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>src0_reg_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>two_regs</name></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%s %s, %s"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>op_decode</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>dest_reg_str</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>src0_reg_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>three_regs</name></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%s %s, %s, %s"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>op_decode</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>dest_reg_str</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>src0_reg_str</name></name></expr></argument>,

<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>src1_reg_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>reg_csr</name></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%s %s, %s"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>op_decode</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>csr_reg_str</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>src0_reg_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>csr_reg</name></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%s %s, %s"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>op_decode</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>dest_reg_str</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>csr_reg_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>imm26</name></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%s 0x%x"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>op_decode</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>immediate</name></name> <operator>+</operator> <name><name>instr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static int r_asm_lm32_destringify(const char *string, RAsmLm32Instruction *instr) {

return -1;

}

static int r_asm_lm32_encode(RAsmLm32Instruction *instr, ut32 *val) {

return -1;

}

static int assemble(RAsm *a, RAsmOp *ao, const char *str) {

return -1;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>disassemble</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAsmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAsmLm32Instruction</name></type> <name>instr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>instr</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>instr</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>pc</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_asm_lm32_decode</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>instr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>invhex</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_asm_lm32_stringify</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>instr</name></expr></argument>, <argument><expr><call><name>r_strbuf_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>invhex</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RAsmPlugin</name></type> <name>r_asm_plugin_lm32</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"lm32"</literal></expr>,

<expr><operator>.</operator><name>arch</name> <operator>=</operator> <literal type="string">"lm32"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"disassembly plugin for Lattice Micro 32 ISA"</literal></expr>,

<expr><operator>.</operator><name>author</name> <operator>=</operator> <literal type="string">"Felix Held"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"BSD"</literal></expr>,

<expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>,

<expr><operator>.</operator><name>endian</name> <operator>=</operator> <name>R_SYS_ENDIAN_BIG</name></expr>,

<expr><operator>.</operator><name>disassemble</name> <operator>=</operator> <operator>&amp;</operator><name>disassemble</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_ASM</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_asm_plugin_lm32</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
