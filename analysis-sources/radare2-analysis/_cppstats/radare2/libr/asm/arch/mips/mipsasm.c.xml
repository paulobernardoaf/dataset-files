<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\mips\mipsasm.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>regs</name><index>[<expr><literal type="number">33</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"zero"</literal></expr>, <expr><literal type="string">"at"</literal></expr>, <expr><literal type="string">"v0"</literal></expr>, <expr><literal type="string">"v1"</literal></expr>, <expr><literal type="string">"a0"</literal></expr>, <expr><literal type="string">"a1"</literal></expr>, <expr><literal type="string">"a2"</literal></expr>, <expr><literal type="string">"a3"</literal></expr>,

<expr><literal type="string">"t0"</literal></expr>, <expr><literal type="string">"t1"</literal></expr>, <expr><literal type="string">"t2"</literal></expr>, <expr><literal type="string">"t3"</literal></expr>, <expr><literal type="string">"t4"</literal></expr>, <expr><literal type="string">"t5"</literal></expr>, <expr><literal type="string">"t6"</literal></expr>, <expr><literal type="string">"t7"</literal></expr>,

<expr><literal type="string">"s0"</literal></expr>, <expr><literal type="string">"s1"</literal></expr>, <expr><literal type="string">"s2"</literal></expr>, <expr><literal type="string">"s3"</literal></expr>, <expr><literal type="string">"s4"</literal></expr>, <expr><literal type="string">"s5"</literal></expr>, <expr><literal type="string">"s6"</literal></expr>, <expr><literal type="string">"s7"</literal></expr>,

<expr><literal type="string">"t8"</literal></expr>, <expr><literal type="string">"t9"</literal></expr>, <expr><literal type="string">"k0"</literal></expr>, <expr><literal type="string">"k1"</literal></expr>, <expr><literal type="string">"gp"</literal></expr>, <expr><literal type="string">"sp"</literal></expr>, <expr><literal type="string">"s8"</literal></expr>, <expr><literal type="string">"ra"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<struct><specifier>static</specifier> struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>args</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

}</block> <decl><name><name>ops</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"nop"</literal></expr>, <expr><literal type="char">'N'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lui"</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sw"</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sh"</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sb"</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lw"</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lh"</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lb"</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ori"</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"andi"</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"xori"</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"addi"</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"addiu"</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bnez"</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bal"</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">17</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bne"</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"beq"</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bgez"</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bgezal"</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">17</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bltzal"</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bgtz"</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"blez"</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bltz"</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"syscall"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"break"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"nor"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"or"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"xor"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"and"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sll"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sllv"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"slt"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sltu"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sra"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"srl"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"srlv"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"srav"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"add"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"move"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"addu"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sub"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"subu"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mult"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"multu"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"div"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"divu"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mfhi"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mflo"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mthi"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mtlo"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"jalr"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"jr"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"jal"</literal></expr>, <expr><literal type="char">'J'</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"j"</literal></expr>, <expr><literal type="char">'J'</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mips_r</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sa</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fun</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rs</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>rt</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>op</name><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xfc</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>rs</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>rs</name><operator>&lt;&lt;</operator><literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>rt</name><operator>&amp;</operator><literal type="number">0x1f</literal><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>rd</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>sa</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>fun</name><operator>&amp;</operator><literal type="number">0x3f</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>sa</name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mips_i</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>imm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_branch</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rs</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>rt</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_branch</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>imm</name> <operator>/=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>imm</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>imm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>op</name><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xfc</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>rs</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>rs</name><operator>&lt;&lt;</operator><literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>rt</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>imm</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>imm</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mips_j</name><parameter_list>(<parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>addr</name> <operator>/=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>op</name><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xfc</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>addr</name><operator>&gt;&gt;</operator><literal type="number">24</literal><operator>)</operator><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>addr</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>addr</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>addr</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getreg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Missing argument\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>regs</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>regs</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><name>n</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid reg name (%s) at pos %d\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_IPI</name> <name>int</name></type> <name>mips_assemble</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>hasp</name></decl>, <decl><type ref="prev"/><name>is_branch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>w0</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>w1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>w2</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>w3</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hasp</name> <operator>=</operator> <call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_replace_char</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>w0</name><operator>=</operator><operator>*</operator><name>w1</name><operator>=</operator><operator>*</operator><name>w2</name><operator>=</operator><operator>*</operator><name>w3</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"jalr"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strchr</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>opstr</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>opstr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>opstr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"jalr ra ra %s"</literal></expr></argument>, <argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>opstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sscanf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%31s"</literal></expr></argument>, <argument><expr><name>w0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>w0</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>w0</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>args</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><call><name>sscanf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%31s %31s %31s %31s"</literal></expr></argument>, <argument><expr><name>w0</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>, <argument><expr><name>w3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><call><name>sscanf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%31s %31s %31s %31s"</literal></expr></argument>, <argument><expr><name>w0</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>, <argument><expr><name>w3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>sscanf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%31s %31s %31s"</literal></expr></argument>, <argument><expr><name>w0</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>sscanf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%31s %31s %31s"</literal></expr></argument>, <argument><expr><name>w0</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>sscanf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%31s %31s"</literal></expr></argument>, <argument><expr><name>w0</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>sscanf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%31s %31s"</literal></expr></argument>, <argument><expr><name>w0</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><call><name>sscanf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%31s"</literal></expr></argument>, <argument><expr><name>w0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>hasp</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>w2</name></expr></argument>, <argument><expr><name>w3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'R'</literal></expr>:</case> 

<switch>switch <condition>(<expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>args</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">3</literal></expr>:</case> <return>return <expr><call><name>mips_r</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</return> <break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">3</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>mips_r</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>mips_r</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case> <return>return <expr><call><name>mips_r</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</return> <break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><call><name>mips_r</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><operator>-</operator><literal type="number">2</literal></expr>:</case> <return>return <expr><call><name>mips_r</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</return> <break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case> <return>return <expr><call><name>mips_r</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">0</literal></expr>:</case> <return>return <expr><call><name>mips_r</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'I'</literal></expr>:</case>

<case>case <expr><literal type="char">'B'</literal></expr>:</case>

<expr_stmt><expr><name>is_branch</name> <operator>=</operator> <name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <literal type="char">'B'</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>args</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">2</literal></expr>:</case> <return>return <expr><call><name>mips_i</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>is_branch</name></expr></argument>)</argument_list></call></expr>;</return> <break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> <return>return <expr><call><name>mips_i</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n</name></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>is_branch</name></expr></argument>)</argument_list></call></expr>;</return> <break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>mips_i</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n</name></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>is_branch</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>mips_i</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>(</operator><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n</name><operator>)</operator></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>is_branch</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>mips_i</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>is_branch</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>mips_i</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>(</operator><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>is_branch</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'J'</literal></expr>:</case>

<switch>switch <condition>(<expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>args</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><call><name>mips_j</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n</name></expr></argument>, <argument><expr><call><name>getreg</name> <argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> <break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'N'</literal></expr>:</case> 

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

</unit>
