<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\snes\snesdis.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snes_op_table.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>snesDisass</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>M_flag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>X_flag</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>RAsmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>snes_op_t</name> <modifier>*</modifier></type><name>s_op</name> <init>= <expr><operator>&amp;</operator><name><name>snes_op</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>op_len</name> <init>= <expr><call><name>snes_op_get_size</name> <argument_list>(<argument><expr><name>M_flag</name></expr></argument>, <argument><expr><name>X_flag</name></expr></argument>, <argument><expr><name>s_op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>op_len</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf_asm</name> <init>= <expr><literal type="string">"invalid"</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>s_op</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SNES_OP_8BIT</name></expr>:</case>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <name><name>s_op</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SNES_OP_16BIT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name> <operator>%</operator> <literal type="number">0x20</literal> <operator>==</operator> <literal type="number">0x10</literal> <operator>||</operator> <operator>*</operator><name>buf</name> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><name><name>s_op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>pc</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>st8</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><name><name>s_op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SNES_OP_24BIT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name> <operator>==</operator> <literal type="number">0x44</literal> <operator>||</operator> <operator>*</operator><name>buf</name> <operator>==</operator> <literal type="number">0x54</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><name><name>s_op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>buf</name> <operator>==</operator> <literal type="number">0x82</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><name><name>s_op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>pc</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name>st16</name><operator>)</operator><call><name>ut8p_bw</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><name><name>s_op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>ut8p_bw</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SNES_OP_32BIT</name></expr>:</case>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><name><name>s_op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>|</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>|</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SNES_OP_IMM_M</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>M_flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s #0x%02x"</literal></expr></argument>, <argument><expr><name><name>s_op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s #0x%04x"</literal></expr></argument>, <argument><expr><name><name>s_op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>ut8p_bw</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SNES_OP_IMM_X</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>X_flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s #0x%02x"</literal></expr></argument>, <argument><expr><name><name>s_op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s #0x%04x"</literal></expr></argument>, <argument><expr><name><name>s_op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>ut8p_bw</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><name>buf_asm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>op_len</name></expr>;</return>

</block_content>}</block></function>

</unit>
