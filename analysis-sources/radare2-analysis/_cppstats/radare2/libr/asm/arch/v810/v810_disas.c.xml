<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\v810\v810_disas.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v810_disas.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>instrs</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>V810_MOV</name></expr>]</index> <operator>=</operator> <literal type="string">"mov"</literal></expr>,

<expr><index>[<expr><name>V810_ADD</name></expr>]</index> <operator>=</operator> <literal type="string">"add"</literal></expr>,

<expr><index>[<expr><name>V810_SUB</name></expr>]</index> <operator>=</operator> <literal type="string">"sub"</literal></expr>,

<expr><index>[<expr><name>V810_CMP</name></expr>]</index> <operator>=</operator> <literal type="string">"cmp"</literal></expr>,

<expr><index>[<expr><name>V810_SHL</name></expr>]</index> <operator>=</operator> <literal type="string">"shl"</literal></expr>,

<expr><index>[<expr><name>V810_SHR</name></expr>]</index> <operator>=</operator> <literal type="string">"shr"</literal></expr>,

<expr><index>[<expr><name>V810_JMP</name></expr>]</index> <operator>=</operator> <literal type="string">"jmp"</literal></expr>,

<expr><index>[<expr><name>V810_SAR</name></expr>]</index> <operator>=</operator> <literal type="string">"sar"</literal></expr>,

<expr><index>[<expr><name>V810_MUL</name></expr>]</index> <operator>=</operator> <literal type="string">"mul"</literal></expr>,

<expr><index>[<expr><name>V810_DIV</name></expr>]</index> <operator>=</operator> <literal type="string">"div"</literal></expr>,

<expr><index>[<expr><name>V810_MULU</name></expr>]</index> <operator>=</operator> <literal type="string">"mulu"</literal></expr>,

<expr><index>[<expr><name>V810_DIVU</name></expr>]</index> <operator>=</operator> <literal type="string">"divu"</literal></expr>,

<expr><index>[<expr><name>V810_OR</name></expr>]</index> <operator>=</operator> <literal type="string">"or"</literal></expr>,

<expr><index>[<expr><name>V810_AND</name></expr>]</index> <operator>=</operator> <literal type="string">"and"</literal></expr>,

<expr><index>[<expr><name>V810_XOR</name></expr>]</index> <operator>=</operator> <literal type="string">"xor"</literal></expr>,

<expr><index>[<expr><name>V810_NOT</name></expr>]</index> <operator>=</operator> <literal type="string">"not"</literal></expr>,

<expr><index>[<expr><name>V810_MOV_IMM5</name></expr>]</index> <operator>=</operator> <literal type="string">"mov"</literal></expr>,

<expr><index>[<expr><name>V810_ADD_IMM5</name></expr>]</index> <operator>=</operator> <literal type="string">"add"</literal></expr>,

<expr><index>[<expr><name>V810_CMP_IMM5</name></expr>]</index> <operator>=</operator> <literal type="string">"cmp"</literal></expr>,

<expr><index>[<expr><name>V810_SHL_IMM5</name></expr>]</index> <operator>=</operator> <literal type="string">"shl"</literal></expr>,

<expr><index>[<expr><name>V810_SHR_IMM5</name></expr>]</index> <operator>=</operator> <literal type="string">"shr"</literal></expr>,

<expr><index>[<expr><name>V810_SAR_IMM5</name></expr>]</index> <operator>=</operator> <literal type="string">"sar"</literal></expr>,

<expr><index>[<expr><name>V810_MOVEA</name></expr>]</index> <operator>=</operator> <literal type="string">"movea"</literal></expr>,

<expr><index>[<expr><name>V810_MOVHI</name></expr>]</index> <operator>=</operator> <literal type="string">"movhi"</literal></expr>,

<expr><index>[<expr><name>V810_ADDI</name></expr>]</index> <operator>=</operator> <literal type="string">"addi"</literal></expr>,

<expr><index>[<expr><name>V810_ORI</name></expr>]</index> <operator>=</operator> <literal type="string">"ori"</literal></expr>,

<expr><index>[<expr><name>V810_ANDI</name></expr>]</index> <operator>=</operator> <literal type="string">"andi"</literal></expr>,

<expr><index>[<expr><name>V810_XORI</name></expr>]</index> <operator>=</operator> <literal type="string">"xori"</literal></expr>,

<expr><index>[<expr><name>V810_JR</name></expr>]</index> <operator>=</operator> <literal type="string">"jr"</literal></expr>,

<expr><index>[<expr><name>V810_JAL</name></expr>]</index> <operator>=</operator> <literal type="string">"jal"</literal></expr>,

<expr><index>[<expr><name>V810_LDB</name></expr>]</index> <operator>=</operator> <literal type="string">"ld.b"</literal></expr>,

<expr><index>[<expr><name>V810_LDH</name></expr>]</index> <operator>=</operator> <literal type="string">"ld.h"</literal></expr>,

<expr><index>[<expr><name>V810_LDW</name></expr>]</index> <operator>=</operator> <literal type="string">"ld.w"</literal></expr>,

<expr><index>[<expr><name>V810_STB</name></expr>]</index> <operator>=</operator> <literal type="string">"st.b"</literal></expr>,

<expr><index>[<expr><name>V810_STH</name></expr>]</index> <operator>=</operator> <literal type="string">"st.h"</literal></expr>,

<expr><index>[<expr><name>V810_STW</name></expr>]</index> <operator>=</operator> <literal type="string">"st.w"</literal></expr>,

<expr><index>[<expr><name>V810_INB</name></expr>]</index> <operator>=</operator> <literal type="string">"in.b"</literal></expr>,

<expr><index>[<expr><name>V810_INH</name></expr>]</index> <operator>=</operator> <literal type="string">"in.h"</literal></expr>,

<expr><index>[<expr><name>V810_CAXI</name></expr>]</index> <operator>=</operator> <literal type="string">"caxi"</literal></expr>,

<expr><index>[<expr><name>V810_INW</name></expr>]</index> <operator>=</operator> <literal type="string">"in.w"</literal></expr>,

<expr><index>[<expr><name>V810_OUTB</name></expr>]</index> <operator>=</operator> <literal type="string">"out.b"</literal></expr>,

<expr><index>[<expr><name>V810_OUTH</name></expr>]</index> <operator>=</operator> <literal type="string">"out.h"</literal></expr>,

<expr><index>[<expr><name>V810_OUTW</name></expr>]</index> <operator>=</operator> <literal type="string">"out.w"</literal></expr>,

<expr><index>[<expr><name>V810_SETF</name></expr>]</index> <operator>=</operator> <literal type="string">"setf"</literal></expr>,

<expr><index>[<expr><name>V810_LDSR</name></expr>]</index> <operator>=</operator> <literal type="string">"ldsr"</literal></expr>,

<expr><index>[<expr><name>V810_STSR</name></expr>]</index> <operator>=</operator> <literal type="string">"stsr"</literal></expr>,

<expr><index>[<expr><name>V810_TRAP</name></expr>]</index> <operator>=</operator> <literal type="string">"trap"</literal></expr>,

<expr><index>[<expr><name>V810_HALT</name></expr>]</index> <operator>=</operator> <literal type="string">"halt"</literal></expr>,

<expr><index>[<expr><name>V810_RETI</name></expr>]</index> <operator>=</operator> <literal type="string">"reti"</literal></expr>,

<expr><index>[<expr><name>V810_SEI</name></expr>]</index> <operator>=</operator> <literal type="string">"sei"</literal></expr>,

<expr><index>[<expr><name>V810_CLI</name></expr>]</index> <operator>=</operator> <literal type="string">"cli"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>bit_instrs</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>V810_BIT_SCH0U</name></expr>]</index> <operator>=</operator> <literal type="string">"sch0bsu"</literal></expr>,

<expr><index>[<expr><name>V810_BIT_SCH0D</name></expr>]</index> <operator>=</operator> <literal type="string">"sch0bsd"</literal></expr>,

<expr><index>[<expr><name>V810_BIT_SCH1U</name></expr>]</index> <operator>=</operator> <literal type="string">"sch1bsu"</literal></expr>,

<expr><index>[<expr><name>V810_BIT_SCH1D</name></expr>]</index> <operator>=</operator> <literal type="string">"sch1bsd"</literal></expr>,

<expr><index>[<expr><name>V810_BIT_ORU</name></expr>]</index> <operator>=</operator> <literal type="string">"orbsu"</literal></expr>,

<expr><index>[<expr><name>V810_BIT_ANDU</name></expr>]</index> <operator>=</operator> <literal type="string">"andbsu"</literal></expr>,

<expr><index>[<expr><name>V810_BIT_XORU</name></expr>]</index> <operator>=</operator> <literal type="string">"xorbsu"</literal></expr>,

<expr><index>[<expr><name>V810_BIT_MOVU</name></expr>]</index> <operator>=</operator> <literal type="string">"movbsu"</literal></expr>,

<expr><index>[<expr><name>V810_BIT_ORNU</name></expr>]</index> <operator>=</operator> <literal type="string">"ornbsu"</literal></expr>,

<expr><index>[<expr><name>V810_BIT_ANDNU</name></expr>]</index> <operator>=</operator> <literal type="string">"andnbsu"</literal></expr>,

<expr><index>[<expr><name>V810_BIT_XORNU</name></expr>]</index> <operator>=</operator> <literal type="string">"xornbsu"</literal></expr>,

<expr><index>[<expr><name>V810_BIT_NOTU</name></expr>]</index> <operator>=</operator> <literal type="string">"notbsu"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ext_instrs</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>V810_EXT_CMPF_S</name></expr>]</index> <operator>=</operator> <literal type="string">"cmpf.s"</literal></expr>,

<expr><index>[<expr><name>V810_EXT_CVT_WS</name></expr>]</index> <operator>=</operator> <literal type="string">"cvt.ws"</literal></expr>,

<expr><index>[<expr><name>V810_EXT_CVT_SW</name></expr>]</index> <operator>=</operator> <literal type="string">"cvt.sw"</literal></expr>,

<expr><index>[<expr><name>V810_EXT_ADDF_S</name></expr>]</index> <operator>=</operator> <literal type="string">"addf.s"</literal></expr>,

<expr><index>[<expr><name>V810_EXT_SUBF_S</name></expr>]</index> <operator>=</operator> <literal type="string">"subf.s"</literal></expr>,

<expr><index>[<expr><name>V810_EXT_MULF_S</name></expr>]</index> <operator>=</operator> <literal type="string">"mulf.s"</literal></expr>,

<expr><index>[<expr><name>V810_EXT_DIVF_S</name></expr>]</index> <operator>=</operator> <literal type="string">"divf.s"</literal></expr>,

<expr><index>[<expr><name>V810_EXT_XB</name></expr>]</index> <operator>=</operator> <literal type="string">"xb"</literal></expr>,

<expr><index>[<expr><name>V810_EXT_XH</name></expr>]</index> <operator>=</operator> <literal type="string">"xh"</literal></expr>,

<expr><index>[<expr><name>V810_EXT_REV</name></expr>]</index> <operator>=</operator> <literal type="string">"rev"</literal></expr>,

<expr><index>[<expr><name>V810_EXT_TRNC_SW</name></expr>]</index> <operator>=</operator> <literal type="string">"trnc.sw"</literal></expr>,

<expr><index>[<expr><name>V810_EXT_MPYHW</name></expr>]</index> <operator>=</operator> <literal type="string">"mpyhw"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>conds</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>V810_COND_V</name></expr>]</index> <operator>=</operator> <literal type="string">"v"</literal></expr>,

<expr><index>[<expr><name>V810_COND_L</name></expr>]</index> <operator>=</operator> <literal type="string">"l"</literal></expr>,

<expr><index>[<expr><name>V810_COND_E</name></expr>]</index> <operator>=</operator> <literal type="string">"e"</literal></expr>,

<expr><index>[<expr><name>V810_COND_NH</name></expr>]</index> <operator>=</operator> <literal type="string">"nh"</literal></expr>,

<expr><index>[<expr><name>V810_COND_N</name></expr>]</index> <operator>=</operator> <literal type="string">"n"</literal></expr>,

<expr><index>[<expr><name>V810_COND_NONE</name></expr>]</index><operator>=</operator> <literal type="string">"r"</literal></expr>,

<expr><index>[<expr><name>V810_COND_LT</name></expr>]</index> <operator>=</operator> <literal type="string">"lt"</literal></expr>,

<expr><index>[<expr><name>V810_COND_LE</name></expr>]</index> <operator>=</operator> <literal type="string">"le"</literal></expr>,

<expr><index>[<expr><name>V810_COND_NV</name></expr>]</index> <operator>=</operator> <literal type="string">"nv"</literal></expr>,

<expr><index>[<expr><name>V810_COND_NL</name></expr>]</index> <operator>=</operator> <literal type="string">"nl"</literal></expr>,

<expr><index>[<expr><name>V810_COND_NE</name></expr>]</index> <operator>=</operator> <literal type="string">"ne"</literal></expr>,

<expr><index>[<expr><name>V810_COND_H</name></expr>]</index> <operator>=</operator> <literal type="string">"h"</literal></expr>,

<expr><index>[<expr><name>V810_COND_P</name></expr>]</index> <operator>=</operator> <literal type="string">"p"</literal></expr>,

<expr><index>[<expr><name>V810_COND_GE</name></expr>]</index> <operator>=</operator> <literal type="string">"ge"</literal></expr>,

<expr><index>[<expr><name>V810_COND_GT</name></expr>]</index> <operator>=</operator> <literal type="string">"gt"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>sysreg_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>V810_SREG_EIPC</name></expr>]</index> <operator>=</operator> <literal type="string">"EIPC"</literal></expr>,

<expr><index>[<expr><name>V810_SREG_EIPSW</name></expr>]</index> <operator>=</operator> <literal type="string">"EIPSW"</literal></expr>,

<expr><index>[<expr><name>V810_SREG_FEPC</name></expr>]</index> <operator>=</operator> <literal type="string">"FEPC"</literal></expr>,

<expr><index>[<expr><name>V810_SREG_FEPSW</name></expr>]</index> <operator>=</operator> <literal type="string">"FEPSW"</literal></expr>,

<expr><index>[<expr><name>V810_SREG_ECR</name></expr>]</index> <operator>=</operator> <literal type="string">"ECR"</literal></expr>,

<expr><index>[<expr><name>V810_SREG_PSW</name></expr>]</index> <operator>=</operator> <literal type="string">"PSW"</literal></expr>,

<expr><index>[<expr><name>V810_SREG_PIR</name></expr>]</index> <operator>=</operator> <literal type="string">"PIR"</literal></expr>,

<expr><index>[<expr><name>V810_SREG_TKCW</name></expr>]</index> <operator>=</operator> <literal type="string">"TKCW"</literal></expr>,

<expr><index>[<expr><name>V810_SREG_CHCW</name></expr>]</index> <operator>=</operator> <literal type="string">"CHCW"</literal></expr>,

<expr><index>[<expr><name>V810_SREG_ADTRE</name></expr>]</index> <operator>=</operator> <literal type="string">"ADTRE"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_reg_reg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>v810_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>opcode</name></decl>;</decl_stmt>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>OPCODE</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>instrs</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>V810_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>instrs</name><index>[<expr><name>opcode</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>V810_JMP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V810_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"[r%u]"</literal></expr></argument>,

<argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V810_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r%u, r%u"</literal></expr></argument>,

<argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_imm_reg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>v810_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>opcode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>immed</name></decl>;</decl_stmt>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>OPCODE</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>instrs</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>V810_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>instrs</name><index>[<expr><name>opcode</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>immed</name> <operator>=</operator> <call><name>IMM5</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>V810_MOV_IMM5</name></expr>:</case>

<case>case <expr><name>V810_ADD_IMM5</name></expr>:</case>

<case>case <expr><name>V810_CMP_IMM5</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V810_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%d, r%u"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>st8</name><operator>)</operator><call><name>SEXT5</name><argument_list>(<argument><expr><name>immed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V810_LDSR</name></expr>:</case>

<case>case <expr><name>V810_STSR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>immed</name> <operator>&gt;</operator> <literal type="number">0x19</literal> <operator>||</operator> <operator>(</operator><name>immed</name> <operator>&gt;</operator> <literal type="number">0x7</literal> <operator>&amp;&amp;</operator> <name>immed</name> <operator>&lt;</operator> <literal type="number">0x18</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V810_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"s%u, r%u"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name>immed</name></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sysreg_names</name><index>[<expr><name>immed</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V810_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s, r%u"</literal></expr></argument>,

<argument><expr><name><name>sysreg_names</name><index>[<expr><name>immed</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>V810_SETF</name></expr>:</case>

<case>case <expr><name>V810_SHL_IMM5</name></expr>:</case>

<case>case <expr><name>V810_SHR_IMM5</name></expr>:</case>

<case>case <expr><name>V810_SAR_IMM5</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V810_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%u, r%u"</literal></expr></argument>,

<argument><expr><name>immed</name></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V810_TRAP</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V810_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>,

<argument><expr><name>immed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_bcond</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>v810_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>st16</name></type> <name>disp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>cond</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cond</name> <operator>=</operator> <operator>(</operator><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>disp</name> <operator>=</operator> <call><name>DISP9</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cond</name> <operator>==</operator> <name>V810_COND_NOP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>V810_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"nop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>V810_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"b%s"</literal></expr></argument>, <argument><expr><name><name>conds</name><index>[<expr><name>cond</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V810_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_jump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>word1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>word2</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>v810_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>V810_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>instrs</name><index>[<expr><call><name>OPCODE</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V810_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>,

<argument><expr><call><name>DISP26</name><argument_list>(<argument><expr><name>word1</name></expr></argument>, <argument><expr><name>word2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_3operands</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>word1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>word2</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>v810_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>V810_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>instrs</name><index>[<expr><call><name>OPCODE</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>OPCODE</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>V810_ADDI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V810_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%d, r%d, r%d"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>st16</name><operator>)</operator> <name>word2</name></expr></argument>, <argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V810_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0x%x, r%d, r%d"</literal></expr></argument>,

<argument><expr><name>word2</name></expr></argument>, <argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_load_store</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>word1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>word2</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>v810_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>V810_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>instrs</name><index>[<expr><call><name>OPCODE</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>OPCODE</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>V810_STB</name></expr>:</case>

<case>case <expr><name>V810_STH</name></expr>:</case>

<case>case <expr><name>V810_STW</name></expr>:</case>

<case>case <expr><name>V810_OUTB</name></expr>:</case>

<case>case <expr><name>V810_OUTH</name></expr>:</case>

<case>case <expr><name>V810_OUTW</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V810_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"r%d, %hd[r%d]"</literal></expr></argument>,

<argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>st16</name><operator>)</operator><name>word2</name></expr></argument>, <argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V810_LDB</name></expr>:</case>

<case>case <expr><name>V810_LDH</name></expr>:</case>

<case>case <expr><name>V810_LDW</name></expr>:</case>

<case>case <expr><name>V810_INB</name></expr>:</case>

<case>case <expr><name>V810_INH</name></expr>:</case>

<case>case <expr><name>V810_INW</name></expr>:</case>

<case>case <expr><name>V810_CAXI</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V810_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"%hd[r%d], r%d"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>st16</name><operator>)</operator><name>word2</name></expr></argument>, <argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_bit_op</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>v810_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>subop</name></decl>;</decl_stmt>

<expr_stmt><expr><name>subop</name> <operator>=</operator> <call><name>REG1</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>V810_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>bit_instrs</name><index>[<expr><name>subop</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_extended</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>word1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>word2</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>v810_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>subop</name> <init>= <expr><call><name>OPCODE</name><argument_list>(<argument><expr><name>word2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>subop</name> <operator>&gt;</operator> <literal type="number">0xC</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>V810_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>ext_instrs</name><index>[<expr><name>subop</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>subop</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>V810_EXT_CMPF_S</name></expr>:</case>

<case>case <expr><name>V810_EXT_CVT_WS</name></expr>:</case>

<case>case <expr><name>V810_EXT_CVT_SW</name></expr>:</case>

<case>case <expr><name>V810_EXT_ADDF_S</name></expr>:</case>

<case>case <expr><name>V810_EXT_SUBF_S</name></expr>:</case>

<case>case <expr><name>V810_EXT_MULF_S</name></expr>:</case>

<case>case <expr><name>V810_EXT_DIVF_S</name></expr>:</case>

<case>case <expr><name>V810_EXT_REV</name></expr>:</case>

<case>case <expr><name>V810_EXT_TRNC_SW</name></expr>:</case>

<case>case <expr><name>V810_EXT_MPYHW</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V810_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r%d, r%d"</literal></expr></argument>,

<argument><expr><call><name>REG1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V810_EXT_XB</name></expr>:</case>

<case>case <expr><name>V810_EXT_XH</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V810_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r%d"</literal></expr></argument>,

<argument><expr><call><name>REG2</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>v810_decode_command</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>v810_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>word1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>word2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>word1</name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>word2</name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>instr</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>OPCODE</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>V810_MOV</name></expr>:</case>

<case>case <expr><name>V810_ADD</name></expr>:</case>

<case>case <expr><name>V810_SUB</name></expr>:</case>

<case>case <expr><name>V810_CMP</name></expr>:</case>

<case>case <expr><name>V810_SHL</name></expr>:</case>

<case>case <expr><name>V810_SHR</name></expr>:</case>

<case>case <expr><name>V810_JMP</name></expr>:</case>

<case>case <expr><name>V810_SAR</name></expr>:</case>

<case>case <expr><name>V810_MUL</name></expr>:</case>

<case>case <expr><name>V810_DIV</name></expr>:</case>

<case>case <expr><name>V810_MULU</name></expr>:</case>

<case>case <expr><name>V810_DIVU</name></expr>:</case>

<case>case <expr><name>V810_OR</name></expr>:</case>

<case>case <expr><name>V810_AND</name></expr>:</case>

<case>case <expr><name>V810_NOT</name></expr>:</case>

<case>case <expr><name>V810_XOR</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_reg_reg</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V810_MOV_IMM5</name></expr>:</case>

<case>case <expr><name>V810_ADD_IMM5</name></expr>:</case>

<case>case <expr><name>V810_SETF</name></expr>:</case>

<case>case <expr><name>V810_CMP_IMM5</name></expr>:</case>

<case>case <expr><name>V810_SHL_IMM5</name></expr>:</case>

<case>case <expr><name>V810_SHR_IMM5</name></expr>:</case>

<case>case <expr><name>V810_CLI</name></expr>:</case>

<case>case <expr><name>V810_SAR_IMM5</name></expr>:</case>

<case>case <expr><name>V810_TRAP</name></expr>:</case>

<case>case <expr><name>V810_RETI</name></expr>:</case>

<case>case <expr><name>V810_HALT</name></expr>:</case>

<case>case <expr><name>V810_LDSR</name></expr>:</case>

<case>case <expr><name>V810_STSR</name></expr>:</case>

<case>case <expr><name>V810_SEI</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_imm_reg</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V810_MOVEA</name></expr>:</case>

<case>case <expr><name>V810_ADDI</name></expr>:</case>

<case>case <expr><name>V810_ORI</name></expr>:</case>

<case>case <expr><name>V810_ANDI</name></expr>:</case>

<case>case <expr><name>V810_XORI</name></expr>:</case>

<case>case <expr><name>V810_MOVHI</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_3operands</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>, <argument><expr><name>word2</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V810_JR</name></expr>:</case>

<case>case <expr><name>V810_JAL</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_jump</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>, <argument><expr><name>word2</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V810_LDB</name></expr>:</case>

<case>case <expr><name>V810_LDH</name></expr>:</case>

<case>case <expr><name>V810_LDW</name></expr>:</case>

<case>case <expr><name>V810_STB</name></expr>:</case>

<case>case <expr><name>V810_STH</name></expr>:</case>

<case>case <expr><name>V810_STW</name></expr>:</case>

<case>case <expr><name>V810_INB</name></expr>:</case>

<case>case <expr><name>V810_INH</name></expr>:</case>

<case>case <expr><name>V810_CAXI</name></expr>:</case>

<case>case <expr><name>V810_INW</name></expr>:</case>

<case>case <expr><name>V810_OUTB</name></expr>:</case>

<case>case <expr><name>V810_OUTH</name></expr>:</case>

<case>case <expr><name>V810_OUTW</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_load_store</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>, <argument><expr><name>word2</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V810_BSTR</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_bit_op</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V810_EXT</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_extended</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>, <argument><expr><name>word2</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>OPCODE</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_bcond</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>&lt;</operator> <name>ret</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
