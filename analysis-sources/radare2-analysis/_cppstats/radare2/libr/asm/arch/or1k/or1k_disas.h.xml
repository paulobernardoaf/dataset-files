<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\or1k\or1k_disas.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_OPCODE_MASK</name></cpp:macro> <cpp:value>(0b111111ULL * 0x4000000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_OPCODE_SHIFT</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_EMPTY_SHIFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_EMPTY_MASK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_N_MASK</name></cpp:macro> <cpp:value>0b11111111111111111111111111</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_D_SHIFT</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_D_MASK</name></cpp:macro> <cpp:value>(0b11111 * 0x200000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_K_MASK</name></cpp:macro> <cpp:value>0b1111111111111111</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_B_SHIFT</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_B_MASK</name></cpp:macro> <cpp:value>(0b11111 * 0x800)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_A_SHIFT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_A_MASK</name></cpp:macro> <cpp:value>(0b11111 * 0x10000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_I_MASK</name></cpp:macro> <cpp:value>0b1111111111111111</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_L_MASK</name></cpp:macro> <cpp:value>0b111111</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_K1_SHIFT</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_K1_MASK</name></cpp:macro> <cpp:value>(0b11111 * 0x200000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_K2_MASK</name></cpp:macro> <cpp:value>0b11111111111</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>insn_type</name> <block>{

<decl><name>INSN_END</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>INSN_INVAL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>INSN_X</name></decl>, 

<decl><name>INSN_N</name></decl>, 

<decl><name>INSN_DN</name></decl>, 

<decl><name>INSN_K</name></decl>, 

<decl><name>INSN_DK</name></decl>, 

<decl><name>INSN_D</name></decl>, 

<decl><name>INSN_B</name></decl>, 

<decl><name>INSN_AI</name></decl>, 

<decl><name>INSN_DAI</name></decl>, 

<decl><name>INSN_DAK</name></decl>, 

<decl><name>INSN_DAL</name></decl>, 

<decl><name>INSN_KABK</name></decl>, 

<decl><name>INSN_AB</name></decl>, 

<decl><name>INSN_DA</name></decl>, 

<decl><name>INSN_DAB</name></decl>, 

<decl><name>INSN_IABI</name></decl>, 

<decl><name>INSN_SIZE</name></decl>, 

}</block></enum></type> <name>insn_type_t</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>INSN_OPER_K1</name></decl>, 

<decl><name>INSN_OPER_K2</name></decl>, 

<decl><name>INSN_OPER_A</name></decl>, 

<decl><name>INSN_OPER_B</name></decl>, 

<decl><name>INSN_OPER_N</name></decl>, 

<decl><name>INSN_OPER_K</name></decl>, 

<decl><name>INSN_OPER_D</name></decl>, 

<decl><name>INSN_OPER_I</name></decl>, 

<decl><name>INSN_OPER_L</name></decl>, 

<decl><name>INSN_OPER_SIZE</name></decl> 

}</block></enum></type> <name>insn_oper_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>oper</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>shift</name></decl>;</decl_stmt>

}</block></struct></type> <name>insn_oper_descr_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>insn_oper_descr_t</name></type> <name><name>operands</name><index>[<expr><name>INSN_OPER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>insn_type_descr_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>ut32</name></type> <name>opcode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opcode_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>insn_type</name></decl>;</decl_stmt> 

}</block></struct></type> <name>insn_extra_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>ut32</name></type> <name>opcode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>insn_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>insn_extra_t</name> <modifier>*</modifier></type><name>extra</name></decl>;</decl_stmt>

}</block></struct></type> <name>insn_t</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>insn_type_descr_t</name></type> <name><name>types</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>types_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>insn_extra_t</name></type> <name><name>extra_0x5</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>insn_extra_t</name></type> <name><name>extra_0x6</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>insn_extra_t</name></type> <name><name>extra_0x8</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>insn_extra_t</name></type> <name><name>extra_0x2e</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>insn_extra_t</name></type> <name><name>extra_0x2f</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>insn_extra_t</name></type> <name><name>extra_0x31</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>insn_extra_t</name></type> <name><name>extra_0x32</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>insn_extra_t</name></type> <name><name>extra_0x38</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>insn_extra_t</name></type> <name><name>extra_0x39</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>insn_t</name></type> <name><name>or1k_insns</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>insns_count</name></decl>;</decl_stmt>

<function_decl><type><name>insn_extra_t</name> <modifier>*</modifier></type><name>find_extra_descriptor</name><parameter_list>(<parameter><decl><type><name>insn_extra_t</name> <modifier>*</modifier></type><name>extra_descr</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>insn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ut32</name></type> <name>sign_extend</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>number</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut32</name></type> <name>get_operand_mask</name><parameter_list>(<parameter><decl><type><name>insn_type_descr_t</name> <modifier>*</modifier></type><name>type_descr</name></decl></parameter>, <parameter><decl><type><name>insn_oper_t</name></type> <name>operand</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>type_descr</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>mask</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut32</name></type> <name>get_operand_shift</name><parameter_list>(<parameter><decl><type><name>insn_type_descr_t</name> <modifier>*</modifier></type><name>type_descr</name></decl></parameter>, <parameter><decl><type><name>insn_oper_t</name></type> <name>operand</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>type_descr</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>operand</name></expr>]</index></name><operator>.</operator><name>shift</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut32</name></type> <name>get_operand_value</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>insn</name></decl></parameter>, <parameter><decl><type><name>insn_type_descr_t</name> <modifier>*</modifier></type><name>type_descr</name></decl></parameter>, <parameter><decl><type><name>insn_oper_t</name></type> <name>operand</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>insn</name> <operator>&amp;</operator> <call><name>get_operand_mask</name><argument_list>(<argument><expr><name>type_descr</name></expr></argument>, <argument><expr><name>operand</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <call><name>get_operand_shift</name><argument_list>(<argument><expr><name>type_descr</name></expr></argument>, <argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>has_type_descriptor</name><parameter_list>(<parameter><decl><type><name>insn_type_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>types</name> <operator>+</operator> <name>types_count</name> <operator>&gt;</operator> <operator>&amp;</operator><name><name>types</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_type_descriptor_defined</name><parameter_list>(<parameter><decl><type><name>insn_type_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>types</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>type</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>insn_type_t</name></type> <name>type_of_opcode</name><parameter_list>(<parameter><decl><type><name>insn_t</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name>insn_extra_t</name> <modifier>*</modifier></type><name>extra_descr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>descr</name></expr></argument>, <argument><expr><name>INSN_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>extra_descr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>descr</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name><name>extra_descr</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

</unit>
