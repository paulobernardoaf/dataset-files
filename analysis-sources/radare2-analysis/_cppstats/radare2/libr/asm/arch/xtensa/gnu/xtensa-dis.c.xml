<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\xtensa\gnu\xtensa-dis.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sysdep.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xtensa-isa.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ansidecl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"disas-asm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libiberty.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<macro><name>__declspec</name><argument_list>(<argument>dllimport</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>xtensa_isa</name></type> <name>xtensa_default_isa</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a)) &gt; ((b)) ? ((a)) : ((b)))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>nothing</name><parameter_list>()</parameter_list> <block>{<block_content>

<return>return;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPCODES_SIGJMP_BUF</name></cpp:macro> <cpp:value>void*</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPCODES_SIGSETJMP</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>nothing()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPCODES_SIGLONGJMP</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>nothing()</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPCODES_SIGJMP_BUF</name></cpp:macro> <cpp:value>sigjmp_buf</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPCODES_SIGSETJMP</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sigsetjmp((buf), 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPCODES_SIGLONGJMP</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>siglongjmp((buf), (val))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>show_raw_fields</name></decl>;</decl_stmt>

<struct>struct <name>dis_private</name>

<block>{

<decl_stmt><decl><type><name>bfd_byte</name> <modifier>*</modifier></type><name>byte_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OPCODES_SIGJMP_BUF</name></type> <name>bailout</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>fetch_data</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>disassemble_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>bfd_vma</name></type> <name>memaddr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dis_private</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><operator>(</operator>struct <name>dis_private</name> <operator>*</operator><operator>)</operator> <name><name>info</name><operator>-&gt;</operator><name>private_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>insn_size</name> <init>= <expr><call><name>xtensa_isa_maxlength</name> <argument_list>(<argument><expr><name>xtensa_default_isa</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>byte_buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>insn_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>length</name> <operator>=</operator> <name>insn_size</name></expr>;</init> <condition><expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>length</name><operator>--</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>read_memory_func</name></name>) <argument_list>(<argument><expr><name>memaddr</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>byte_buf</name></name></expr></argument>, <argument><expr><name>length</name></expr></argument>,

<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>length</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>memory_error_func</name></name>) <argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>memaddr</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OPCODES_SIGLONGJMP</name> <argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>bailout</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>print_xtensa_operand</name> <parameter_list>(<parameter><decl><type><name>bfd_vma</name></type> <name>memaddr</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>disassemble_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,

<parameter><decl><type><name>xtensa_opcode</name></type> <name>opc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>opnd</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>operand_val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xtensa_isa</name></type> <name>isa</name> <init>= <expr><name>xtensa_default_isa</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>signed_operand_val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>show_raw_fields</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>operand_val</name> <operator>&lt;</operator> <literal type="number">0xa</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>operand_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"0x%x"</literal></expr></argument>, <argument><expr><name>operand_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>xtensa_operand_decode</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opc</name></expr></argument>, <argument><expr><name>opnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>operand_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>signed_operand_val</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>operand_val</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xtensa_operand_is_register</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opc</name></expr></argument>, <argument><expr><name>opnd</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>xtensa_operand_is_PCrelative</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opc</name></expr></argument>, <argument><expr><name>opnd</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>xtensa_operand_undo_reloc</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opc</name></expr></argument>, <argument><expr><name>opnd</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>operand_val</name></expr></argument>, <argument><expr><name>memaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name>operand_val</name></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>signed_operand_val</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">256</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>signed_operand_val</name> <operator>&lt;</operator> <literal type="number">256</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>signed_operand_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"0x%x"</literal></expr></argument>, <argument><expr><name>signed_operand_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xtensa_regfile</name></type> <name>opnd_rf</name> <init>= <expr><call><name>xtensa_operand_regfile</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opc</name></expr></argument>, <argument><expr><name>opnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s%u"</literal></expr></argument>,

<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opnd_rf</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>operand_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name>xtensa_operand_num_regs</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opc</name></expr></argument>, <argument><expr><name>opnd</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>operand_val</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">":%s%u"</literal></expr></argument>,

<argument><expr><call><name>xtensa_regfile_shortname</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opnd_rf</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>operand_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>print_insn_xtensa</name> <parameter_list>(<parameter><decl><type><name>bfd_vma</name></type> <name>memaddr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>disassemble_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>operand_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes_fetched</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>maxsize</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>noperands</name></decl>, <decl><type ref="prev"/><name>nslots</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xtensa_isa</name></type> <name>isa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xtensa_opcode</name></type> <name>opc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xtensa_format</name></type> <name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dis_private</name></name></type> <name>priv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bfd_byte</name> <modifier>*</modifier></type><name>byte_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>xtensa_insnbuf</name></type> <name>insn_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>xtensa_insnbuf</name></type> <name>slot_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>, <decl><type ref="prev"/><name>first_slot</name></decl>, <decl><type ref="prev"/><name>valid_insn</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xtensa_default_isa</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>xtensa_default_isa</name> <operator>=</operator> <call><name>xtensa_isa_init</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>maxsize</name> <operator>=</operator> <call><name>xtensa_isa_maxlength</name> <argument_list>(<argument><expr><name>xtensa_default_isa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>bytes_per_line</name></name> <operator>=</operator> <call><name>MAX</name> <argument_list>(<argument><expr><name>maxsize</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>insn_buffer</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>insn_buffer</name> <operator>=</operator> <call><name>xtensa_insnbuf_alloc</name> <argument_list>(<argument><expr><name>xtensa_default_isa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slot_buffer</name> <operator>=</operator> <call><name>xtensa_insnbuf_alloc</name> <argument_list>(<argument><expr><name>xtensa_default_isa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>byte_buf</name> <operator>=</operator> <operator>(</operator><name>bfd_byte</name> <operator>*</operator><operator>)</operator> <call><name>xmalloc</name> <argument_list>(<argument><expr><call><name>MAX</name> <argument_list>(<argument><expr><name>maxsize</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>.</operator><name>byte_buf</name></name> <operator>=</operator> <name>byte_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>private_data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>priv</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (OPCODES_SIGSETJMP (priv.bailout) != 0)

return -1;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>isa</name> <operator>=</operator> <name>xtensa_default_isa</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nslots</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bytes_fetched</name> <operator>=</operator> <call><name>fetch_data</name> <argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>memaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>insn_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><call><name>xtensa_insnbuf_size</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>)</argument_list></call> <operator>*</operator>

<sizeof>sizeof <argument_list>(<argument><expr><name>xtensa_insnbuf_word</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xtensa_insnbuf_from_chars</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>insn_buffer</name></expr></argument>, <argument><expr><name><name>priv</name><operator>.</operator><name>byte_buf</name></name></expr></argument>, <argument><expr><name>bytes_fetched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>xtensa_format_decode</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>insn_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>XTENSA_UNDEFINED</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>size</name> <operator>=</operator> <call><name>xtensa_format_length</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>bytes_fetched</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>valid_insn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>valid_insn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nslots</name> <operator>=</operator> <call><name>xtensa_format_num_slots</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nslots</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>xtensa_format_get_slot</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>insn_buffer</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xtensa_opcode_decode</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XTENSA_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>valid_insn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>valid_insn</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">".byte %#02x"</literal></expr></argument>, <argument><expr><name><name>priv</name><operator>.</operator><name>byte_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nslots</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"{ "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>first_slot</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nslots</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>first_slot</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>first_slot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>xtensa_format_get_slot</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>insn_buffer</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>opc</name> <operator>=</operator> <call><name>xtensa_opcode_decode</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>slot_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><call><name>xtensa_opcode_name</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>noperands</name> <operator>=</operator> <call><name>xtensa_opcode_num_operands</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>noperands</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>xtensa_operand_is_visible</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>xtensa_operand_get_field</name> <argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr><name>opc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,

<argument><expr><name>slot_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>operand_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_xtensa_operand</name> <argument_list>(<argument><expr><name>memaddr</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>opc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>operand_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>nslots</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">" }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>bytes_per_chunk</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>display_endian</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>endian</name></name></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

</unit>
