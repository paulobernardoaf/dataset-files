<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\hppa\gnu\hppa-dis.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sysdep.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"disas-asm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libhppa.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opcode/hppa.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>reg_names</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">"flags"</literal></expr>, <expr><literal type="string">"r1"</literal></expr>, <expr><literal type="string">"rp"</literal></expr>, <expr><literal type="string">"r3"</literal></expr>, <expr><literal type="string">"r4"</literal></expr>, <expr><literal type="string">"r5"</literal></expr>, <expr><literal type="string">"r6"</literal></expr>, <expr><literal type="string">"r7"</literal></expr>, <expr><literal type="string">"r8"</literal></expr>, <expr><literal type="string">"r9"</literal></expr>,

<expr><literal type="string">"r10"</literal></expr>, <expr><literal type="string">"r11"</literal></expr>, <expr><literal type="string">"r12"</literal></expr>, <expr><literal type="string">"r13"</literal></expr>, <expr><literal type="string">"r14"</literal></expr>, <expr><literal type="string">"r15"</literal></expr>, <expr><literal type="string">"r16"</literal></expr>, <expr><literal type="string">"r17"</literal></expr>, <expr><literal type="string">"r18"</literal></expr>, <expr><literal type="string">"r19"</literal></expr>,

<expr><literal type="string">"r20"</literal></expr>, <expr><literal type="string">"r21"</literal></expr>, <expr><literal type="string">"r22"</literal></expr>, <expr><literal type="string">"r23"</literal></expr>, <expr><literal type="string">"r24"</literal></expr>, <expr><literal type="string">"r25"</literal></expr>, <expr><literal type="string">"r26"</literal></expr>, <expr><literal type="string">"dp"</literal></expr>, <expr><literal type="string">"ret0"</literal></expr>, <expr><literal type="string">"ret1"</literal></expr>,

<expr><literal type="string">"sp"</literal></expr>, <expr><literal type="string">"r31"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>fp_reg_names</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">"fpsr"</literal></expr>, <expr><literal type="string">"fpe2"</literal></expr>, <expr><literal type="string">"fpe4"</literal></expr>, <expr><literal type="string">"fpe6"</literal></expr>,

<expr><literal type="string">"fr4"</literal></expr>, <expr><literal type="string">"fr5"</literal></expr>, <expr><literal type="string">"fr6"</literal></expr>, <expr><literal type="string">"fr7"</literal></expr>, <expr><literal type="string">"fr8"</literal></expr>,

<expr><literal type="string">"fr9"</literal></expr>, <expr><literal type="string">"fr10"</literal></expr>, <expr><literal type="string">"fr11"</literal></expr>, <expr><literal type="string">"fr12"</literal></expr>, <expr><literal type="string">"fr13"</literal></expr>, <expr><literal type="string">"fr14"</literal></expr>, <expr><literal type="string">"fr15"</literal></expr>,

<expr><literal type="string">"fr16"</literal></expr>, <expr><literal type="string">"fr17"</literal></expr>, <expr><literal type="string">"fr18"</literal></expr>, <expr><literal type="string">"fr19"</literal></expr>, <expr><literal type="string">"fr20"</literal></expr>, <expr><literal type="string">"fr21"</literal></expr>, <expr><literal type="string">"fr22"</literal></expr>, <expr><literal type="string">"fr23"</literal></expr>,

<expr><literal type="string">"fr24"</literal></expr>, <expr><literal type="string">"fr25"</literal></expr>, <expr><literal type="string">"fr26"</literal></expr>, <expr><literal type="string">"fr27"</literal></expr>, <expr><literal type="string">"fr28"</literal></expr>, <expr><literal type="string">"fr29"</literal></expr>, <expr><literal type="string">"fr30"</literal></expr>, <expr><literal type="string">"fr31"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>CORE_ADDR</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK_5</name></cpp:macro> <cpp:value>0x1f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK_10</name></cpp:macro> <cpp:value>0x3ff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK_11</name></cpp:macro> <cpp:value>0x7ff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK_14</name></cpp:macro> <cpp:value>0x3fff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK_16</name></cpp:macro> <cpp:value>0xffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK_21</name></cpp:macro> <cpp:value>0x1fffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_FIELD</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>FROM</name></type></parameter>, <parameter><type><name>TO</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((X) &gt;&gt; (31 - (TO)) &amp; ((1 &lt;&lt; ((TO) - (FROM) + 1)) - 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_BIT</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>WHICH</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GET_FIELD (X, WHICH, WHICH)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>control_reg</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">"rctr"</literal></expr>, <expr><literal type="string">"cr1"</literal></expr>, <expr><literal type="string">"cr2"</literal></expr>, <expr><literal type="string">"cr3"</literal></expr>, <expr><literal type="string">"cr4"</literal></expr>, <expr><literal type="string">"cr5"</literal></expr>, <expr><literal type="string">"cr6"</literal></expr>, <expr><literal type="string">"cr7"</literal></expr>,

<expr><literal type="string">"pidr1"</literal></expr>, <expr><literal type="string">"pidr2"</literal></expr>, <expr><literal type="string">"ccr"</literal></expr>, <expr><literal type="string">"sar"</literal></expr>, <expr><literal type="string">"pidr3"</literal></expr>, <expr><literal type="string">"pidr4"</literal></expr>,

<expr><literal type="string">"iva"</literal></expr>, <expr><literal type="string">"eiem"</literal></expr>, <expr><literal type="string">"itmr"</literal></expr>, <expr><literal type="string">"pcsq"</literal></expr>, <expr><literal type="string">"pcoq"</literal></expr>, <expr><literal type="string">"iir"</literal></expr>, <expr><literal type="string">"isr"</literal></expr>,

<expr><literal type="string">"ior"</literal></expr>, <expr><literal type="string">"ipsw"</literal></expr>, <expr><literal type="string">"eirr"</literal></expr>, <expr><literal type="string">"tr0"</literal></expr>, <expr><literal type="string">"tr1"</literal></expr>, <expr><literal type="string">"tr2"</literal></expr>, <expr><literal type="string">"tr3"</literal></expr>,

<expr><literal type="string">"tr4"</literal></expr>, <expr><literal type="string">"tr5"</literal></expr>, <expr><literal type="string">"tr6"</literal></expr>, <expr><literal type="string">"tr7"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>compare_cond_names</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">""</literal></expr>, <expr><literal type="string">",="</literal></expr>, <expr><literal type="string">",&lt;"</literal></expr>, <expr><literal type="string">",&lt;="</literal></expr>, <expr><literal type="string">",&lt;&lt;"</literal></expr>, <expr><literal type="string">",&lt;&lt;="</literal></expr>, <expr><literal type="string">",sv"</literal></expr>, <expr><literal type="string">",od"</literal></expr>,

<expr><literal type="string">",tr"</literal></expr>, <expr><literal type="string">",&lt;&gt;"</literal></expr>, <expr><literal type="string">",&gt;="</literal></expr>, <expr><literal type="string">",&gt;"</literal></expr>, <expr><literal type="string">",&gt;&gt;="</literal></expr>, <expr><literal type="string">",&gt;&gt;"</literal></expr>, <expr><literal type="string">",nsv"</literal></expr>, <expr><literal type="string">",ev"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>compare_cond_64_names</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">",*"</literal></expr>, <expr><literal type="string">",*="</literal></expr>, <expr><literal type="string">",*&lt;"</literal></expr>, <expr><literal type="string">",*&lt;="</literal></expr>, <expr><literal type="string">",*&lt;&lt;"</literal></expr>, <expr><literal type="string">",*&lt;&lt;="</literal></expr>, <expr><literal type="string">",*sv"</literal></expr>, <expr><literal type="string">",*od"</literal></expr>,

<expr><literal type="string">",*tr"</literal></expr>, <expr><literal type="string">",*&lt;&gt;"</literal></expr>, <expr><literal type="string">",*&gt;="</literal></expr>, <expr><literal type="string">",*&gt;"</literal></expr>, <expr><literal type="string">",*&gt;&gt;="</literal></expr>, <expr><literal type="string">",*&gt;&gt;"</literal></expr>, <expr><literal type="string">",*nsv"</literal></expr>, <expr><literal type="string">",*ev"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>cmpib_cond_64_names</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">",*&lt;&lt;"</literal></expr>, <expr><literal type="string">",*="</literal></expr>, <expr><literal type="string">",*&lt;"</literal></expr>, <expr><literal type="string">",*&lt;="</literal></expr>, <expr><literal type="string">",*&gt;&gt;="</literal></expr>, <expr><literal type="string">",*&lt;&gt;"</literal></expr>, <expr><literal type="string">",*&gt;="</literal></expr>, <expr><literal type="string">",*&gt;"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>add_cond_names</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">""</literal></expr>, <expr><literal type="string">",="</literal></expr>, <expr><literal type="string">",&lt;"</literal></expr>, <expr><literal type="string">",&lt;="</literal></expr>, <expr><literal type="string">",nuv"</literal></expr>, <expr><literal type="string">",znv"</literal></expr>, <expr><literal type="string">",sv"</literal></expr>, <expr><literal type="string">",od"</literal></expr>,

<expr><literal type="string">",tr"</literal></expr>, <expr><literal type="string">",&lt;&gt;"</literal></expr>, <expr><literal type="string">",&gt;="</literal></expr>, <expr><literal type="string">",&gt;"</literal></expr>, <expr><literal type="string">",uv"</literal></expr>, <expr><literal type="string">",vnz"</literal></expr>, <expr><literal type="string">",nsv"</literal></expr>, <expr><literal type="string">",ev"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>add_cond_64_names</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">",*"</literal></expr>, <expr><literal type="string">",*="</literal></expr>, <expr><literal type="string">",*&lt;"</literal></expr>, <expr><literal type="string">",*&lt;="</literal></expr>, <expr><literal type="string">",*nuv"</literal></expr>, <expr><literal type="string">",*znv"</literal></expr>, <expr><literal type="string">",*sv"</literal></expr>, <expr><literal type="string">",*od"</literal></expr>,

<expr><literal type="string">",*tr"</literal></expr>, <expr><literal type="string">",*&lt;&gt;"</literal></expr>, <expr><literal type="string">",*&gt;="</literal></expr>, <expr><literal type="string">",*&gt;"</literal></expr>, <expr><literal type="string">",*uv"</literal></expr>, <expr><literal type="string">",*vnz"</literal></expr>, <expr><literal type="string">",*nsv"</literal></expr>, <expr><literal type="string">",*ev"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>wide_add_cond_names</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">""</literal></expr>, <expr><literal type="string">",="</literal></expr>, <expr><literal type="string">",&lt;"</literal></expr>, <expr><literal type="string">",&lt;="</literal></expr>, <expr><literal type="string">",nuv"</literal></expr>, <expr><literal type="string">",*="</literal></expr>, <expr><literal type="string">",*&lt;"</literal></expr>, <expr><literal type="string">",*&lt;="</literal></expr>,

<expr><literal type="string">",tr"</literal></expr>, <expr><literal type="string">",&lt;&gt;"</literal></expr>, <expr><literal type="string">",&gt;="</literal></expr>, <expr><literal type="string">",&gt;"</literal></expr>, <expr><literal type="string">",uv"</literal></expr>, <expr><literal type="string">",*&lt;&gt;"</literal></expr>, <expr><literal type="string">",*&gt;="</literal></expr>, <expr><literal type="string">",*&gt;"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>logical_cond_names</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">""</literal></expr>, <expr><literal type="string">",="</literal></expr>, <expr><literal type="string">",&lt;"</literal></expr>, <expr><literal type="string">",&lt;="</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">",od"</literal></expr>,

<expr><literal type="string">",tr"</literal></expr>, <expr><literal type="string">",&lt;&gt;"</literal></expr>, <expr><literal type="string">",&gt;="</literal></expr>, <expr><literal type="string">",&gt;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">",ev"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>logical_cond_64_names</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">",*"</literal></expr>, <expr><literal type="string">",*="</literal></expr>, <expr><literal type="string">",*&lt;"</literal></expr>, <expr><literal type="string">",*&lt;="</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">",*od"</literal></expr>,

<expr><literal type="string">",*tr"</literal></expr>, <expr><literal type="string">",*&lt;&gt;"</literal></expr>, <expr><literal type="string">",*&gt;="</literal></expr>, <expr><literal type="string">",*&gt;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">",*ev"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>unit_cond_names</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">""</literal></expr>, <expr><literal type="string">",swz"</literal></expr>, <expr><literal type="string">",sbz"</literal></expr>, <expr><literal type="string">",shz"</literal></expr>, <expr><literal type="string">",sdc"</literal></expr>, <expr><literal type="string">",swc"</literal></expr>, <expr><literal type="string">",sbc"</literal></expr>, <expr><literal type="string">",shc"</literal></expr>,

<expr><literal type="string">",tr"</literal></expr>, <expr><literal type="string">",nwz"</literal></expr>, <expr><literal type="string">",nbz"</literal></expr>, <expr><literal type="string">",nhz"</literal></expr>, <expr><literal type="string">",ndc"</literal></expr>, <expr><literal type="string">",nwc"</literal></expr>, <expr><literal type="string">",nbc"</literal></expr>, <expr><literal type="string">",nhc"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>unit_cond_64_names</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">",*"</literal></expr>, <expr><literal type="string">",*swz"</literal></expr>, <expr><literal type="string">",*sbz"</literal></expr>, <expr><literal type="string">",*shz"</literal></expr>, <expr><literal type="string">",*sdc"</literal></expr>, <expr><literal type="string">",*swc"</literal></expr>, <expr><literal type="string">",*sbc"</literal></expr>, <expr><literal type="string">",*shc"</literal></expr>,

<expr><literal type="string">",*tr"</literal></expr>, <expr><literal type="string">",*nwz"</literal></expr>, <expr><literal type="string">",*nbz"</literal></expr>, <expr><literal type="string">",*nhz"</literal></expr>, <expr><literal type="string">",*ndc"</literal></expr>, <expr><literal type="string">",*nwc"</literal></expr>, <expr><literal type="string">",*nbc"</literal></expr>, <expr><literal type="string">",*nhc"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>shift_cond_names</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">""</literal></expr>, <expr><literal type="string">",="</literal></expr>, <expr><literal type="string">",&lt;"</literal></expr>, <expr><literal type="string">",od"</literal></expr>, <expr><literal type="string">",tr"</literal></expr>, <expr><literal type="string">",&lt;&gt;"</literal></expr>, <expr><literal type="string">",&gt;="</literal></expr>, <expr><literal type="string">",ev"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>shift_cond_64_names</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">",*"</literal></expr>, <expr><literal type="string">",*="</literal></expr>, <expr><literal type="string">",*&lt;"</literal></expr>, <expr><literal type="string">",*od"</literal></expr>, <expr><literal type="string">",*tr"</literal></expr>, <expr><literal type="string">",*&lt;&gt;"</literal></expr>, <expr><literal type="string">",*&gt;="</literal></expr>, <expr><literal type="string">",*ev"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>bb_cond_64_names</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">",*&lt;"</literal></expr>, <expr><literal type="string">",*&gt;="</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>index_compl_names</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">""</literal></expr>, <expr><literal type="string">",m"</literal></expr>, <expr><literal type="string">",s"</literal></expr>, <expr><literal type="string">",sm"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>short_ldst_compl_names</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">""</literal></expr>, <expr><literal type="string">",ma"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">",mb"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>short_bytes_compl_names</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">""</literal></expr>, <expr><literal type="string">",b,m"</literal></expr>, <expr><literal type="string">",e"</literal></expr>, <expr><literal type="string">",e,m"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>float_format_names</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">",sgl"</literal></expr>, <expr><literal type="string">",dbl"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">",quad"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>fcnv_fixed_names</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">",w"</literal></expr>, <expr><literal type="string">",dw"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">",qw"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>fcnv_ufixed_names</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">",uw"</literal></expr>, <expr><literal type="string">",udw"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">",uqw"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>float_comp_names</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">",false?"</literal></expr>, <expr><literal type="string">",false"</literal></expr>, <expr><literal type="string">",?"</literal></expr>, <expr><literal type="string">",!&lt;=&gt;"</literal></expr>, <expr><literal type="string">",="</literal></expr>, <expr><literal type="string">",=t"</literal></expr>, <expr><literal type="string">",?="</literal></expr>, <expr><literal type="string">",!&lt;&gt;"</literal></expr>,

<expr><literal type="string">",!?&gt;="</literal></expr>, <expr><literal type="string">",&lt;"</literal></expr>, <expr><literal type="string">",?&lt;"</literal></expr>, <expr><literal type="string">",!&gt;="</literal></expr>, <expr><literal type="string">",!?&gt;"</literal></expr>, <expr><literal type="string">",&lt;="</literal></expr>, <expr><literal type="string">",?&lt;="</literal></expr>, <expr><literal type="string">",!&gt;"</literal></expr>,

<expr><literal type="string">",!?&lt;="</literal></expr>, <expr><literal type="string">",&gt;"</literal></expr>, <expr><literal type="string">",?&gt;"</literal></expr>, <expr><literal type="string">",!&lt;="</literal></expr>, <expr><literal type="string">",!?&lt;"</literal></expr>, <expr><literal type="string">",&gt;="</literal></expr>, <expr><literal type="string">",?&gt;="</literal></expr>, <expr><literal type="string">",!&lt;"</literal></expr>,

<expr><literal type="string">",!?="</literal></expr>, <expr><literal type="string">",&lt;&gt;"</literal></expr>, <expr><literal type="string">",!="</literal></expr>, <expr><literal type="string">",!=t"</literal></expr>, <expr><literal type="string">",!?"</literal></expr>, <expr><literal type="string">",&lt;=&gt;"</literal></expr>, <expr><literal type="string">",true?"</literal></expr>, <expr><literal type="string">",true"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>signed_unsigned_names</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">",u"</literal></expr>, <expr><literal type="string">",s"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>mix_half_names</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">",l"</literal></expr>, <expr><literal type="string">",r"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>saturation_names</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">",us"</literal></expr>, <expr><literal type="string">",ss"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>read_write_names</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">",r"</literal></expr>, <expr><literal type="string">",w"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>add_compl_names</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">",l"</literal></expr>, <expr><literal type="string">",tsv"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_COMPL</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(GET_FIELD (insn, 26, 26) | GET_FIELD (insn, 18, 18) &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_COND</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(GET_FIELD ((insn), 16, 18) + (GET_FIELD ((insn), 19, 19) ? 8 : 0))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fputs_filtered</name><parameter_list>(<parameter><type><name>STR</name></type></parameter>,<parameter><type><name>F</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*info-&gt;fprintf_func) (info-&gt;stream, "%s", STR)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>fput_reg</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>disassemble_info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>reg</name></expr> ?</condition><then> <expr><name><name>reg_names</name><index>[<expr><name>reg</name></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"r0"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>fput_fp_reg</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>disassemble_info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>reg</name></expr> ?</condition><then> <expr><name><name>fp_reg_names</name><index>[<expr><name>reg</name></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"fr0"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>fput_fp_reg_r</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>disassemble_info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"fpe%d"</literal></expr></argument>, <argument><expr><name>reg</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%sR"</literal></expr></argument>, <argument><expr><name><name>fp_reg_names</name><index>[<expr><name>reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>fput_creg</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>disassemble_info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>control_reg</name><index>[<expr><name>reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>fput_const</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>disassemble_info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"-%x"</literal></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%x"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>extract_3</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>word</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal> <operator>|</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>extract_5_load</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>word</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>low_sign_extend</name> <argument_list>(<argument><expr><name>word</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>&amp;</operator> <name>MASK_5</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>extract_5_store</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>word</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>low_sign_extend</name> <argument_list>(<argument><expr><name>word</name> <operator>&amp;</operator> <name>MASK_5</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>

<name>extract_5r_store</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>word</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>word</name> <operator>&amp;</operator> <name>MASK_5</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>

<name>extract_5R_store</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>word</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>word</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>&amp;</operator> <name>MASK_5</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>

<name>extract_10U_store</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>word</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>word</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>&amp;</operator> <name>MASK_10</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>

<name>extract_5Q_store</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>word</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>word</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal> <operator>&amp;</operator> <name>MASK_5</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>extract_11</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>word</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>low_sign_extend</name> <argument_list>(<argument><expr><name>word</name> <operator>&amp;</operator> <name>MASK_11</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>extract_14</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>word</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>low_sign_extend</name> <argument_list>(<argument><expr><name>word</name> <operator>&amp;</operator> <name>MASK_14</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>extract_16</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>word</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>m15</name></decl>, <decl><type ref="prev"/><name>m0</name></decl>, <decl><type ref="prev"/><name>m1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>m0</name> <operator>=</operator> <call><name>GET_BIT</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m1</name> <operator>=</operator> <call><name>GET_BIT</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m15</name> <operator>=</operator> <call><name>GET_BIT</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>word</name> <operator>=</operator> <operator>(</operator><name>word</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1fff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>word</name> <operator>=</operator> <name>word</name> <operator>|</operator> <operator>(</operator><name>m15</name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>m15</name> <operator>^</operator> <name>m0</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>m15</name> <operator>^</operator> <name>m1</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><call><name>sign_extend</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>extract_21</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>word</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>word</name> <operator>&amp;=</operator> <name>MASK_21</name></expr>;</expr_stmt>

<expr_stmt><expr><name>word</name> <operator>&lt;&lt;=</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>&lt;&lt;=</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>|=</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>|=</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>&lt;&lt;=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>|=</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>|=</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>sign_extend</name> <argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>extract_12</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>word</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>sign_extend</name> <argument_list>(<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call>

<operator>|</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">10</literal>

<operator>|</operator> <operator>(</operator><name>word</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>extract_17</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>word</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>sign_extend</name> <argument_list>(<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call>

<operator>|</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">10</literal>

<operator>|</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">11</literal>

<operator>|</operator> <operator>(</operator><name>word</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>extract_22</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>word</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>sign_extend</name> <argument_list>(<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call>

<operator>|</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">10</literal>

<operator>|</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">11</literal>

<operator>|</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal>

<operator>|</operator> <operator>(</operator><name>word</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">21</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>print_insn_hppa</name> <parameter_list>(<parameter><decl><type><name>bfd_vma</name></type> <name>memaddr</name></decl></parameter>, <parameter><decl><type><name>disassemble_info</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bfd_byte</name></type> <name><name>buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>insn</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>=

<expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>read_memory_func</name></name>) <argument_list>(<argument><expr><name>memaddr</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>memory_error_func</name></name>) <argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>memaddr</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><name>insn</name> <operator>=</operator> <call><name>bfd_getb32</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUMOPCODES</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pa_opcode</name></name> <modifier>*</modifier></type><name>opcode</name> <init>= <expr><operator>&amp;</operator><name><name>pa_opcodes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>insn</name> <operator>&amp;</operator> <name><name>opcode</name><operator>-&gt;</operator><name>mask</name></name><operator>)</operator> <operator>==</operator> <name><name>opcode</name><operator>-&gt;</operator><name>match</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BFD64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>opcode</name><operator>-&gt;</operator><name>arch</name></name> <operator>==</operator> <name>pa20w</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>opcode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strchr</name> <argument_list>(<argument><expr><literal type="string">"cfCY?-+nHNZFIuv{"</literal></expr></argument>, <argument><expr><name><name>opcode</name><operator>-&gt;</operator><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name><name>opcode</name><operator>-&gt;</operator><name>args</name></name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control>

<block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'x'</literal></expr>:</case>

<expr_stmt><expr><call><name>fput_reg</name> <argument_list>(<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<expr_stmt><expr><call><name>fput_reg</name> <argument_list>(<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'^'</literal></expr>:</case>

<expr_stmt><expr><call><name>fput_creg</name> <argument_list>(<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<expr_stmt><expr><call><name>fput_reg</name> <argument_list>(<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<switch>switch <condition>(<expr><operator>*</operator><operator>++</operator><name>s</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<expr_stmt><expr><call><name>fput_fp_reg</name> <argument_list>(<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fput_fp_reg_r</name> <argument_list>(<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fput_fp_reg</name> <argument_list>(<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fput_fp_reg_r</name> <argument_list>(<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fput_fp_reg</name> <argument_list>(<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'X'</literal></expr>:</case>

<expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="char">'A'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fput_fp_reg_r</name> <argument_list>(<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fput_fp_reg</name> <argument_list>(<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fput_fp_reg_r</name> <argument_list>(<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fput_fp_reg</name> <argument_list>(<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'B'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fput_fp_reg_r</name> <argument_list>(<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fput_fp_reg</name> <argument_list>(<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'C'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>reg</name> <init>= <expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>reg</name> <operator>|=</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fput_fp_reg_r</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fput_fp_reg</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>reg</name> <init>= <expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>reg</name> <operator>|=</operator> <operator>(</operator><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fput_fp_reg</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>reg</name> <init>= <expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>reg</name> <operator>|=</operator> <operator>(</operator><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fput_fp_reg</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'k'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>reg</name> <init>= <expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>reg</name> <operator>|=</operator> <operator>(</operator><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fput_fp_reg</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>reg</name> <init>= <expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>reg</name> <operator>|=</operator> <operator>(</operator><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fput_fp_reg</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>reg</name> <init>= <expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>reg</name> <operator>|=</operator> <operator>(</operator><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fput_fp_reg</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'E'</literal></expr>:</case>

<expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fput_fp_reg_r</name> <argument_list>(<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fput_fp_reg</name> <argument_list>(<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'x'</literal></expr>:</case>

<expr_stmt><expr><call><name>fput_fp_reg</name> <argument_list>(<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'5'</literal></expr>:</case>

<expr_stmt><expr><call><name>fput_const</name> <argument_list>(<argument><expr><call><name>extract_5_load</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>space</name> <init>= <expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>space</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"sr%d"</literal></expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"sr%d"</literal></expr></argument>,

<argument><expr><call><name>extract_3</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<switch>switch <condition>(<expr><operator>*</operator><operator>++</operator><name>s</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'x'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>index_compl_names</name><index>[<expr><call><name>GET_COMPL</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'X'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,

<argument><expr><name><name>index_compl_names</name><index>[<expr><call><name>GET_COMPL</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>short_ldst_compl_names</name><index>[<expr><call><name>GET_COMPL</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'M'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,

<argument><expr><name><name>short_ldst_compl_names</name><index>[<expr><call><name>GET_COMPL</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'A'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,

<argument><expr><name><name>short_bytes_compl_names</name><index>[<expr><call><name>GET_COMPL</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>short_bytes_compl_names</name><index>[<expr><call><name>GET_COMPL</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<case>case <expr><literal type="char">'C'</literal></expr>:</case>

<switch>switch <condition>(<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",bc "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",sl "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<switch>switch <condition>(<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",co "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'o'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",o"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",gate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",l,push"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'P'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",pop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<case>case <expr><literal type="char">'L'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",l"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'w'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,

<argument><expr><name><name>read_write_names</name><index>[<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'W'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",w "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'Z'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",m "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",i"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'z'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>add_compl_names</name><index>[<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'Y'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",dc%s"</literal></expr></argument>,

<argument><expr><name><name>add_compl_names</name><index>[<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'y'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",c%s"</literal></expr></argument>,

<argument><expr><name><name>add_compl_names</name><index>[<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",tsv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",tc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",tsv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'B'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",tsv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",tsv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",tc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>s</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>signed_unsigned_names</name><index>[<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,

<argument><expr><name><name>signed_unsigned_names</name><index>[<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>mix_half_names</name><index>[<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'H'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,

<argument><expr><name><name>saturation_names</name><index>[<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",%d%d%d%d "</literal></expr></argument>,

<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'q'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>a</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">",ma "</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>m</name> <operator>&amp;&amp;</operator> <name>a</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">",mb "</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'J'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>opc</name> <init>= <expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opc</name> <operator>==</operator> <literal type="number">0x16</literal> <operator>||</operator> <name>opc</name> <operator>==</operator> <literal type="number">0x1e</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">",ma "</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">",mb "</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>opc</name> <init>= <expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opc</name> <operator>==</operator> <literal type="number">0x13</literal> <operator>||</operator> <name>opc</name> <operator>==</operator> <literal type="number">0x1b</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">",mb "</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">",ma "</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>opc</name> <operator>==</operator> <literal type="number">0x17</literal> <operator>||</operator> <name>opc</name> <operator>==</operator> <literal type="number">0x1f</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">",ma "</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">",mb "</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'?'</literal></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,

<argument><expr><name><name>float_comp_names</name><index>[<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<expr_stmt><expr><call><name>fputs_filtered</name>

<argument_list>(<argument><expr><name><name>compare_cond_names</name><index>[<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<expr_stmt><expr><call><name>fputs_filtered</name>

<argument_list>(<argument><expr><name><name>compare_cond_names</name><index>[<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'N'</literal></expr>:</case>

<expr_stmt><expr><call><name>fputs_filtered</name>

<argument_list>(<argument><expr><name><name>compare_cond_64_names</name><index>[<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'Q'</literal></expr>:</case>

<expr_stmt><expr><call><name>fputs_filtered</name>

<argument_list>(<argument><expr><name><name>cmpib_cond_64_names</name><index>[<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'@'</literal></expr>:</case>

<expr_stmt><expr><call><name>fputs_filtered</name>

<argument_list>(<argument><expr><name><name>add_cond_names</name><index>[<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,

<argument><expr><name><name>compare_cond_names</name><index>[<expr><call><name>GET_COND</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,

<argument><expr><name><name>compare_cond_64_names</name><index>[<expr><call><name>GET_COND</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,

<argument><expr><name><name>add_cond_names</name><index>[<expr><call><name>GET_COND</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'A'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,

<argument><expr><name><name>add_cond_64_names</name><index>[<expr><call><name>GET_COND</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>add_cond_names</name><index>[<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'W'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>wide_add_cond_names</name><index>[<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,

<argument><expr><name><name>logical_cond_names</name><index>[<expr><call><name>GET_COND</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'L'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,

<argument><expr><name><name>logical_cond_64_names</name><index>[<expr><call><name>GET_COND</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,

<argument><expr><name><name>unit_cond_names</name><index>[<expr><call><name>GET_COND</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'U'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,

<argument><expr><name><name>unit_cond_64_names</name><index>[<expr><call><name>GET_COND</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'y'</literal></expr>:</case>

<case>case <expr><literal type="char">'x'</literal></expr>:</case>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>shift_cond_names</name><index>[<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'X'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,

<argument><expr><name><name>shift_cond_64_names</name><index>[<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'B'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>bb_cond_64_names</name><index>[<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'V'</literal></expr>:</case>

<expr_stmt><expr><call><name>fput_const</name> <argument_list>(<argument><expr><call><name>extract_5_store</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>

<expr_stmt><expr><call><name>fput_const</name> <argument_list>(<argument><expr><call><name>extract_5r_store</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'R'</literal></expr>:</case>

<expr_stmt><expr><call><name>fput_const</name> <argument_list>(<argument><expr><call><name>extract_5R_store</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'U'</literal></expr>:</case>

<expr_stmt><expr><call><name>fput_const</name> <argument_list>(<argument><expr><call><name>extract_10U_store</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'B'</literal></expr>:</case>

<case>case <expr><literal type="char">'Q'</literal></expr>:</case>

<expr_stmt><expr><call><name>fput_const</name> <argument_list>(<argument><expr><call><name>extract_5Q_store</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<expr_stmt><expr><call><name>fput_const</name> <argument_list>(<argument><expr><call><name>extract_11</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><call><name>fput_const</name> <argument_list>(<argument><expr><call><name>extract_14</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'k'</literal></expr>:</case>

<expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">"L%"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fput_const</name> <argument_list>(<argument><expr><call><name>extract_21</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<expr_stmt><expr><call><name>fput_const</name> <argument_list>(<argument><expr><call><name>extract_16</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>insn</name> <operator>&amp;</operator> <literal type="number">0x2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",n "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'N'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>insn</name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",n "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>insn</name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'w'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>)

<argument_list>(<argument><expr><name>memaddr</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <call><name>extract_12</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'W'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>)

<argument_list>(<argument><expr><operator>(</operator><name>memaddr</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <call><name>extract_17</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'z'</literal></expr>:</case>

<expr_stmt><expr><call><name>fput_const</name> <argument_list>(<argument><expr><call><name>extract_17</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'Z'</literal></expr>:</case>

<expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">"r1"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'Y'</literal></expr>:</case>

<expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">"sr0,r31"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'@'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'.'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>,

<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>,

<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'!'</literal></expr>:</case>

<expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">"sar"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>,

<argument><expr><literal type="number">31</literal> <operator>-</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'~'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>|=</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><literal type="number">63</literal> <operator>-</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'P'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>,

<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'q'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>|=</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>,

<argument><expr><literal type="number">32</literal> <operator>-</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'%'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>-=</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'|'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>-=</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'$'</literal></expr>:</case>

<expr_stmt><expr><call><name>fput_const</name> <argument_list>(<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'A'</literal></expr>:</case>

<expr_stmt><expr><call><name>fput_const</name> <argument_list>(<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'D'</literal></expr>:</case>

<expr_stmt><expr><call><name>fput_const</name> <argument_list>(<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",%d"</literal></expr></argument>,

<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'O'</literal></expr>:</case>

<expr_stmt><expr><call><name>fput_const</name> <argument_list>(<argument><expr><operator>(</operator><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">5</literal> <operator>|</operator>

<call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'o'</literal></expr>:</case>

<expr_stmt><expr><call><name>fput_const</name> <argument_list>(<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'2'</literal></expr>:</case>

<expr_stmt><expr><call><name>fput_const</name> <argument_list>(<argument><expr><operator>(</operator><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">5</literal> <operator>|</operator>

<call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'1'</literal></expr>:</case>

<expr_stmt><expr><call><name>fput_const</name> <argument_list>(<argument><expr><operator>(</operator><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">5</literal> <operator>|</operator>

<call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'0'</literal></expr>:</case>

<expr_stmt><expr><call><name>fput_const</name> <argument_list>(<argument><expr><operator>(</operator><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">5</literal> <operator>|</operator>

<call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",%d"</literal></expr></argument>,

<argument><expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'F'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'G'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><name><name>float_format_names</name><index>[<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,

<argument><expr><name><name>float_format_names</name><index>[<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'G'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>)

<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,

<argument><expr><name><name>float_format_names</name><index>[<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'H'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,

<argument><expr><name><name>float_format_names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,

<argument><expr><name><name>float_format_names</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'I'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><name><name>float_format_names</name><index>[<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,

<argument><expr><name><name>float_format_names</name><index>[<expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'J'</literal></expr>:</case>

<expr_stmt><expr><call><name>fput_const</name> <argument_list>(<argument><expr><call><name>extract_14</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'#'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>imm10</name> <init>= <expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>disp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>disp</name> <operator>=</operator> <operator>(</operator><name>UT64_MAX</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <name>imm10</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>disp</name> <operator>=</operator> <name>imm10</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>disp</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fput_const</name> <argument_list>(<argument><expr><name>disp</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'K'</literal></expr>:</case>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>imm11</name> <init>= <expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>disp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>disp</name> <operator>=</operator> <operator>(</operator><name>UT64_MAX</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>|</operator> <name>imm11</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>disp</name> <operator>=</operator> <name>imm11</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>disp</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fput_const</name> <argument_list>(<argument><expr><name>disp</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>

<case>case <expr><literal type="char">'y'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>disp</name> <init>= <expr><call><name>extract_16</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>disp</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fput_const</name> <argument_list>(<argument><expr><name>disp</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>disp</name> <init>= <expr><call><name>extract_16</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>disp</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fput_const</name> <argument_list>(<argument><expr><name>disp</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'_'</literal></expr>:</case>

<break>break;</break> 

<case>case <expr><literal type="char">'{'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sub</name> <init>= <expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>df</name> <init>= <expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sf</name> <init>= <expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type> <name>source</name> <init>= <expr><name>float_format_names</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type> <name>dest</name> <init>= <expr><name>float_format_names</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sub</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">",UND "</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sub</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="string">",t"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sub</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>source</name> <operator>=</operator> <ternary><condition><expr><name>sub</name> <operator>&amp;</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><name>fcnv_ufixed_names</name></expr> </then><else>: <expr><name>fcnv_fixed_names</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sub</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dest</name> <operator>=</operator> <ternary><condition><expr><name>sub</name> <operator>&amp;</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><name>fcnv_ufixed_names</name></expr> </then><else>: <expr><name>fcnv_fixed_names</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s%s "</literal></expr></argument>,

<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>source</name><index>[<expr><name>sf</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dest</name><index>[<expr><name>df</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fput_const</name> <argument_list>(<argument><expr><operator>(</operator><name>y</name> <operator>^</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cbit</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cbit</name> <operator>=</operator> <call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cbit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">",%d"</literal></expr></argument>, <argument><expr><name>cbit</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'='</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cond</name> <init>= <expr><call><name>GET_FIELD</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>cond</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">"acc "</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">"rej "</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">"acc8 "</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">"rej8 "</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">"acc6 "</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">13</literal></expr>:</case> <expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">"acc4 "</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">17</literal></expr>:</case> <expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">"acc2 "</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'X'</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>print_address_func</name></name>)

<argument_list>(<argument><expr><name>memaddr</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <call><name>extract_22</name> <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'L'</literal></expr>:</case>

<expr_stmt><expr><call><name>fputs_filtered</name> <argument_list>(<argument><expr><literal type="string">",rp"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<return>return <expr><sizeof>sizeof <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></sizeof></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>info</name><operator>-&gt;</operator><name>fprintf_func</name></name>) <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="string">"#%8x"</literal></expr></argument>, <argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><sizeof>sizeof <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></sizeof></expr>;</return>

</block_content>}</block></function>

</unit>
