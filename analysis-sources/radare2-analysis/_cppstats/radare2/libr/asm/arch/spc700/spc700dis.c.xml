<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\spc700\spc700dis.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"spc700_opcode_table.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>spc700OpLength</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>spcoptype</name></decl></parameter>)</parameter_list><block>{<block_content>

<switch>switch<condition>(<expr><name>spcoptype</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SPC_OP</name></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>SPC_ARG8_1</name></expr>:</case>

<return>return <expr><literal type="number">2</literal></expr>;</return>

<case>case <expr><name>SPC_ARG8_2</name></expr>:</case>

<case>case <expr><name>SPC_ARG16</name></expr>:</case>

<return>return <expr><literal type="number">3</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>spc700Disass</name><parameter_list>(<parameter><decl><type><name>RAsmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>foo</name> <init>= <expr><call><name>spc700OpLength</name> <argument_list>(<argument><expr><name><name>spc_op_table</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>foo</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf_asm</name> <init>= <expr><literal type="string">"invalid"</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>spc_op_table</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SPC_OP</name></expr>:</case>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <name><name>spc_op_table</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SPC_ARG8_1</name></expr>:</case>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><name><name>spc_op_table</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SPC_ARG8_2</name></expr>:</case>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><name><name>spc_op_table</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SPC_ARG16</name></expr>:</case>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><name><name>spc_op_table</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">0x100</literal><operator>*</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>r_asm_op_set_asm</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>buf_asm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>foo</name></expr>;</return>

</block_content>}</block></function>

</unit>
