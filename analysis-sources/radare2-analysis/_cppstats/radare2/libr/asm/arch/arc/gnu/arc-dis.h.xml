<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\arc\gnu\arc-dis.h"><enum>enum <name>NullifyMode</name>

<block>{

<decl><name>BR_exec_when_no_jump</name></decl>,

<decl><name>BR_exec_always</name></decl>,

<decl><name>BR_exec_when_jump</name></decl>

}</block>;</enum>

<enum>enum <name>ARC_Debugger_OperandType</name>

<block>{

<decl><name>ARC_UNDEFINED</name></decl>,

<decl><name>ARC_LIMM</name></decl>,

<decl><name>ARC_SHIMM</name></decl>,

<decl><name>ARC_REGISTER</name></decl>,

<decl><name>ARCOMPACT_REGISTER</name></decl> 

}</block>;</enum>

<enum>enum <name>Flow</name>

<block>{

<decl><name>noflow</name></decl>,

<decl><name>direct_jump</name></decl>,

<decl><name>direct_call</name></decl>,

<decl><name>indirect_jump</name></decl>,

<decl><name>indirect_call</name></decl>,

<decl><name>invalid_instr</name></decl>

}</block>;</enum>

<enum>enum <block>{ <decl><name>no_reg</name> <init>= <expr><literal type="number">99</literal></expr></init></decl> }</block>;</enum>

<enum>enum <block>{ <decl><name>allOperandsSize</name> <init>= <expr><literal type="number">256</literal></expr></init></decl> }</block>;</enum>

<struct>struct <name>arcDisState</name>

<block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_this</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>instructionLen</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>err</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>coreRegName</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>auxRegName</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>condCodeName</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>instName</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>instruction</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>comm</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt> 

<union>union <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>registerNum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>shortimm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>longimm</name></decl>;</decl_stmt>

}</block> <decl><name>source_operand</name></decl>;</union>

<decl_stmt><decl><type><name><name>enum</name> <name>ARC_Debugger_OperandType</name></name></type> <name>sourceType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opWidth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>targets</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>addresses</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>Flow</name></name></type> <name>flow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>register_for_indirect_jump</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ea_reg1</name></decl>, <decl><type ref="prev"/><name>ea_reg2</name></decl>, <decl><type ref="prev"/><name>_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_cond</name></decl>, <decl><type ref="prev"/><name>_opcode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>words</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>commentBuffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>instrBuffer</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>operandBuffer</name><index>[<expr><name>allOperandsSize</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>_ea_present</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>_addrWriteBack</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>_mem_load</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>_load_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>NullifyMode</name></name></type> <name>nullifyMode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>commNum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>isBranch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>tcnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>acnt</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

int ARCTangent_decodeInstr(bfd_vma address, disassemble_info* info);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>int</name></type> <name>ARCompact_decodeInstr</name> <parameter_list>(<parameter><decl><type><name>bfd_vma</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>disassemble_info</name><modifier>*</modifier></type> <name>info</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__TRANSLATION_REQUIRED</name><parameter_list>(<parameter><type><name>state</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((state).acnt != 0)</cpp:value></cpp:define>

</unit>
