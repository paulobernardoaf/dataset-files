<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\ppc\libps\libps_internal.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_REG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_IMM</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_MEM</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_CR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((ut32)(x)) &amp; 0x3f) &lt;&lt; 26)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK</name></cpp:macro> <cpp:value>OP(0x3f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPS</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>xop</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(OP(op) | ((((ut32)(xop)) &amp; 0x1f) &lt;&lt; 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPSC</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>xop</name></type></parameter>, <parameter><type><name>rc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(OPS((op), (xop)) | ((rc) &amp; 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPS_MASK</name></cpp:macro> <cpp:value>OPSC(0x3f, 0x1f, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPS_MASK_DOT</name></cpp:macro> <cpp:value>OPSC(0x3f, 0x1f, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPM</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>xop</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(OP(op) | ((((ut32)(xop)) &amp; 0x3f) &lt;&lt; 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPMC</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>xop</name></type></parameter>, <parameter><type><name>rc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(OPM((op), (xop)) | ((rc) &amp; 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPM_MASK</name></cpp:macro> <cpp:value>OPMC(0x3f, 0x3f, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPL</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>xop</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(OP(op) | ((((ut32)(xop)) &amp; 0x3ff) &lt;&lt; 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPLC</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>xop</name></type></parameter>, <parameter><type><name>rc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(OPL((op), (xop)) | ((rc) &amp; 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPL_MASK</name></cpp:macro> <cpp:value>OPLC(0x3f, 0x3ff, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPL_MASK_DOT</name></cpp:macro> <cpp:value>OPLC(0x3f, 0x3ff, 1)</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{

<decl><name>NO_OPERAND</name></decl>,

<decl><name>OP_FA</name></decl>,

<decl><name>OP_FB</name></decl>,

<decl><name>OP_FC</name></decl>,

<decl><name>OP_FD</name></decl>,

<decl><name>OP_FS</name> <init>= <expr><name>OP_FD</name></expr></init></decl>,

<decl><name>OP_crfD</name></decl>,

<decl><name>OP_WB</name></decl>,

<decl><name>OP_IB</name></decl>,

<decl><name>OP_WC</name></decl>,

<decl><name>OP_IC</name></decl>,

<decl><name>OP_RA</name></decl>,

<decl><name>OP_RB</name></decl>,

<decl><name>OP_DRA</name></decl>,

<decl><name>OP_DRB</name></decl>,

}</block></enum></type> <name>ps_operand_id_t</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>psq_lx</name></decl>,

<decl><name>psq_stx</name></decl>,

<decl><name>psq_lux</name></decl>,

<decl><name>psq_stux</name></decl>,

<decl><name>psq_l</name></decl>,

<decl><name>psq_lu</name></decl>,

<decl><name>psq_st</name></decl>,

<decl><name>psq_stu</name></decl>,

<decl><name>ps_div</name></decl>,

<decl><name>ps_div_dot</name></decl>,

<decl><name>ps_sub</name></decl>,

<decl><name>ps_sub_dot</name></decl>,

<decl><name>ps_add</name></decl>,

<decl><name>ps_add_dot</name></decl>,

<decl><name>ps_sel</name></decl>,

<decl><name>ps_sel_dot</name></decl>,

<decl><name>ps_res</name></decl>,

<decl><name>ps_res_dot</name></decl>,

<decl><name>ps_mul</name></decl>,

<decl><name>ps_mul_dot</name></decl>,

<decl><name>ps_rsqrte</name></decl>,

<decl><name>ps_rsqrte_dot</name></decl>,

<decl><name>ps_msub</name></decl>,

<decl><name>ps_msub_dot</name></decl>,

<decl><name>ps_madd</name></decl>,

<decl><name>ps_madd_dot</name></decl>,

<decl><name>ps_nmsub</name></decl>,

<decl><name>ps_nmsub_dot</name></decl>,

<decl><name>ps_nmadd</name></decl>,

<decl><name>ps_nmadd_dot</name></decl>,

<decl><name>ps_neg</name></decl>,

<decl><name>ps_neg_dot</name></decl>,

<decl><name>ps_mr</name></decl>,

<decl><name>ps_mr_dot</name></decl>,

<decl><name>ps_nabs</name></decl>,

<decl><name>ps_nabs_dot</name></decl>,

<decl><name>ps_abs</name></decl>,

<decl><name>ps_abs_dot</name></decl>,

<decl><name>ps_sum0</name></decl>,

<decl><name>ps_sum0_dot</name></decl>,

<decl><name>ps_sum1</name></decl>,

<decl><name>ps_sum1_dot</name></decl>,

<decl><name>ps_muls0</name></decl>,

<decl><name>ps_muls0_dot</name></decl>,

<decl><name>ps_muls1</name></decl>,

<decl><name>ps_muls1_dot</name></decl>,

<decl><name>ps_madds0</name></decl>,

<decl><name>ps_madds0_dot</name></decl>,

<decl><name>ps_madds1</name></decl>,

<decl><name>ps_madds1_dot</name></decl>,

<decl><name>ps_cmpu0</name></decl>,

<decl><name>ps_cmpo0</name></decl>,

<decl><name>ps_cmpu1</name></decl>,

<decl><name>ps_cmpo1</name></decl>,

<decl><name>ps_merge00</name></decl>,

<decl><name>ps_merge00_dot</name></decl>,

<decl><name>ps_merge01</name></decl>,

<decl><name>ps_merge01_dot</name></decl>,

<decl><name>ps_merge10</name></decl>,

<decl><name>ps_merge10_dot</name></decl>,

<decl><name>ps_merge11</name></decl>,

<decl><name>ps_merge11_dot</name></decl>,

<decl><name>ps_dcbz_l</name></decl>,

}</block></enum></type> <name>ps_insn_type_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>ps_insn_type_t</name></type> <name>insn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>opcode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>operands</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>description</name></decl>;</decl_stmt>

}</block></struct></type> <name>ps_opcode_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>;</decl_stmt>

}</block></struct></type> <name>ps_operand_t</name>;</typedef>

</unit>
