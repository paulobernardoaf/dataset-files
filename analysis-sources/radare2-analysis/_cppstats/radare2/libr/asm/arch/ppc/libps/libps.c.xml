<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\ppc\libps\libps.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libps.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libps_internal.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>ps_operand_t</name></type> <name><name>ps_operands_array</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">21</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">23</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ps_opcode_t</name></type> <name><name>ps_opcodes_array</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>psq_lx</name></expr>, <expr><literal type="string">"psq_lx"</literal></expr>, <expr><call><name>OPM</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPM_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_RA</name></expr>, <expr><name>OP_RB</name></expr>, <expr><name>OP_WC</name></expr>, <expr><name>OP_IC</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Quantized Load Indexed"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>psq_stx</name></expr>, <expr><literal type="string">"psq_stx"</literal></expr>, <expr><call><name>OPM</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPM_MASK</name></expr>, <expr><block>{ <expr><name>OP_FS</name></expr>, <expr><name>OP_RA</name></expr>, <expr><name>OP_RB</name></expr>, <expr><name>OP_WC</name></expr>, <expr><name>OP_IC</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Quantized Store Indexed"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>psq_lux</name></expr>, <expr><literal type="string">"psq_lux"</literal></expr>, <expr><call><name>OPM</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPM_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_RA</name></expr>, <expr><name>OP_RB</name></expr>, <expr><name>OP_WC</name></expr>, <expr><name>OP_IC</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Quantized Load with update Indexed"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>psq_stux</name></expr>, <expr><literal type="string">"psq_stux"</literal></expr>, <expr><call><name>OPM</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPM_MASK</name></expr>, <expr><block>{ <expr><name>OP_FS</name></expr>, <expr><name>OP_RA</name></expr>, <expr><name>OP_RB</name></expr>, <expr><name>OP_WC</name></expr>, <expr><name>OP_IC</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Quantized Store with update Indexed"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>psq_l</name></expr>, <expr><literal type="string">"psq_l"</literal></expr>, <expr><call><name>OP</name> <argument_list>(<argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OP_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_DRA</name></expr>, <expr><name>OP_WB</name></expr>, <expr><name>OP_IB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Quantized Load"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>psq_lu</name></expr>, <expr><literal type="string">"psq_lu"</literal></expr>, <expr><call><name>OP</name> <argument_list>(<argument><expr><literal type="number">57</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OP_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_DRA</name></expr>, <expr><name>OP_WB</name></expr>, <expr><name>OP_IB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Quantized Load with Update"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>psq_st</name></expr>, <expr><literal type="string">"psq_st"</literal></expr>, <expr><call><name>OP</name> <argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OP_MASK</name></expr>, <expr><block>{ <expr><name>OP_FS</name></expr>, <expr><name>OP_DRA</name></expr>, <expr><name>OP_WB</name></expr>, <expr><name>OP_IB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Quantized Store"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>psq_stu</name></expr>, <expr><literal type="string">"psq_stu"</literal></expr>, <expr><call><name>OP</name> <argument_list>(<argument><expr><literal type="number">61</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OP_MASK</name></expr>, <expr><block>{ <expr><name>OP_FS</name></expr>, <expr><name>OP_DRA</name></expr>, <expr><name>OP_WB</name></expr>, <expr><name>OP_IB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Quantized Store with update"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_div</name></expr>, <expr><literal type="string">"ps_div"</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Divide"</literal></expr>}</block></expr>, 

<expr><block>{ <expr><name>ps_div_dot</name></expr>, <expr><literal type="string">"ps_div."</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK_DOT</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Divide"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_sub</name></expr>, <expr><literal type="string">"ps_sub"</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Subtract"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_sub_dot</name></expr>, <expr><literal type="string">"ps_sub."</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK_DOT</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Subtract"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_add</name></expr>, <expr><literal type="string">"ps_add"</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Add"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_add_dot</name></expr>, <expr><literal type="string">"ps_add."</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK_DOT</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Add"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_sel</name></expr>, <expr><literal type="string">"ps_sel"</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FC</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Select"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_sel_dot</name></expr>, <expr><literal type="string">"ps_sel."</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK_DOT</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FC</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Select"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_res</name></expr>, <expr><literal type="string">"ps_res"</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Reciprocal Estimate"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_res_dot</name></expr>, <expr><literal type="string">"ps_res."</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK_DOT</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Reciprocal Estimate"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_mul</name></expr>, <expr><literal type="string">"ps_mul"</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FC</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Multiply"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_mul_dot</name></expr>, <expr><literal type="string">"ps_mul."</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK_DOT</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FC</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Multiply"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_rsqrte</name></expr>, <expr><literal type="string">"ps_rsqrte"</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Reciprocal Square Root Estimate"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_rsqrte_dot</name></expr>, <expr><literal type="string">"ps_rsqrte."</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK_DOT</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Reciprocal Square Root Estimate"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_msub</name></expr>, <expr><literal type="string">"ps_msub"</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FC</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Multiply-Subtract"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_msub_dot</name></expr>, <expr><literal type="string">"ps_msub."</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK_DOT</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FC</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Multiply-Subtract"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_madd</name></expr>, <expr><literal type="string">"ps_madd"</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FC</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Multiply-Add"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_madd_dot</name></expr>, <expr><literal type="string">"ps_madd."</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK_DOT</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FC</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Multiply-Add"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_nmsub</name></expr>, <expr><literal type="string">"ps_nmsub"</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FC</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Negative Multiply-Subtract"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_nmsub_dot</name></expr>, <expr><literal type="string">"ps_nmsub."</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK_DOT</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FC</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Negative Multiply-Subtract"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_nmadd</name></expr>, <expr><literal type="string">"ps_nmadd"</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FC</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Negative Multiply-Add"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_nmadd_dot</name></expr>, <expr><literal type="string">"ps_nmadd."</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK_DOT</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FC</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Negative Multiply-Add"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_neg</name></expr>, <expr><literal type="string">"ps_neg"</literal></expr>, <expr><call><name>OPLC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPL_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Negate"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_neg_dot</name></expr>, <expr><literal type="string">"ps_neg."</literal></expr>, <expr><call><name>OPLC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPL_MASK_DOT</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Negate"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_mr</name></expr>, <expr><literal type="string">"ps_mr"</literal></expr>, <expr><call><name>OPLC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPL_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Move Register"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_mr_dot</name></expr>, <expr><literal type="string">"ps_mr."</literal></expr>, <expr><call><name>OPLC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPL_MASK_DOT</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Move Register"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_nabs</name></expr>, <expr><literal type="string">"ps_nabs"</literal></expr>, <expr><call><name>OPLC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">136</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPL_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Negative Absolute Value"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_nabs_dot</name></expr>, <expr><literal type="string">"ps_nabs."</literal></expr>, <expr><call><name>OPLC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">136</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPL_MASK_DOT</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Negative Absolute Value"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_abs</name></expr>, <expr><literal type="string">"ps_abs"</literal></expr>, <expr><call><name>OPLC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">264</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPL_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Absolute Value"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_abs_dot</name></expr>, <expr><literal type="string">"ps_abs."</literal></expr>, <expr><call><name>OPLC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">264</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPL_MASK_DOT</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Absolute Value"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_sum0</name></expr>, <expr><literal type="string">"ps_sum0"</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FC</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single vector SUM high"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_sum0_dot</name></expr>, <expr><literal type="string">"ps_sum0."</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK_DOT</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FC</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single vector SUM high"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_sum1</name></expr>, <expr><literal type="string">"ps_sum1"</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FC</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single vector SUM low"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_sum1_dot</name></expr>, <expr><literal type="string">"ps_sum1."</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK_DOT</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FC</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single vector SUM low"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_muls0</name></expr>, <expr><literal type="string">"ps_muls0"</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FC</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Multiply Scalar high"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_muls0_dot</name></expr>, <expr><literal type="string">"ps_muls0."</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK_DOT</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FC</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Multiply Scalar high"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_muls1</name></expr>, <expr><literal type="string">"ps_muls1"</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FC</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Multiply Scalar low"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_muls1_dot</name></expr>, <expr><literal type="string">"ps_muls1."</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK_DOT</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FC</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Multiply Scalar low"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_madds0</name></expr>, <expr><literal type="string">"ps_madds0"</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FC</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Multiply-Add Scalar high"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_madds0_dot</name></expr>, <expr><literal type="string">"ps_madds0."</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK_DOT</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FC</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Multiply-Add Scalar high"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_madds1</name></expr>, <expr><literal type="string">"ps_madds1"</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FC</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Multiply-Add Scalar low"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_madds1_dot</name></expr>, <expr><literal type="string">"ps_madds1."</literal></expr>, <expr><call><name>OPSC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPS_MASK_DOT</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FC</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single Multiply-Add Scalar low"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_cmpu0</name></expr>, <expr><literal type="string">"ps_cmpu0"</literal></expr>, <expr><call><name>OPL</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPL_MASK</name></expr>, <expr><block>{ <expr><name>OP_crfD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Singles Compare Unordered High"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_cmpo0</name></expr>, <expr><literal type="string">"ps_cmpo0"</literal></expr>, <expr><call><name>OPL</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPL_MASK</name></expr>, <expr><block>{ <expr><name>OP_crfD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Singles Compare Ordered High"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_cmpu1</name></expr>, <expr><literal type="string">"ps_cmpu1"</literal></expr>, <expr><call><name>OPL</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPL_MASK</name></expr>, <expr><block>{ <expr><name>OP_crfD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Singles Compare Unordered Low"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_cmpo1</name></expr>, <expr><literal type="string">"ps_cmpo1"</literal></expr>, <expr><call><name>OPL</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">96</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPL_MASK</name></expr>, <expr><block>{ <expr><name>OP_crfD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Singles Compare Ordered Low"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_merge00</name></expr>, <expr><literal type="string">"ps_merge00"</literal></expr>, <expr><call><name>OPLC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">528</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPL_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single MERGE high"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_merge00_dot</name></expr>, <expr><literal type="string">"ps_merge00."</literal></expr>, <expr><call><name>OPLC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">528</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPL_MASK_DOT</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single MERGE high"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_merge01</name></expr>, <expr><literal type="string">"ps_merge01"</literal></expr>, <expr><call><name>OPLC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">560</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPL_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single MERGE direct"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_merge01_dot</name></expr>, <expr><literal type="string">"ps_merge01."</literal></expr>, <expr><call><name>OPLC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">560</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPL_MASK_DOT</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single MERGE direct"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_merge10</name></expr>, <expr><literal type="string">"ps_merge10"</literal></expr>, <expr><call><name>OPLC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">592</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPL_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single MERGE swapped"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_merge10_dot</name></expr>, <expr><literal type="string">"ps_merge10."</literal></expr>, <expr><call><name>OPLC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">592</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPL_MASK_DOT</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single MERGE swapped"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_merge11</name></expr>, <expr><literal type="string">"ps_merge11"</literal></expr>, <expr><call><name>OPLC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">624</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPL_MASK</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single MERGE low"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_merge11_dot</name></expr>, <expr><literal type="string">"ps_merge11."</literal></expr>, <expr><call><name>OPLC</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">624</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPL_MASK_DOT</name></expr>, <expr><block>{ <expr><name>OP_FD</name></expr>, <expr><name>OP_FA</name></expr>, <expr><name>OP_FB</name></expr>}</block></expr>, <expr><literal type="string">"Paired Single MERGE low"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>ps_dcbz_l</name></expr>, <expr><literal type="string">"dcbz_l"</literal></expr>, <expr><call><name>OPL</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1014</literal></expr></argument>)</argument_list></call></expr>, <expr><name>OPL_MASK</name></expr>, <expr><block>{ <expr><name>OP_RA</name></expr>, <expr><name>OP_RB</name></expr>}</block></expr>, <expr><literal type="string">"Data Cache Block Set to Zero Locked"</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>libps_decode</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>ppcps_t</name><modifier>*</modifier></type> <name>ps</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>op</name> <init>= <expr><operator>(</operator><name>data</name> <operator>&amp;</operator> <name>OP_MASK</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>op</name> <operator>==</operator> <call><name>OP</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><name>op</name> <operator>==</operator> <call><name>OP</name> <argument_list>(<argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>op</name> <operator>==</operator> <call><name>OP</name> <argument_list>(<argument><expr><literal type="number">57</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><name>op</name> <operator>==</operator> <call><name>OP</name> <argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>op</name> <operator>==</operator> <call><name>OP</name> <argument_list>(<argument><expr><literal type="number">61</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>size</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>ps_opcodes_array</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ps_opcode_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ps_opcode_t</name><modifier>*</modifier></type> <name>instruction</name> <init>= <expr><name>ps_opcodes_array</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>data</name> <operator>&amp;</operator> <name><name>instruction</name><operator>-&gt;</operator><name>mask</name></name><operator>)</operator> <operator>==</operator> <name><name>instruction</name><operator>-&gt;</operator><name>opcode</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name><name>instruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ppcps_field_t</name><modifier>*</modifier></type> <name>field</name> <init>= <expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ps_operand_t</name><modifier>*</modifier></type> <name>ps_operand</name> <init>= <expr><operator>&amp;</operator><name><name>ps_operands_array</name><index>[<expr><name><name>instruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <name><name>ps_operand</name><operator>-&gt;</operator><name>shift</name></name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>ps_operand</name><operator>-&gt;</operator><name>bits</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>instruction</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>OP_FA</name></expr>:</case>

<case>case <expr><name>OP_FB</name></expr>:</case>

<case>case <expr><name>OP_FC</name></expr>:</case>

<case>case <expr><name>OP_FD</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TYPE_REG</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>OP_RA</name></expr>:</case>

<case>case <expr><name>OP_RB</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TYPE_REG</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>OP_crfD</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TYPE_CR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>OP_WB</name></expr>:</case>

<case>case <expr><name>OP_IB</name></expr>:</case>

<case>case <expr><name>OP_WC</name></expr>:</case>

<case>case <expr><name>OP_IC</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TYPE_IMM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>OP_DRA</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>imm</name> <init>= <expr><operator>(</operator><name>ut16</name><operator>)</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x7FF</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>sign</name> <init>= <expr><operator>(</operator><name>ut16</name><operator>)</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x800</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st16</name></type> <name>displacement</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sign</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>displacement</name> <operator>=</operator> <name>imm</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>displacement</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>imm</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TYPE_MEM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>bits</name> <operator>+</operator> <name>displacement</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>instruction</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name><name>instruction</name><operator>-&gt;</operator><name>insn</name></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>instruction</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>libps_snprint</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ppcps_t</name><modifier>*</modifier></type> <name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bufsize</name> <init>= <expr><name>size</name></expr></init></decl>, <decl><type ref="prev"/><name>add</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>add</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>instr</name><operator>-&gt;</operator><name>n</name></name> <operator>&amp;&amp;</operator> <name>add</name> <operator>&lt;</operator> <name>bufsize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TYPE_REG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>add</name> <operator>+=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>add</name></expr></argument>, <argument><expr><name>bufsize</name> <operator>-</operator> <name>add</name></expr></argument>, <argument><expr><literal type="string">" fr%u"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TYPE_IMM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>add</name> <operator>+=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>add</name></expr></argument>, <argument><expr><name>bufsize</name> <operator>-</operator> <name>add</name></expr></argument>, <argument><expr><literal type="string">" 0x%x"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TYPE_MEM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>add</name> <operator>+=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>add</name></expr></argument>, <argument><expr><name>bufsize</name> <operator>-</operator> <name>add</name></expr></argument>, <argument><expr><literal type="string">" 0x%x(r%d)"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TYPE_CR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>add</name> <operator>+=</operator> <call><name>snprintf</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>add</name></expr></argument>, <argument><expr><name>bufsize</name> <operator>-</operator> <name>add</name></expr></argument>, <argument><expr><literal type="string">" cr%u"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>operands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

</unit>
