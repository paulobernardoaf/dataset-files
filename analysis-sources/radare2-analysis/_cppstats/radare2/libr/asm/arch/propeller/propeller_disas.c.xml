<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\propeller\propeller_disas.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"propeller_disas.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>instrs</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>PROP_ABS</name></expr>]</index> <operator>=</operator> <literal type="string">"abs"</literal></expr>,

<expr><index>[<expr><name>PROP_ABSNEG</name></expr>]</index> <operator>=</operator> <literal type="string">"absneg"</literal></expr>,

<expr><index>[<expr><name>PROP_ADD</name></expr>]</index> <operator>=</operator> <literal type="string">"add"</literal></expr>,

<expr><index>[<expr><name>PROP_ADDABS</name></expr>]</index> <operator>=</operator> <literal type="string">"addabs"</literal></expr>,

<expr><index>[<expr><name>PROP_ADDS</name></expr>]</index> <operator>=</operator> <literal type="string">"adds"</literal></expr>,

<expr><index>[<expr><name>PROP_ADDSX</name></expr>]</index> <operator>=</operator> <literal type="string">"addsx"</literal></expr>,

<expr><index>[<expr><name>PROP_ADDX</name></expr>]</index> <operator>=</operator> <literal type="string">"addx"</literal></expr>,

<expr><index>[<expr><name>PROP_AND</name></expr>]</index> <operator>=</operator> <literal type="string">"and"</literal></expr>, 

<expr><index>[<expr><name>PROP_ANDN</name></expr>]</index> <operator>=</operator> <literal type="string">"andn"</literal></expr>, 

<expr><index>[<expr><name>PROP_CALL</name></expr>]</index> <operator>=</operator> <literal type="string">"call"</literal></expr>, 

<expr><index>[<expr><name>PROP_CMP</name></expr>]</index> <operator>=</operator> <literal type="string">"cmp"</literal></expr>,

<expr><index>[<expr><name>PROP_CMPS</name></expr>]</index> <operator>=</operator> <literal type="string">"cmps"</literal></expr>,

<expr><index>[<expr><name>PROP_CMPSUB</name></expr>]</index> <operator>=</operator> <literal type="string">"cmpsub"</literal></expr>,

<expr><index>[<expr><name>PROP_CMPSX</name></expr>]</index> <operator>=</operator> <literal type="string">"cmpsx"</literal></expr>,

<expr><index>[<expr><name>PROP_CMPX</name></expr>]</index> <operator>=</operator> <literal type="string">"cmpx"</literal></expr>,

<expr><index>[<expr><name>PROP_DJNZ</name></expr>]</index> <operator>=</operator> <literal type="string">"djnz"</literal></expr>,

<expr><index>[<expr><name>PROP_HUBOP</name></expr>]</index> <operator>=</operator> <literal type="string">"hubop"</literal></expr>,

<expr><index>[<expr><name>PROP_MOV</name></expr>]</index> <operator>=</operator> <literal type="string">"mov"</literal></expr>,

<expr><index>[<expr><name>PROP_MAX</name></expr>]</index> <operator>=</operator> <literal type="string">"max"</literal></expr>,

<expr><index>[<expr><name>PROP_MAXS</name></expr>]</index> <operator>=</operator> <literal type="string">"maxs"</literal></expr>,

<expr><index>[<expr><name>PROP_MIN</name></expr>]</index> <operator>=</operator> <literal type="string">"min"</literal></expr>,

<expr><index>[<expr><name>PROP_MINS</name></expr>]</index> <operator>=</operator> <literal type="string">"mins"</literal></expr>,

<expr><index>[<expr><name>PROP_MOVD</name></expr>]</index> <operator>=</operator> <literal type="string">"movd"</literal></expr>,

<expr><index>[<expr><name>PROP_MOVI</name></expr>]</index> <operator>=</operator> <literal type="string">"movi"</literal></expr>,

<expr><index>[<expr><name>PROP_MOVS</name></expr>]</index> <operator>=</operator> <literal type="string">"movs"</literal></expr>,

<expr><index>[<expr><name>PROP_MUXC</name></expr>]</index> <operator>=</operator> <literal type="string">"muxc"</literal></expr>,

<expr><index>[<expr><name>PROP_MUXNC</name></expr>]</index> <operator>=</operator> <literal type="string">"muxnc"</literal></expr>,

<expr><index>[<expr><name>PROP_MUXNZ</name></expr>]</index> <operator>=</operator> <literal type="string">"muxnz"</literal></expr>,

<expr><index>[<expr><name>PROP_MUXZ</name></expr>]</index> <operator>=</operator> <literal type="string">"muxz"</literal></expr>,

<expr><index>[<expr><name>PROP_NEG</name></expr>]</index> <operator>=</operator> <literal type="string">"neg"</literal></expr>,

<expr><index>[<expr><name>PROP_NEGC</name></expr>]</index> <operator>=</operator> <literal type="string">"negc"</literal></expr>,

<expr><index>[<expr><name>PROP_NEGNC</name></expr>]</index> <operator>=</operator> <literal type="string">"negnc"</literal></expr>,

<expr><index>[<expr><name>PROP_NEGNZ</name></expr>]</index> <operator>=</operator> <literal type="string">"negnz"</literal></expr>,

<expr><index>[<expr><name>PROP_NEGZ</name></expr>]</index> <operator>=</operator> <literal type="string">"negz"</literal></expr>,

<expr><index>[<expr><name>PROP_OR</name></expr>]</index> <operator>=</operator> <literal type="string">"or"</literal></expr>,

<expr><index>[<expr><name>PROP_RCL</name></expr>]</index> <operator>=</operator> <literal type="string">"rcl"</literal></expr>,

<expr><index>[<expr><name>PROP_RCR</name></expr>]</index> <operator>=</operator> <literal type="string">"rcr"</literal></expr>,

<expr><index>[<expr><name>PROP_RDBYTE</name></expr>]</index> <operator>=</operator> <literal type="string">"rdbyte"</literal></expr>,

<expr><index>[<expr><name>PROP_RDLONG</name></expr>]</index> <operator>=</operator> <literal type="string">"rdlong"</literal></expr>,

<expr><index>[<expr><name>PROP_RDWORD</name></expr>]</index> <operator>=</operator> <literal type="string">"rdword"</literal></expr>,

<expr><index>[<expr><name>PROP_REV</name></expr>]</index> <operator>=</operator> <literal type="string">"rev"</literal></expr>,

<expr><index>[<expr><name>PROP_ROL</name></expr>]</index> <operator>=</operator> <literal type="string">"rol"</literal></expr>,

<expr><index>[<expr><name>PROP_ROR</name></expr>]</index> <operator>=</operator> <literal type="string">"ror"</literal></expr>,

<expr><index>[<expr><name>PROP_SAR</name></expr>]</index> <operator>=</operator> <literal type="string">"sar"</literal></expr>,

<expr><index>[<expr><name>PROP_SHL</name></expr>]</index> <operator>=</operator> <literal type="string">"shl"</literal></expr>,

<expr><index>[<expr><name>PROP_SHR</name></expr>]</index> <operator>=</operator> <literal type="string">"shr"</literal></expr>,

<expr><index>[<expr><name>PROP_SUBABS</name></expr>]</index> <operator>=</operator> <literal type="string">"subabs"</literal></expr>,

<expr><index>[<expr><name>PROP_SUBS</name></expr>]</index> <operator>=</operator> <literal type="string">"subs"</literal></expr>,

<expr><index>[<expr><name>PROP_SUBSX</name></expr>]</index> <operator>=</operator> <literal type="string">"subsx"</literal></expr>,

<expr><index>[<expr><name>PROP_SUMC</name></expr>]</index> <operator>=</operator> <literal type="string">"sumc"</literal></expr>,

<expr><index>[<expr><name>PROP_SUMNC</name></expr>]</index> <operator>=</operator> <literal type="string">"sumnc"</literal></expr>,

<expr><index>[<expr><name>PROP_SUMNZ</name></expr>]</index> <operator>=</operator> <literal type="string">"sumnz"</literal></expr>,

<expr><index>[<expr><name>PROP_SUMZ</name></expr>]</index> <operator>=</operator> <literal type="string">"sumz"</literal></expr>,

<expr><index>[<expr><name>PROP_TJZ</name></expr>]</index> <operator>=</operator> <literal type="string">"tjz"</literal></expr>,

<expr><index>[<expr><name>PROP_WAITCNT</name></expr>]</index> <operator>=</operator> <literal type="string">"waitcnt"</literal></expr>,

<expr><index>[<expr><name>PROP_WAITVID</name></expr>]</index> <operator>=</operator> <literal type="string">"waitvid"</literal></expr>,

<expr><index>[<expr><name>PROP_XOR</name></expr>]</index> <operator>=</operator> <literal type="string">"xor"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ext_instrs</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>PROP_CLKSET</name></expr>]</index> <operator>=</operator> <literal type="string">"clkset"</literal></expr>,

<expr><index>[<expr><name>PROP_COGID</name></expr>]</index> <operator>=</operator> <literal type="string">"cogid"</literal></expr>,

<expr><index>[<expr><name>PROP_COGINIT</name></expr>]</index> <operator>=</operator> <literal type="string">"coginit"</literal></expr>,

<expr><index>[<expr><name>PROP_COGSTOP</name></expr>]</index> <operator>=</operator> <literal type="string">"cogstop"</literal></expr>,

<expr><index>[<expr><name>PROP_LOCKCLR</name></expr>]</index> <operator>=</operator> <literal type="string">"lockclr"</literal></expr>,

<expr><index>[<expr><name>PROP_LOCKNEW</name></expr>]</index> <operator>=</operator> <literal type="string">"locknew"</literal></expr>,

<expr><index>[<expr><name>PROP_LOCKRET</name></expr>]</index> <operator>=</operator> <literal type="string">"lockret"</literal></expr>,

<expr><index>[<expr><name>PROP_LOCKSET</name></expr>]</index> <operator>=</operator> <literal type="string">"lockset"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>conditions</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>PROP_IF_ALWAYS</name></expr>]</index> <operator>=</operator> <literal type="string">""</literal></expr>,

<expr><index>[<expr><name>PROP_IF_NEVER</name></expr>]</index> <operator>=</operator> <literal type="string">""</literal></expr>,

<expr><index>[<expr><name>PROP_IF_E</name></expr>]</index> <operator>=</operator> <literal type="string">"if_e"</literal></expr>,

<expr><index>[<expr><name>PROP_IF_NE</name></expr>]</index> <operator>=</operator> <literal type="string">"if_ne"</literal></expr>,

<expr><index>[<expr><name>PROP_IF_A</name></expr>]</index> <operator>=</operator> <literal type="string">"if_a"</literal></expr>,

<expr><index>[<expr><name>PROP_IF_B</name></expr>]</index> <operator>=</operator> <literal type="string">"if_b"</literal></expr>,

<expr><index>[<expr><name>PROP_IF_AE</name></expr>]</index> <operator>=</operator> <literal type="string">"if_ae"</literal></expr>,

<expr><index>[<expr><name>PROP_IF_BE</name></expr>]</index> <operator>=</operator> <literal type="string">"if_be"</literal></expr>,

<expr><index>[<expr><name>PROP_IF_C_EQ_Z</name></expr>]</index> <operator>=</operator> <literal type="string">"if_c_eq_z"</literal></expr>,

<expr><index>[<expr><name>PROP_IF_C_NE_Z</name></expr>]</index> <operator>=</operator> <literal type="string">"if_c_ne_z"</literal></expr>,

<expr><index>[<expr><name>PROP_IF_C_AND_Z</name></expr>]</index> <operator>=</operator> <literal type="string">"if_c_and_z"</literal></expr>,

<expr><index>[<expr><name>PROP_IF_C_AND_NZ</name></expr>]</index> <operator>=</operator> <literal type="string">"if_c_and_nz"</literal></expr>,

<expr><index>[<expr><name>PROP_IF_NC_AND_Z</name></expr>]</index> <operator>=</operator> <literal type="string">"if_nc_and_z"</literal></expr>,

<expr><index>[<expr><name>PROP_IF_NZ_OR_NC</name></expr>]</index> <operator>=</operator> <literal type="string">"if_nc_or_nz"</literal></expr>,

<expr><index>[<expr><name>PROP_IF_NZ_OR_C</name></expr>]</index> <operator>=</operator> <literal type="string">"if_nz_or_c"</literal></expr>,

<expr><index>[<expr><name>PROP_IF_Z_OR_NC</name></expr>]</index> <operator>=</operator> <literal type="string">"if_z_or_c"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>get_opcode</name> <parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>get_opcode_ext</name> <parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>instr</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">23</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>get_src</name> <parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>instr</name> <operator>&amp;</operator> <literal type="number">0x1FF</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>get_dst</name> <parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1FF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_immediate</name> <parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>instr</name> <operator>&amp;</operator> <literal type="number">0x00400000</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_ext_cmd</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>propeller_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>opcode</name></decl>;</decl_stmt>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>get_opcode_ext</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PROP_CLKSET</name></expr>:</case>

<case>case <expr><name>PROP_COGID</name></expr>:</case>

<case>case <expr><name>PROP_COGINIT</name></expr>:</case>

<case>case <expr><name>PROP_COGSTOP</name></expr>:</case>

<case>case <expr><name>PROP_LOCKCLR</name></expr>:</case>

<case>case <expr><name>PROP_LOCKNEW</name></expr>:</case>

<case>case <expr><name>PROP_LOCKRET</name></expr>:</case>

<case>case <expr><name>PROP_LOCKSET</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>PROP_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>ext_instrs</name><index>[<expr><name>PROP_CLKSET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>PROP_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>get_dst</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>get_zcri</name> <parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>get_con</name> <parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_prefix</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>propeller_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>prefix</name> <init>= <expr><operator>(</operator><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>conditions</name><index>[<expr><name>prefix</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>prefix</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_jmp</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>propeller_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>opcode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>zcri</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>get_opcode</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PROP_JMP</name></expr>:</case>

<expr_stmt><expr><name>zcri</name> <operator>=</operator> <call><name>get_zcri</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>zcri</name> <operator>&amp;</operator> <literal type="number">0x2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>PROP_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"jmpret"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>zcri</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>get_dst</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <call><name>get_src</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>PROP_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"0x%x, #0x%x"</literal></expr></argument>, <argument><expr><call><name>get_dst</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_src</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <call><name>get_src</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>get_dst</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>PROP_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"0x%x, 0x%x"</literal></expr></argument>, <argument><expr><call><name>get_dst</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_src</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>PROP_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"jmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>zcri</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <call><name>get_src</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>immed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>PROP_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"#0x%x"</literal></expr></argument>, <argument><expr><call><name>get_src</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>immed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <call><name>get_src</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>PROP_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"0x%x"</literal></expr></argument>, <argument><expr><call><name>get_src</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>propeller_decode_command</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>propeller_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>opcode</name></decl>;</decl_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>r_read_be32</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>get_opcode</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_con</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>PROP_INSTR_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"nop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PROP_ABS</name></expr>:</case>

<case>case <expr><name>PROP_ABSNEG</name></expr>:</case>

<case>case <expr><name>PROP_ADD</name></expr>:</case>

<case>case <expr><name>PROP_ADDABS</name></expr>:</case>

<case>case <expr><name>PROP_ADDS</name></expr>:</case>

<case>case <expr><name>PROP_ADDSX</name></expr>:</case>

<case>case <expr><name>PROP_ADDX</name></expr>:</case>

<case>case <expr><name>PROP_AND</name></expr>:</case>

<case>case <expr><name>PROP_ANDN</name></expr>:</case>

<case>case <expr><name>PROP_CMP</name></expr>:</case>

<case>case <expr><name>PROP_CMPS</name></expr>:</case>

<case>case <expr><name>PROP_CMPSUB</name></expr>:</case>

<case>case <expr><name>PROP_CMPSX</name></expr>:</case>

<case>case <expr><name>PROP_CMPX</name></expr>:</case>

<case>case <expr><name>PROP_DJNZ</name></expr>:</case>

<case>case <expr><name>PROP_MAX</name></expr>:</case>

<case>case <expr><name>PROP_MAXS</name></expr>:</case>

<case>case <expr><name>PROP_MIN</name></expr>:</case>

<case>case <expr><name>PROP_MINS</name></expr>:</case>

<case>case <expr><name>PROP_MOV</name></expr>:</case>

<case>case <expr><name>PROP_MOVD</name></expr>:</case>

<case>case <expr><name>PROP_MOVI</name></expr>:</case>

<case>case <expr><name>PROP_MOVS</name></expr>:</case>

<case>case <expr><name>PROP_MUXC</name></expr>:</case>

<case>case <expr><name>PROP_MUXNC</name></expr>:</case>

<case>case <expr><name>PROP_MUXNZ</name></expr>:</case>

<case>case <expr><name>PROP_MUXZ</name></expr>:</case>

<case>case <expr><name>PROP_NEG</name></expr>:</case>

<case>case <expr><name>PROP_NEGC</name></expr>:</case>

<case>case <expr><name>PROP_NEGNC</name></expr>:</case>

<case>case <expr><name>PROP_NEGNZ</name></expr>:</case>

<case>case <expr><name>PROP_NEGZ</name></expr>:</case>

<case>case <expr><name>PROP_OR</name></expr>:</case>

<case>case <expr><name>PROP_RCL</name></expr>:</case>

<case>case <expr><name>PROP_RCR</name></expr>:</case>

<case>case <expr><name>PROP_RDBYTE</name></expr>:</case>

<case>case <expr><name>PROP_RDLONG</name></expr>:</case>

<case>case <expr><name>PROP_RDWORD</name></expr>:</case>

<case>case <expr><name>PROP_REV</name></expr>:</case>

<case>case <expr><name>PROP_ROL</name></expr>:</case>

<case>case <expr><name>PROP_ROR</name></expr>:</case>

<case>case <expr><name>PROP_SAR</name></expr>:</case>

<case>case <expr><name>PROP_SHL</name></expr>:</case>

<case>case <expr><name>PROP_SHR</name></expr>:</case>

<case>case <expr><name>PROP_SUBABS</name></expr>:</case>

<case>case <expr><name>PROP_SUBS</name></expr>:</case>

<case>case <expr><name>PROP_SUBSX</name></expr>:</case>

<case>case <expr><name>PROP_SUMC</name></expr>:</case>

<case>case <expr><name>PROP_SUMNC</name></expr>:</case>

<case>case <expr><name>PROP_SUMNZ</name></expr>:</case>

<case>case <expr><name>PROP_SUMZ</name></expr>:</case>

<case>case <expr><name>PROP_TJZ</name></expr>:</case>

<case>case <expr><name>PROP_WAITCNT</name></expr>:</case>

<case>case <expr><name>PROP_WAITPEQ</name></expr>:</case>

<case>case <expr><name>PROP_WAITPNE</name></expr>:</case>

<case>case <expr><name>PROP_WAITVID</name></expr>:</case>

<case>case <expr><name>PROP_XOR</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>instrs</name><index>[<expr><name>opcode</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opcode</name> <operator>==</operator> <name>PROP_RDBYTE</name> <operator>||</operator> <name>opcode</name> <operator>==</operator> <name>PROP_RDLONG</name> <operator>||</operator>

<name>opcode</name> <operator>==</operator> <name>PROP_RDWORD</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><call><name>get_zcri</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'w'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'r'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>PROP_SUB</name> <operator>&amp;&amp;</operator> <name>in</name> <operator>&amp;</operator> <literal type="number">0x08000000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>PROP_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"sub"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>PROP_SUBX</name> <operator>&amp;&amp;</operator> <name>in</name> <operator>&amp;</operator> <literal type="number">0x08000000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>PROP_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"subx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_immediate</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <call><name>get_src</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>get_dst</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>PROP_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0x%x, #%d"</literal></expr></argument>,

<argument><expr><call><name>get_dst</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_src</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <call><name>get_src</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>get_dst</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>PROP_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0x%x, 0x%x"</literal></expr></argument>,

<argument><expr><call><name>get_dst</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_src</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PROP_HUBOP</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_ext_cmd</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>PROP_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>instrs</name><index>[<expr><name>opcode</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_immediate</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <call><name>get_src</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>get_dst</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>PROP_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0x%x, #%d"</literal></expr></argument>,

<argument><expr><call><name>get_dst</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>get_src</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <call><name>get_src</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>get_dst</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>PROP_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0x%x, 0x%x"</literal></expr></argument>,

<argument><expr><call><name>get_dst</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_src</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>PROP_JMP</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_jmp</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>opcode</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>decode_prefix</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
