<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\tms320\tms320_dasm.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sdb.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tms320_p.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tms320_dasm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c55x_plus/c55plus.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>run_f_list</name><parameter_list>(<parameter><decl><type><name>tms320_dasm_t</name> <modifier>*</modifier></type> <name>dasm</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>insn_flag_t</name> <modifier>*</modifier></type> <name>flag</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dasm</name><operator>-&gt;</operator><name>insn</name><operator>-&gt;</operator><name>f_list</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>flag</name> <operator>=</operator> <name><name>dasm</name><operator>-&gt;</operator><name>insn</name><operator>-&gt;</operator><name>f_list</name></name></expr>;</init> <condition><expr><operator>!</operator><call><name>f_list_last</name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>flag</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>flag</name><operator>-&gt;</operator><name>v</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TMS320_FLAG_E</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_R</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_U</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>U</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_u</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_g</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_r</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_t</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_k3</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_k4</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_k5</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_k6</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k6</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_k8</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k8</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_k12</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k12</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_k16</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k16</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_l1</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_l3</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>l3</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_l7</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>l7</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_l16</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>l16</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_K8</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>K8</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_K16</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>K16</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_L7</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>L7</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_L8</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>L8</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_L16</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>L16</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_P8</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>P8</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_P24</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>P24</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_D16</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>D16</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_SHFT</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>SHFT</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_SHIFTW</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>SHIFTW</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_CCCCCCC</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>CCCCCCC</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_AAAAAAAI</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>AAAAAAAI</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_uu</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>uu</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_cc</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_ss</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_dd</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>dd</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_mm</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_vv</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>vv</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_tt</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>tt</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_XSSS</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>XSSS</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_XDDD</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>XDDD</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_FSSS</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>FSSS</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_FDDD</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>FDDD</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_XACS</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>XACS</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_XACD</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>XACD</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_SS</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>SS</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>SS2</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_DD</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>DD</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>DD2</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_XXX</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>Xmem_reg</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_MMM</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>Xmem_mmm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>Xmem_mmm</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>Ymem_mmm</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_Y</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>Ymem_reg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>Ymem_reg</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>Ymem_reg</name></expr></argument>)</argument_list></call> <operator>|=</operator> <name>temp</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>TMS320_FLAG_YY</name></expr>:</case>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>Ymem_reg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>Ymem_reg</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>Ymem_reg</name></expr></argument>)</argument_list></call> <operator>|=</operator> <name>temp</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"TODO: unknown opcode flag %02x\n"</literal></expr></argument>, <argument><expr><name><name>flag</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>run_m_list</name><parameter_list>(<parameter><decl><type><name>tms320_dasm_t</name> <modifier>*</modifier></type> <name>dasm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>insn_mask_t</name> <modifier>*</modifier></type> <name>mask</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dasm</name><operator>-&gt;</operator><name>insn</name><operator>-&gt;</operator><name>m_list</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>mask</name> <operator>=</operator> <name><name>dasm</name><operator>-&gt;</operator><name>insn</name><operator>-&gt;</operator><name>m_list</name></name></expr>;</init> <condition><expr><operator>!</operator><call><name>m_list_last</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>mask</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode64</name></name></expr></argument>, <argument><expr><name><name>mask</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name><name>mask</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>mask</name><operator>-&gt;</operator><name>v</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vreplace</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>string</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>token</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pos</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>pos</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pos</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>replace</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>string</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>token</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vreplace</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>substitute</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>string</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>token</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vreplace</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>result</name></expr>)</condition>;</do>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>get_xreg_str</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>table</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"ac0"</literal></expr>, <expr><literal type="string">"ac1"</literal></expr>, <expr><literal type="string">"ac2"</literal></expr>, <expr><literal type="string">"ac3"</literal></expr>, <expr><literal type="string">"xsp"</literal></expr>, <expr><literal type="string">"xssp"</literal></expr>, <expr><literal type="string">"xdp"</literal></expr>, <expr><literal type="string">"xcdp"</literal></expr>,

<expr><literal type="string">"xar0"</literal></expr>, <expr><literal type="string">"xar1"</literal></expr>, <expr><literal type="string">"xar2"</literal></expr>, <expr><literal type="string">"xar3"</literal></expr>, <expr><literal type="string">"xar4"</literal></expr>, <expr><literal type="string">"xar5"</literal></expr>, <expr><literal type="string">"xar6"</literal></expr>, <expr><literal type="string">"xar7"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>table</name><index>[ <expr><name>key</name> <operator>&amp;</operator> <literal type="number">15</literal></expr> ]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>get_freg_str</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>table</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"ac0"</literal></expr>, <expr><literal type="string">"ac1"</literal></expr>, <expr><literal type="string">"ac2"</literal></expr>, <expr><literal type="string">"ac3"</literal></expr>, <expr><literal type="string">"t0"</literal></expr>, <expr><literal type="string">"t1"</literal></expr>, <expr><literal type="string">"t2"</literal></expr>, <expr><literal type="string">"t3"</literal></expr>,

<expr><literal type="string">"ar0"</literal></expr>, <expr><literal type="string">"ar1"</literal></expr>, <expr><literal type="string">"ar2"</literal></expr>, <expr><literal type="string">"ar3"</literal></expr>, <expr><literal type="string">"ar4"</literal></expr>, <expr><literal type="string">"ar5"</literal></expr>, <expr><literal type="string">"ar6"</literal></expr>, <expr><literal type="string">"ar7"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>table</name><index>[ <expr><name>key</name> <operator>&amp;</operator> <literal type="number">15</literal></expr> ]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>get_swap_str</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <return>return <expr><literal type="string">"swap ac0, ac2"</literal></expr>;</return>

<case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><literal type="string">"swap ac1, ac3"</literal></expr>;</return>

<case>case <expr><literal type="number">4</literal></expr>:</case> <return>return <expr><literal type="string">"swap t0, t2"</literal></expr>;</return>

<case>case <expr><literal type="number">5</literal></expr>:</case> <return>return <expr><literal type="string">"swap t1, t3"</literal></expr>;</return>

<case>case <expr><literal type="number">8</literal></expr>:</case> <return>return <expr><literal type="string">"swap ar0, ar2"</literal></expr>;</return>

<case>case <expr><literal type="number">9</literal></expr>:</case> <return>return <expr><literal type="string">"swap ar1, ar3"</literal></expr>;</return>

<case>case <expr><literal type="number">12</literal></expr>:</case> <return>return <expr><literal type="string">"swap ar4, t0"</literal></expr>;</return>

<case>case <expr><literal type="number">13</literal></expr>:</case> <return>return <expr><literal type="string">"swap ar5, t1"</literal></expr>;</return>

<case>case <expr><literal type="number">14</literal></expr>:</case> <return>return <expr><literal type="string">"swap ar6, t2"</literal></expr>;</return>

<case>case <expr><literal type="number">15</literal></expr>:</case> <return>return <expr><literal type="string">"swap ar7, t3"</literal></expr>;</return>

<case>case <expr><literal type="number">16</literal></expr>:</case> <return>return <expr><literal type="string">"swapp ac0, ac2"</literal></expr>;</return>

<case>case <expr><literal type="number">20</literal></expr>:</case> <return>return <expr><literal type="string">"swapp t0, t2"</literal></expr>;</return>

<case>case <expr><literal type="number">24</literal></expr>:</case> <return>return <expr><literal type="string">"swapp ar0, ar2"</literal></expr>;</return>

<case>case <expr><literal type="number">28</literal></expr>:</case> <return>return <expr><literal type="string">"swapp ar4, t0"</literal></expr>;</return>

<case>case <expr><literal type="number">30</literal></expr>:</case> <return>return <expr><literal type="string">"swapp ar6, t2"</literal></expr>;</return>

<case>case <expr><literal type="number">44</literal></expr>:</case> <return>return <expr><literal type="string">"swap4 ar4, t0"</literal></expr>;</return>

<case>case <expr><literal type="number">56</literal></expr>:</case> <return>return <expr><literal type="string">"swap ar0, ar1"</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="string">"invalid"</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>get_relop_str</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>table</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"=="</literal></expr>, <expr><literal type="string">"&lt;"</literal></expr>, <expr><literal type="string">"&gt;="</literal></expr>, <expr><literal type="string">"!="</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>table</name><index>[ <expr><name>key</name> <operator>&amp;</operator> <literal type="number">3</literal></expr> ]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>get_cond_str</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>key</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>op</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"=="</literal></expr>, <expr><literal type="string">"!="</literal></expr>, <expr><literal type="string">"&lt;"</literal></expr>, <expr><literal type="string">"&lt;="</literal></expr>, <expr><literal type="string">"&gt;"</literal></expr>, <expr><literal type="string">"&gt;="</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%s %s 0"</literal></expr></argument>, <argument><expr><call><name>get_freg_str</name><argument_list>(<argument><expr><name>key</name> <operator>&amp;</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>op</name><index>[<expr><operator>(</operator><name>key</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>key</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x18</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"overflow(ac%d)"</literal></expr></argument>, <argument><expr><name>key</name> <operator>&amp;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>key</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x1C</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"!overflow(ac%d)"</literal></expr></argument>, <argument><expr><name>key</name> <operator>&amp;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x64</literal></expr>:</case> <return>return <expr><literal type="string">"tc1"</literal></expr>;</return>

<case>case <expr><literal type="number">0x65</literal></expr>:</case> <return>return <expr><literal type="string">"tc2"</literal></expr>;</return>

<case>case <expr><literal type="number">0x66</literal></expr>:</case> <return>return <expr><literal type="string">"carry"</literal></expr>;</return>

<case>case <expr><literal type="number">0x74</literal></expr>:</case> <return>return <expr><literal type="string">"!tc1"</literal></expr>;</return>

<case>case <expr><literal type="number">0x75</literal></expr>:</case> <return>return <expr><literal type="string">"!tc2"</literal></expr>;</return>

<case>case <expr><literal type="number">0x76</literal></expr>:</case> <return>return <expr><literal type="string">"!carry"</literal></expr>;</return>

<case>case <expr><literal type="number">0x68</literal></expr>:</case> <return>return <expr><literal type="string">"tc1 &amp; tc2"</literal></expr>;</return>

<case>case <expr><literal type="number">0x69</literal></expr>:</case> <return>return <expr><literal type="string">"tc1 &amp; !tc2"</literal></expr>;</return>

<case>case <expr><literal type="number">0x6A</literal></expr>:</case> <return>return <expr><literal type="string">"!tc1 &amp; tc2"</literal></expr>;</return>

<case>case <expr><literal type="number">0x6B</literal></expr>:</case> <return>return <expr><literal type="string">"!tc1 &amp; !tc2"</literal></expr>;</return>

<case>case <expr><literal type="number">0x78</literal></expr>:</case> <return>return <expr><literal type="string">"tc1 | tc2"</literal></expr>;</return>

<case>case <expr><literal type="number">0x79</literal></expr>:</case> <return>return <expr><literal type="string">"tc1 | !tc2"</literal></expr>;</return>

<case>case <expr><literal type="number">0x7A</literal></expr>:</case> <return>return <expr><literal type="string">"!tc1 | tc2"</literal></expr>;</return>

<case>case <expr><literal type="number">0x7B</literal></expr>:</case> <return>return <expr><literal type="string">"!tc1 | !tc2"</literal></expr>;</return>

<case>case <expr><literal type="number">0x7C</literal></expr>:</case> <return>return <expr><literal type="string">"tc1 ^ tc2"</literal></expr>;</return>

<case>case <expr><literal type="number">0x7D</literal></expr>:</case> <return>return <expr><literal type="string">"tc1 ^ !tc2"</literal></expr>;</return>

<case>case <expr><literal type="number">0x7E</literal></expr>:</case> <return>return <expr><literal type="string">"!tc1 ^ tc2"</literal></expr>;</return>

<case>case <expr><literal type="number">0x7F</literal></expr>:</case> <return>return <expr><literal type="string">"!tc1 ^ !tc2"</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="string">"invalid"</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>get_v_str</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"carry"</literal></expr>, <expr><literal type="string">"tc2"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>table</name><index>[ <expr><name>key</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>get_t_str</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"tc1"</literal></expr>, <expr><literal type="string">"tc2"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>table</name><index>[ <expr><name>key</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>get_cmem_str</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>table</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"*cdp"</literal></expr>, <expr><literal type="string">"*cdp+"</literal></expr>, <expr><literal type="string">"*cdp-"</literal></expr>, <expr><literal type="string">"*(cdp+t0)"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>table</name><index>[ <expr><name>key</name> <operator>&amp;</operator> <literal type="number">3</literal></expr> ]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>get_smem_str</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>key</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IDA_COMPATIBLE_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"*sp(#%Xh)"</literal></expr></argument>, <argument><expr><name>key</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"@0x%02X"</literal></expr></argument>, <argument><expr><name>key</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x11</literal></expr>:</case> <return>return <expr><literal type="string">"abs16(k16)"</literal></expr>;</return>

<case>case <expr><literal type="number">0x31</literal></expr>:</case> <return>return <expr><literal type="string">"*(k23)"</literal></expr>;</return>

<case>case <expr><literal type="number">0x51</literal></expr>:</case> <return>return <expr><literal type="string">"port(k16)"</literal></expr>;</return>

<case>case <expr><literal type="number">0x71</literal></expr>:</case> <return>return <expr><literal type="string">"*cdp"</literal></expr>;</return>

<case>case <expr><literal type="number">0x91</literal></expr>:</case> <return>return <expr><literal type="string">"*cdp+"</literal></expr>;</return>

<case>case <expr><literal type="number">0xB1</literal></expr>:</case> <return>return <expr><literal type="string">"*cdp-"</literal></expr>;</return>

<case>case <expr><literal type="number">0xD1</literal></expr>:</case> <return>return <expr><literal type="string">"*cdp(K16)"</literal></expr>;</return>

<case>case <expr><literal type="number">0xF1</literal></expr>:</case> <return>return <expr><literal type="string">"*+cdp(K16)"</literal></expr>;</return>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>key</name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x01</literal></expr>:</case> <return>return <expr><literal type="string">"*ARn"</literal></expr>;</return>

<case>case <expr><literal type="number">0x03</literal></expr>:</case> <return>return <expr><literal type="string">"*ARn+"</literal></expr>;</return>

<case>case <expr><literal type="number">0x05</literal></expr>:</case> <return>return <expr><literal type="string">"*ARn-"</literal></expr>;</return>

<case>case <expr><literal type="number">0x07</literal></expr>:</case> <return>return <expr><literal type="string">"*(ARn + t0)"</literal></expr>;</return>

<case>case <expr><literal type="number">0x09</literal></expr>:</case> <return>return <expr><literal type="string">"*(ARn - t0)"</literal></expr>;</return>

<case>case <expr><literal type="number">0x0B</literal></expr>:</case> <return>return <expr><literal type="string">"*ARn(t0)"</literal></expr>;</return>

<case>case <expr><literal type="number">0x0D</literal></expr>:</case> <return>return <expr><literal type="string">"*ARn(k16)"</literal></expr>;</return>

<case>case <expr><literal type="number">0x0F</literal></expr>:</case> <return>return <expr><literal type="string">"*+ARn(k16)"</literal></expr>;</return>

<case>case <expr><literal type="number">0x13</literal></expr>:</case> <return>return <expr><literal type="string">"*(ARn + t1)"</literal></expr>;</return>

<case>case <expr><literal type="number">0x15</literal></expr>:</case> <return>return <expr><literal type="string">"*(ARn - t1)"</literal></expr>;</return>

<case>case <expr><literal type="number">0x17</literal></expr>:</case> <return>return <expr><literal type="string">"*ARn(t1)"</literal></expr>;</return>

<case>case <expr><literal type="number">0x19</literal></expr>:</case> <return>return <expr><literal type="string">"*+ARn"</literal></expr>;</return>

<case>case <expr><literal type="number">0x1B</literal></expr>:</case> <return>return <expr><literal type="string">"*-ARn"</literal></expr>;</return>

<case>case <expr><literal type="number">0x1D</literal></expr>:</case> <return>return <expr><literal type="string">"*(ARn + t0b)"</literal></expr>;</return>

<case>case <expr><literal type="number">0x1F</literal></expr>:</case> <return>return <expr><literal type="string">"*(ARn - t0b)"</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="string">"invalid"</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>get_mmm_str</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>key</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<default>default:</default>

<case>case <expr><literal type="number">0x00</literal></expr>:</case> <return>return <expr><literal type="string">"*ARn"</literal></expr>;</return>

<case>case <expr><literal type="number">0x01</literal></expr>:</case> <return>return <expr><literal type="string">"*ARn+"</literal></expr>;</return>

<case>case <expr><literal type="number">0x02</literal></expr>:</case> <return>return <expr><literal type="string">"*ARn-"</literal></expr>;</return>

<case>case <expr><literal type="number">0x03</literal></expr>:</case> <return>return <expr><literal type="string">"*(ARn + t0)"</literal></expr>;</return>

<case>case <expr><literal type="number">0x04</literal></expr>:</case> <return>return <expr><literal type="string">"*(ARn + t1)"</literal></expr>;</return>

<case>case <expr><literal type="number">0x05</literal></expr>:</case> <return>return <expr><literal type="string">"*(ARn - t0)"</literal></expr>;</return>

<case>case <expr><literal type="number">0x06</literal></expr>:</case> <return>return <expr><literal type="string">"*(ARn - t1)"</literal></expr>;</return>

<case>case <expr><literal type="number">0x07</literal></expr>:</case> <return>return <expr><literal type="string">"*ARn(t0)"</literal></expr>;</return>

</block_content>}</block></switch><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>decode_bits</name><parameter_list>(<parameter><decl><type><name>tms320_dasm_t</name> <modifier>*</modifier></type> <name>dasm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"[r]"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"r"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"[u]"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"u"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"[40]"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"40"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"[T3 = ]"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>U</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"t3="</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>decode_braces</name><parameter_list>(<parameter><decl><type><name>tms320_dasm_t</name> <modifier>*</modifier></type> <name>dasm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"[(saturate]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>replace</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="string">"[)"</literal></expr></argument>, <argument><expr><literal type="string">")["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>replace</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"[(saturate]"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"(saturate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"[rnd(]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>replace</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="string">"[)"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">")["</literal></expr> </then><else>: <expr><literal type="string">"["</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>replace</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"[rnd(]"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"rnd("</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"[uns(]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>replace</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="string">"[)"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">")["</literal></expr> </then><else>: <expr><literal type="string">"["</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>replace</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"[uns(]"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"uns("</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>parallel</name> <init>= <expr><operator>!</operator><operator>!</operator><call><name>strstr</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"::"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>replace</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"[uns(]"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>uu</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="string">"uns("</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>replace</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"[)]"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>uu</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="string">")"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>parallel</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>replace</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"[uns(]"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>uu</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="string">"uns("</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>replace</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"[)]"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>uu</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="string">")"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>replace</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"[uns(]"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>uu</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"uns("</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>replace</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"[)]"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>uu</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">")"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>parallel</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>replace</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"[uns(]"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>uu</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"uns("</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>replace</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"[)]"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>uu</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">")"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"[]"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>decode_constants</name><parameter_list>(<parameter><decl><type><name>tms320_dasm_t</name> <modifier>*</modifier></type> <name>dasm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>K8</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"K8"</literal></expr></argument>, <argument><expr><literal type="string">"0x%02X"</literal></expr></argument>, <argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>K8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>K16</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"K16"</literal></expr></argument>, <argument><expr><literal type="string">"0x%04X"</literal></expr></argument>, <argument><expr><call><name>be16</name> <argument_list>(<argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>K16</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"K4"</literal></expr></argument>, <argument><expr><literal type="string">"0x%01X"</literal></expr></argument>, <argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"k5"</literal></expr></argument>, <argument><expr><literal type="string">"0x%02X"</literal></expr></argument>, <argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k8</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"k8"</literal></expr></argument>, <argument><expr><literal type="string">"0x%02X"</literal></expr></argument>, <argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k12</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"k12"</literal></expr></argument>, <argument><expr><literal type="string">"0x%03X"</literal></expr></argument>, <argument><expr><call><name>be16</name> <argument_list>(<argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k12</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"k16"</literal></expr></argument>, <argument><expr><literal type="string">"0x%04X"</literal></expr></argument>, <argument><expr><call><name>be16</name> <argument_list>(<argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"k7"</literal></expr></argument>, <argument><expr><literal type="string">"0x%02X"</literal></expr></argument>, <argument><expr><operator>(</operator><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"k9"</literal></expr></argument>, <argument><expr><literal type="string">"0x%03X"</literal></expr></argument>, <argument><expr><operator>(</operator><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k5</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k8</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"k12"</literal></expr></argument>, <argument><expr><literal type="string">"0x%03X"</literal></expr></argument>, <argument><expr><operator>(</operator><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k8</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>D16</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"D16"</literal></expr></argument>, <argument><expr><literal type="string">"0x%04X"</literal></expr></argument>, <argument><expr><call><name>be16</name> <argument_list>(<argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>D16</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>SHFT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"#SHFT"</literal></expr></argument>, <argument><expr><literal type="string">"0x%01X"</literal></expr></argument>, <argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>SHFT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>SHIFTW</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"#SHIFTW"</literal></expr></argument>, <argument><expr><literal type="string">"0x%02X"</literal></expr></argument>, <argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>SHIFTW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>decode_addresses</name><parameter_list>(<parameter><decl><type><name>tms320_dasm_t</name> <modifier>*</modifier></type> <name>dasm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>L7</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"L7"</literal></expr></argument>, <argument><expr><literal type="string">"0x%02X"</literal></expr></argument>, <argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>L7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>L8</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"L8"</literal></expr></argument>, <argument><expr><literal type="string">"0x%02X"</literal></expr></argument>, <argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>L8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>L16</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"L16"</literal></expr></argument>, <argument><expr><literal type="string">"0x%04X"</literal></expr></argument>, <argument><expr><call><name>be16</name> <argument_list>(<argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>L16</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>l3</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"l4"</literal></expr></argument>, <argument><expr><literal type="string">"0x%01X"</literal></expr></argument>, <argument><expr><operator>(</operator><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>l3</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>l7</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"pmad"</literal></expr></argument>, <argument><expr><literal type="string">"0x%02X"</literal></expr></argument>, <argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>l7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>l16</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"pmad"</literal></expr></argument>, <argument><expr><literal type="string">"0x%04X"</literal></expr></argument>, <argument><expr><call><name>be16</name> <argument_list>(<argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>l16</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>P8</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"P8"</literal></expr></argument>, <argument><expr><literal type="string">"0x%02X"</literal></expr></argument>, <argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>P8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>P24</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"P24"</literal></expr></argument>, <argument><expr><literal type="string">"0x%06X"</literal></expr></argument>, <argument><expr><call><name>be24</name> <argument_list>(<argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>P24</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>decode_swap</name><parameter_list>(<parameter><decl><type><name>tms320_dasm_t</name> <modifier>*</modifier></type> <name>dasm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k6</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"SWAP ( )"</literal></expr></argument>, <argument><expr><call><name>get_swap_str</name> <argument_list>(<argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>k6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>decode_relop</name><parameter_list>(<parameter><decl><type><name>tms320_dasm_t</name> <modifier>*</modifier></type> <name>dasm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"RELOP"</literal></expr></argument>, <argument><expr><call><name>get_relop_str</name> <argument_list>(<argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>decode_cond</name><parameter_list>(<parameter><decl><type><name>tms320_dasm_t</name> <modifier>*</modifier></type> <name>dasm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>CCCCCCC</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"cond"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_cond_str</name> <argument_list>(<argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>CCCCCCC</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"[label, ]"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>decode_registers</name><parameter_list>(<parameter><decl><type><name>tms320_dasm_t</name> <modifier>*</modifier></type> <name>dasm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"TRNx"</literal></expr></argument>, <argument><expr><literal type="string">"trn%d"</literal></expr></argument>, <argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"Tx"</literal></expr></argument>, <argument><expr><literal type="string">"t%d"</literal></expr></argument>, <argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>dd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"Tx"</literal></expr></argument>, <argument><expr><literal type="string">"t%d"</literal></expr></argument>, <argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>dd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>vv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"BitIn"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_v_str</name><argument_list>(<argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>vv</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"BitOut"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_v_str</name><argument_list>(<argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>vv</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"TCx"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_t_str</name> <argument_list>(<argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>tt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"TCx"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_t_str</name><argument_list>(<argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>tt</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"TCy"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_t_str</name><argument_list>(<argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>tt</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>XSSS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"xsrc"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_xreg_str</name><argument_list>(<argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>XSSS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"XAsrc"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_xreg_str</name><argument_list>(<argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>XSSS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>XDDD</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"xdst"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_xreg_str</name><argument_list>(<argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>XDDD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"XAdst"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_xreg_str</name><argument_list>(<argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>XDDD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>FSSS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>FSSS</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"[src,] dst"</literal></expr></argument>, <argument><expr><literal type="string">"dst"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"[src,] dst"</literal></expr></argument>, <argument><expr><literal type="string">"src, dst"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>FSSS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"src1"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_freg_str</name><argument_list>(<argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"src2"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_freg_str</name><argument_list>(<argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"dst1"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_freg_str</name><argument_list>(<argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"dst2"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_freg_str</name><argument_list>(<argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>&amp;=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>|=</operator> <ternary><condition><expr><call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0x01</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>|=</operator> <ternary><condition><expr><call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0x02</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x01</literal></expr>:</case> 

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"TAx"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_freg_str</name><argument_list>(<argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x02</literal></expr>:</case> 

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"TAx"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_freg_str</name><argument_list>(<argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"TAy"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_freg_str</name><argument_list>(<argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x03</literal></expr>:</case> 

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"TAx"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_freg_str</name><argument_list>(<argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"TAy"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_freg_str</name><argument_list>(<argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"src"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_freg_str</name><argument_list>(<argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"dst"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_freg_str</name><argument_list>(<argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>XACS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"XACsrc"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_xreg_str</name> <argument_list>(<argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>XACS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>XACD</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"XACdst"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_xreg_str</name> <argument_list>(<argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>XACD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>&amp;=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>|=</operator> <ternary><condition><expr><call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0x01</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>|=</operator> <ternary><condition><expr><call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>SS2</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0x02</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>|=</operator> <ternary><condition><expr><call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0x10</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>|=</operator> <ternary><condition><expr><call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>DD2</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0x20</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x01</literal></expr>:</case> 

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"ACx"</literal></expr></argument>, <argument><expr><literal type="string">"ac%d"</literal></expr></argument>, <argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x03</literal></expr>:</case> 

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"ACx"</literal></expr></argument>, <argument><expr><literal type="string">"ac%d"</literal></expr></argument>, <argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"ACy"</literal></expr></argument>, <argument><expr><literal type="string">"ac%d"</literal></expr></argument>, <argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>SS2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x11</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>SS</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"[, ACy]"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"[ACx,] ACy"</literal></expr></argument>, <argument><expr><literal type="string">"ACy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"[, ACy]"</literal></expr></argument>, <argument><expr><literal type="string">", ACy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"[ACx,] ACy"</literal></expr></argument>, <argument><expr><literal type="string">"ACx, ACy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"ACx"</literal></expr></argument>, <argument><expr><literal type="string">"ac%d"</literal></expr></argument>, <argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"ACy"</literal></expr></argument>, <argument><expr><literal type="string">"ac%d"</literal></expr></argument>, <argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x33</literal></expr>:</case> 

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"ACx"</literal></expr></argument>, <argument><expr><literal type="string">"ac%d"</literal></expr></argument>, <argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"ACy"</literal></expr></argument>, <argument><expr><literal type="string">"ac%d"</literal></expr></argument>, <argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>SS2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"ACz"</literal></expr></argument>, <argument><expr><literal type="string">"ac%d"</literal></expr></argument>, <argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"ACw"</literal></expr></argument>, <argument><expr><literal type="string">"ac%d"</literal></expr></argument>, <argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>DD2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x10</literal></expr>:</case> 

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"ACx"</literal></expr></argument>, <argument><expr><literal type="string">"ac%d"</literal></expr></argument>, <argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x30</literal></expr>:</case> 

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"ACx"</literal></expr></argument>, <argument><expr><literal type="string">"ac%d"</literal></expr></argument>, <argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"ACy"</literal></expr></argument>, <argument><expr><literal type="string">"ac%d"</literal></expr></argument>, <argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>DD2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>decode_addressing_modes</name><parameter_list>(<parameter><decl><type><name>tms320_dasm_t</name> <modifier>*</modifier></type> <name>dasm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"Cmem"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_cmem_str</name> <argument_list>(<argument><expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>Xmem_reg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>Xmem_mmm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"Xmem"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_mmm_str</name><argument_list>(<argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>Xmem_mmm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"ARn"</literal></expr></argument>, <argument><expr><literal type="string">"ar%d"</literal></expr></argument>, <argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>Xmem_reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>Ymem_reg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>Ymem_mmm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"Ymem"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_mmm_str</name><argument_list>(<argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>Ymem_mmm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"ARn"</literal></expr></argument>, <argument><expr><literal type="string">"ar%d"</literal></expr></argument>, <argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>Ymem_reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_smem_str</name><argument_list>(<argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"k16"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"k16"</literal></expr></argument>, <argument><expr><literal type="string">"0x%04X"</literal></expr></argument>, <argument><expr><call><name>be16</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>ut16</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>dasm</name><operator>-&gt;</operator><name>stream</name></name> <operator>+</operator> <name><name>dasm</name><operator>-&gt;</operator><name>length</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dasm</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"k23"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"k23"</literal></expr></argument>, <argument><expr><literal type="string">"0x%06X"</literal></expr></argument>, <argument><expr><call><name>be24</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>ut32</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>dasm</name><operator>-&gt;</operator><name>stream</name></name> <operator>+</operator> <name><name>dasm</name><operator>-&gt;</operator><name>length</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7FFFFF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dasm</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"K16"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"K16"</literal></expr></argument>, <argument><expr><literal type="string">"0x%04X"</literal></expr></argument>, <argument><expr><call><name>be16</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>ut16</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>dasm</name><operator>-&gt;</operator><name>stream</name></name> <operator>+</operator> <name><name>dasm</name><operator>-&gt;</operator><name>length</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dasm</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"ARn"</literal></expr></argument>, <argument><expr><literal type="string">"ar%d"</literal></expr></argument>, <argument><expr><call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"Smem"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"Lmem"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>decode_qualifiers</name><parameter_list>(<parameter><decl><type><name>tms320_dasm_t</name> <modifier>*</modifier></type> <name>dasm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>dasm</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name><name>dasm</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x98</literal></expr>:</case>

<break>break;</break>

<case>case <expr><literal type="number">0x99</literal></expr>:</case>

<break>break;</break>

<case>case <expr><literal type="number">0x9a</literal></expr>:</case>

<break>break;</break>

<case>case <expr><literal type="number">0x9c</literal></expr>:</case>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>q_lr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x9d</literal></expr>:</case>

<expr_stmt><expr><call><name>set_field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>q_cr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>insn_item_t</name> <modifier>*</modifier></type> <name>finalize</name><parameter_list>(<parameter><decl><type><name>tms320_dasm_t</name> <modifier>*</modifier></type> <name>dasm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>substitute</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>q_lr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>replace</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="string">".lr "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>q_cr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>replace</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="string">".cr "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>dasm</name><operator>-&gt;</operator><name>insn</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>insn_item_t</name> <modifier>*</modifier></type> <name>decode_insn</name><parameter_list>(<parameter><decl><type><name>tms320_dasm_t</name> <modifier>*</modifier></type> <name>dasm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>dasm</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>dasm</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, \

<argument><expr><ternary><condition><expr><call><name>field_valid</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>E</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>field_value</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>E</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"|| %s"</literal></expr> </then><else>: <expr><literal type="string">"%s"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>insn</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_bits</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_braces</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_qualifiers</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_constants</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_addresses</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_swap</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_relop</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_cond</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_registers</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_addressing_modes</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>finalize</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>insn_item_t</name> <modifier>*</modifier></type> <name>decode_insn_head</name><parameter_list>(<parameter><decl><type><name>tms320_dasm_t</name> <modifier>*</modifier></type> <name>dasm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>run_f_list</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dasm</name><operator>-&gt;</operator><name>insn</name><operator>-&gt;</operator><name>i_list</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dasm</name><operator>-&gt;</operator><name>insn</name></name> <operator>=</operator> <name><name>dasm</name><operator>-&gt;</operator><name>insn</name><operator>-&gt;</operator><name>i_list</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>i_list_last</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>insn</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>run_m_list</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>run_f_list</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dasm</name><operator>-&gt;</operator><name>insn</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>i_list_last</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>insn</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>decode_insn</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>ut8</name></type> <name><name>c55x_e_list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0x60</literal></expr>, 

<expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, 

<expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, 

<expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, 

<expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, 

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>insn_head_t</name> <modifier>*</modifier></type> <name>lookup_insn_head</name><parameter_list>(<parameter><decl><type><name>tms320_dasm_t</name> <modifier>*</modifier></type> <name>dasm</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type> <name>e_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tms320_f_get_cpu</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TMS320_F_CPU_C55X</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>e_list</name> <operator>=</operator> <name>c55x_e_list</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>e_list</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>e_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>e_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dasm</name><operator>-&gt;</operator><name>opcode</name></name> <operator>&amp;</operator> <name><name>e_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>==</operator> <name><name>e_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dasm</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <call><name>ht_up_find</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name><name>e_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e_list</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dasm</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dasm</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <call><name>ht_up_find</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>opcode</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dasm</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dasm</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <call><name>ht_up_find</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>dasm</name><operator>-&gt;</operator><name>opcode</name></name> <operator>&amp;</operator> <literal type="number">0xfe</literal><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dasm</name><operator>-&gt;</operator><name>insn</name></name> <operator>=</operator> <ternary><condition><expr><name><name>dasm</name><operator>-&gt;</operator><name>head</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>dasm</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>insn</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name><name>dasm</name><operator>-&gt;</operator><name>head</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_dasm</name><parameter_list>(<parameter><decl><type><name>tms320_dasm_t</name> <modifier>*</modifier></type> <name>dasm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><call><name>min</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dasm</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dasm</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dasm</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dasm</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dasm</name><operator>-&gt;</operator><name>insn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>full_insn_size</name><parameter_list>(<parameter><decl><type><name>tms320_dasm_t</name> <modifier>*</modifier></type> <name>dasm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>qualifier_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>q_cr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>qualifier_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>field_value</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>q_lr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>qualifier_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>dasm</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>qualifier_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>tms320_dasm</name><parameter_list>(<parameter><decl><type><name>tms320_dasm_t</name> <modifier>*</modifier></type> <name>dasm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>init_dasm</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tms320_f_get_cpu</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TMS320_F_CPU_C55X_PLUS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>lookup_insn_head</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>decode_insn_head</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dasm</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dasm</name><operator>-&gt;</operator><name>status</name></name> <operator>|=</operator> <name>TMS320_S_INVAL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>c55x_plus_disassemble</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dasm</name><operator>-&gt;</operator><name>status</name></name> <operator>|=</operator> <name>TMS320_S_INVAL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dasm</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;</operator> <name>TMS320_S_INVAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>syntax</name></name></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>dasm</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>full_insn_size</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>insn_head_t</name></type> <name><name>c55x_list</name><index>[]</index></name> <init>= <expr><block>{

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c55x/table.h"</cpp:file></cpp:include>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>tms320_dasm_init</name><parameter_list>(<parameter><decl><type><name>tms320_dasm_t</name> <modifier>*</modifier></type> <name>dasm</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dasm</name><operator>-&gt;</operator><name>map</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dasm</name><operator>-&gt;</operator><name>map</name></name> <operator>=</operator> <call><name>ht_up_new0</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dasm</name><operator>-&gt;</operator><name>map</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>c55x_list</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ht_up_insert</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name><name>c55x_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>byte</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c55x_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>tms320_f_set_cpu</name><argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><name>TMS320_F_CPU_C55X</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>tms320_dasm_fini</name><parameter_list>(<parameter><decl><type><name>tms320_dasm_t</name> <modifier>*</modifier></type> <name>dasm</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dasm</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dasm</name><operator>-&gt;</operator><name>map</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ht_up_free</name> <argument_list>(<argument><expr><name><name>dasm</name><operator>-&gt;</operator><name>map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>dasm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tms320_dasm_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
