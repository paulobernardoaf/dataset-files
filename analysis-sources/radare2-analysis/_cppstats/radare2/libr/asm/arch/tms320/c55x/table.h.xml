<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\tms320\c55x\table.h"><block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x00</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>CCCCCCC</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>k8</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>rptcc k8</argument>, <argument>cond</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>CCCCCCC</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>retcc cond</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>CCCCCCC</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>L8</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>bcc L8</argument>, <argument>cond</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x06</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>L16</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>b L16</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x08</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>L16</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>call L16</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x0c</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>rpt k16</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x0e</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>l16</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>rptb pmad</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x10</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>SHIFTW</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>and ACx &lt;&lt; #SHIFTW[</argument>, <argument>ACy]</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>SHIFTW</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>or ACx &lt;&lt; #SHIFTW[</argument>, <argument>ACy]</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>SHIFTW</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>xor ACx &lt;&lt; #SHIFTW[</argument>, <argument>ACy]</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>SHIFTW</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>add ACx &lt;&lt; #SHIFTW</argument>, <argument>ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>SHIFTW</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sub ACx &lt;&lt; #SHIFTW</argument>, <argument>ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>SHIFTW</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sfts ACx</argument>, <argument>#SHIFTW[</argument>, <argument>ACy]</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>SHIFTW</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sftsc ACx</argument>, <argument>#SHIFTW[</argument>, <argument>ACy]</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>SHIFTW</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sftl ACx</argument>, <argument>#SHIFTW[</argument>, <argument>ACy]</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>dd</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>exp ACx</argument>, <argument>Tx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>dd</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mant ACx</argument>, <argument>ACy :: nexp ACx</argument>, <argument>Tx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>dd</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>bcnt ACx</argument>, <argument>ACy</argument>, <argument>TCx</argument>, <argument>Tx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>maxdiff ACx</argument>, <argument>ACy</argument>, <argument>ACz</argument>, <argument>ACw</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>dmaxdiff ACx</argument>, <argument>ACy</argument>, <argument>ACz</argument>, <argument>ACw</argument>, <argument>TRNx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mindiff ACx</argument>, <argument>ACy</argument>, <argument>ACz</argument>, <argument>ACw</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>dmindiff ACx</argument>, <argument>ACy</argument>, <argument>ACz</argument>, <argument>ACw</argument>, <argument>TRNx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x12</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>tt</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>cmpand[u] src RELOP dst</argument>, <argument>TCy</argument>, <argument>TCx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>tt</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>cmpand[u] src RELOP dst</argument>, <argument>!TCy</argument>, <argument>TCx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>tt</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>cmpor[u] src RELOP dst</argument>, <argument>TCy</argument>, <argument>TCx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>tt</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>cmpor[u] src RELOP dst</argument>, <argument>!TCy</argument>, <argument>TCx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>vv</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>rol BitOut</argument>, <argument>src</argument>, <argument>BitIn</argument>, <argument>dst</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>vv</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>ror BitIn</argument>, <argument>src</argument>, <argument>BitOut</argument>, <argument>dst</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>cmp[u] src RELOP dst</argument>, <argument>TCx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x14</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>XACS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>XACD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>aadd XACsrc</argument>, <argument>XACdst</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>XACS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>XACD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>amov XACsrc</argument>, <argument>XACdst</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>XACS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>XACD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>asub XACsrc</argument>, <argument>XACdst</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>XACS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>XACD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>aadd XACsrc</argument>, <argument>XACdst</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>XACS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>XACD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>amov XACsrc</argument>, <argument>XACdst</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>XACS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>XACD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>asub XACsrc</argument>, <argument>XACdst</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>aadd TAx</argument>, <argument>TAy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>amov TAx</argument>, <argument>TAy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>asub TAx</argument>, <argument>TAy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>P8</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>aadd P8</argument>, <argument>TAx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>P8</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>amov P8</argument>, <argument>TAx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>P8</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>asub P8</argument>, <argument>TAx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>aadd TAx</argument>, <argument>TAy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>amov TAx</argument>, <argument>TAy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>asub TAx</argument>, <argument>TAy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>P8</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>aadd P8</argument>, <argument>TAx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>P8</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>amov P8</argument>, <argument>TAx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>P8</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>asub P8</argument>, <argument>TAx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x16</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k3</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov k7</argument>, <argument>dph</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k5</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov k9</argument>, <argument>pdp</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k8</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov k12</argument>, <argument>bk03</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k8</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov k12</argument>, <argument>bk47</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k8</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov k12</argument>, <argument>bkc</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k8</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov k12</argument>, <argument>csr</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k8</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov k12</argument>, <argument>brc0</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k8</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov k12</argument>, <argument>brc1</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x18</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k8</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>and k8</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x1a</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k8</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>or k8</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x1c</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k8</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>xor k8</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x1e</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>K8</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mpyk</name><index>[<expr><name>r</name></expr>]</index></name> <name>K8</name></expr></argument>, <argument><expr><index>[<expr><name>ACx</name></expr><operator>,</operator>]</index> <name>ACy</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>K8</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mack</name><index>[<expr><name>r</name></expr>]</index></name> <name>Tx</name></expr></argument>, <argument><expr><name>K8</name></expr></argument>, <argument><expr><index>[<expr><name>ACx</name></expr><operator>,</operator>]</index> <name>ACy</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x20</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x01</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name>nop</name></expr></argument>)</argument_list></call></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x22</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov src</argument>, <argument>dst</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x24</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>add</name> <index>[<expr><name>src</name></expr><operator>,</operator>]</index></name> <name>dst</name></expr></argument>)</argument_list></call></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x26</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>sub</name> <index>[<expr><name>src</name></expr><operator>,</operator>]</index></name> <name>dst</name></expr></argument>)</argument_list></call></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x28</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>and src</argument>, <argument>dst</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x2a</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>or src</argument>, <argument>dst</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x2c</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>xor src</argument>, <argument>dst</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x2e</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>max</name> <index>[<expr><name>src</name></expr><operator>,</operator>]</index></name> <name>dst</name></expr></argument>)</argument_list></call></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x30</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>min</name> <index>[<expr><name>src</name></expr><operator>,</operator>]</index></name> <name>dst</name></expr></argument>)</argument_list></call></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x32</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>abs</name> <index>[<expr><name>src</name></expr><operator>,</operator>]</index></name> <name>dst</name></expr></argument>)</argument_list></call></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x34</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>neg</name> <index>[<expr><name>src</name></expr><operator>,</operator>]</index></name> <name>dst</name></expr></argument>)</argument_list></call></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x36</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>not</name> <index>[<expr><name>src</name></expr><operator>,</operator>]</index></name> <name>dst</name></expr></argument>)</argument_list></call></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x38</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>psh src1</argument>, <argument>src2</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x3a</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>pop dst1</argument>, <argument>dst2</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x3c</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov K4</argument>, <argument>dst</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x3e</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name>mov</name> <operator>-</operator><name>K4</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x40</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>add K4</argument>, <argument>dst</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x42</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sub K4</argument>, <argument>dst</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x44</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov sp</argument>, <argument>TAx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov ssp</argument>, <argument>TAx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov cdp</argument>, <argument>TAx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov brc0</argument>, <argument>TAx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov brc1</argument>, <argument>TAx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov rptc</argument>, <argument>TAx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sfts dst</argument>, <argument>#-<literal type="number">1</literal></argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sfts dst</argument>, <argument>#<literal type="number">1</literal></argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov hi(ACx)</argument>, <argument>TAx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x46</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>bclr K4</argument>, <argument>st0_55</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>bset K4</argument>, <argument>st0_55</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>bclr K4</argument>, <argument>st1_55</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>bset K4</argument>, <argument>st1_55</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>bclr K4</argument>, <argument>st2_55</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>bset K4</argument>, <argument>st2_55</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>bclr K4</argument>, <argument>st3_55</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>bset K4</argument>, <argument>st3_55</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x48</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name>reti</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>rpt csr</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>rptadd csr</argument>, <argument>TAx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>rptadd csr</argument>, <argument>K4</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>rptsub csr</argument>, <argument>K4</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x4a</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>L7</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>b L7</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>l7</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>rptblocal pmad</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x4c</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k8</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>rpt k8</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x4e</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>K8</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>aadd K8</argument>, <argument>sp</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x50</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>XDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>popboth xdst</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>XSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>pshboth xsrc</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sftl dst</argument>, <argument>#<literal type="number">1</literal></argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sftl dst</argument>, <argument>#-<literal type="number">1</literal></argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>pop dst</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>pop dbl(ACx)</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>psh src</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>psh dbl(ACx)</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x52</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov TAx</argument>, <argument>sp</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov TAx</argument>, <argument>ssp</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov TAx</argument>, <argument>cdp</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov TAx</argument>, <argument>csr</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov TAx</argument>, <argument>brc1</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov TAx</argument>, <argument>brc0</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov TAx</argument>, <argument>hi(ACx)</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x54</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>add</name><index>[<expr><name>r</name></expr>]</index></name><name><name>v</name> <index>[<expr><name>ACx</name></expr><operator>,</operator>]</index></name> <name>ACy</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>sqa</name><index>[<expr><name>r</name></expr>]</index> <index>[<expr><name>ACx</name></expr><operator>,</operator>]</index></name> <name>ACy</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>sqs</name><index>[<expr><name>r</name></expr>]</index> <index>[<expr><name>ACx</name></expr><operator>,</operator>]</index></name> <name>ACy</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mpy</name><index>[<expr><name>r</name></expr>]</index> <index>[<expr><name>ACx</name></expr><operator>,</operator>]</index></name> <name>ACy</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>sqr</name><index>[<expr><name>r</name></expr>]</index> <index>[<expr><name>ACx</name></expr><operator>,</operator>]</index></name> <name>ACy</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>round</name> <index>[<expr><name>ACx</name></expr><operator>,</operator>]</index></name> <name>ACy</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>sat</name><index>[<expr><name>r</name></expr>]</index> <index>[<expr><name>ACx</name></expr><operator>,</operator>]</index></name> <name>ACy</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x56</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mac</name><index>[<expr><name>r</name></expr>]</index></name> <name>ACx</name></expr></argument>, <argument><expr><name>Tx</name></expr></argument>, <argument><expr><name><name>ACy</name><index>[<operator>,</operator> <name>ACy</name>]</index></name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mas</name><index>[<expr><name>r</name></expr>]</index></name> <name>Tx</name></expr></argument>, <argument><expr><index>[<expr><name>ACx</name></expr><operator>,</operator>]</index> <name>ACy</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x58</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mpy</name><index>[<expr><name>r</name></expr>]</index></name> <name>Tx</name></expr></argument>, <argument><expr><index>[<expr><name>ACx</name></expr><operator>,</operator>]</index> <name>ACy</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mac</name><index>[<expr><name>r</name></expr>]</index></name> <name>ACy</name></expr></argument>, <argument><expr><name>Tx</name></expr></argument>, <argument><expr><name>ACx</name></expr></argument>, <argument><expr><name>ACy</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x5a</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>add ACx &lt;&lt; Tx</argument>, <argument>ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sub ACx &lt;&lt; Tx</argument>, <argument>ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sftcc ACx</argument>, <argument>TCx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x5c</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sftl ACx</argument>, <argument>Tx[</argument>, <argument>ACy]</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sfts ACx</argument>, <argument>Tx[</argument>, <argument>ACy]</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sftsc ACx</argument>, <argument>Tx[</argument>, <argument>ACy]</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x5e</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k6</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><call><name>SWAP</name> <argument_list>( )</argument_list></call></expr></argument>)</argument_list></call></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x60</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>l3</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>CCCCCCC</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>,<argument><expr><name>l1</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>bcc l4</argument>, <argument>cond</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x68</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x05</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>CCCCCCC</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>P24</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>bcc P24</argument>, <argument>cond</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x69</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x05</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>CCCCCCC</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>P24</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>callcc P24</argument>, <argument>cond</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x6a</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>P24</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>b P24</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x6c</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>P24</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>call P24</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x6d</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>CCCCCCC</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>L16</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>bcc L16</argument>, <argument>cond</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x6e</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>CCCCCCC</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>L16</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>callcc L16</argument>, <argument>cond</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x6f</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>K8</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>L8</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>bcc[u] L8</argument>, <argument>src RELOP K8</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x70</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>K16</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>SHFT</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>add K16 &lt;&lt; #SHFT</argument>, <argument>[ACx</argument>,<argument>] ACy</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x71</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>K16</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>SHFT</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sub K16 &lt;&lt; #SHFT</argument>, <argument>[ACx</argument>,<argument>] ACy</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x72</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>SHFT</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>and k16 &lt;&lt; #SHFT</argument>, <argument>[ACx</argument>,<argument>] ACy</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x73</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>SHFT</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>or k16 &lt;&lt; #SHFT</argument>, <argument>[ACx</argument>,<argument>] ACy</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x74</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>SHFT</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>xor k16 &lt;&lt; #SHFT</argument>, <argument>[ACx</argument>,<argument>] ACy</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x75</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>K16</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>SHFT</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov K16 &lt;&lt; #SHFT</argument>, <argument>ACx</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x76</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>bfxtr k16</argument>, <argument>ACx</argument>, <argument>dst</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>bfxpa k16</argument>, <argument>ACx</argument>, <argument>dst</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>K16</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov K16</argument>, <argument>dst</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x77</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>D16</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>amov D16</argument>, <argument>TAx</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x78</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov k16</argument>, <argument>dp</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov k16</argument>, <argument>ssp</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov k16</argument>, <argument>cdp</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov k16</argument>, <argument>bsa01</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov k16</argument>, <argument>bsa23</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov k16</argument>, <argument>bsa45</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov k16</argument>, <argument>bsa67</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov k16</argument>, <argument>bsac</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov k16</argument>, <argument>sp</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x79</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>K16</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mpyk</name><index>[<expr><name>r</name></expr>]</index></name> <name>K16</name></expr></argument>, <argument><expr><index>[<expr><name>ACx</name></expr><operator>,</operator>]</index> <name>ACy</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>K16</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mack</name><index>[<expr><name>r</name></expr>]</index></name> <name>Tx</name></expr></argument>, <argument><expr><name>K16</name></expr></argument>, <argument><expr><index>[<expr><name>ACx</name></expr><operator>,</operator>]</index> <name>ACy</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x7a</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>K16</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>add K16 &lt;&lt; #<literal type="number">16</literal></argument>, <argument>[ACx</argument>,<argument>] ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>K16</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sub K16 &lt;&lt; #<literal type="number">16</literal></argument>, <argument>[ACx</argument>,<argument>] ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>and k16 &lt;&lt; #<literal type="number">16</literal></argument>, <argument>[ACx</argument>,<argument>] ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>or k16 &lt;&lt; #<literal type="number">16</literal></argument>, <argument>[ACx</argument>,<argument>] ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>xor k16 &lt;&lt; #<literal type="number">16</literal></argument>, <argument>[ACx</argument>,<argument>] ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>K16</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov K16 &lt;&lt; #<literal type="number">16</literal></argument>, <argument>ACx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name>idle</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x7b</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>K16</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>add K16</argument>, <argument>[src</argument>,<argument>] dst</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x7c</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>K16</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sub K16</argument>, <argument>[src</argument>,<argument>] dst</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x7d</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>and k16</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x7e</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>or k16</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x7f</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>xor k16</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x80</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov dbl(Xmem)</argument>, <argument>dbl(Ymem)</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Xmem</argument>, <argument>Ymem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov ACx</argument>, <argument>Xmem</argument>, <argument>Ymem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x81</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>add Xmem</argument>, <argument>Ymem</argument>, <argument>ACx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sub Xmem</argument>, <argument>Ymem</argument>, <argument>ACx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Xmem</argument>, <argument>Ymem</argument>, <argument>ACx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x82</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mpy</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Xmem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<name><name>Cmem</name><index>[)</index>]</name></expr>, <expr><name>ACx</name> <operator>::</operator> <name><name>mpy</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Ymem</name><index>[)</index>]</name></expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<name><name>Cmem</name><index>[)</index>]</name></expr>, <expr><name>ACy</name></expr>)<operator>,</operator></block></expr>

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Xmem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<name><name>Cmem</name><index>[)</index>]</name></expr>, <expr><name>ACx</name> <operator>::</operator> <name><name>mpy</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Ymem</name><index>[)</index>]</name></expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<name><name>Cmem</name><index>[)</index>]</name></expr>, <expr><name>ACy</name></expr>)<operator>,</operator></block></expr>

}</block></expr><operator>,</operator>

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mas</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Xmem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<name><name>Cmem</name><index>[)</index>]</name></expr>, <expr><name>ACx</name> <operator>::</operator> <name><name>mpy</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Ymem</name><index>[)</index>]</name></expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<name><name>Cmem</name><index>[)</index>]</name></expr>, <expr><name>ACy</name></expr>)<operator>,</operator>

}</block></expr></expr_stmt><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>amar Xmem :: mpy[r][<literal type="number">40</literal>] [uns(]Ymem[)]</argument>, <argument>[uns(]Cmem[)]</argument>, <argument>ACx</argument>)</argument_list></macro></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<expr_stmt><expr><name>LIST_END</name></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<expr_stmt><expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator></expr_stmt>

},

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x83</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Xmem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<name><name>Cmem</name><index>[)</index>]</name></expr>, <expr><name>ACx</name> <operator>::</operator> <name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Ymem</name><index>[)</index>]</name></expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<name><name>Cmem</name><index>[)</index>]</name></expr>, <expr><name>ACy</name></expr>)<operator>,</operator></block></expr>

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mas</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Xmem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<name><name>Cmem</name><index>[)</index>]</name></expr>, <expr><name>ACx</name> <operator>::</operator> <name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Ymem</name><index>[)</index>]</name></expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<name><name>Cmem</name><index>[)</index>]</name></expr>, <expr><name>ACy</name></expr>)<operator>,</operator></block></expr>

}</block></expr><operator>,</operator>

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Xmem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<name><name>Cmem</name><index>[)</index>]</name></expr>, <expr><name>ACx</name> <operator>&gt;&gt;</operator> <operator>#</operator><literal type="number">16</literal> <operator>::</operator> <name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Ymem</name><index>[)</index>]</name></expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<name><name>Cmem</name><index>[)</index>]</name></expr>, <expr><name>ACy</name></expr>)<operator>,</operator>

}</block></expr></expr_stmt><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>amar Xmem :: mac[r][<literal type="number">40</literal>] [uns(]Ymem[)]</argument>, <argument>[uns(]Cmem[)]</argument>, <argument>ACx</argument>)</argument_list></macro></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<expr_stmt><expr><name>LIST_END</name></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<expr_stmt><expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator></expr_stmt>

},

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x84</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mas</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Xmem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<name><name>Cmem</name><index>[)</index>]</name></expr>, <expr><name>ACx</name> <operator>::</operator> <name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Ymem</name><index>[)</index>]</name></expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<name><name>Cmem</name><index>[)</index>]</name></expr>, <expr><name>ACy</name> <operator>&gt;&gt;</operator> <operator>#</operator><literal type="number">16</literal></expr>)<operator>,</operator></block></expr>

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>amar Xmem :: mac[r][<literal type="number">40</literal>] [uns(]Ymem[)]</argument>, <argument>[uns(]Cmem[)]</argument>, <argument>ACx &gt;&gt; #<literal type="number">16</literal></argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mpy</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Xmem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<name><name>Cmem</name><index>[)</index>]</name></expr>, <expr><name>ACx</name> <operator>::</operator> <name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Ymem</name><index>[)</index>]</name></expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<name><name>Cmem</name><index>[)</index>]</name></expr>, <expr><name>ACy</name> <operator>&gt;&gt;</operator> <operator>#</operator><literal type="number">16</literal></expr>)<operator>,</operator></block></expr>

}</block></expr><operator>,</operator>

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Xmem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<name><name>Cmem</name><index>[)</index>]</name></expr>, <expr><name>ACx</name> <operator>&gt;&gt;</operator> <operator>#</operator><literal type="number">16</literal> <operator>::</operator> <name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Ymem</name><index>[)</index>]</name></expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<name><name>Cmem</name><index>[)</index>]</name></expr>, <expr><name>ACy</name> <operator>&gt;&gt;</operator> <operator>#</operator><literal type="number">16</literal></expr>)<operator>,</operator>

}</block></expr></expr_stmt><operator>,</operator>

<expr_stmt><expr><name>LIST_END</name></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<expr_stmt><expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator></expr_stmt>

},

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x85</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>firsadd Xmem</argument>, <argument>Ymem</argument>, <argument>Cmem</argument>, <argument>ACx</argument>, <argument>ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>firssub Xmem</argument>, <argument>Ymem</argument>, <argument>Cmem</argument>, <argument>ACx</argument>, <argument>ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>amar Xmem :: mas[r][<literal type="number">40</literal>] [uns(]Ymem[)]</argument>, <argument>[uns(]Cmem[)]</argument>, <argument>ACx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mas</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Xmem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<name><name>Cmem</name><index>[)</index>]</name></expr>, <expr><name>ACx</name> <operator>::</operator> <name><name>mas</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Ymem</name><index>[)</index>]</name></expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<name><name>Cmem</name><index>[)</index>]</name></expr>, <expr><name>ACy</name></expr>)<operator>,</operator></block></expr>

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>amar Xmem</argument>, <argument>Ymem</argument>, <argument>Cmem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x86</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sqdst Xmem</argument>, <argument>Ymem</argument>, <argument>ACx</argument>, <argument>ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>abdst Xmem</argument>, <argument>Ymem</argument>, <argument>ACx</argument>, <argument>ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mpym</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><name>T3</name> <operator>=</operator></expr> ]</index><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Xmem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<name><name>Ymem</name><index>[)</index>]</name></expr>, <expr><name>ACx</name></expr>)<operator>,</operator></block></expr>

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>macm</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><name>T3</name> <operator>=</operator></expr> ]</index><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Xmem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<name><name>Ymem</name><index>[)</index>]</name></expr>, <expr><index>[<expr><name>ACx</name></expr><operator>,</operator>]</index> <name>ACy</name></expr>)<operator>,</operator></block></expr>

}</block></expr><operator>,</operator>

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>macm</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><name>T3</name> <operator>=</operator></expr> ]</index><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Xmem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<name><name>Ymem</name><index>[)</index>]</name></expr>, <expr><name>ACx</name> <operator>&gt;&gt;</operator> <operator>#</operator><literal type="number">16</literal><index>[<operator>,</operator> <name>ACy</name>]</index></expr>)<operator>,</operator>

}</block></expr></expr_stmt><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>masm</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><name>T3</name> <operator>=</operator></expr> ]</index><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Xmem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<name><name>Ymem</name><index>[)</index>]</name></expr><operator>,</operator> <expr><index>[<expr><name>ACx</name></expr><operator>,</operator>]</index> <name>ACy</name></expr></expr_stmt>)</block_content></block><operator>,</operator>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>masm[r] [T3 = ]Xmem</argument>, <argument>Tx</argument>, <argument>ACx :: mov Ymem &lt;&lt; #<literal type="number">16</literal></argument>, <argument>ACy</argument>)</argument_list></macro></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>macm[r] [T3 = ]Xmem</argument>, <argument>Tx</argument>, <argument>ACx :: mov Ymem &lt;&lt; #<literal type="number">16</literal></argument>, <argument>ACy</argument>)</argument_list></macro></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>lms Xmem</argument>, <argument>Ymem</argument>, <argument>ACx</argument>, <argument>ACy</argument>)</argument_list></macro></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<expr_stmt><expr><name>LIST_END</name></expr><operator>,</operator></expr_stmt>

},

<expr_stmt><expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator></expr_stmt>

},

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x87</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">97</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>lmsf Xmem</argument>, <argument>Ymem</argument>, <argument>ACx</argument>, <argument>ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mpym[r] [T3 = ]Xmem</argument>, <argument>Tx</argument>, <argument>ACy :: mov hi(ACx &lt;&lt; t2)</argument>, <argument>Ymem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>macm[r] [T3 = ]Xmem</argument>, <argument>Tx</argument>, <argument>ACy :: mov hi(ACx &lt;&lt; t2)</argument>, <argument>Ymem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>masm[r] [T3 = ]Xmem</argument>, <argument>Tx</argument>, <argument>ACy :: mov hi(ACx &lt;&lt; t2)</argument>, <argument>Ymem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>add Xmem &lt;&lt; #<literal type="number">16</literal></argument>, <argument>ACx</argument>, <argument>ACy :: mov hi(ACy &lt;&lt; t2)</argument>, <argument>Ymem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sub Xmem &lt;&lt; #<literal type="number">16</literal></argument>, <argument>ACx</argument>, <argument>ACy :: mov hi(ACy &lt;&lt; t2)</argument>, <argument>Ymem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>YY</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><name>XXX</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>MMM</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Xmem &lt;&lt; #<literal type="number">16</literal></argument>, <argument>ACy :: mov hi(ACx &lt;&lt; t2)</argument>, <argument>Ymem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x90</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>XDDD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><name>XSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov xsrc</argument>, <argument>xdst</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x91</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>b ACx</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x92</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>call ACx</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x94</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x95</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k5</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>intr k5</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>k5</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>trap k5</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x96</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>CCCCCCC</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>xcc</name> <index>[<expr><name>label</name></expr><operator>,</operator> ]</index></name><name>cond</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>CCCCCCC</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>xccpart</name> <index>[<expr><name>label</name></expr><operator>,</operator> ]</index></name><name>cond</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x9e</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>CCCCCCC</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>xcc</name> <index>[<expr><name>label</name></expr><operator>,</operator> ]</index></name><name>cond</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>CCCCCCC</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>xccpart</name> <index>[<expr><name>label</name></expr><operator>,</operator> ]</index></name><name>cond</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0x9f</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>CCCCCCC</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>xcc</name> <index>[<expr><name>label</name></expr><operator>,</operator> ]</index></name><name>cond</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>CCCCCCC</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>xccpart</name> <index>[<expr><name>label</name></expr><operator>,</operator> ]</index></name><name>cond</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xa0</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Smem</argument>, <argument>dst</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xb0</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Smem &lt;&lt; #<literal type="number">16</literal></argument>, <argument>ACx</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xb4</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>amar Smem</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xb5</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>psh Smem</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xb6</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>delay Smem</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xb7</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>psh dbl(Lmem)</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xb8</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>pop dbl(Lmem)</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xbb</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>pop Smem</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xbc</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov hi(ACx)</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xc0</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x02</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov src</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xd0</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mpy</name><index>[<expr><name>r</name></expr>]</index></name> <name>Smem</name></expr></argument>, <argument><expr><call><name>uns</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACx</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mac</name><index>[<expr><name>r</name></expr>]</index></name> <name>Smem</name></expr></argument>, <argument><expr><call><name>uns</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACx</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mas</name><index>[<expr><name>r</name></expr>]</index></name> <name>Smem</name></expr></argument>, <argument><expr><call><name>uns</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACx</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>macm</name><index>[<expr><name>r</name></expr>]</index></name><name><name>z</name> <index>[<expr><name>T3</name> <operator>=</operator></expr> ]</index></name><name>Smem</name></expr></argument>, <argument><expr><name>Cmem</name></expr></argument>, <argument><expr><name>ACx</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xd1</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mpym</name><index>[<expr><name>r</name></expr>]</index> <index>[<expr><name>T3</name> <operator>=</operator></expr> ]</index></name><name>Smem</name></expr></argument>, <argument><expr><name>Cmem</name></expr></argument>, <argument><expr><name>ACx</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>macm</name><index>[<expr><name>r</name></expr>]</index> <index>[<expr><name>T3</name> <operator>=</operator></expr> ]</index></name><name>Smem</name></expr></argument>, <argument><expr><name>Cmem</name></expr></argument>, <argument><expr><name>ACx</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>masm</name><index>[<expr><name>r</name></expr>]</index> <index>[<expr><name>T3</name> <operator>=</operator></expr> ]</index></name><name>Smem</name></expr></argument>, <argument><expr><name>Cmem</name></expr></argument>, <argument><expr><name>ACx</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xd2</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>macm</name><index>[<expr><name>r</name></expr>]</index> <index>[<expr><name>T3</name> <operator>=</operator></expr> ]</index></name><name>Smem</name></expr></argument>, <argument><expr><index>[<expr><name>ACx</name></expr><operator>,</operator>]</index> <name>ACy</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>masm</name><index>[<expr><name>r</name></expr>]</index> <index>[<expr><name>T3</name> <operator>=</operator></expr> ]</index></name><name>Smem</name></expr></argument>, <argument><expr><index>[<expr><name>ACx</name></expr><operator>,</operator>]</index> <name>ACy</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>sqam</name><index>[<expr><name>r</name></expr>]</index> <index>[<expr><name>T3</name> <operator>=</operator></expr> ]</index></name><name>Smem</name></expr></argument>, <argument><expr><index>[<expr><name>ACx</name></expr><operator>,</operator>]</index> <name>ACy</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>sqsm</name><index>[<expr><name>r</name></expr>]</index> <index>[<expr><name>T3</name> <operator>=</operator></expr> ]</index></name><name>Smem</name></expr></argument>, <argument><expr><index>[<expr><name>ACx</name></expr><operator>,</operator>]</index> <name>ACy</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xd3</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mpym</name><index>[<expr><name>r</name></expr>]</index> <index>[<expr><name>T3</name> <operator>=</operator></expr> ]</index></name><name>Smem</name></expr></argument>, <argument><expr><index>[<expr><name>ACx</name></expr><operator>,</operator>]</index> <name>ACy</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>sqrm</name><index>[<expr><name>r</name></expr>]</index> <index>[<expr><name>T3</name> <operator>=</operator></expr> ]</index></name><name>Smem</name></expr></argument>, <argument><expr><name>ACx</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mpym</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>u</name></expr>]</index> <index>[<expr><name>T3</name> <operator>=</operator></expr> ]</index></name><name>Smem</name></expr></argument>, <argument><expr><name>Tx</name></expr></argument>, <argument><expr><name>ACx</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xd4</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>macm</name><index>[<expr><name>r</name></expr>]</index> <index>[<expr><name>T3</name> <operator>=</operator></expr> ]</index></name><name>Smem</name></expr></argument>, <argument><expr><name>Tx</name></expr></argument>, <argument><expr><index>[<expr><name>ACx</name></expr><operator>,</operator>]</index> <name>ACy</name></expr></argument>)</argument_list></call></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xd5</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>masm</name><index>[<expr><name>r</name></expr>]</index> <index>[<expr><name>T3</name> <operator>=</operator></expr> ]</index></name><name>Smem</name></expr></argument>, <argument><expr><name>Tx</name></expr></argument>, <argument><expr><index>[<expr><name>ACx</name></expr><operator>,</operator>]</index> <name>ACy</name></expr></argument>)</argument_list></call></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xd6</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>add Smem</argument>, <argument>[src</argument>,<argument>] dst</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xd7</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sub Smem</argument>, <argument>[src</argument>,<argument>] dst</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xd8</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sub src</argument>, <argument>Smem</argument>, <argument>dst</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xd9</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>and Smem</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xda</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>or Smem</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xdb</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>xor Smem</argument>, <argument>src</argument>, <argument>dst</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xdc</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Smem</argument>, <argument>dp</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Smem</argument>, <argument>cdp</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Smem</argument>, <argument>bsa01</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Smem</argument>, <argument>bsa23</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Smem</argument>, <argument>bsa45</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Smem</argument>, <argument>bsa67</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Smem</argument>, <argument>bsac</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Smem</argument>, <argument>sp</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Smem</argument>, <argument>ssp</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Smem</argument>, <argument>bk03</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Smem</argument>, <argument>bk47</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Smem</argument>, <argument>bkc</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Smem</argument>, <argument>dph</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Smem</argument>, <argument>pdp</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Smem</argument>, <argument>csr</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Smem</argument>, <argument>brc0</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Smem</argument>, <argument>brc1</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Smem</argument>, <argument>trn0</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Smem</argument>, <argument>trn1</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>btst K4</argument>, <argument>Smem</argument>, <argument>TC1</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>btst K4</argument>, <argument>Smem</argument>, <argument>TC2</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xdd</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>add Smem &lt;&lt; Tx</argument>, <argument>[ACx</argument>,<argument>] ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sub Smem &lt;&lt; Tx</argument>, <argument>[ACx</argument>,<argument>] ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>addsub2cc Smem</argument>, <argument>ACx</argument>, <argument>Tx</argument>, <argument>TC1</argument>, <argument>TC2</argument>, <argument>ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mov</name> <index>[<expr><call><name>rnd</name><argument_list>(</argument_list></call></expr></index></name>]<name>Smem</name> <operator>&lt;&lt;</operator> <name><name>Tx</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr>, <expr><name>ACx</name></expr>)<operator>,</operator></block></expr>

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xde</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>addsubcc Smem</argument>, <argument>ACx</argument>, <argument>TC1</argument>, <argument>ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>addsubcc Smem</argument>, <argument>ACx</argument>, <argument>TC2</argument>, <argument>ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>addsubcc Smem</argument>, <argument>ACx</argument>, <argument>TC1</argument>, <argument>TC2</argument>, <argument>ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>subc Smem</argument>, <argument>[ACx</argument>,<argument>] ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>add Smem &lt;&lt; #<literal type="number">16</literal></argument>, <argument>[ACx</argument>,<argument>] ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sub Smem &lt;&lt; #<literal type="number">16</literal></argument>, <argument>[ACx</argument>,<argument>] ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sub ACx</argument>, <argument>Smem &lt;&lt; #<literal type="number">16</literal></argument>, <argument>ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>addsub Tx</argument>, <argument>Smem</argument>, <argument>ACx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>subadd Tx</argument>, <argument>Smem</argument>, <argument>ACx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xdf</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mov</name> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>high_byte</name><argument_list>(<argument><expr><name>Smem</name></expr></argument>)</argument_list></call><index>[<expr/></index></expr></argument>)</argument_list></call>]</expr>, <expr><name>dst</name></expr>)<operator>,</operator></block></expr>

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mov</name> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>low_byte</name><argument_list>(<argument><expr><name>Smem</name></expr></argument>)</argument_list></call><index>[<expr/></index></expr></argument>)</argument_list></call>]</expr>, <expr><name>dst</name></expr>)<operator>,</operator></block></expr>

}</block></expr><operator>,</operator>

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mov</name> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr>, <expr><name>ACx</name></expr>)<operator>,</operator>

}</block></expr></expr_stmt><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>add</name> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><name>CARRY</name></expr><operator>,</operator> <expr><index>[<expr><name>ACx</name></expr><operator>,</operator>]</index> <name>ACy</name></expr></expr_stmt>)</block_content></block><operator>,</operator>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>sub</name> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><name>BORROW</name></expr><operator>,</operator> <expr><index>[<expr><name>ACx</name></expr><operator>,</operator>]</index> <name>ACy</name></expr></expr_stmt>)</block_content></block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>add</name> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><index>[<expr><name>ACx</name></expr><operator>,</operator>]</index> <name>ACy</name></expr></expr_stmt>)</block_content></block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>sub</name> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><index>[<expr><name>ACx</name></expr><operator>,</operator>]</index> <name>ACy</name></expr></expr_stmt>)</block_content></block><operator>,</operator>

},

<expr_stmt><expr><name>LIST_END</name></expr><operator>,</operator></expr_stmt>

},

<expr_stmt><expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator></expr_stmt>

},

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xe0</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>btst src</argument>, <argument>Smem</argument>, <argument>TCx</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xe1</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>SHIFTW</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov low_byte(Smem) &lt;&lt; #SHIFTW</argument>, <argument>ACx</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xe2</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>SHIFTW</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov high_byte(Smem) &lt;&lt; #SHIFTW</argument>, <argument>ACx</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xe3</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>bset src</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>bclr src</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>btstset K4</argument>, <argument>Smem</argument>, <argument>TC1</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>btstset K4</argument>, <argument>Smem</argument>, <argument>TC2</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>btstclr K4</argument>, <argument>Smem</argument>, <argument>TC1</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>btstclr K4</argument>, <argument>Smem</argument>, <argument>TC2</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>btstnot K4</argument>, <argument>Smem</argument>, <argument>TC1</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>k4</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>btstnot K4</argument>, <argument>Smem</argument>, <argument>TC2</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>bnot src</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xe4</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>psh src</argument>,<argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>pop dst</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xe5</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov dp</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov cdp</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov bsa01</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov bsa23</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov bsa45</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov bsa67</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov bsac</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov sp</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov ssp</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov bk03</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov bk47</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">46</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov bkc</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov dph</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov pdp</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov csr</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov brc0</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov brc1</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov trn0</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov trn1</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov src</argument>, <argument>high_byte(Smem)</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov src</argument>, <argument>low_byte(Smem)</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xe6</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>K8</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov K8</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xe7</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov ACx &lt;&lt; Tx</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mov</name> <index>[<expr><call><name>rnd</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>hi</name><argument_list>(<argument><expr><name>ACx</name> <operator>&lt;&lt;</operator> <name>Tx</name></expr></argument>)</argument_list></call><index>[<expr/></index></expr></argument>)</argument_list></call>]</expr>, <expr><name>Smem</name></expr>)<operator>,</operator></block></expr>

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov [uns(] [rnd(]hi[(saturate](ACx &lt;&lt; Tx)[)))]</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xe8</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mov</name> <index>[<expr><call><name>rnd</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>hi</name><argument_list>(<argument><expr><name>ACx</name></expr></argument>)</argument_list></call><index>[<expr/></index></expr></argument>)</argument_list></call>]</expr>, <expr><name>Smem</name></expr>)<operator>,</operator></block></expr>

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov [uns(] [rnd(]hi[(saturate](ACx)[)))]</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xe9</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>SHIFTW</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov ACx &lt;&lt; #SHIFTW</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xea</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>SHIFTW</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov hi(ACx &lt;&lt; #SHIFTW)</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xeb</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov pair(TAx)</argument>, <argument>dbl(Lmem)</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov ACx &gt;&gt; #<literal type="number">1</literal></argument>, <argument>dual(Lmem)</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov ACx</argument>, <argument>dbl(Lmem)</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mov</name> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>saturate</name><argument_list>(<argument><expr><name>ACx</name></expr></argument>)</argument_list></call><index>[<expr/></index></expr></argument>)</argument_list></call>]</expr>, <expr><call><name>dbl</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call></expr>)<operator>,</operator></block></expr>

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov reta</argument>, <argument>dbl(Lmem)</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xec</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>XDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>amar Smem</argument>, <argument>XAdst</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>bset Baddr</argument>, <argument>src</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>bclr Baddr</argument>, <argument>src</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>btstp Baddr</argument>, <argument>src</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>bnot Baddr</argument>, <argument>src</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>btst Baddr</argument>, <argument>src</argument>, <argument>TCx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xed</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov dbl(Lmem)</argument>, <argument>pair(hi(ACx))</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov dbl(Lmem)</argument>, <argument>pair(LO(ACx))</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov pair(hi(ACx))</argument>, <argument>dbl(Lmem)</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov pair(lo(ACx))</argument>, <argument>dbl(Lmem)</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>XDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov dbl(Lmem)</argument>, <argument>XAdst</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>XSSS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov XAsrc</argument>, <argument>dbl(Lmem)</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>add dbl(Lmem)</argument>, <argument>[ACx</argument>,<argument>] ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sub dbl(Lmem)</argument>, <argument>[ACx</argument>,<argument>] ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sub ACx</argument>, <argument>dbl(Lmem)</argument>, <argument>ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov dbl(Lmem)</argument>, <argument>reta</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mov</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <call><name>dbl</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACx</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>FDDD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov dbl(Lmem)</argument>, <argument>pair(TAx)</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xee</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>add dual(Lmem)</argument>, <argument>[ACx</argument>,<argument>] ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sub dual(Lmem)</argument>, <argument>[ACx</argument>,<argument>] ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sub ACx</argument>, <argument>dual(Lmem)</argument>, <argument>ACy</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sub dual(Lmem)</argument>, <argument>Tx</argument>, <argument>ACx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>add dual(Lmem)</argument>, <argument>Tx</argument>, <argument>ACx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>sub Tx</argument>, <argument>dual(Lmem)</argument>, <argument>ACx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>addsub Tx</argument>, <argument>dual(Lmem)</argument>, <argument>ACx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>subadd Tx</argument>, <argument>dual(Lmem)</argument>, <argument>ACx</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xef</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x03</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Cmem</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Smem</argument>, <argument>Cmem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov Cmem</argument>,<argument>dbl(Lmem)</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov dbl(Lmem)</argument>, <argument>Cmem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xf0</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>K16</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>cmp Smem == K16</argument>, <argument>TC1</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xf1</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>K16</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>cmp Smem == K16</argument>, <argument>TC2</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xf2</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>band Smem</argument>, <argument>k16</argument>, <argument>TC1</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xf3</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>band Smem</argument>, <argument>k16</argument>, <argument>TC2</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xf4</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>and k16</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xf5</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>or k16</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xf6</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>k16</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>xor k16</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xf7</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>K16</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>add K16</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xf8</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>K8</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mpymk</name><index>[<expr><name>r</name></expr>]</index> <index>[<expr><name>T3</name> <operator>=</operator></expr> ]</index></name><name>Smem</name></expr></argument>, <argument><expr><name>K8</name></expr></argument>, <argument><expr><name>ACx</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>K8</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>macmk</name><index>[<expr><name>r</name></expr>]</index> <index>[<expr><name>T3</name> <operator>=</operator></expr> ]</index></name><name>Smem</name></expr></argument>, <argument><expr><name>K8</name></expr></argument>, <argument><expr><index>[<expr><name>ACx</name></expr><operator>,</operator>]</index> <name>ACy</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xf9</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>SHIFTW</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>add</name> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>] <operator>&lt;&lt;</operator> <operator>#</operator><name>SHIFTW</name></expr>, <expr><index>[<expr><name>ACx</name></expr><operator>,</operator>]</index> <name>ACy</name></expr>)<operator>,</operator></block></expr>

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>SHIFTW</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>sub</name> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>] <operator>&lt;&lt;</operator> <operator>#</operator><name>SHIFTW</name></expr>, <expr><index>[<expr><name>ACx</name></expr><operator>,</operator>]</index> <name>ACy</name></expr>)<operator>,</operator></block></expr>

}</block></expr><operator>,</operator>

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>SHIFTW</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mov</name> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>] <operator>&lt;&lt;</operator> <operator>#</operator><name>SHIFTW</name></expr>, <expr><name>ACx</name></expr>)<operator>,</operator>

}</block></expr></expr_stmt><operator>,</operator>

<expr_stmt><expr><name>LIST_END</name></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<expr_stmt><expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator></expr_stmt>

},

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xfa</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>SHIFTW</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mov</name> <index>[<expr><call><name>rnd</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>hi</name><argument_list>(<argument><expr><name>ACx</name> <operator>&lt;&lt;</operator> <operator>#</operator><name>SHIFTW</name></expr></argument>)</argument_list></call><index>[<expr/></index></expr></argument>)</argument_list></call>]</expr>, <expr><name>Smem</name></expr>)<operator>,</operator></block></expr>

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>SHIFTW</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov [uns(] [rnd(]hi[(saturate](ACx &lt;&lt; #SHIFTW)[)))]</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr>,

<expr><name>LIST_END</name></expr>,

}</block></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xfb</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>K16</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>mov K16</argument>, <argument>Smem</argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xfc</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>L16</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <macro><name>INSN_SYNTAX</name><argument_list>(<argument>bcc L16</argument>, <argument>ARn_mod ! = #<literal type="number">0</literal></argument>)</argument_list></macro></expr>,

}</block></expr><operator>,</operator></expr_stmt>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>byte</name> <operator>=</operator> <literal type="number">0xfd</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0x04</literal></expr><operator>,</operator>

<expr><operator>.</operator><name>insn</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_item_t</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mpy</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>hi</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr>, <expr><name>ACy</name> <operator>::</operator> <name><name>mpy</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[)</index>]</name></expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>lo</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr>, <expr><name>ACx</name></expr>)<operator>,</operator></block></expr>

}</block></expr>,

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mpy</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>hi</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr>, <expr><name>ACy</name> <operator>::</operator> <name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[)</index>]</name></expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>lo</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr>, <expr><name>ACx</name></expr>)<operator>,</operator></block></expr>

}</block></expr><operator>,</operator>

<expr><block>{

<expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr>,

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>hi</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr>, <expr><name>ACy</name> <operator>::</operator> <name><name>mpy</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[)</index>]</name></expr>, <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>lo</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr>, <expr><name>ACx</name></expr>)<operator>,</operator>

}</block></expr></expr_stmt><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mpy</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>hi</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACy</name> <operator>::</operator> <name><name>mas</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[)</index>]</name></expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>lo</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACx</name></expr></expr_stmt>)</block_content></block><operator>,</operator>

</block_content>}</block><operator>,</operator>

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mas</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>hi</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACy</name> <operator>::</operator> <name><name>mpy</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[)</index>]</name></expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>lo</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACx</name></expr></expr_stmt>)</block_content></block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>hi</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACy</name> <operator>::</operator> <name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[)</index>]</name></expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>lo</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACx</name></expr></expr_stmt>)</block_content></block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>hi</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACy</name> <operator>::</operator> <name><name>mas</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[)</index>]</name></expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>lo</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACx</name></expr></expr_stmt>)</block_content></block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mas</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>hi</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACy</name> <operator>::</operator> <name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[)</index>]</name></expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>lo</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACx</name></expr></expr_stmt>)</block_content></block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>hi</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACy</name> <operator>::</operator> <name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[)</index>]</name></expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>lo</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACx</name><operator>&gt;&gt;</operator><operator>#</operator><literal type="number">16</literal></expr></expr_stmt>)</block_content></block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>hi</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACy</name><operator>&gt;&gt;</operator><operator>#</operator><literal type="number">16</literal> <operator>::</operator> <name><name>mas</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[)</index>]</name></expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>lo</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACx</name></expr></expr_stmt>)</block_content></block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>hi</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACy</name><operator>&gt;&gt;</operator><operator>#</operator><literal type="number">16</literal> <operator>::</operator> <name><name>mpy</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[)</index>]</name></expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>lo</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACx</name></expr></expr_stmt>)</block_content></block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>hi</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACy</name><operator>&gt;&gt;</operator><operator>#</operator><literal type="number">16</literal> <operator>::</operator> <name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[)</index>]</name></expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>lo</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACx</name><operator>&gt;&gt;</operator><operator>#</operator><literal type="number">16</literal></expr></expr_stmt>)</block_content></block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mas</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[<expr/></index></name></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>hi</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACy</name> <operator>::</operator> <name><name>mas</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<name><name>Smem</name><index>[)</index>]</name></expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>lo</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACx</name></expr></expr_stmt>)</block_content></block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mpy</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>hi</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call><index>[<expr/></index></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>hi</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACy</name> <operator>::</operator> <name><name>mpy</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>lo</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>lo</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACx</name></expr></expr_stmt>)</block_content></block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mpy</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>hi</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call><index>[<expr/></index></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>hi</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACy</name> <operator>::</operator> <name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>lo</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>lo</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACx</name></expr></expr_stmt>)</block_content></block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>hi</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call><index>[<expr/></index></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>hi</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACy</name> <operator>::</operator> <name><name>mpy</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>lo</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>lo</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACx</name></expr></expr_stmt>)</block_content></block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mpy</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>hi</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call><index>[<expr/></index></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>hi</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACy</name> <operator>::</operator> <name><name>mas</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>lo</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>lo</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACx</name></expr></expr_stmt>)</block_content></block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mas</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>hi</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call><index>[<expr/></index></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>hi</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACy</name> <operator>::</operator> <name><name>mpy</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>lo</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>lo</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACx</name></expr></expr_stmt>)</block_content></block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>hi</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call><index>[<expr/></index></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>hi</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACy</name> <operator>::</operator> <name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>lo</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>lo</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACx</name></expr></expr_stmt>)</block_content></block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>hi</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call><index>[<expr/></index></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>hi</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACy</name> <operator>::</operator> <name><name>mas</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>lo</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>lo</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACx</name></expr></expr_stmt>)</block_content></block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mas</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>hi</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call><index>[<expr/></index></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>hi</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACy</name> <operator>::</operator> <name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>lo</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>lo</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACx</name></expr></expr_stmt>)</block_content></block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>hi</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call><index>[<expr/></index></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>hi</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACy</name> <operator>::</operator> <name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>lo</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>lo</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACx</name><operator>&gt;&gt;</operator><operator>#</operator><literal type="number">16</literal></expr></expr_stmt>)</block_content></block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>hi</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call><index>[<expr/></index></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>hi</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACy</name><operator>&gt;&gt;</operator><operator>#</operator><literal type="number">16</literal> <operator>::</operator> <name><name>mas</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>lo</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>lo</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACx</name></expr></expr_stmt>)</block_content></block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>hi</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call><index>[<expr/></index></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>hi</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACy</name><operator>&gt;&gt;</operator><operator>#</operator><literal type="number">16</literal> <operator>::</operator> <name><name>mpy</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>lo</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>lo</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACx</name></expr></expr_stmt>)</block_content></block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>hi</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call><index>[<expr/></index></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>hi</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACy</name><operator>&gt;&gt;</operator><operator>#</operator><literal type="number">16</literal> <operator>::</operator> <name><name>mac</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>lo</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>lo</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACx</name><operator>&gt;&gt;</operator><operator>#</operator><literal type="number">16</literal></expr></expr_stmt>)</block_content></block><operator>,</operator>

},

<block>{<block_content>

<expr_stmt><expr><operator>.</operator><name>i_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>m_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_mask_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_MASK</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <operator>(</operator><name><name>insn_flag_t</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>AAAAAAAI</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>,<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>INSN_FLAG</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><name>DD</name></expr></argument>)</argument_list></call></expr>, <expr><name>LIST_END</name></expr> }</block></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <call><name>INSN_SYNTAX</name><argument_list>(<argument><expr><name><name>mas</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>hi</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call><index>[<expr/></index></expr></argument>)</argument_list></call>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>hi</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACy</name> <operator>::</operator> <name><name>mas</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index> <index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index></name>]<call><name>lo</name><argument_list>(<argument><expr><name>Lmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><index>[<expr><call><name>uns</name><argument_list>(</argument_list></call></expr></index>]<call><name>lo</name><argument_list>(<argument><expr><name>Cmem</name></expr></argument>)</argument_list></call><index>[)</index>]</expr><operator>,</operator> <expr><name>ACx</name></expr></expr_stmt>)</block_content></block><operator>,</operator>

},

<expr_stmt><expr><name>LIST_END</name></expr><operator>,</operator></expr_stmt>

},

<expr_stmt><expr><operator>.</operator><name>m_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>f_list</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator>

<expr><operator>.</operator><name>syntax</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator></expr_stmt>

},

},

</unit>
