<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\pic\pic_midrange.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pic_midrange.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PicMidrangeOpInfo</name></type>

<name><name>pic_midrange_op_info</name><index>[<expr><name>PIC_MIDRANGE_OPCODE_INVALID</name></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"nop"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_NONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"return"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_NONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"retfie"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_NONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"option"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_NONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sleep"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_NONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"clrwdt"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_NONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tris"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_2F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"movwf"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_7F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"clr"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_1D_7F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"subwf"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_1D_7F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"decf"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_1D_7F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"iorwf"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_1D_7F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"andwf"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_1D_7F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"xorwf"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_1D_7F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"addwf"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_1D_7F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"movf"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_1D_7F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"comf"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_1D_7F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"incf"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_1D_7F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"decfsz"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_1D_7F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rrf"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_1D_7F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rlf"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_1D_7F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"swapf"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_1D_7F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"incfsz"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_1D_7F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bcf"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_3B_7F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bsf"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_3B_7F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"btfsc"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_3B_7F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"btfss"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_3B_7F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"call"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_11K</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"goto"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_11K</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"movlw"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_8K</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"retlw"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_8K</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"iorlw"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_8K</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"andlw"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_8K</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"xorlw"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_8K</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sublw"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_8K</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"addlw"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_8K</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"reset"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_NONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"callw"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_NONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"brw"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_NONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"moviw"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_1N_2M</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"movwi"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_1N_2M</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"movlb"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_4K</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"lslf"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_1D_7F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"lsrf"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_1D_7F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"asrf"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_1D_7F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"subwfb"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_1D_7F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"addwfc"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_1D_7F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"addfsr"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_1N_6K</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"movlp"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_7F</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bra"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_9K</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"moviw"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_1N_6K</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"movwi"</literal></expr>, <expr><name>PIC_MIDRANGE_OP_ARGS_1N_6K</name></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>PicMidrangeFsrOps</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"++FSR%d"</literal></expr>, <expr><literal type="string">"--FSR%d"</literal></expr>, <expr><literal type="string">"FSR%d++"</literal></expr>,

<expr><literal type="string">"FSR%d--"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>PicMidrangeOpcode</name></type> <name>pic_midrange_get_opcode</name> <parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>instr</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>PIC_MIDRANGE_OPCODE_INVALID</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>)</condition> <block>{<block_content> 

<case>case <expr><literal type="number">0x4</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_CALL</name></expr>;</return>

<case>case <expr><literal type="number">0x5</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_GOTO</name></expr>;</return>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content> 

<case>case <expr><literal type="number">0x4</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_BCF</name></expr>;</return>

<case>case <expr><literal type="number">0x5</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_BSF</name></expr>;</return>

<case>case <expr><literal type="number">0x6</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_BTFSC</name></expr>;</return>

<case>case <expr><literal type="number">0x7</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_BTFSS</name></expr>;</return>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content> 

<case>case <expr><literal type="number">0x19</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_BRA</name></expr>;</return>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content> 

<case>case <expr><literal type="number">0x1</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_CLR</name></expr>;</return>

<case>case <expr><literal type="number">0x2</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_SUBWF</name></expr>;</return>

<case>case <expr><literal type="number">0x3</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_DECF</name></expr>;</return>

<case>case <expr><literal type="number">0x4</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_IORWF</name></expr>;</return>

<case>case <expr><literal type="number">0x5</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_ANDWF</name></expr>;</return>

<case>case <expr><literal type="number">0x6</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_XORWF</name></expr>;</return>

<case>case <expr><literal type="number">0x7</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_ADDWF</name></expr>;</return>

<case>case <expr><literal type="number">0x8</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_MOVF</name></expr>;</return>

<case>case <expr><literal type="number">0x9</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_COMF</name></expr>;</return>

<case>case <expr><literal type="number">0xa</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_INCF</name></expr>;</return>

<case>case <expr><literal type="number">0xb</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_DECFSZ</name></expr>;</return>

<case>case <expr><literal type="number">0xc</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_RRF</name></expr>;</return>

<case>case <expr><literal type="number">0xd</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_RLF</name></expr>;</return>

<case>case <expr><literal type="number">0xe</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_SWAPF</name></expr>;</return>

<case>case <expr><literal type="number">0xf</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_INCFSZ</name></expr>;</return>

<case>case <expr><literal type="number">0x38</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_IORLW</name></expr>;</return>

<case>case <expr><literal type="number">0x39</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_ANDLW</name></expr>;</return>

<case>case <expr><literal type="number">0x3a</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_XORLW</name></expr>;</return>

<case>case <expr><literal type="number">0x30</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_MOVLW</name></expr>;</return>

<case>case <expr><literal type="number">0x34</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_RETLW</name></expr>;</return>

<case>case <expr><literal type="number">0x3c</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_SUBLW</name></expr>;</return>

<case>case <expr><literal type="number">0x3e</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_ADDLW</name></expr>;</return>

<case>case <expr><literal type="number">0x35</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_LSLF</name></expr>;</return>

<case>case <expr><literal type="number">0x36</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_LSRF</name></expr>;</return>

<case>case <expr><literal type="number">0x37</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_ASRF</name></expr>;</return>

<case>case <expr><literal type="number">0x3b</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_SUBWFB</name></expr>;</return>

<case>case <expr><literal type="number">0x3d</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_ADDWFC</name></expr>;</return>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content> 

<case>case <expr><literal type="number">0x1</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_MOVWF</name></expr>;</return>

<case>case <expr><literal type="number">0x62</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_ADDFSR</name></expr>;</return>

<case>case <expr><literal type="number">0x63</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_MOVLP</name></expr>;</return>

<case>case <expr><literal type="number">0x7e</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_MOVIW_2</name></expr>;</return>

<case>case <expr><literal type="number">0x7f</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_MOVWI_2</name></expr>;</return>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content> 

<case>case <expr><literal type="number">0x1</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_MOVLB</name></expr>;</return>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content> 

<case>case <expr><literal type="number">0x2</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_MOVIW_1</name></expr>;</return>

<case>case <expr><literal type="number">0x3</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_MOVWI_1</name></expr>;</return>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> 

<case>case <expr><literal type="number">0x19</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_TRIS</name></expr>;</return>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>instr</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x0</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_NOP</name></expr>;</return>

<case>case <expr><literal type="number">0x1</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_RESET</name></expr>;</return>

<case>case <expr><literal type="number">0xa</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_CALLW</name></expr>;</return>

<case>case <expr><literal type="number">0xb</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_BRW</name></expr>;</return>

<case>case <expr><literal type="number">0x8</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_RETURN</name></expr>;</return>

<case>case <expr><literal type="number">0x9</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_RETFIE</name></expr>;</return>

<case>case <expr><literal type="number">0x62</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_OPTION</name></expr>;</return>

<case>case <expr><literal type="number">0x63</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_SLEEP</name></expr>;</return>

<case>case <expr><literal type="number">0x64</literal></expr>:</case> <return>return <expr><name>PIC_MIDRANGE_OPCODE_CLRWDT</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>PIC_MIDRANGE_OPCODE_INVALID</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>PicMidrangeOpInfo</name> <modifier>*</modifier></type><name>pic_midrange_get_op_info</name> <parameter_list>(<parameter><decl><type><name>PicMidrangeOpcode</name></type> <name>opcode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&gt;=</operator> <name>PIC_MIDRANGE_OPCODE_INVALID</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>pic_midrange_op_info</name><index>[<expr><name>opcode</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>pic_midrange_disassemble</name> <parameter_list>(<parameter><decl><type><name>RAsmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>opbuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>fsr_op</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st16</name></type> <name>branch</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMIT_INVALID</name></cpp:macro> <cpp:value>{op-&gt;size = 2; strcpy (opbuf, "invalid"); return 1; }</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name> <operator>||</operator> <name>l</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>EMIT_INVALID</name></expr></expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>instr</name> <init>= <expr><call><name>r_read_le16</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PicMidrangeOpcode</name></type> <name>opcode</name> <init>= <expr><call><name>pic_midrange_get_opcode</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>PIC_MIDRANGE_OPCODE_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>EMIT_INVALID</name></expr></expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>PicMidrangeOpInfo</name> <modifier>*</modifier></type><name>op_info</name> <init>= <expr><call><name>pic_midrange_get_op_info</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op_info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>EMIT_INVALID</name></expr></expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EMIT_INVALID</name></cpp:undef>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf_asm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>op_info</name><operator>-&gt;</operator><name>args</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PIC_MIDRANGE_OP_ARGS_NONE</name></expr>:</case>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <name><name>op_info</name><operator>-&gt;</operator><name>mnemonic</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PIC_MIDRANGE_OP_ARGS_2F</name></expr>:</case>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%x"</literal></expr></argument>, <argument><expr><name><name>op_info</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_2F_MASK_F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PIC_MIDRANGE_OP_ARGS_7F</name></expr>:</case>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%x"</literal></expr></argument>, <argument><expr><name><name>op_info</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_7F_MASK_F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PIC_MIDRANGE_OP_ARGS_1D_7F</name></expr>:</case>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%x, %c"</literal></expr></argument>, <argument><expr><name><name>op_info</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>,

<argument><expr><name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_1D_7F_MASK_F</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_1D_7F_MASK_D</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr> ?</condition><then> <expr><literal type="char">'f'</literal></expr> </then><else>: <expr><literal type="char">'w'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PIC_MIDRANGE_OP_ARGS_1N_6K</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>PIC_MIDRANGE_OPCODE_ADDFSR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>( <argument><expr><literal type="string">"%s FSR%d, 0x%x"</literal></expr></argument>, <argument><expr><name><name>op_info</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_1N_6K_MASK_N</name><operator>)</operator> <operator>&gt;&gt;</operator>

<literal type="number">6</literal></expr></argument>, <argument><expr><name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_1N_6K_MASK_K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%x[FSR%d]"</literal></expr></argument>, <argument><expr><name><name>op_info</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>,

<argument><expr><name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_1N_6K_MASK_K</name></expr></argument>,

<argument><expr><operator>(</operator><name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_1N_6K_MASK_N</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>PIC_MIDRANGE_OP_ARGS_3B_7F</name></expr>:</case>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%x, %d"</literal></expr></argument>, <argument><expr><name><name>op_info</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_3B_7F_MASK_F</name></expr></argument>,

<argument><expr><operator>(</operator><name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_3B_7F_MASK_B</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PIC_MIDRANGE_OP_ARGS_4K</name></expr>:</case>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%x"</literal></expr></argument>, <argument><expr><name><name>op_info</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_4K_MASK_K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PIC_MIDRANGE_OP_ARGS_8K</name></expr>:</case>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%x"</literal></expr></argument>, <argument><expr><name><name>op_info</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_8K_MASK_K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PIC_MIDRANGE_OP_ARGS_9K</name></expr>:</case>

<expr_stmt><expr><name>branch</name> <operator>=</operator> <operator>(</operator><name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_9K_MASK_K</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>branch</name> <operator>|=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>branch</name> <operator>&amp;</operator> <literal type="number">0x100</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xfe00</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s %s0x%x"</literal></expr></argument>,

<argument><expr><name><name>op_info</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>branch</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>branch</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name>branch</name></expr> </then><else>: <expr><name>branch</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PIC_MIDRANGE_OP_ARGS_11K</name></expr>:</case>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s 0x%x"</literal></expr></argument>, <argument><expr><name><name>op_info</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_11K_MASK_K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PIC_MIDRANGE_OP_ARGS_1N_2M</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(

<argument><expr><name>fsr_op</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>fsr_op</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name><name>PicMidrangeFsrOps</name><index>[<expr><name>instr</name> <operator>&amp;</operator>

<name>PIC_MIDRANGE_OP_ARGS_1N_2M_MASK_M</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>instr</name> <operator>&amp;</operator> <name>PIC_MIDRANGE_OP_ARGS_1N_2M_MASK_N</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_asm</name> <operator>=</operator> <call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name><name>op_info</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>fsr_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>buf_asm</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>opbuf</name></expr></argument>, <argument><expr><name>buf_asm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
