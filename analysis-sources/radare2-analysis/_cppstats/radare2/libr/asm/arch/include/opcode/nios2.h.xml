<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\include\opcode\nios2.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mybfd.h"</cpp:file></cpp:include>

<enum>enum <name>overflow_type</name>

<block>{

<decl><name>call_target_overflow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>branch_target_overflow</name></decl>,

<decl><name>address_offset_overflow</name></decl>,

<decl><name>signed_immed16_overflow</name></decl>,

<decl><name>unsigned_immed16_overflow</name></decl>,

<decl><name>unsigned_immed5_overflow</name></decl>,

<decl><name>custom_opcode_overflow</name></decl>,

<decl><name>no_overflow</name></decl>

}</block>;</enum>

<struct>struct <name>nios2_opcode</name>

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args_test</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>num_args</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>match</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mask</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>pinfo</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>overflow_type</name></name></type> <name>overflow_msg</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NIOS2_INSN_MACRO</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NIOS2_INSN_MACRO_MOV</name></cpp:macro> <cpp:value>0x80000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NIOS2_INSN_MACRO_MOVI</name></cpp:macro> <cpp:value>0x80000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NIOS2_INSN_MACRO_MOVIA</name></cpp:macro> <cpp:value>0x80000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NIOS2_INSN_RELAXABLE</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NIOS2_INSN_UBRANCH</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NIOS2_INSN_CBRANCH</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NIOS2_INSN_CALL</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NIOS2_INSN_ADDI</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NIOS2_INSN_ANDI</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NIOS2_INSN_ORI</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NIOS2_INSN_XORI</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>

<struct>struct <name>nios2_reg</name>

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>index</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_INSN_FIELD</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((i) &amp; OP_MASK_##X) &gt;&gt; OP_SH_##X)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_INSN_FIELD</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((i) = (((i) &amp; ~OP_MASK_##X) | (((j) &lt;&lt; OP_SH_##X) &amp; OP_MASK_##X)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_A_LSB</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_A_MSB</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_A_SZ</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_A_MASK</name></cpp:macro> <cpp:value>0x1f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_B_LSB</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_B_MSB</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_B_SZ</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_B_MASK</name></cpp:macro> <cpp:value>0x1f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_C_LSB</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_C_MSB</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_C_SZ</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_C_MASK</name></cpp:macro> <cpp:value>0x1f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_IMM16_LSB</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_IMM16_MSB</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_IMM16_SZ</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_IMM16_MASK</name></cpp:macro> <cpp:value>0xffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_IMM26_LSB</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_IMM26_MSB</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_IMM26_SZ</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_IMM26_MASK</name></cpp:macro> <cpp:value>0x3ffffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_OP_LSB</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_OP_MSB</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_OP_SZ</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_OP_MASK</name></cpp:macro> <cpp:value>0x3f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_OPX_LSB</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_OPX_MSB</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_OPX_SZ</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_OPX_MASK</name></cpp:macro> <cpp:value>0x3f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_SHIFT_IMM5_LSB</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_SHIFT_IMM5_MSB</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_SHIFT_IMM5_SZ</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_SHIFT_IMM5_MASK</name></cpp:macro> <cpp:value>0x1f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_CONTROL_REGNUM_LSB</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_CONTROL_REGNUM_MSB</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_CONTROL_REGNUM_SZ</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_CONTROL_REGNUM_MASK</name></cpp:macro> <cpp:value>0xf</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_OP</name></cpp:macro> <cpp:value>(IW_OP_MASK &lt;&lt; IW_OP_LSB)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_OP</name></cpp:macro> <cpp:value>IW_OP_LSB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_IOP</name></cpp:macro> <cpp:value>(IW_OP_MASK &lt;&lt; IW_OP_LSB)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_IOP</name></cpp:macro> <cpp:value>IW_OP_LSB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_IMM16</name></cpp:macro> <cpp:value>(IW_IMM16_MASK &lt;&lt; IW_IMM16_LSB)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_IMM16</name></cpp:macro> <cpp:value>IW_IMM16_LSB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_IRD</name></cpp:macro> <cpp:value>(IW_B_MASK &lt;&lt; IW_B_LSB)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_IRD</name></cpp:macro> <cpp:value>IW_B_LSB</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_IRT</name></cpp:macro> <cpp:value>(IW_B_MASK &lt;&lt; IW_B_LSB)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_IRT</name></cpp:macro> <cpp:value>IW_B_LSB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_IRS</name></cpp:macro> <cpp:value>(IW_A_MASK &lt;&lt; IW_A_LSB)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_IRS</name></cpp:macro> <cpp:value>IW_A_LSB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_ROP</name></cpp:macro> <cpp:value>(IW_OP_MASK &lt;&lt; IW_OP_LSB)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_ROP</name></cpp:macro> <cpp:value>IW_OP_LSB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_ROPX</name></cpp:macro> <cpp:value>(IW_OPX_MASK &lt;&lt; IW_OPX_LSB)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_ROPX</name></cpp:macro> <cpp:value>IW_OPX_LSB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_RRD</name></cpp:macro> <cpp:value>(IW_C_MASK &lt;&lt; IW_C_LSB)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_RRD</name></cpp:macro> <cpp:value>IW_C_LSB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_RRT</name></cpp:macro> <cpp:value>(IW_B_MASK &lt;&lt; IW_B_LSB)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_RRT</name></cpp:macro> <cpp:value>IW_B_LSB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_RRS</name></cpp:macro> <cpp:value>(IW_A_MASK &lt;&lt; IW_A_LSB)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_RRS</name></cpp:macro> <cpp:value>IW_A_LSB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_JOP</name></cpp:macro> <cpp:value>(IW_OP_MASK &lt;&lt; IW_OP_LSB)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_JOP</name></cpp:macro> <cpp:value>IW_OP_LSB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_IMM26</name></cpp:macro> <cpp:value>(IW_IMM26_MASK &lt;&lt; IW_IMM26_LSB)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_IMM26</name></cpp:macro> <cpp:value>IW_IMM26_LSB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_RCTL</name></cpp:macro> <cpp:value>0x000007c0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_RCTL</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_TRAP_IMM5</name></cpp:macro> <cpp:value>0x000007c0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_TRAP_IMM5</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_IMM5</name></cpp:macro> <cpp:value>(IW_SHIFT_IMM5_MASK &lt;&lt; IW_SHIFT_IMM5_LSB)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_IMM5</name></cpp:macro> <cpp:value>IW_SHIFT_IMM5_LSB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_CACHE_OPX</name></cpp:macro> <cpp:value>(IW_B_MASK &lt;&lt; IW_B_LSB)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_CACHE_OPX</name></cpp:macro> <cpp:value>IW_B_LSB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_CACHE_RRS</name></cpp:macro> <cpp:value>(IW_A_MASK &lt;&lt; IW_A_LSB)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_CACHE_RRS</name></cpp:macro> <cpp:value>IW_A_LSB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_CUSTOM_A</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_CUSTOM_A</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_CUSTOM_B</name></cpp:macro> <cpp:value>0x00008000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_CUSTOM_B</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_CUSTOM_C</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_CUSTOM_C</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_CUSTOM_N</name></cpp:macro> <cpp:value>0x00003fc0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_CUSTOM_N</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MAX_CUSTOM_N</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_ADDI</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_ANDHI</name></cpp:macro> <cpp:value>44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_ANDI</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_BEQ</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_BGE</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_BGEU</name></cpp:macro> <cpp:value>46</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_BLT</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_BLTU</name></cpp:macro> <cpp:value>54</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_BNE</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_BR</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_CALL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_CMPEQI</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_CMPGEI</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_CMPGEUI</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_CMPLTI</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_CMPLTUI</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_CMPNEI</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_CUSTOM</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_FLUSHD</name></cpp:macro> <cpp:value>59</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_FLUSHDA</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_INITD</name></cpp:macro> <cpp:value>51</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_INITDA</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_JMPI</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_LDB</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_LDBIO</name></cpp:macro> <cpp:value>39</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_LDBU</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_LDBUIO</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_LDH</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_LDHIO</name></cpp:macro> <cpp:value>47</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_LDHU</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_LDHUIO</name></cpp:macro> <cpp:value>43</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_LDL</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_LDW</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_LDWIO</name></cpp:macro> <cpp:value>55</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MULI</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_OPX</name></cpp:macro> <cpp:value>58</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_ORHI</name></cpp:macro> <cpp:value>52</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_ORI</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_RDPRS</name></cpp:macro> <cpp:value>56</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_STB</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_STBIO</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_STC</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_STH</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_STHIO</name></cpp:macro> <cpp:value>45</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_STW</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_STWIO</name></cpp:macro> <cpp:value>53</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_XORHI</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_XORI</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_ADD</name></cpp:macro> <cpp:value>49</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_AND</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_BREAK</name></cpp:macro> <cpp:value>52</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_BRET</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_CALLR</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_CMPEQ</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_CMPGE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_CMPGEU</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_CMPLT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_CMPLTU</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_CMPNE</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_CRST</name></cpp:macro> <cpp:value>62</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_DIV</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_DIVU</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_ERET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_FLUSHI</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_FLUSHP</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_HBREAK</name></cpp:macro> <cpp:value>53</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_INITI</name></cpp:macro> <cpp:value>41</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_INTR</name></cpp:macro> <cpp:value>61</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_JMP</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_MUL</name></cpp:macro> <cpp:value>39</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_MULXSS</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_MULXSU</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_MULXUU</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_NEXTPC</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_NOR</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_OR</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_RDCTL</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_RET</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_ROL</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_ROLI</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_ROR</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_SLL</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_SLLI</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_SRA</name></cpp:macro> <cpp:value>59</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_SRAI</name></cpp:macro> <cpp:value>58</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_SRL</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_SRLI</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_SUB</name></cpp:macro> <cpp:value>57</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_SYNC</name></cpp:macro> <cpp:value>54</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_TRAP</name></cpp:macro> <cpp:value>45</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_WRCTL</name></cpp:macro> <cpp:value>46</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_WRPRS</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_XOR</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_ADDI</name></cpp:macro> <cpp:value>OP_ADDI</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_ANDHI</name></cpp:macro> <cpp:value>OP_ANDHI</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_ANDI</name></cpp:macro> <cpp:value>OP_ANDI</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_BEQ</name></cpp:macro> <cpp:value>OP_BEQ</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_BGE</name></cpp:macro> <cpp:value>OP_BGE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_BGEU</name></cpp:macro> <cpp:value>OP_BGEU</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_BLT</name></cpp:macro> <cpp:value>OP_BLT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_BLTU</name></cpp:macro> <cpp:value>OP_BLTU</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_BNE</name></cpp:macro> <cpp:value>OP_BNE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_BR</name></cpp:macro> <cpp:value>OP_BR</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_FLUSHD</name></cpp:macro> <cpp:value>OP_FLUSHD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_FLUSHDA</name></cpp:macro> <cpp:value>OP_FLUSHDA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_INITD</name></cpp:macro> <cpp:value>OP_INITD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_INITDA</name></cpp:macro> <cpp:value>OP_INITDA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_CALL</name></cpp:macro> <cpp:value>OP_CALL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_CMPEQI</name></cpp:macro> <cpp:value>OP_CMPEQI</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_CMPGEI</name></cpp:macro> <cpp:value>OP_CMPGEI</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_CMPGEUI</name></cpp:macro> <cpp:value>OP_CMPGEUI</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_CMPLTI</name></cpp:macro> <cpp:value>OP_CMPLTI</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_CMPLTUI</name></cpp:macro> <cpp:value>OP_CMPLTUI</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_CMPNEI</name></cpp:macro> <cpp:value>OP_CMPNEI</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_JMPI</name></cpp:macro> <cpp:value>OP_JMPI</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_LDB</name></cpp:macro> <cpp:value>OP_LDB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_LDBIO</name></cpp:macro> <cpp:value>OP_LDBIO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_LDBU</name></cpp:macro> <cpp:value>OP_LDBU</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_LDBUIO</name></cpp:macro> <cpp:value>OP_LDBUIO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_LDH</name></cpp:macro> <cpp:value>OP_LDH</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_LDHIO</name></cpp:macro> <cpp:value>OP_LDHIO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_LDHU</name></cpp:macro> <cpp:value>OP_LDHU</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_LDHUIO</name></cpp:macro> <cpp:value>OP_LDHUIO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_LDL</name></cpp:macro> <cpp:value>OP_LDL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_LDW</name></cpp:macro> <cpp:value>OP_LDW</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_LDWIO</name></cpp:macro> <cpp:value>OP_LDWIO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_MULI</name></cpp:macro> <cpp:value>OP_MULI</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_OPX</name></cpp:macro> <cpp:value>OP_OPX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_ORHI</name></cpp:macro> <cpp:value>OP_ORHI</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_ORI</name></cpp:macro> <cpp:value>OP_ORI</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_RDPRS</name></cpp:macro> <cpp:value>OP_RDPRS</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_STB</name></cpp:macro> <cpp:value>OP_STB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_STBIO</name></cpp:macro> <cpp:value>OP_STBIO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_STC</name></cpp:macro> <cpp:value>OP_STC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_STH</name></cpp:macro> <cpp:value>OP_STH</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_STHIO</name></cpp:macro> <cpp:value>OP_STHIO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_STW</name></cpp:macro> <cpp:value>OP_STW</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_STWIO</name></cpp:macro> <cpp:value>OP_STWIO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_CUSTOM</name></cpp:macro> <cpp:value>OP_CUSTOM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_XORHI</name></cpp:macro> <cpp:value>OP_XORHI</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_XORI</name></cpp:macro> <cpp:value>OP_XORI</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_OPX</name></cpp:macro> <cpp:value>OP_OPX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPX_MATCH</name><parameter_list>(<parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((code &lt;&lt; IW_OPX_LSB) | OP_OPX)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_ADD</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_ADD)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_AND</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_AND)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_BREAK</name></cpp:macro> <cpp:value>((0x1e &lt;&lt; 17) | OPX_MATCH (OPX_BREAK))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_BRET</name></cpp:macro> <cpp:value>(0xf0000000 | OPX_MATCH (OPX_BRET))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_CALLR</name></cpp:macro> <cpp:value>((0x1f &lt;&lt; 17) | OPX_MATCH (OPX_CALLR))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_CMPEQ</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_CMPEQ)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_CMPGE</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_CMPGE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_CMPGEU</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_CMPGEU)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_CMPLT</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_CMPLT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_CMPLTU</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_CMPLTU)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_CMPNE</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_CMPNE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_DIV</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_DIV)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_DIVU</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_DIVU)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_JMP</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_JMP)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_MUL</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_MUL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_MULXSS</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_MULXSS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_MULXSU</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_MULXSU)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_MULXUU</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_MULXUU)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_NEXTPC</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_NEXTPC)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_NOR</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_NOR)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_OR</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_OR)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_RDCTL</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_RDCTL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_RET</name></cpp:macro> <cpp:value>(0xf8000000 | OPX_MATCH (OPX_RET))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_ROL</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_ROL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_ROLI</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_ROLI)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_ROR</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_ROR)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_SLL</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_SLL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_SLLI</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_SLLI)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_SRA</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_SRA)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_SRAI</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_SRAI)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_SRL</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_SRL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_SRLI</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_SRLI)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_SUB</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_SUB)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_SYNC</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_SYNC)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_TRAP</name></cpp:macro> <cpp:value>((0x1d &lt;&lt; 17) | OPX_MATCH (OPX_TRAP))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_ERET</name></cpp:macro> <cpp:value>(0xef800000 | OPX_MATCH (OPX_ERET))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_WRCTL</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_WRCTL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_WRPRS</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_WRPRS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_XOR</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_XOR)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_FLUSHI</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_FLUSHI)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_FLUSHP</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_FLUSHP)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MATCH_INITI</name></cpp:macro> <cpp:value>OPX_MATCH (OPX_INITI)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_BREAK</name></cpp:macro> <cpp:value>((OP_MASK_RRS | OP_MASK_RRT | OP_MASK_RRD | OP_MASK_ROPX | OP_MASK_OP) &amp; 0xfffff03f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_CALLR</name></cpp:macro> <cpp:value>((OP_MASK_RRT | OP_MASK_RRD | OP_MASK_ROPX | OP_MASK_OP))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_JMP</name></cpp:macro> <cpp:value>((OP_MASK_RRT | OP_MASK_RRD | OP_MASK_ROPX | OP_MASK_OP))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_SYNC</name></cpp:macro> <cpp:value>((OP_MASK_RRT | OP_MASK_RRD | OP_MASK_ROPX | OP_MASK_OP))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_TRAP</name></cpp:macro> <cpp:value>((OP_MASK_RRS | OP_MASK_RRT | OP_MASK_RRD | OP_MASK_ROPX | OP_MASK_OP) &amp; 0xfffff83f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_WRCTL</name></cpp:macro> <cpp:value>((OP_MASK_RRT | OP_MASK_RRD | OP_MASK_ROPX | OP_MASK_OP))</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_NEXTPC</name></cpp:macro> <cpp:value>((OP_MASK_RRS | OP_MASK_RRT | OP_MASK_ROPX | OP_MASK_OP))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_FLUSHI</name></cpp:macro> <cpp:value>((OP_MASK_RRT | OP_MASK_RRD | OP_MASK_ROPX | OP_MASK_OP))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_INITI</name></cpp:macro> <cpp:value>((OP_MASK_RRT | OP_MASK_RRD | OP_MASK_ROPX | OP_MASK_OP))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_ROLI</name></cpp:macro> <cpp:value>((OP_MASK_RRT | OP_MASK_ROPX | OP_MASK_OP))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_SLLI</name></cpp:macro> <cpp:value>((OP_MASK_RRT | OP_MASK_ROPX | OP_MASK_OP))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_SRAI</name></cpp:macro> <cpp:value>((OP_MASK_RRT | OP_MASK_ROPX | OP_MASK_OP))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_SRLI</name></cpp:macro> <cpp:value>((OP_MASK_RRT | OP_MASK_ROPX | OP_MASK_OP))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_RDCTL</name></cpp:macro> <cpp:value>((OP_MASK_RRS | OP_MASK_RRT | OP_MASK_ROPX | OP_MASK_OP))</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OP_MASK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK</name></cpp:macro> <cpp:value>0xffffffff</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_IW_A</name><parameter_list>(<parameter><type><name>Iw</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((Iw) &gt;&gt; IW_A_LSB) &amp; IW_A_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_IW_B</name><parameter_list>(<parameter><type><name>Iw</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((Iw) &gt;&gt; IW_B_LSB) &amp; IW_B_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_IW_C</name><parameter_list>(<parameter><type><name>Iw</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((Iw) &gt;&gt; IW_C_LSB) &amp; IW_C_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_IW_CONTROL_REGNUM</name><parameter_list>(<parameter><type><name>Iw</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((Iw) &gt;&gt; IW_CONTROL_REGNUM_LSB) &amp; IW_CONTROL_REGNUM_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_IW_IMM16</name><parameter_list>(<parameter><type><name>Iw</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((Iw) &gt;&gt; IW_IMM16_LSB) &amp; IW_IMM16_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_IW_IMM26</name><parameter_list>(<parameter><type><name>Iw</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((Iw) &gt;&gt; IW_IMM26_LSB) &amp; IW_IMM26_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_IW_OP</name><parameter_list>(<parameter><type><name>Iw</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((Iw) &gt;&gt; IW_OP_LSB) &amp; IW_OP_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_IW_OPX</name><parameter_list>(<parameter><type><name>Iw</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((Iw) &gt;&gt; IW_OPX_LSB) &amp; IW_OPX_MASK)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>nios2_opcode</name></name></type> <name><name>nios2_builtin_opcodes</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>int</name></type> <name>bfd_nios2_num_builtin_opcodes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>nios2_opcode</name></name> <modifier>*</modifier></type><name>nios2_opcodes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>bfd_nios2_num_opcodes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>nios2_reg</name></name></type> <name><name>nios2_builtin_regs</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>nios2_reg</name></name> <modifier>*</modifier></type><name>nios2_regs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>int</name></type> <name>nios2_num_builtin_regs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>nios2_num_regs</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMOPCODES</name></cpp:macro> <cpp:value>bfd_nios2_num_opcodes</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMREGISTERS</name></cpp:macro> <cpp:value>nios2_num_regs;</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>nios2_opcode</name></name> <modifier>*</modifier></type><name>nios2_find_opcode_hash</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
