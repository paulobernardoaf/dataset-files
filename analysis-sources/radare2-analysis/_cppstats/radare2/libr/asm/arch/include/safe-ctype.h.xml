<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\include\safe-ctype.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOST_CHARSET_UNKNOWN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOST_CHARSET_ASCII</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOST_CHARSET_EBCDIC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="char">'\n'</literal> <operator>==</operator> <literal type="number">0x0A</literal> <operator>&amp;&amp;</operator> <literal type="char">' '</literal> <operator>==</operator> <literal type="number">0x20</literal> <operator>&amp;&amp;</operator> <literal type="char">'0'</literal> <operator>==</operator> <literal type="number">0x30</literal> <operator>&amp;&amp;</operator> <literal type="char">'A'</literal> <operator>==</operator> <literal type="number">0x41</literal> <operator>&amp;&amp;</operator> <literal type="char">'a'</literal> <operator>==</operator> <literal type="number">0x61</literal> <operator>&amp;&amp;</operator> <literal type="char">'!'</literal> <operator>==</operator> <literal type="number">0x21</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOST_CHARSET</name></cpp:macro> <cpp:value>HOST_CHARSET_ASCII</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="char">'\n'</literal> <operator>==</operator> <literal type="number">0x15</literal> <operator>&amp;&amp;</operator> <literal type="char">' '</literal> <operator>==</operator> <literal type="number">0x40</literal> <operator>&amp;&amp;</operator> <literal type="char">'0'</literal> <operator>==</operator> <literal type="number">0xF0</literal> <operator>&amp;&amp;</operator> <literal type="char">'A'</literal> <operator>==</operator> <literal type="number">0xC1</literal> <operator>&amp;&amp;</operator> <literal type="char">'a'</literal> <operator>==</operator> <literal type="number">0x81</literal> <operator>&amp;&amp;</operator> <literal type="char">'!'</literal> <operator>==</operator> <literal type="number">0x5A</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOST_CHARSET</name></cpp:macro> <cpp:value>HOST_CHARSET_EBCDIC</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOST_CHARSET</name></cpp:macro> <cpp:value>HOST_CHARSET_UNKNOWN</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <block>{

<decl><name>_sch_isblank</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>, 

<decl><name>_sch_iscntrl</name> <init>= <expr><literal type="number">0x0002</literal></expr></init></decl>, 

<decl><name>_sch_isdigit</name> <init>= <expr><literal type="number">0x0004</literal></expr></init></decl>, 

<decl><name>_sch_islower</name> <init>= <expr><literal type="number">0x0008</literal></expr></init></decl>, 

<decl><name>_sch_isprint</name> <init>= <expr><literal type="number">0x0010</literal></expr></init></decl>, 

<decl><name>_sch_ispunct</name> <init>= <expr><literal type="number">0x0020</literal></expr></init></decl>, 

<decl><name>_sch_isspace</name> <init>= <expr><literal type="number">0x0040</literal></expr></init></decl>, 

<decl><name>_sch_isupper</name> <init>= <expr><literal type="number">0x0080</literal></expr></init></decl>, 

<decl><name>_sch_isxdigit</name> <init>= <expr><literal type="number">0x0100</literal></expr></init></decl>, 

<decl><name>_sch_isidst</name> <init>= <expr><literal type="number">0x0200</literal></expr></init></decl>, 

<decl><name>_sch_isvsp</name> <init>= <expr><literal type="number">0x0400</literal></expr></init></decl>, 

<decl><name>_sch_isnvsp</name> <init>= <expr><literal type="number">0x0800</literal></expr></init></decl>, 

<decl><name>_sch_isalpha</name> <init>= <expr><name>_sch_isupper</name><operator>|</operator><name>_sch_islower</name></expr></init></decl>, 

<decl><name>_sch_isalnum</name> <init>= <expr><name>_sch_isalpha</name><operator>|</operator><name>_sch_isdigit</name></expr></init></decl>, 

<decl><name>_sch_isidnum</name> <init>= <expr><name>_sch_isidst</name><operator>|</operator><name>_sch_isdigit</name></expr></init></decl>, 

<decl><name>_sch_isgraph</name> <init>= <expr><name>_sch_isalnum</name><operator>|</operator><name>_sch_ispunct</name></expr></init></decl>, 

<decl><name>_sch_iscppsp</name> <init>= <expr><name>_sch_isvsp</name><operator>|</operator><name>_sch_isnvsp</name></expr></init></decl>, 

<decl><name>_sch_isbasic</name> <init>= <expr><name>_sch_isprint</name><operator>|</operator><name>_sch_iscppsp</name></expr></init></decl> 

}</block>;</enum>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>_sch_istable</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_sch_test</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_sch_istable[(c) &amp; 0xff] &amp; (unsigned short)(bit))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISALPHA</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_sch_test(c, _sch_isalpha)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISALNUM</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_sch_test(c, _sch_isalnum)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISBLANK</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_sch_test(c, _sch_isblank)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISCNTRL</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_sch_test(c, _sch_iscntrl)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISDIGIT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_sch_test(c, _sch_isdigit)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISGRAPH</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_sch_test(c, _sch_isgraph)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISLOWER</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_sch_test(c, _sch_islower)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISPRINT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_sch_test(c, _sch_isprint)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISPUNCT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_sch_test(c, _sch_ispunct)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISSPACE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_sch_test(c, _sch_isspace)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISUPPER</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_sch_test(c, _sch_isupper)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISXDIGIT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_sch_test(c, _sch_isxdigit)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISIDNUM</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_sch_test(c, _sch_isidnum)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISIDST</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_sch_test(c, _sch_isidst)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_ISOBASIC</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_sch_test(c, _sch_isbasic)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_VSPACE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_sch_test(c, _sch_isvsp)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_NVSPACE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_sch_test(c, _sch_isnvsp)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SPACE_OR_NUL</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_sch_test(c, _sch_iscppsp)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>_sch_toupper</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>_sch_tolower</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOUPPER</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_sch_toupper[(c) &amp; 0xff]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOLOWER</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_sch_tolower[(c) &amp; 0xff]</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>isalpha</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isalpha</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_not_use_isalpha_with_safe_ctype</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>isalnum</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isalnum</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_not_use_isalnum_with_safe_ctype</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>iscntrl</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iscntrl</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_not_use_iscntrl_with_safe_ctype</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>isdigit</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isdigit</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_not_use_isdigit_with_safe_ctype</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>isgraph</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isgraph</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_not_use_isgraph_with_safe_ctype</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>islower</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>islower</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_not_use_islower_with_safe_ctype</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>isprint</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isprint</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_not_use_isprint_with_safe_ctype</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ispunct</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ispunct</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_not_use_ispunct_with_safe_ctype</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>isspace</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isspace</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_not_use_isspace_with_safe_ctype</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>isupper</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isupper</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_not_use_isupper_with_safe_ctype</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>isxdigit</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isxdigit</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_not_use_isxdigit_with_safe_ctype</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>toupper</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>toupper</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_not_use_toupper_with_safe_ctype</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>tolower</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tolower</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_not_use_tolower_with_safe_ctype</cpp:value></cpp:define>

</unit>
