<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\v850\v850_disas.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_endian.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v850_disas.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>instrs</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>V850_MOV</name></expr>]</index> <operator>=</operator> <literal type="string">"mov"</literal></expr>,

<expr><index>[<expr><name>V850_NOT</name></expr>]</index> <operator>=</operator> <literal type="string">"not"</literal></expr>,

<expr><index>[<expr><name>V850_DIVH</name></expr>]</index> <operator>=</operator> <literal type="string">"divh"</literal></expr>,

<expr><index>[<expr><name>V850_JMP</name></expr>]</index> <operator>=</operator> <literal type="string">"jmp"</literal></expr>,

<expr><index>[<expr><name>V850_SATSUBR</name></expr>]</index> <operator>=</operator> <literal type="string">"satsubr"</literal></expr>,

<expr><index>[<expr><name>V850_SATSUB</name></expr>]</index> <operator>=</operator> <literal type="string">"stasub"</literal></expr>,

<expr><index>[<expr><name>V850_SATADD</name></expr>]</index> <operator>=</operator> <literal type="string">"satadd"</literal></expr>,

<expr><index>[<expr><name>V850_MULH</name></expr>]</index> <operator>=</operator> <literal type="string">"mulh"</literal></expr>,

<expr><index>[<expr><name>V850_OR</name></expr>]</index> <operator>=</operator> <literal type="string">"or"</literal></expr>,

<expr><index>[<expr><name>V850_XOR</name></expr>]</index> <operator>=</operator> <literal type="string">"xor"</literal></expr>,

<expr><index>[<expr><name>V850_AND</name></expr>]</index> <operator>=</operator> <literal type="string">"and"</literal></expr>,

<expr><index>[<expr><name>V850_TST</name></expr>]</index> <operator>=</operator> <literal type="string">"tst"</literal></expr>,

<expr><index>[<expr><name>V850_SUBR</name></expr>]</index> <operator>=</operator> <literal type="string">"subr"</literal></expr>,

<expr><index>[<expr><name>V850_SUB</name></expr>]</index> <operator>=</operator> <literal type="string">"sub"</literal></expr>,

<expr><index>[<expr><name>V850_ADD</name></expr>]</index> <operator>=</operator> <literal type="string">"add"</literal></expr>,

<expr><index>[<expr><name>V850_CMP</name></expr>]</index> <operator>=</operator> <literal type="string">"cmp"</literal></expr>,

<expr><index>[<expr><name>V850_MOV_IMM5</name></expr>]</index> <operator>=</operator> <literal type="string">"mov"</literal></expr>,

<expr><index>[<expr><name>V850_SATADD_IMM5</name></expr>]</index> <operator>=</operator> <literal type="string">"satadd"</literal></expr>,

<expr><index>[<expr><name>V850_ADD_IMM5</name></expr>]</index> <operator>=</operator> <literal type="string">"add"</literal></expr>,

<expr><index>[<expr><name>V850_CMP_IMM5</name></expr>]</index> <operator>=</operator> <literal type="string">"cmp"</literal></expr>,

<expr><index>[<expr><name>V850_SHR_IMM5</name></expr>]</index> <operator>=</operator> <literal type="string">"shr"</literal></expr>,

<expr><index>[<expr><name>V850_SAR_IMM5</name></expr>]</index> <operator>=</operator> <literal type="string">"sar"</literal></expr>,

<expr><index>[<expr><name>V850_SHL_IMM5</name></expr>]</index> <operator>=</operator> <literal type="string">"shl"</literal></expr>,

<expr><index>[<expr><name>V850_MULH_IMM5</name></expr>]</index> <operator>=</operator> <literal type="string">"mulh"</literal></expr>,

<expr><index>[<expr><name>V850_SLDB</name></expr>]</index> <operator>=</operator> <literal type="string">"sldb"</literal></expr>,

<expr><index>[<expr><name>V850_SSTB</name></expr>]</index> <operator>=</operator> <literal type="string">"sstb"</literal></expr>,

<expr><index>[<expr><name>V850_SLDH</name></expr>]</index> <operator>=</operator> <literal type="string">"sldh"</literal></expr>,

<expr><index>[<expr><name>V850_SSTH</name></expr>]</index> <operator>=</operator> <literal type="string">"ssth"</literal></expr>,

<expr><index>[<expr><name>V850_SLDW</name></expr>]</index> <operator>=</operator> <literal type="string">"sldw"</literal></expr>,

<expr><index>[<expr><name>V850_SSTW</name></expr>]</index> <operator>=</operator> <literal type="string">"sstw"</literal></expr>,

<expr><index>[<expr><name>V850_BCOND</name></expr>]</index> <operator>=</operator> <literal type="string">"bcond"</literal></expr>,

<expr><index>[<expr><name>V850_ADDI</name></expr>]</index> <operator>=</operator> <literal type="string">"addi"</literal></expr>,

<expr><index>[<expr><name>V850_MOVEA</name></expr>]</index> <operator>=</operator> <literal type="string">"movea"</literal></expr>,

<expr><index>[<expr><name>V850_MOVHI</name></expr>]</index> <operator>=</operator> <literal type="string">"movhi"</literal></expr>,

<expr><index>[<expr><name>V850_SATSUBI</name></expr>]</index> <operator>=</operator> <literal type="string">"satsubi"</literal></expr>,

<expr><index>[<expr><name>V850_ORI</name></expr>]</index> <operator>=</operator> <literal type="string">"ori"</literal></expr>,

<expr><index>[<expr><name>V850_XORI</name></expr>]</index> <operator>=</operator> <literal type="string">"xori"</literal></expr>,

<expr><index>[<expr><name>V850_ANDI</name></expr>]</index> <operator>=</operator> <literal type="string">"andi"</literal></expr>,

<expr><index>[<expr><name>V850_MULHI</name></expr>]</index> <operator>=</operator> <literal type="string">"mulhi"</literal></expr>,

<expr><index>[<expr><name>V850_LDB</name></expr>]</index> <operator>=</operator> <literal type="string">"ld"</literal></expr>,

<expr><index>[<expr><name>V850_LDHW</name></expr>]</index> <operator>=</operator> <literal type="string">"ld"</literal></expr>,

<expr><index>[<expr><name>V850_STB</name></expr>]</index> <operator>=</operator> <literal type="string">"st"</literal></expr>,

<expr><index>[<expr><name>V850_STHW</name></expr>]</index> <operator>=</operator> <literal type="string">"st"</literal></expr>,

<expr><index>[<expr><name>V850_JARL1</name></expr>]</index> <operator>=</operator> <literal type="string">"jarl"</literal></expr>,

<expr><index>[<expr><name>V850_JARL2</name></expr>]</index> <operator>=</operator> <literal type="string">"jarl"</literal></expr>,

<expr><index>[<expr><name>V850_BIT_MANIP</name></expr>]</index> <operator>=</operator> <literal type="string">""</literal></expr>,

<expr><index>[<expr><name>V850_EXT1</name></expr>]</index> <operator>=</operator> <literal type="string">""</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>bit_instrs</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>V850_BIT_SET1</name></expr>]</index> <operator>=</operator> <literal type="string">"set1"</literal></expr>,

<expr><index>[<expr><name>V850_BIT_NOT1</name></expr>]</index> <operator>=</operator> <literal type="string">"not1"</literal></expr>,

<expr><index>[<expr><name>V850_BIT_CLR1</name></expr>]</index> <operator>=</operator> <literal type="string">"clr1"</literal></expr>,

<expr><index>[<expr><name>V850_BIT_TST1</name></expr>]</index> <operator>=</operator> <literal type="string">"tst1"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ext_instrs1</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>V850_EXT_SETF</name></expr>]</index> <operator>=</operator> <literal type="string">"setf"</literal></expr>,

<expr><index>[<expr><name>V850_EXT_LDSR</name></expr>]</index> <operator>=</operator> <literal type="string">"ldsr"</literal></expr>,

<expr><index>[<expr><name>V850_EXT_STSR</name></expr>]</index> <operator>=</operator> <literal type="string">"stsr"</literal></expr>,

<expr><index>[<expr><name>V850_EXT_SHR</name></expr>]</index> <operator>=</operator> <literal type="string">"shr"</literal></expr>,

<expr><index>[<expr><name>V850_EXT_SAR</name></expr>]</index> <operator>=</operator> <literal type="string">"sar"</literal></expr>,

<expr><index>[<expr><name>V850_EXT_SHL</name></expr>]</index> <operator>=</operator> <literal type="string">"shl"</literal></expr>,

<expr><index>[<expr><name>V850_EXT_TRAP</name></expr>]</index> <operator>=</operator> <literal type="string">"trap"</literal></expr>,

<expr><index>[<expr><name>V850_EXT_HALT</name></expr>]</index> <operator>=</operator> <literal type="string">"halt"</literal></expr>,

<expr><index>[<expr><name>V850_EXT_RETI</name></expr>]</index> <operator>=</operator> <literal type="string">"reti"</literal></expr>,

<expr><index>[<expr><name>V850_EXT_EXT2</name></expr>]</index> <operator>=</operator> <literal type="string">"ext2"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ext_instrs2</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>V850_EXT_DI</name></expr>]</index> <operator>=</operator> <literal type="string">"di"</literal></expr>,

<expr><index>[<expr><name>V850_EXT_EI</name></expr>]</index> <operator>=</operator> <literal type="string">"ei"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>conds</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>V850_COND_V</name></expr>]</index> <operator>=</operator> <literal type="string">"v"</literal></expr>,

<expr><index>[<expr><name>V850_COND_CL</name></expr>]</index> <operator>=</operator> <literal type="string">"cl"</literal></expr>,

<expr><index>[<expr><name>V850_COND_ZE</name></expr>]</index> <operator>=</operator> <literal type="string">"z"</literal></expr>,

<expr><index>[<expr><name>V850_COND_NH</name></expr>]</index> <operator>=</operator> <literal type="string">"nh"</literal></expr>,

<expr><index>[<expr><name>V850_COND_N</name></expr>]</index> <operator>=</operator> <literal type="string">"n"</literal></expr>,

<expr><index>[<expr><name>V850_COND_AL</name></expr>]</index> <operator>=</operator> <literal type="string">""</literal></expr>,

<expr><index>[<expr><name>V850_COND_LT</name></expr>]</index> <operator>=</operator> <literal type="string">"lt"</literal></expr>,

<expr><index>[<expr><name>V850_COND_LE</name></expr>]</index> <operator>=</operator> <literal type="string">"le"</literal></expr>,

<expr><index>[<expr><name>V850_COND_NV</name></expr>]</index> <operator>=</operator> <literal type="string">"nv"</literal></expr>,

<expr><index>[<expr><name>V850_COND_NC</name></expr>]</index> <operator>=</operator> <literal type="string">"nc"</literal></expr>,

<expr><index>[<expr><name>V850_COND_NZ</name></expr>]</index> <operator>=</operator> <literal type="string">"nz"</literal></expr>,

<expr><index>[<expr><name>V850_COND_H</name></expr>]</index> <operator>=</operator> <literal type="string">"h"</literal></expr>,

<expr><index>[<expr><name>V850_COND_NS</name></expr>]</index> <operator>=</operator> <literal type="string">"ns"</literal></expr>,

<expr><index>[<expr><name>V850_COND_SA</name></expr>]</index> <operator>=</operator> <literal type="string">"sa"</literal></expr>,

<expr><index>[<expr><name>V850_COND_GE</name></expr>]</index> <operator>=</operator> <literal type="string">"ge"</literal></expr>,

<expr><index>[<expr><name>V850_COND_GT</name></expr>]</index> <operator>=</operator> <literal type="string">"gt"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_reg_reg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>v850_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>opcode</name> <init>= <expr><call><name>get_opcode</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>instrs</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>instrs</name><index>[<expr><name>opcode</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>V850_JMP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"[r%u]"</literal></expr></argument>,

<argument><expr><call><name>get_reg1</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r%u, r%u"</literal></expr></argument>,

<argument><expr><call><name>get_reg1</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_reg2</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_imm_reg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>v850_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>opcode</name> <init>= <expr><call><name>get_opcode</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>instrs</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>instrs</name><index>[<expr><name>opcode</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>st8</name></type> <name>immed</name> <init>= <expr><call><name>get_reg1</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>immed</name> <operator>&amp;</operator> <literal type="number">0x10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>immed</name> <operator>|=</operator> <literal type="number">0xE0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>immed</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">9</literal> <operator>&amp;&amp;</operator> <name>immed</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%d, r%u"</literal></expr></argument>,

<argument><expr><name>immed</name></expr></argument>, <argument><expr><call><name>get_reg2</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>immed</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"0x%x, r%u"</literal></expr></argument>, <argument><expr><name>immed</name></expr></argument>, <argument><expr><call><name>get_reg2</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"-0x%x, r%u"</literal></expr></argument>, <argument><expr><name>immed</name> <operator>*</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>get_reg2</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_bcond</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>instr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>v850_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

ut16 disp = ((instr &gt;&gt; 4) &amp; 0x7) | (instr &gt;&gt; 11);

disp &lt;&lt;= 1;

snprintf (cmd-&gt;instr, V850_INSTR_MAXLEN - 1, "b%s", conds[instr &amp; 0xF]);

snprintf (cmd-&gt;operands, V850_INSTR_MAXLEN - 1, "0x%x", disp);

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>ut64</name></type> <name>delta</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&amp;</operator> <literal type="number">0x100</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>|=</operator> <literal type="number">0xFE00</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"b%s"</literal></expr></argument>, <argument><expr><name><name>conds</name><index>[<expr><name>instr</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_jarl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>v850_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>word1</name> <init>= <expr><call><name>r_read_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>word2</name> <init>= <expr><call><name>r_read_at_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg</name> <init>= <expr><call><name>get_reg2</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>disp</name> <init>= <expr><operator>(</operator><name>word2</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <call><name>get_reg1</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>instrs</name><index>[<expr><call><name>get_opcode</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0x%08x, r%d"</literal></expr></argument>,

<argument><expr><name>disp</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_3operands</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>v850_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>word1</name> <init>= <expr><call><name>r_read_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>word2</name> <init>= <expr><call><name>r_read_at_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>instrs</name><index>[<expr><call><name>get_opcode</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0x%x, r%d, r%d"</literal></expr></argument>,

<argument><expr><name>word2</name></expr></argument>, <argument><expr><call><name>get_reg1</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_reg2</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_load_store</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>v850_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>word1</name> <init>= <expr><call><name>r_read_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>word2</name> <init>= <expr><call><name>r_read_at_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>get_opcode</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>V850_STB</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s.b"</literal></expr></argument>, <argument><expr><name><name>instrs</name><index>[<expr><call><name>get_opcode</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r%d, 0x%x[r%d]"</literal></expr></argument>,

<argument><expr><call><name>get_reg2</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>word2</name></expr></argument>, <argument><expr><call><name>get_reg1</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V850_LDB</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s.b"</literal></expr></argument>, <argument><expr><name><name>instrs</name><index>[<expr><call><name>get_opcode</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0x%x[r%d], r%d"</literal></expr></argument>,

<argument><expr><call><name>get_reg1</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>word2</name></expr></argument>, <argument><expr><call><name>get_reg2</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V850_LDHW</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s.%c"</literal></expr></argument>,

<argument><expr><name><name>instrs</name><index>[<expr><call><name>get_opcode</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>word2</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="char">'w'</literal></expr> </then><else>: <expr><literal type="char">'h'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0x%x[r%d], r%d"</literal></expr></argument>,

<argument><expr><name>word2</name> <operator>&amp;</operator> <literal type="number">0xFFFE</literal></expr></argument>, <argument><expr><call><name>get_reg1</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_reg2</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V850_STHW</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s.%c"</literal></expr></argument>,

<argument><expr><name><name>instrs</name><index>[<expr><call><name>get_opcode</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>word2</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="char">'w'</literal></expr> </then><else>: <expr><literal type="char">'h'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r%d, 0x%x[r%d]"</literal></expr></argument>,

<argument><expr><call><name>get_reg2</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>word2</name> <operator>&amp;</operator> <literal type="number">0xFFFE</literal></expr></argument>, <argument><expr><call><name>get_reg1</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_bit_op</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>v850_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>word1</name> <init>= <expr><call><name>r_read_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>word2</name> <init>= <expr><call><name>r_read_at_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>bit_instrs</name><index>[<expr><name>word1</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>get_reg1</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%u, 0x%x[r%d]"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>word1</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></argument>, <argument><expr><name>word2</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_extended</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>v850_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>word1</name> <init>= <expr><call><name>r_read_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>word2</name> <init>= <expr><call><name>r_read_at_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>ext_instrs1</name><index>[<expr><call><name>get_subopcode</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>get_subopcode</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>V850_EXT_SETF</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s, r%d"</literal></expr></argument>,

<argument><expr><name><name>conds</name><index>[<expr><name>word1</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>get_reg2</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V850_EXT_LDSR</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r%d, r%d"</literal></expr></argument>,

<argument><expr><call><name>get_reg2</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_reg1</name><argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V850_EXT_STSR</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r%d, r%d"</literal></expr></argument>,

<argument><expr><call><name>get_reg1</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_reg2</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V850_EXT_SHR</name></expr>:</case>

<case>case <expr><name>V850_EXT_SAR</name></expr>:</case>

<case>case <expr><name>V850_EXT_SHL</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"r%d, r%d"</literal></expr></argument>,

<argument><expr><call><name>get_reg1</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_reg2</name> <argument_list>(<argument><expr><name>word2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V850_EXT_TRAP</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0x%x"</literal></expr></argument>,

<argument><expr><call><name>get_reg1</name> <argument_list>(<argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V850_EXT_HALT</name></expr>:</case>

<case>case <expr><name>V850_EXT_RETI</name></expr>:</case>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V850_EXT_EXT2</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>V850_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>ext_instrs2</name><index>[<expr><operator>(</operator><name>word2</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>v850_decode_command</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>v850_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>in</name> <init>= <expr><call><name>r_read_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>get_opcode</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>V850_MOV</name></expr>:</case>

<case>case <expr><name>V850_NOT</name></expr>:</case>

<case>case <expr><name>V850_DIVH</name></expr>:</case>

<case>case <expr><name>V850_JMP</name></expr>:</case>

<case>case <expr><name>V850_SATSUBR</name></expr>:</case>

<case>case <expr><name>V850_SATSUB</name></expr>:</case>

<case>case <expr><name>V850_SATADD</name></expr>:</case>

<case>case <expr><name>V850_MULH</name></expr>:</case>

<case>case <expr><name>V850_OR</name></expr>:</case>

<case>case <expr><name>V850_XOR</name></expr>:</case>

<case>case <expr><name>V850_AND</name></expr>:</case>

<case>case <expr><name>V850_TST</name></expr>:</case>

<case>case <expr><name>V850_SUBR</name></expr>:</case>

<case>case <expr><name>V850_SUB</name></expr>:</case>

<case>case <expr><name>V850_ADD</name></expr>:</case>

<case>case <expr><name>V850_CMP</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_reg_reg</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V850_MOV_IMM5</name></expr>:</case>

<case>case <expr><name>V850_SATADD_IMM5</name></expr>:</case>

<case>case <expr><name>V850_ADD_IMM5</name></expr>:</case>

<case>case <expr><name>V850_CMP_IMM5</name></expr>:</case>

<case>case <expr><name>V850_SHR_IMM5</name></expr>:</case>

<case>case <expr><name>V850_SAR_IMM5</name></expr>:</case>

<case>case <expr><name>V850_SHL_IMM5</name></expr>:</case>

<case>case <expr><name>V850_MULH_IMM5</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_imm_reg</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V850_ADDI</name></expr>:</case>

<case>case <expr><name>V850_MOVEA</name></expr>:</case>

<case>case <expr><name>V850_MOVHI</name></expr>:</case>

<case>case <expr><name>V850_SATSUBI</name></expr>:</case>

<case>case <expr><name>V850_ORI</name></expr>:</case>

<case>case <expr><name>V850_XORI</name></expr>:</case>

<case>case <expr><name>V850_ANDI</name></expr>:</case>

<case>case <expr><name>V850_MULHI</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_3operands</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V850_JARL1</name></expr>:</case>

<case>case <expr><name>V850_JARL2</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_jarl</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V850_STB</name></expr>:</case>

<case>case <expr><name>V850_LDB</name></expr>:</case>

<case>case <expr><name>V850_LDHW</name></expr>:</case>

<case>case <expr><name>V850_STHW</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_load_store</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V850_BIT_MANIP</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_bit_op</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V850_EXT1</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_extended</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>get_opcode</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xB</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_bcond</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
