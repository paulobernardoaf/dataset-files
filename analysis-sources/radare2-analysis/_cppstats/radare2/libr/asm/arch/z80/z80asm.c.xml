<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\z80\z80asm.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R_API_I</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_API_I</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"z80asm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>obuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>obuflen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>write_one_byte</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>obuf[obuflen++] = x</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wrtb</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>obuf[obuflen++] = x</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>mnemonics</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"call"</literal></expr>, <expr><literal type="string">"cpdr"</literal></expr>, <expr><literal type="string">"cpir"</literal></expr>, <expr><literal type="string">"djnz"</literal></expr>, <expr><literal type="string">"halt"</literal></expr>, <expr><literal type="string">"indr"</literal></expr>, <expr><literal type="string">"inir"</literal></expr>, <expr><literal type="string">"lddr"</literal></expr>, <expr><literal type="string">"ldir"</literal></expr>,

<expr><literal type="string">"otdr"</literal></expr>, <expr><literal type="string">"otir"</literal></expr>, <expr><literal type="string">"outd"</literal></expr>, <expr><literal type="string">"outi"</literal></expr>, <expr><literal type="string">"push"</literal></expr>, <expr><literal type="string">"reti"</literal></expr>, <expr><literal type="string">"retn"</literal></expr>, <expr><literal type="string">"rlca"</literal></expr>, <expr><literal type="string">"rrca"</literal></expr>,

<expr><literal type="string">"defb"</literal></expr>, <expr><literal type="string">"defw"</literal></expr>, <expr><literal type="string">"defs"</literal></expr>, <expr><literal type="string">"defm"</literal></expr>,

<expr><literal type="string">"adc"</literal></expr>, <expr><literal type="string">"add"</literal></expr>, <expr><literal type="string">"and"</literal></expr>, <expr><literal type="string">"bit"</literal></expr>, <expr><literal type="string">"ccf"</literal></expr>, <expr><literal type="string">"cpd"</literal></expr>, <expr><literal type="string">"cpi"</literal></expr>, <expr><literal type="string">"cpl"</literal></expr>, <expr><literal type="string">"daa"</literal></expr>, <expr><literal type="string">"dec"</literal></expr>, <expr><literal type="string">"equ"</literal></expr>,

<expr><literal type="string">"exx"</literal></expr>, <expr><literal type="string">"inc"</literal></expr>, <expr><literal type="string">"ind"</literal></expr>, <expr><literal type="string">"ini"</literal></expr>, <expr><literal type="string">"ldd"</literal></expr>, <expr><literal type="string">"ldi"</literal></expr>, <expr><literal type="string">"neg"</literal></expr>, <expr><literal type="string">"nop"</literal></expr>, <expr><literal type="string">"out"</literal></expr>, <expr><literal type="string">"pop"</literal></expr>,

<expr><literal type="string">"res"</literal></expr>, <expr><literal type="string">"ret"</literal></expr>, <expr><literal type="string">"rla"</literal></expr>, <expr><literal type="string">"rlc"</literal></expr>, <expr><literal type="string">"rld"</literal></expr>, <expr><literal type="string">"rra"</literal></expr>, <expr><literal type="string">"rrc"</literal></expr>, <expr><literal type="string">"rrd"</literal></expr>, <expr><literal type="string">"rst"</literal></expr>, <expr><literal type="string">"sbc"</literal></expr>,

<expr><literal type="string">"scf"</literal></expr>, <expr><literal type="string">"set"</literal></expr>, <expr><literal type="string">"sla"</literal></expr>, <expr><literal type="string">"sll"</literal></expr>, <expr><literal type="string">"sli"</literal></expr>, <expr><literal type="string">"sra"</literal></expr>, <expr><literal type="string">"srl"</literal></expr>, <expr><literal type="string">"sub"</literal></expr>, <expr><literal type="string">"xor"</literal></expr>, <expr><literal type="string">"org"</literal></expr>,

<expr><literal type="string">"cp"</literal></expr>, <expr><literal type="string">"di"</literal></expr>, <expr><literal type="string">"ei"</literal></expr>, <expr><literal type="string">"ex"</literal></expr>, <expr><literal type="string">"im"</literal></expr>, <expr><literal type="string">"in"</literal></expr>, <expr><literal type="string">"jp"</literal></expr>, <expr><literal type="string">"jr"</literal></expr>, <expr><literal type="string">"ld"</literal></expr>, <expr><literal type="string">"or"</literal></expr>, <expr><literal type="string">"rl"</literal></expr>, <expr><literal type="string">"rr"</literal></expr>,

<expr><literal type="string">"db"</literal></expr>, <expr><literal type="string">"dw"</literal></expr>, <expr><literal type="string">"ds"</literal></expr>, <expr><literal type="string">"dm"</literal></expr>,

<expr><literal type="string">"include"</literal></expr>, <expr><literal type="string">"incbin"</literal></expr>, <expr><literal type="string">"if"</literal></expr>, <expr><literal type="string">"else"</literal></expr>, <expr><literal type="string">"endif"</literal></expr>, <expr><literal type="string">"end"</literal></expr>, <expr><literal type="string">"macro"</literal></expr>, <expr><literal type="string">"endm"</literal></expr>,

<expr><literal type="string">"seek"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>addr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>writebyte</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>readbyte</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>readword</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>indexjmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bitsetres</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>indexed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>verbose</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>comma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>baseaddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>mem_delimiter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>z80buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>define_macro</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>sp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>stack</name></name></type> <name><name>stack</name><index>[<expr><name>MAX_INCLUDE</name></expr>]</index></name></decl>;</decl_stmt> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"expressions.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>printerr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

va_list l;

va_start (l, fmt);

if ((sp &lt; 0) || (stack[sp].name == 0)) {

fprintf (stderr, "internal assembler error, sp == %i\n", sp);

vfprintf (stderr, fmt, l);

}

fprintf (stderr, "%s%s:%d: %s: ", stack[sp].dir? stack[sp].dir-&gt;name: "",

stack[sp].name, stack[sp].line, error? "error": "warning");

vfprintf (stderr, fmt, l);

va_end (l);

if (error) {

errors++;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delspc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <call><name>isspace</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ptr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rd_comma</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"`,' expected. Remainder of line: %s\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>has_argument</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><call><name>delspc</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">','</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>skipword</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>delimiter</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>valid</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rd_expr</name> <argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>delimiter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valid</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>indx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"unexpected end of line\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>comma</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rd_comma</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><operator>*</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>check</name> <init>= <expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>had_expr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>list</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>check</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>check</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>check</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>expr</name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mem_delimiter</name> <operator>=</operator> <name><name>check</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rd_expr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><name>mem_delimiter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>had_expr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>check</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>expr</name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mem_delimiter</name> <operator>=</operator> <name><name>check</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rd_expr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><name>mem_delimiter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>check</name> <operator>==</operator> <operator>*</operator><name>input</name> <operator>||</operator> <operator>(</operator><operator>*</operator><name>check</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>check</name> <operator>&lt;=</operator> <literal type="char">'z'</literal>

<operator>&amp;&amp;</operator> <operator>*</operator><name>check</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="char">'A'</literal> <operator>==</operator> <operator>*</operator><name>input</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>input</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>check</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>check</name> <operator>||</operator> <operator>(</operator><call><name>isalnum</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>)</operator> <name><name>check</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isalnum</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>)</operator> <name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>had_expr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>input</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>input</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>

<expr_stmt><expr><name>comma</name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>readcommand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>mnemonics</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>readlabel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>store</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pos</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dummy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>label</name></name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>previous</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</init> <condition><expr><operator>*</operator><name>d</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>d</name> <operator>!=</operator> <literal type="char">';'</literal></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</init> <condition><expr><operator>!</operator><call><name>strchr</name> <argument_list>(<argument><expr><literal type="string">" \r\n\t"</literal></expr></argument>, <argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <name>d</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pos</name> <operator>||</operator> <name>pos</name> <operator>&gt;=</operator> <name>c</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"`:' found without a label"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>store</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dummy</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>rd_label</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>previous</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>||</operator> <name>j</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"duplicate definition of label %s\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>label</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>c</name> <operator>-</operator> <operator>*</operator><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"not enough memory to store label %s\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

*p = c;

return;

}

strncpy (buf-&gt;name, *p, c - *p - 1);

buf-&gt;name[c - *p - 1] = 0;

*p = c;

buf-&gt;value = addr;

if (previous) {

buf-&gt;next = previous-&gt;next;

} else {

buf-&gt;next = NULL;

}

buf-&gt;prev = previous;

buf-&gt;valid = 1;

buf-&gt;busy = 0;

buf-&gt;ref = NULL;

if (buf-&gt;prev) {

buf-&gt;prev-&gt;next = buf;

}

if (buf-&gt;next) {

buf-&gt;next-&gt;prev = buf;

}

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compute_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>reference</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow_invalid</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>valid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>backup_addr</name> <init>= <expr><name>addr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>backup_baseaddr</name> <init>= <expr><name>baseaddr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>backup_comma</name> <init>= <expr><name>comma</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>backup_file</name> <init>= <expr><name>file</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>backup_sp</name> <init>= <expr><name>sp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>baseaddr</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>baseaddr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>comma</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>comma</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>infile</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>input</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ref</name><operator>-&gt;</operator><name>done</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>computed_value</name></name> <operator>=</operator> <call><name>rd_expr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>delimiter</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>allow_invalid</name></expr>?</condition><then> <expr><operator>&amp;</operator><name>valid</name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>valid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>backup_sp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <name>backup_addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>baseaddr</name> <operator>=</operator> <name>backup_baseaddr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>comma</name> <operator>=</operator> <name>backup_comma</name></expr>;</expr_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name>backup_file</name></expr>;</expr_stmt>

<return>return <expr><name><name>ref</name><operator>-&gt;</operator><name>computed_value</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_word</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>delimiter</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>readword</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mem_delimiter</name> <operator>=</operator> <name>delimiter</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skipword</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>delimiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_byte</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>delimiter</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>readbyte</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>writebyte</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mem_delimiter</name> <operator>=</operator> <name>delimiter</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skipword</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>delimiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_ex1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"( sp )"</literal></expr>, <expr><literal type="string">"de"</literal></expr>, <expr><literal type="string">"af"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_in</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"l"</literal></expr>, <expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"a"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_out</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"l"</literal></expr>, <expr><literal type="string">"0"</literal></expr>, <expr><literal type="string">"a"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_nnc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"( c )"</literal></expr>, <expr><literal type="string">"(*)"</literal></expr>, <expr><literal type="string">"a , (*)"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>readbyte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"( c )"</literal></expr>, <expr><literal type="string">"( bc )"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_a_hl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"hl"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_ld</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldBC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldDE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldHL</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldSP</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldIX</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldIY</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldB</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldC</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldD</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldH</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldL</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld_HL</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldA</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldI</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldR</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld_BC</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld_DE</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld_IX</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld_IY</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld_NN</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"ixh"</literal></expr>, <expr><literal type="string">"ixl"</literal></expr>, <expr><literal type="string">"iyh"</literal></expr>, <expr><literal type="string">"iyl"</literal></expr>, <expr><literal type="string">"bc"</literal></expr>, <expr><literal type="string">"de"</literal></expr>, <expr><literal type="string">"hl"</literal></expr>, <expr><literal type="string">"sp"</literal></expr>, <expr><literal type="string">"ix"</literal></expr>,

<expr><literal type="string">"iy"</literal></expr>, <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"l"</literal></expr>, <expr><literal type="string">"( hl )"</literal></expr>, <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"i"</literal></expr>,

<expr><literal type="string">"r"</literal></expr>, <expr><literal type="string">"( bc )"</literal></expr>, <expr><literal type="string">"( de )"</literal></expr>, <expr><literal type="string">"( ix +)"</literal></expr>, <expr><literal type="string">"(iy +)"</literal></expr>, <expr><literal type="string">"(*)"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>indexed</name> <operator>=</operator> <literal type="number">0xdd</literal></expr>;</expr_stmt>

<return>return <expr><name>ldH</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>indexed</name> <operator>=</operator> <literal type="number">0xfd</literal></expr>;</expr_stmt>

<return>return <expr><name>ldH</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>ldIX</name> <operator>||</operator> <name>i</name> <operator>==</operator> <name>ldIY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>indexed</name> <operator>=</operator> <ternary><condition><expr><name>i</name> <operator>==</operator> <name>ldIX</name></expr>?</condition><then> <expr><literal type="number">0xDD</literal></expr></then><else>: <expr><literal type="number">0xFD</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>ldHL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>ld_IX</name> <operator>||</operator> <name>i</name> <operator>==</operator> <name>ld_IY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>indexjmp</name> <operator>=</operator> <name>nn</name></expr>;</expr_stmt>

<expr_stmt><expr><name>indexed</name> <operator>=</operator> <ternary><condition><expr><name>i</name> <operator>==</operator> <name>ld_IX</name></expr>?</condition><then> <expr><literal type="number">0xDD</literal></expr></then><else>: <expr><literal type="number">0xFD</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>ld_HL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>ld_NN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>readword</name> <operator>=</operator> <name>nn</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_jp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"nz"</literal></expr>, <expr><literal type="string">"z"</literal></expr>, <expr><literal type="string">"nc"</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"po"</literal></expr>, <expr><literal type="string">"pe"</literal></expr>, <expr><literal type="string">"p"</literal></expr>, <expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"( ix )"</literal></expr>, <expr><literal type="string">"( iy )"</literal></expr>,

<expr><literal type="string">"(hl)"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">11</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>indexed</name> <operator>=</operator> <literal type="number">0xDD</literal> <operator>+</operator> <literal type="number">0x20</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_jr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"nz"</literal></expr>, <expr><literal type="string">"z"</literal></expr>, <expr><literal type="string">"nc"</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_a</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"a"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_stack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"bc"</literal></expr>, <expr><literal type="string">"de"</literal></expr>, <expr><literal type="string">"hl"</literal></expr>, <expr><literal type="string">"af"</literal></expr>, <expr><literal type="string">"ix"</literal></expr>, <expr><literal type="string">"iy"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>indexed</name> <operator>=</operator> <literal type="number">0xDD</literal> <operator>+</operator> <literal type="number">0x20</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">3</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_r_add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>addHL</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"ixl"</literal></expr>, <expr><literal type="string">"ixh"</literal></expr>, <expr><literal type="string">"iyl"</literal></expr>, <expr><literal type="string">"iyh"</literal></expr>, <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"l"</literal></expr>,

<expr><literal type="string">"( hl )"</literal></expr>, <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"( ix +)"</literal></expr>, <expr><literal type="string">"( iy +)"</literal></expr>, <expr><literal type="string">"hl"</literal></expr>, <expr><literal type="string">"ix"</literal></expr>, <expr><literal type="string">"iy"</literal></expr>, <expr><literal type="string">"*"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">18</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>readbyte</name> <operator>=</operator> <name>nn</name></expr>;</expr_stmt>

<expr_stmt><expr><name>writebyte</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">7</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>indexed</name> <operator>=</operator> <literal type="number">0xDD</literal> <operator>+</operator> <literal type="number">0x20</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>addHL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>indexed</name> <operator>=</operator> <literal type="number">0xdd</literal> <operator>+</operator> <literal type="number">0x20</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">6</literal> <operator>-</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>indexed</name> <operator>=</operator> <literal type="number">0xDD</literal> <operator>+</operator> <literal type="number">0x20</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>indexjmp</name> <operator>=</operator> <name>nn</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">7</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_rr_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"bc"</literal></expr>, <expr><literal type="string">"de"</literal></expr>, <expr><literal type="string">"hl"</literal></expr>, <expr><literal type="string">"sp"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_rrxx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>listx</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"bc"</literal></expr>, <expr><literal type="string">"de"</literal></expr>, <expr><literal type="string">"ix"</literal></expr>, <expr><literal type="string">"sp"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>listy</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"bc"</literal></expr>, <expr><literal type="string">"de"</literal></expr>, <expr><literal type="string">"iy"</literal></expr>, <expr><literal type="string">"sp"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"bc"</literal></expr>, <expr><literal type="string">"de"</literal></expr>, <expr><literal type="string">"hl"</literal></expr>, <expr><literal type="string">"sp"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>indexed</name> <operator>==</operator> <literal type="number">0xdd</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>listx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>indexed</name> <operator>==</operator> <literal type="number">0xfd</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>listy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"ixl"</literal></expr>, <expr><literal type="string">"ixh"</literal></expr>, <expr><literal type="string">"iyl"</literal></expr>, <expr><literal type="string">"iyh"</literal></expr>, <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"l"</literal></expr>, <expr><literal type="string">"( hl )"</literal></expr>,

<expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"( ix +)"</literal></expr>, <expr><literal type="string">"( iy +)"</literal></expr>, <expr><literal type="string">"*"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>readbyte</name> <operator>=</operator> <name>nn</name></expr>;</expr_stmt>

<expr_stmt><expr><name>writebyte</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">7</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>indexed</name> <operator>=</operator> <literal type="number">0xdd</literal> <operator>+</operator> <literal type="number">0x20</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">6</literal> <operator>-</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>indexed</name> <operator>=</operator> <literal type="number">0xDD</literal> <operator>+</operator> <literal type="number">0x20</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>indexjmp</name> <operator>=</operator> <name>nn</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">7</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_r_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"l"</literal></expr>, <expr><literal type="string">"( hl )"</literal></expr>, <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"( ix +)"</literal></expr>, <expr><literal type="string">"( iy +)"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>indexjmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>indexed</name> <operator>=</operator> <literal type="number">0xDD</literal> <operator>+</operator> <literal type="number">0x20</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">7</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_0_7</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bitsetres</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skipword</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_cc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"nz"</literal></expr>, <expr><literal type="string">"z"</literal></expr>, <expr><literal type="string">"nc"</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"po"</literal></expr>, <expr><literal type="string">"pe"</literal></expr>, <expr><literal type="string">"p"</literal></expr>, <expr><literal type="string">"m"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_r_rr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"iy"</literal></expr>, <expr><literal type="string">"ix"</literal></expr>, <expr><literal type="string">"sp"</literal></expr>, <expr><literal type="string">"hl"</literal></expr>, <expr><literal type="string">"de"</literal></expr>, <expr><literal type="string">"bc"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"h"</literal></expr>,

<expr><literal type="string">"l"</literal></expr>, <expr><literal type="string">"( hl )"</literal></expr>, <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"( ix +)"</literal></expr>, <expr><literal type="string">"( iy +)"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>indexjmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>i</name></expr></argument> &gt;</argument_list></name> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">7</literal> <operator>-</operator> <name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>indexed</name> <operator>=</operator> <literal type="number">0xDD</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">7</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>indexed</name> <operator>=</operator> <literal type="number">0xDD</literal> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <name>i</name><operator>)</operator> <operator>*</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">3</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_hl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"hl"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_hlx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"hl"</literal></expr>, <expr><literal type="string">"ix"</literal></expr>, <expr><literal type="string">"iy"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>indexed</name> <operator>=</operator> <literal type="number">0xDD</literal> <operator>+</operator> <literal type="number">0x20</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_af_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"af'"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_0_2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"0"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_ld_hl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"l"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"*"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>readbyte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>writebyte</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">7</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_ld_nn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld_nnHL</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld_nnA</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"bc"</literal></expr>, <expr><literal type="string">"de"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"sp"</literal></expr>, <expr><literal type="string">"hl"</literal></expr>, <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"ix"</literal></expr>, <expr><literal type="string">"iy"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>indexed</name> <operator>=</operator> <literal type="number">0xdd</literal> <operator>+</operator> <literal type="number">0x20</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>ld_nnHL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_lda</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_N</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_I</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_R</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NN</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"( sp )"</literal></expr>, <expr><literal type="string">"( iy +)"</literal></expr>, <expr><literal type="string">"( de )"</literal></expr>, <expr><literal type="string">"( bc )"</literal></expr>, <expr><literal type="string">"( ix +)"</literal></expr>, <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"h"</literal></expr>,

<expr><literal type="string">"l"</literal></expr>, <expr><literal type="string">"( hl )"</literal></expr>, <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"i"</literal></expr>, <expr><literal type="string">"r"</literal></expr>, <expr><literal type="string">"(*)"</literal></expr>, <expr><literal type="string">"*"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>indexed</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">0xFD</literal></expr></then><else>: <expr><literal type="number">0xDD</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>indexjmp</name> <operator>=</operator> <name>nn</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">7</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">17</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>readbyte</name> <operator>=</operator> <name>nn</name></expr>;</expr_stmt>

<expr_stmt><expr><name>writebyte</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">7</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>readword</name> <operator>=</operator> <name>nn</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>i</name> <operator>-</operator> <literal type="number">5</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_ldbcdehla</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"l"</literal></expr>, <expr><literal type="string">"( hl )"</literal></expr>, <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"( ix +)"</literal></expr>, <expr><literal type="string">"( iy +)"</literal></expr>, <expr><literal type="string">"ixh"</literal></expr>,

<expr><literal type="string">"ixl"</literal></expr>, <expr><literal type="string">"iyh"</literal></expr>, <expr><literal type="string">"iyl"</literal></expr>, <expr><literal type="string">"*"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>readbyte</name> <operator>=</operator> <name>nn</name></expr>;</expr_stmt>

<expr_stmt><expr><name>writebyte</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">7</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0xdd</literal> <operator>+</operator> <literal type="number">0x20</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>indexed</name> <operator>&amp;&amp;</operator> <name>indexed</name> <operator>!=</operator> <name>x</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"illegal use of index registers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>indexed</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">6</literal> <operator>-</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>indexed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"illegal use of index registers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>indexed</name> <operator>=</operator> <literal type="number">0xDD</literal> <operator>+</operator> <literal type="number">0x20</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>indexjmp</name> <operator>=</operator> <name>nn</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">7</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_nn_nn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_NN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"(*)"</literal></expr>, <expr><literal type="string">"*"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><literal type="number">2</literal> <operator>-</operator> <call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>readword</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd_sp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPNN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPHL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"hl"</literal></expr>, <expr><literal type="string">"ix"</literal></expr>, <expr><literal type="string">"iy"</literal></expr>, <expr><literal type="string">"(*)"</literal></expr>, <expr><literal type="string">"*"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>indx</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>readword</name> <operator>=</operator> <name>nn</name></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">4</literal></expr>?</condition><then> <expr><literal type="number">2</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>indexed</name> <operator>=</operator> <literal type="number">0xDD</literal> <operator>+</operator> <literal type="number">0x20</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>assemble</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>_obuf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ifcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>noifcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bufptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt> 

<expr_stmt><expr><name>obuflen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>obuf</name> <operator>=</operator> <name>_obuf</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cmd</name></decl>, <decl><type ref="prev"/><name>cont</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>z80buffer</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cont</name></expr>)</condition> <block>{<block_content>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>bufptr</name> <operator>=</operator> <name>z80buffer</name></expr>;</init> <condition><expr><operator>(</operator><name>bufptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>bufptr</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>bufptr</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>bufptr</name> <operator>=</operator> <name>z80buffer</name></expr>;</init> <condition><expr><operator>(</operator><name>bufptr</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>bufptr</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>bufptr</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>z80buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name>baseaddr</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>line</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>noifcount</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>define_macro</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>readlabel</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>readlabel</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>comma</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>indexed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>indexjmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>writebyte</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>readbyte</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>readword</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>readcommand</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>have_quote</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>Z80_ADC</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_a_hl</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>HL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_rr_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x4A</literal> <operator>+</operator> <literal type="number">0x10</literal> <operator>*</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_r</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x88</literal> <operator>+</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_ADD</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_r_add</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>addHL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_rrxx</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x09</literal> <operator>+</operator> <literal type="number">0x10</literal> <operator>*</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_argument</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>A</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"parse error before: %s\n"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_r</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x80</literal> <operator>+</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x80</literal> <operator>+</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>Z80_AND</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_r</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xA0</literal> <operator>+</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_BIT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rd_0_7</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rd_comma</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_r_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xCB</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x40</literal> <operator>+</operator> <operator>(</operator><name>r</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_CALL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_cc</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xC4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rd_comma</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xCD</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>Z80_CCF</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x3F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_CP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_r</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xB8</literal> <operator>+</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_CPD</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xA9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_CPDR</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xB9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_CPI</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xA1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_CPIR</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xB1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_CPL</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x2F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_DAA</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_DEC</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_r_rr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x05</literal> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <operator>++</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x0B</literal> <operator>+</operator> <literal type="number">0x10</literal> <operator>*</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_DI</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xF3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_DJNZ</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_EI</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xFB</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_EX</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_ex1</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rd_hl</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xEB</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AF</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rd_af_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x08</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rd_hlx</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xE3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>Z80_EXX</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xD9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_HALT</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x76</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_IM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_0_2</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x46</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_IN</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_in</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>A</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_nnc</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>C</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x40</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>A</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xDB</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rd_c</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x40</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_INC</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_r_rr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x04</literal> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <operator>++</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x03</literal> <operator>+</operator> <literal type="number">0x10</literal> <operator>*</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_IND</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xAA</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_INDR</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xBA</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_INI</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xA2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_INIR</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xB2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_JP</name></expr>:</case>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rd_jp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xE9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xC2</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rd_comma</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xC3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>Z80_JR</name></expr>:</case>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rd_jr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rd_comma</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x18</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_LD</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_ld</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ld_BC</name></expr>:</case>

<case>case <expr><name>ld_DE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rd_a</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x02</literal> <operator>+</operator> <literal type="number">0x10</literal> <operator>*</operator> <operator>(</operator><name>r</name> <operator>==</operator> <name>ld_DE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ld_HL</name></expr>:</case>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rd_ld_hl</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x70</literal> <operator>+</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ld_NN</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_ld_nn</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>ld_nnA</name> <operator>||</operator> <name>r</name> <operator>==</operator> <name>ld_nnHL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x22</literal> <operator>+</operator> <literal type="number">0x10</literal> <operator>*</operator> <operator>(</operator><name>r</name> <operator>==</operator> <name>ld_nnA</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x43</literal> <operator>+</operator> <literal type="number">0x10</literal> <operator>*</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ldA</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_lda</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>A_NN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x3A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>A_I</name> <operator>||</operator> <name>r</name> <operator>==</operator> <name>A_R</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x57</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>r</name> <operator>==</operator> <name>A_R</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>A_N</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>n</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>readbyte</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x3E</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x0A</literal> <operator>-</operator> <literal type="number">0x10</literal> <operator>*</operator> <operator>++</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x78</literal> <operator>+</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ldB</name></expr>:</case>

<case>case <expr><name>ldC</name></expr>:</case>

<case>case <expr><name>ldD</name></expr>:</case>

<case>case <expr><name>ldE</name></expr>:</case>

<case>case <expr><name>ldH</name></expr>:</case>

<case>case <expr><name>ldL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>s</name> <operator>=</operator> <call><name>rd_ldbcdehla</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>n</name> <init>= <expr><call><name>r_num_math</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>readbyte</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x08</literal> <operator>*</operator> <operator>(</operator><name>r</name> <operator>-</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x40</literal> <operator>+</operator> <literal type="number">0x08</literal> <operator>*</operator> <operator>(</operator><name>r</name> <operator>-</operator><literal type="number">7</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>s</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>ldBC</name></expr>:</case>

<case>case <expr><name>ldDE</name></expr>:</case>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>rd_nn_nn</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>_NN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x4B</literal> <operator>+</operator> <literal type="number">0x10</literal> <operator>*</operator> <operator>(</operator><name>r</name> <operator>==</operator> <name>ldDE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x01</literal> <operator>+</operator> <operator>(</operator><name>r</name> <operator>==</operator> <name>ldDE</name><operator>)</operator> <operator>*</operator> <literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ldHL</name></expr>:</case>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rd_nn_nn</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x21</literal> <operator>+</operator> <operator>(</operator><name>r</name> <operator>==</operator> <name>_NN</name><operator>)</operator> <operator>*</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ldI</name></expr>:</case>

<case>case <expr><name>ldR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rd_a</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x47</literal> <operator>+</operator> <literal type="number">0x08</literal> <operator>*</operator> <operator>(</operator><name>r</name> <operator>==</operator> <name>ldR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ldSP</name></expr>:</case>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rd_sp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>SPHL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xF9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>SPNN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x7B</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>Z80_LDD</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xA8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_LDDR</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xB8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_LDI</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xA0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_LDIR</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xB0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_NEG</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_NOP</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_OR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_r</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xB0</literal> <operator>+</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_OTDR</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xBB</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_OTIR</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xB3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_OUT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_nnc</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>C</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_out</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x41</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rd_a</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xD3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_OUTD</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xAB</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_OUTI</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xA3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_POP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_stack</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xC1</literal> <operator>+</operator> <literal type="number">0x10</literal> <operator>*</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_PUSH</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_stack</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xC5</literal> <operator>+</operator> <literal type="number">0x10</literal> <operator>*</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_RES</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rd_0_7</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rd_comma</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_r_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xCB</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x80</literal> <operator>+</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_RET</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_cc</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xC9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xC0</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_RETI</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x4D</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_RETN</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x45</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_RL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_r_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xCB</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x10</literal> <operator>+</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_RLA</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_RLC</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_r_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xCB</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x00</literal> <operator>+</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_RLCA</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x07</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_RLD</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x6F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_RR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_r_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xCB</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x18</literal> <operator>+</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_RRA</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x1F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_RRC</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_r_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xCB</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x08</literal> <operator>+</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_RRCA</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_RRD</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x67</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_RST</name></expr>:</case>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_SBC</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_a_hl</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>HL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_rr_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xED</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x42</literal> <operator>+</operator> <literal type="number">0x10</literal> <operator>*</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_r</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x98</literal> <operator>+</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_SCF</name></expr>:</case>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x37</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_SET</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rd_0_7</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rd_comma</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_r_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xCB</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xC0</literal> <operator>+</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_SLA</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_r_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xCB</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x20</literal> <operator>+</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_SLI</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_r_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xCB</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x30</literal> <operator>+</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_SRA</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_r_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xCB</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x28</literal> <operator>+</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_SRL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_r_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xCB</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x38</literal> <operator>+</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_SUB</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_r</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_argument</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>A</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"parse error before: %s\n"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_r</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0x90</literal> <operator>+</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_XOR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_r</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrtb</name> <argument_list>(<argument><expr><literal type="number">0xA8</literal> <operator>+</operator> <operator>--</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_DEFB</name></expr>:</case>

<case>case <expr><name>Z80_DB</name></expr>:</case>

<case>case <expr><name>Z80_DEFM</name></expr>:</case>

<case>case <expr><name>Z80_DM</name></expr>:</case>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>have_quote</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\''</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>have_quote</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>quote</name> <init>= <expr><operator>*</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <name>quote</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>write_one_byte</name> <argument_list>(<argument><expr><call><name>rd_character</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"end of line in quoted string\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>skipword</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"junk in byte definition: %s\n"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><name>Z80_DEFW</name></expr>:</case>

<case>case <expr><name>Z80_DW</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_word</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No data for word definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>rd_word</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Missing expression in defw\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><name>Z80_DEFS</name></expr>:</case>

<case>case <expr><name>Z80_DS</name></expr>:</case>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rd_expr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ds should have its first argument &gt;=0"</literal>

<literal type="string">" (not -0x%x)\n"</literal></expr></argument>, <argument><expr><operator>-</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>delspc</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rd_comma</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>readbyte</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rd_byte</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>writebyte</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>r</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>write_one_byte</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>Z80_END</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>Z80_ORG</name></expr>:</case>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>rd_expr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_IF</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>rd_expr</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ifcount</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>noifcount</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>Z80_ELSE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>ifcount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"else without if\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>noifcount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ifcount</name><operator>--</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Z80_ENDIF</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>noifcount</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ifcount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"endif without if\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>noifcount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>noifcount</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ifcount</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>Z80_ENDM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>.</operator><name>file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"endm outside macro definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>Z80_SEEK</name></expr>:</case>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"seek error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block> while <condition>(<expr><name>false</name></expr>)</condition>;</do>

<return>return <expr><name>obuflen</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API_I</name> <name>int</name></type> <name>z80asm</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>outbuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>assemble</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAIN_ASM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>z80asm</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"nop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d %02x%02x%02x\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>z80asm</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"cp b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d %02x%02x%02x\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>z80asm</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"call 0x123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d %02x%02x%02x\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>z80asm</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"call bla"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d %02x%02x%02x\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
