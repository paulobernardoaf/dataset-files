<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\msp430\msp430_disas.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msp430_disas.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>msp430_register_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"pc"</literal></expr>,

<expr><literal type="string">"sp"</literal></expr>,

<expr><literal type="string">"sr"</literal></expr>,

<expr><literal type="string">"cg"</literal></expr>,

<expr><literal type="string">"r4"</literal></expr>,

<expr><literal type="string">"r5"</literal></expr>,

<expr><literal type="string">"r6"</literal></expr>,

<expr><literal type="string">"r7"</literal></expr>,

<expr><literal type="string">"r8"</literal></expr>,

<expr><literal type="string">"r9"</literal></expr>,

<expr><literal type="string">"r10"</literal></expr>,

<expr><literal type="string">"r11"</literal></expr>,

<expr><literal type="string">"r12"</literal></expr>,

<expr><literal type="string">"r13"</literal></expr>,

<expr><literal type="string">"r14"</literal></expr>,

<expr><literal type="string">"r15"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>two_op_instrs</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>MSP430_MOV</name></expr>]</index> <operator>=</operator> <literal type="string">"mov"</literal></expr>,

<expr><index>[<expr><name>MSP430_ADD</name></expr>]</index> <operator>=</operator> <literal type="string">"add"</literal></expr>,

<expr><index>[<expr><name>MSP430_ADDC</name></expr>]</index> <operator>=</operator> <literal type="string">"addc"</literal></expr>,

<expr><index>[<expr><name>MSP430_SUBC</name></expr>]</index> <operator>=</operator> <literal type="string">"subc"</literal></expr>,

<expr><index>[<expr><name>MSP430_SUB</name></expr>]</index> <operator>=</operator> <literal type="string">"sub"</literal></expr>,

<expr><index>[<expr><name>MSP430_CMP</name></expr>]</index> <operator>=</operator> <literal type="string">"cmp"</literal></expr>,

<expr><index>[<expr><name>MSP430_DADD</name></expr>]</index> <operator>=</operator> <literal type="string">"dadd"</literal></expr>,

<expr><index>[<expr><name>MSP430_BIT</name></expr>]</index> <operator>=</operator> <literal type="string">"bit"</literal></expr>,

<expr><index>[<expr><name>MSP430_BIC</name></expr>]</index> <operator>=</operator> <literal type="string">"bic"</literal></expr>,

<expr><index>[<expr><name>MSP430_BIS</name></expr>]</index> <operator>=</operator> <literal type="string">"bis"</literal></expr>,

<expr><index>[<expr><name>MSP430_XOR</name></expr>]</index> <operator>=</operator> <literal type="string">"xor"</literal></expr>,

<expr><index>[<expr><name>MSP430_AND</name></expr>]</index> <operator>=</operator> <literal type="string">"and"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>one_op_instrs</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>MSP430_RRC</name></expr>]</index> <operator>=</operator> <literal type="string">"rrc"</literal></expr>,

<expr><index>[<expr><name>MSP430_SWPB</name></expr>]</index> <operator>=</operator> <literal type="string">"swpb"</literal></expr>,

<expr><index>[<expr><name>MSP430_RRA</name></expr>]</index> <operator>=</operator> <literal type="string">"rra"</literal></expr>,

<expr><index>[<expr><name>MSP430_SXT</name></expr>]</index> <operator>=</operator> <literal type="string">"sxt"</literal></expr>,

<expr><index>[<expr><name>MSP430_PUSH</name></expr>]</index> <operator>=</operator> <literal type="string">"push"</literal></expr>,

<expr><index>[<expr><name>MSP430_CALL</name></expr>]</index> <operator>=</operator> <literal type="string">"call"</literal></expr>,

<expr><index>[<expr><name>MSP430_RETI</name></expr>]</index> <operator>=</operator> <literal type="string">"reti"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>jmp_instrs</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>MSP430_JEQ</name></expr>]</index> <operator>=</operator> <literal type="string">"jeq"</literal></expr>,

<expr><index>[<expr><name>MSP430_JNE</name></expr>]</index> <operator>=</operator> <literal type="string">"jnz"</literal></expr>,

<expr><index>[<expr><name>MSP430_JC</name></expr>]</index> <operator>=</operator> <literal type="string">"jc"</literal></expr>,

<expr><index>[<expr><name>MSP430_JNC</name></expr>]</index> <operator>=</operator> <literal type="string">"jnc"</literal></expr>,

<expr><index>[<expr><name>MSP430_JN</name></expr>]</index> <operator>=</operator> <literal type="string">"jn"</literal></expr>,

<expr><index>[<expr><name>MSP430_JGE</name></expr>]</index> <operator>=</operator> <literal type="string">"jge"</literal></expr>,

<expr><index>[<expr><name>MSP430_JL</name></expr>]</index> <operator>=</operator> <literal type="string">"jl"</literal></expr>,

<expr><index>[<expr><name>MSP430_JMP</name></expr>]</index> <operator>=</operator> <literal type="string">"jmp"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>get_twoop_opcode</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>instr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>get_as</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>instr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>get_bw</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>instr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>get_ad</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>instr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_src</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_dst</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>instr</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_first_operand</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msp430_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_second_operand</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msp430_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><call><name>strchr</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_emulation</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>msp430_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>as</name></decl>, <decl><type ref="prev"/><name>ad</name></decl>, <decl><type ref="prev"/><name>src</name></decl>, <decl><type ref="prev"/><name>dst</name></decl>, <decl><type ref="prev"/><name>bw</name></decl>, <decl><type ref="prev"/><name>opcode</name></decl>;</decl_stmt>

<expr_stmt><expr><name>as</name> <operator>=</operator> <call><name>get_as</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ad</name> <operator>=</operator> <call><name>get_ad</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>get_src</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>get_dst</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bw</name> <operator>=</operator> <call><name>get_bw</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>get_twoop_opcode</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>MSP430_ADDC</name> <operator>&amp;&amp;</operator> <name>as</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>src</name> <operator>==</operator> <name>MSP430_R3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>bw</name></expr> ?</condition><then> <expr><literal type="string">"adc.b"</literal></expr> </then><else>: <expr><literal type="string">"adc"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>msp430_register_names</name><index>[<expr><name>dst</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>MSP430_MOV</name> <operator>&amp;&amp;</operator> <name>as</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>src</name> <operator>==</operator> <name>MSP430_R3</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ad</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dst</name> <operator>==</operator> <name>MSP430_R3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"nop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>bw</name></expr> ?</condition><then> <expr><literal type="string">"clr.b"</literal></expr> </then><else>: <expr><literal type="string">"clr"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_first_operand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>MSP430_MOV</name> <operator>&amp;&amp;</operator> <name>as</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>src</name> <operator>==</operator> <name>MSP430_SP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>MSP430_PC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"ret"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MSP430_ONEOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>MSP430_RETI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>bw</name></expr> ?</condition><then> <expr><literal type="string">"pop.b"</literal></expr> </then><else>: <expr><literal type="string">"pop"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_first_operand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>MSP430_MOV</name> <operator>&amp;&amp;</operator> <name>ad</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dst</name> <operator>==</operator> <name>MSP430_PC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"br"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_second_operand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>MSP430_BIC</name> <operator>&amp;&amp;</operator> <name>as</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>src</name> <operator>==</operator> <name>MSP430_SR</name> <operator>&amp;&amp;</operator> <name>dst</name> <operator>==</operator> <name>MSP430_SR</name> <operator>&amp;&amp;</operator> <name>ad</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"clrn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>MSP430_BIC</name> <operator>&amp;&amp;</operator> <name>as</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>src</name> <operator>==</operator> <name>MSP430_R3</name> <operator>&amp;&amp;</operator> <name>dst</name> <operator>==</operator> <name>MSP430_SR</name> <operator>&amp;&amp;</operator> <name>ad</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"clrz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>MSP430_BIC</name> <operator>&amp;&amp;</operator> <name>as</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>src</name> <operator>==</operator> <name>MSP430_SR</name> <operator>&amp;&amp;</operator> <name>dst</name> <operator>==</operator> <name>MSP430_SR</name> <operator>&amp;&amp;</operator> <name>ad</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"dint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>MSP430_BIS</name> <operator>&amp;&amp;</operator> <name>as</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>src</name> <operator>==</operator> <name>MSP430_SR</name> <operator>&amp;&amp;</operator> <name>dst</name> <operator>==</operator> <name>MSP430_SR</name> <operator>&amp;&amp;</operator> <name>ad</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"eint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>MSP430_DADD</name> <operator>&amp;&amp;</operator> <name>as</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>src</name> <operator>==</operator> <name>MSP430_R3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>bw</name></expr> ?</condition><then> <expr><literal type="string">"dadc.b"</literal></expr> </then><else>: <expr><literal type="string">"dadc"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_first_operand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>MSP430_SUB</name> <operator>&amp;&amp;</operator> <name>as</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>src</name> <operator>==</operator> <name>MSP430_R3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>bw</name></expr> ?</condition><then> <expr><literal type="string">"dec.b"</literal></expr> </then><else>: <expr><literal type="string">"dec"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_first_operand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>MSP430_SUB</name> <operator>&amp;&amp;</operator> <name>as</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>src</name> <operator>==</operator> <name>MSP430_R3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>bw</name></expr> ?</condition><then> <expr><literal type="string">"decd.b"</literal></expr> </then><else>: <expr><literal type="string">"decd"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_first_operand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>MSP430_ADD</name> <operator>&amp;&amp;</operator> <name>as</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>src</name> <operator>==</operator> <name>MSP430_R3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>bw</name></expr> ?</condition><then> <expr><literal type="string">"inc.b"</literal></expr> </then><else>: <expr><literal type="string">"inc"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_first_operand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>MSP430_ADD</name> <operator>&amp;&amp;</operator> <name>as</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>src</name> <operator>==</operator> <name>MSP430_R3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>bw</name></expr> ?</condition><then> <expr><literal type="string">"incd.b"</literal></expr> </then><else>: <expr><literal type="string">"incd"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_first_operand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>MSP430_XOR</name> <operator>&amp;&amp;</operator> <name>as</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>src</name> <operator>==</operator> <name>MSP430_R3</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>bw</name></expr> ?</condition><then> <expr><literal type="string">"inv.b"</literal></expr> </then><else>: <expr><literal type="string">"inv"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_first_operand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>MSP430_ADD</name> <operator>&amp;&amp;</operator> <name>src</name> <operator>==</operator> <name>dst</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>bw</name></expr> ?</condition><then> <expr><literal type="string">"rla.b"</literal></expr> </then><else>: <expr><literal type="string">"rla"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_second_operand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>MSP430_ADDC</name> <operator>&amp;&amp;</operator> <name>src</name> <operator>==</operator> <name>dst</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>bw</name></expr> ?</condition><then> <expr><literal type="string">"rlc.b"</literal></expr> </then><else>: <expr><literal type="string">"rlc"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_second_operand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>MSP430_SUBC</name> <operator>&amp;&amp;</operator> <name>as</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>src</name> <operator>==</operator> <name>MSP430_R3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>bw</name></expr> ?</condition><then> <expr><literal type="string">"sbc.b"</literal></expr> </then><else>: <expr><literal type="string">"sbc"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_first_operand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>MSP430_BIS</name> <operator>&amp;&amp;</operator> <name>as</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>src</name> <operator>==</operator> <name>MSP430_R3</name> <operator>&amp;&amp;</operator> <name>dst</name> <operator>==</operator> <name>MSP430_SR</name> <operator>&amp;&amp;</operator> <name>ad</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"setc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>MSP430_BIS</name> <operator>&amp;&amp;</operator> <name>as</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>src</name> <operator>==</operator> <name>MSP430_SR</name> <operator>&amp;&amp;</operator> <name>dst</name> <operator>==</operator> <name>MSP430_SR</name> <operator>&amp;&amp;</operator> <name>ad</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"setn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>MSP430_BIS</name> <operator>&amp;&amp;</operator> <name>as</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>src</name> <operator>==</operator> <name>MSP430_R3</name> <operator>&amp;&amp;</operator> <name>dst</name> <operator>==</operator> <name>MSP430_SR</name> <operator>&amp;&amp;</operator> <name>ad</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"setz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>MSP430_CMP</name> <operator>&amp;&amp;</operator> <name>as</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>src</name> <operator>==</operator> <name>MSP430_R3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>bw</name></expr> ?</condition><then> <expr><literal type="string">"tst.b"</literal></expr> </then><else>: <expr><literal type="string">"tst"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_first_operand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_addressing_mode</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>instr</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>op1</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>op2</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>msp430_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>srcOperInCodeWord</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>as</name></decl>, <decl><type ref="prev"/><name>ad</name></decl>, <decl><type ref="prev"/><name>src</name></decl>, <decl><type ref="prev"/><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>dstbuf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dstbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dstbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>as</name> <operator>=</operator> <call><name>get_as</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ad</name> <operator>=</operator> <call><name>get_ad</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>get_src</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>get_dst</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>as</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<switch>switch <condition>(<expr><name>src</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MSP430_R3</name></expr>:</case> 

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"#0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>msp430_register_names</name><index>[<expr><name>src</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>src</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MSP430_PC</name></expr>:</case> 

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%04x"</literal></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcOperInCodeWord</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MSP430_R3</name></expr>:</case> 

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"#1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MSP430_SR</name></expr>:</case> 

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"&amp;0x%04x"</literal></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcOperInCodeWord</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%x(%s)"</literal></expr></argument>, <argument><expr><name>op1</name></expr></argument>, <argument><expr><name><name>msp430_register_names</name><index>[<expr><name>src</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcOperInCodeWord</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<switch>switch <condition>(<expr><name>src</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MSP430_SR</name></expr>:</case> 

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"#4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MSP430_R3</name></expr>:</case> 

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"#2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"@%s"</literal></expr></argument>, <argument><expr><name><name>msp430_register_names</name><index>[<expr><name>src</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>src</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MSP430_SR</name></expr>:</case> 

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"#8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MSP430_R3</name></expr>:</case> 

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"#-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MSP430_PC</name></expr>:</case> 

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"#0x%04x"</literal></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcOperInCodeWord</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"@%s+"</literal></expr></argument>, <argument><expr><name><name>msp430_register_names</name><index>[<expr><name>src</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>ad</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dstbuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dstbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">", %s"</literal></expr></argument>, <argument><expr><name><name>msp430_register_names</name><index>[<expr><name>dst</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>srcOperInCodeWord</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>op</name> <operator>=</operator> <name>op2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>op</name> <operator>=</operator> <name>op1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><call><name>get_dst</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MSP430_PC</name></expr>:</case> 

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dstbuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dstbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">", 0x%04x"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MSP430_SR</name></expr>:</case> 

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dstbuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dstbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">", &amp;0x%04x"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dstbuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dstbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">", 0x%x(%s)"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>msp430_register_names</name><index>[<expr><name>dst</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>dstbuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_emulation</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_twoop_opcode</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>instr</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>op1</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>op2</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>msp430_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>opcode</name> <init>= <expr><call><name>get_twoop_opcode</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>two_op_instrs</name><index>[<expr><name>opcode</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bw</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strncat</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><literal type="string">".b"</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>opcode</name></expr>;</expr_stmt>

<return>return <expr><call><name>decode_addressing_mode</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>op1</name></expr></argument>, <argument><expr><name>op2</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>get_jmp_opcode</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>instr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>get_jmp_cond</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>instr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_jmp</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>msp430_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>addr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>jmp_instrs</name><index>[<expr><call><name>get_jmp_cond</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <name>instr</name> <operator>&amp;</operator> <literal type="number">0x3FF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>jmp_addr</name></name> <operator>=</operator> <ternary><condition><expr><name>addr</name> <operator>&gt;=</operator> <literal type="number">0x300</literal></expr> ?</condition><then> <expr><operator>(</operator><name>st16</name><operator>)</operator><operator>(</operator><operator>(</operator><literal type="number">0xFE00</literal> <operator>|</operator> <name>addr</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>addr</name> <operator>&amp;</operator> <literal type="number">0x1FF</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"$%c0x%04x"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>addr</name> <operator>&gt;=</operator> <literal type="number">0x300</literal></expr> ?</condition><then> <expr><literal type="char">'-'</literal></expr> </then><else>: <expr><literal type="char">'+'</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>addr</name> <operator>&gt;=</operator> <literal type="number">0x300</literal></expr> ?</condition><then> <expr><literal type="number">0x400</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>&amp;</operator> <literal type="number">0x1FF</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>addr</name> <operator>&amp;</operator> <literal type="number">0x1FF</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>jmp_cond</name></name> <operator>=</operator> <call><name>get_jmp_cond</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <call><name>get_jmp_opcode</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MSP430_JUMP</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_oneop_opcode</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>instr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_oneop_opcode</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>instr</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>msp430_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>as</name></decl>, <decl><type ref="prev"/><name>opcode</name></decl>;</decl_stmt>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>get_oneop_opcode</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>as</name> <operator>=</operator> <call><name>get_as</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>one_op_instrs</name><index>[<expr><name>opcode</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <call><name>get_oneop_opcode</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>get_oneop_opcode</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MSP430_RRC</name></expr>:</case>

<case>case <expr><name>MSP430_SWPB</name></expr>:</case>

<case>case <expr><name>MSP430_RRA</name></expr>:</case>

<case>case <expr><name>MSP430_SXT</name></expr>:</case>

<case>case <expr><name>MSP430_PUSH</name></expr>:</case>

<case>case <expr><name>MSP430_CALL</name></expr>:</case>

<switch>switch <condition>(<expr><name>as</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<switch>switch <condition>(<expr><call><name>get_dst</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MSP430_R3</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"#0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>msp430_register_names</name><index>[<expr><call><name>get_dst</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>get_dst</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MSP430_R3</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"#1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MSP430_PC</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%04x"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MSP430_SR</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"&amp;0x%04x"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"0x%x(%s)"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>msp430_register_names</name><index>[<expr><call><name>get_dst</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<switch>switch <condition>(<expr><call><name>get_dst</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MSP430_SR</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"#4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MSP430_R3</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"#2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"@%s"</literal></expr></argument>, <argument><expr><name><name>msp430_register_names</name><index>[<expr><call><name>get_dst</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"#0x%04x"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>MSP430_RETI</name></expr>:</case>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MSP430_ONEOP</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<enum>enum <block>{

<decl><name>MSP430_TWOOP_OPCODE_INVALID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>MSP430_TWOOP_OPCODE_SINGLEOP</name></decl>,

<decl><name>MSP430_TWOOP_OPCODE_JUMP2</name></decl>,

<decl><name>MSP430_TWOOP_OPCODE_JUMP3</name></decl>,

}</block>;</enum>

<function><type><name>int</name></type> <name>msp430_decode_command</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>msp430_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>operand1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>operand2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>instr</name> <init>= <expr><call><name>r_read_le16</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>opcode</name> <init>= <expr><call><name>get_twoop_opcode</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MSP430_TWOOP_OPCODE_INVALID</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>MSP430_TWOOP_OPCODE_SINGLEOP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>instr</name> <operator>&amp;</operator> <literal type="number">0x0f80</literal><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0x0300</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>operand1</name> <operator>=</operator> <call><name>r_read_at_le16</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_oneop_opcode</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>operand1</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>MSP430_TWOOP_OPCODE_JUMP2</name></expr>:</case>

<case>case <expr><name>MSP430_TWOOP_OPCODE_JUMP3</name></expr>:</case>

<expr_stmt><expr><call><name>decode_jmp</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MSP430_TWOOP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>operand1</name> <operator>=</operator> <call><name>r_read_at_le16</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>operand2</name> <operator>=</operator> <call><name>r_read_at_le16</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_twoop_opcode</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>operand1</name></expr></argument>, <argument><expr><name>operand2</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MSP430_INV</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
