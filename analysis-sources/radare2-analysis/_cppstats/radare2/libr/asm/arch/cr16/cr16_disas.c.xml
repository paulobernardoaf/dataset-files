<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\cr16\cr16_disas.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cr16_disas.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_BIT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((x)) &gt;&gt; ((n))) &amp; 1)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>cr16_regs_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>CR16_R0</name></expr>]</index> <operator>=</operator> <literal type="string">"r0"</literal></expr>,

<expr><index>[<expr><name>CR16_R1</name></expr>]</index> <operator>=</operator> <literal type="string">"r1"</literal></expr>,

<expr><index>[<expr><name>CR16_R2</name></expr>]</index> <operator>=</operator> <literal type="string">"r2"</literal></expr>,

<expr><index>[<expr><name>CR16_R3</name></expr>]</index> <operator>=</operator> <literal type="string">"r3"</literal></expr>,

<expr><index>[<expr><name>CR16_R4</name></expr>]</index> <operator>=</operator> <literal type="string">"r4"</literal></expr>,

<expr><index>[<expr><name>CR16_R5</name></expr>]</index> <operator>=</operator> <literal type="string">"r5"</literal></expr>,

<expr><index>[<expr><name>CR16_R6</name></expr>]</index> <operator>=</operator> <literal type="string">"r6"</literal></expr>,

<expr><index>[<expr><name>CR16_R7</name></expr>]</index> <operator>=</operator> <literal type="string">"r7"</literal></expr>,

<expr><index>[<expr><name>CR16_R8</name></expr>]</index> <operator>=</operator> <literal type="string">"r8"</literal></expr>,

<expr><index>[<expr><name>CR16_R9</name></expr>]</index> <operator>=</operator> <literal type="string">"r9"</literal></expr>,

<expr><index>[<expr><name>CR16_R10</name></expr>]</index> <operator>=</operator> <literal type="string">"r10"</literal></expr>,

<expr><index>[<expr><name>CR16_R11</name></expr>]</index> <operator>=</operator> <literal type="string">"r11"</literal></expr>,

<expr><index>[<expr><name>CR16_R12</name></expr>]</index> <operator>=</operator> <literal type="string">"r12"</literal></expr>,

<expr><index>[<expr><name>CR16_R13</name></expr>]</index> <operator>=</operator> <literal type="string">"r13"</literal></expr>,

<expr><index>[<expr><name>CR16_RA</name></expr>]</index> <operator>=</operator> <literal type="string">"ra"</literal></expr>,

<expr><index>[<expr><name>CR16_SP</name></expr>]</index> <operator>=</operator> <literal type="string">"sp"</literal></expr>,

<expr><index>[<expr><name>CR16_LAST</name></expr>]</index> <operator>=</operator> <literal type="string">"XX"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>instrs_4bit</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>CR16_ADD</name></expr>]</index> <operator>=</operator> <literal type="string">"add"</literal></expr>,

<expr><index>[<expr><name>CR16_ADDU</name></expr>]</index> <operator>=</operator> <literal type="string">"addu"</literal></expr>,

<expr><index>[<expr><name>CR16_MUL</name></expr>]</index> <operator>=</operator> <literal type="string">"mul"</literal></expr>,

<expr><index>[<expr><name>CR16_ASHU</name></expr>]</index> <operator>=</operator> <literal type="string">"ashu"</literal></expr>,

<expr><index>[<expr><name>CR16_LSH</name></expr>]</index> <operator>=</operator> <literal type="string">"lsh"</literal></expr>,

<expr><index>[<expr><name>CR16_XOR</name></expr>]</index> <operator>=</operator> <literal type="string">"xor"</literal></expr>,

<expr><index>[<expr><name>CR16_CMP</name></expr>]</index> <operator>=</operator> <literal type="string">"cmp"</literal></expr>,

<expr><index>[<expr><name>CR16_AND</name></expr>]</index> <operator>=</operator> <literal type="string">"and"</literal></expr>,

<expr><index>[<expr><name>CR16_ADDC</name></expr>]</index> <operator>=</operator> <literal type="string">"addc"</literal></expr>,

<expr><index>[<expr><name>CR16_TBIT</name></expr>]</index> <operator>=</operator> <literal type="string">"tbit"</literal></expr>,

<expr><index>[<expr><name>CR16_TBIT_R_R</name></expr>]</index> <operator>=</operator> <literal type="string">"tbit"</literal></expr>,

<expr><index>[<expr><name>CR16_TBIT_I_R</name></expr>]</index> <operator>=</operator> <literal type="string">"tbit"</literal></expr>,

<expr><index>[<expr><name>CR16_MOV</name></expr>]</index> <operator>=</operator> <literal type="string">"mov"</literal></expr>,

<expr><index>[<expr><name>CR16_SUB</name></expr>]</index> <operator>=</operator> <literal type="string">"sub"</literal></expr>,

<expr><index>[<expr><name>CR16_SUBC</name></expr>]</index> <operator>=</operator> <literal type="string">"subc"</literal></expr>,

<expr><index>[<expr><name>CR16_OR</name></expr>]</index> <operator>=</operator> <literal type="string">"or"</literal></expr>,

<expr><index>[<expr><name>CR16_LPR</name></expr>]</index> <operator>=</operator> <literal type="string">"lpr"</literal></expr>,

<expr><index>[<expr><name>CR16_SPR</name></expr>]</index> <operator>=</operator> <literal type="string">"spr"</literal></expr>,

<expr><index>[<expr><name>CR16_LOADM</name></expr>]</index> <operator>=</operator> <literal type="string">"loadm"</literal></expr>,

<expr><index>[<expr><name>CR16_STORM</name></expr>]</index> <operator>=</operator> <literal type="string">"storm"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>cr16_conds</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>CR16_COND_EQ</name></expr>]</index> <operator>=</operator> <literal type="string">"eq"</literal></expr>,

<expr><index>[<expr><name>CR16_COND_NE</name></expr>]</index> <operator>=</operator> <literal type="string">"ne"</literal></expr>,

<expr><index>[<expr><name>CR16_COND_GE</name></expr>]</index> <operator>=</operator> <literal type="string">"ge"</literal></expr>,

<expr><index>[<expr><name>CR16_COND_CS</name></expr>]</index> <operator>=</operator> <literal type="string">"cs"</literal></expr>,

<expr><index>[<expr><name>CR16_COND_CC</name></expr>]</index> <operator>=</operator> <literal type="string">"cc"</literal></expr>,

<expr><index>[<expr><name>CR16_COND_HI</name></expr>]</index> <operator>=</operator> <literal type="string">"hi"</literal></expr>,

<expr><index>[<expr><name>CR16_COND_LS</name></expr>]</index> <operator>=</operator> <literal type="string">"ls"</literal></expr>,

<expr><index>[<expr><name>CR16_COND_LO</name></expr>]</index> <operator>=</operator> <literal type="string">"lo"</literal></expr>,

<expr><index>[<expr><name>CR16_COND_HS</name></expr>]</index> <operator>=</operator> <literal type="string">"hs"</literal></expr>,

<expr><index>[<expr><name>CR16_COND_GT</name></expr>]</index> <operator>=</operator> <literal type="string">"gt"</literal></expr>,

<expr><index>[<expr><name>CR16_COND_LE</name></expr>]</index> <operator>=</operator> <literal type="string">"le"</literal></expr>,

<expr><index>[<expr><name>CR16_COND_FS</name></expr>]</index> <operator>=</operator> <literal type="string">"fs"</literal></expr>,

<expr><index>[<expr><name>CR16_COND_FC</name></expr>]</index> <operator>=</operator> <literal type="string">"fc"</literal></expr>,

<expr><index>[<expr><name>CR16_COND_LT</name></expr>]</index> <operator>=</operator> <literal type="string">"lt"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ld_sw</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><literal type="number">0x0</literal></expr>]</index> <operator>=</operator> <literal type="string">"stor"</literal></expr>,

<expr><index>[<expr><literal type="number">0x1</literal></expr>]</index> <operator>=</operator> <literal type="string">"stor"</literal></expr>,

<expr><index>[<expr><literal type="number">0x2</literal></expr>]</index> <operator>=</operator> <literal type="string">"load"</literal></expr>,

<expr><index>[<expr><literal type="number">0x3</literal></expr>]</index> <operator>=</operator> <literal type="string">"stor"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>dedicated_regs</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><literal type="number">0x1</literal></expr>]</index> <operator>=</operator> <literal type="string">"psr"</literal></expr>,

<expr><index>[<expr><literal type="number">0x3</literal></expr>]</index> <operator>=</operator> <literal type="string">"intbaseh"</literal></expr>,

<expr><index>[<expr><literal type="number">0x4</literal></expr>]</index> <operator>=</operator> <literal type="string">"intbasel"</literal></expr>,

<expr><index>[<expr><literal type="number">0x5</literal></expr>]</index> <operator>=</operator> <literal type="string">"cfg"</literal></expr>,

<expr><index>[<expr><literal type="number">0x7</literal></expr>]</index> <operator>=</operator> <literal type="string">"dsr"</literal></expr>,

<expr><index>[<expr><literal type="number">0x9</literal></expr>]</index> <operator>=</operator> <literal type="string">"dcr"</literal></expr>,

<expr><index>[<expr><literal type="number">0xB</literal></expr>]</index> <operator>=</operator> <literal type="string">"isp"</literal></expr>,

<expr><index>[<expr><literal type="number">0xD</literal></expr>]</index> <operator>=</operator> <literal type="string">"carl"</literal></expr>,

<expr><index>[<expr><literal type="number">0xE</literal></expr>]</index> <operator>=</operator> <literal type="string">"carh"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ops_biti</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><literal type="number">0x0</literal></expr>]</index> <operator>=</operator> <literal type="string">"cbit"</literal></expr>,

<expr><index>[<expr><literal type="number">0x1</literal></expr>]</index> <operator>=</operator> <literal type="string">"sbit"</literal></expr>,

<expr><index>[<expr><literal type="number">0x2</literal></expr>]</index> <operator>=</operator> <literal type="string">"tbit"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut8</name></type> <name>cr16_get_opcode_low</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>instr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut8</name></type> <name>cr16_get_opcode_hi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>instr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut8</name></type> <name>cr16_get_opcode_i</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>instr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut8</name></type> <name>cr16_get_short_imm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>instr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>instr</name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut8</name></type> <name>cr16_get_dstreg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>instr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut8</name></type> <name>cr16_get_srcreg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>instr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>cr16_check_instrs_4bit_bndrs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>opcode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&gt;=</operator><sizeof>sizeof<argument_list>(<argument><expr><name>instrs_4bit</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof>

<operator>||</operator> <operator>!</operator><name><name>instrs_4bit</name><index>[<expr><name>opcode</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut16</name></type> <name>cr16_get_opcode_159_0</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>opc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>opc</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>opc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFE</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>cr16_check_reg_boundaries</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name></type> <name>reg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cr16_regs_names</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof>

<operator>||</operator> <operator>!</operator><name><name>cr16_regs_names</name><index>[<expr><name>reg</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>cr16_print_ld_sw_opcode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>instr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>opcode</name> <init>= <expr><name>instr</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ld_sw</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>||</operator> <operator>!</operator><name><name>ld_sw</name><index>[<expr><name>opcode</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s%c"</literal></expr></argument>, <argument><expr><name><name>ld_sw</name><index>[<expr><name>opcode</name></expr>]</index></name></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>cr16_get_opcode_i</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="char">'w'</literal></expr> </then><else>: <expr><literal type="char">'b'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_MOV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name><index>[<expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>cr16_print_short_reg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>sh</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>reg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cr16_check_reg_boundaries</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"$0x%02x,%s"</literal></expr></argument>, <argument><expr><name>sh</name></expr></argument>, <argument><expr><name><name>cr16_regs_names</name><index>[<expr><name>reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>cr16_print_reg_short</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>sh</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>reg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cr16_check_reg_boundaries</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"%s,$0x%02x"</literal></expr></argument>, <argument><expr><name><name>cr16_regs_names</name><index>[<expr><name>reg</name></expr>]</index></name></expr></argument>, <argument><expr><name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>cr16_print_med_reg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>med</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>reg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cr16_check_reg_boundaries</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"$0x%04x,%s"</literal></expr></argument>, <argument><expr><name>med</name></expr></argument>, <argument><expr><name><name>cr16_regs_names</name><index>[<expr><name>reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>cr16_print_reg_med</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>med</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>reg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cr16_check_reg_boundaries</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"%s,$0x%04x"</literal></expr></argument>, <argument><expr><name><name>cr16_regs_names</name><index>[<expr><name>reg</name></expr>]</index></name></expr></argument>, <argument><expr><name>med</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>cr16_print_short_abs18</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><name>ut8</name></type> <name>sh</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>abs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"$0x%02x,0x%08x"</literal></expr></argument>, <argument><expr><name>sh</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>cr16_print_reg_reg_rel</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><name>ut8</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>swap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cr16_check_reg_boundaries</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>cr16_check_reg_boundaries</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>swap</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s,0x%04x(%s)"</literal></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><name>dst</name></expr>]</index></name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name><name>cr16_regs_names</name><index>[<expr><name>src</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0x%04x(%s),%s"</literal></expr></argument>,

<argument><expr><name>rel</name></expr></argument>, <argument><expr><name><name>cr16_regs_names</name><index>[<expr><name>src</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cr16_regs_names</name><index>[<expr><name>dst</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>cr16_print_short_reg_rel</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><name>ut8</name></type> <name>sh</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>reg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cr16_check_reg_boundaries</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rel</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"$0x%02x,0x%04x(%s)"</literal></expr></argument>, <argument><expr><name>sh</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name><name>cr16_regs_names</name><index>[<expr><name>reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"$0x%02x,0(%s)"</literal></expr></argument>, <argument><expr><name>sh</name></expr></argument>, <argument><expr><name><name>cr16_regs_names</name><index>[<expr><name>reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>cr16_print_reg_rel_reg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><name>ut32</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>srcreg</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>dstreg</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>swap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cr16_check_reg_boundaries</name><argument_list>(<argument><expr><name>srcreg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cr16_check_reg_boundaries</name><argument_list>(<argument><expr><name>dstreg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>swap</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s,0x%08x(%s)"</literal></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><name>dstreg</name></expr>]</index></name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name><name>cr16_regs_names</name><index>[<expr><name>srcreg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0x%08x(%s),%s"</literal></expr></argument>,

<argument><expr><name>rel</name></expr></argument>, <argument><expr><name><name>cr16_regs_names</name><index>[<expr><name>srcreg</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cr16_regs_names</name><index>[<expr><name>dstreg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>cr16_print_long_reg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>swap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cr16_check_reg_boundaries</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>swap</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"%s,0x%08x"</literal></expr></argument>, <argument><expr><name><name>cr16_regs_names</name><index>[<expr><name>reg</name></expr>]</index></name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"0x%08x,%s"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>cr16_regs_names</name><index>[<expr><name>reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>cr16_print_longregreg_reg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><name>ut32</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>swap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cr16_check_reg_boundaries</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>cr16_check_reg_boundaries</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>cr16_check_reg_boundaries</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>swap</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"%s,0x%08x(%s,%s)"</literal></expr></argument>, <argument><expr><name><name>cr16_regs_names</name><index>[<expr><name>src</name></expr>]</index></name></expr></argument>, <argument><expr><name>rel</name></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><name>dst</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><name>dst</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"0x%08x(%s,%s),%s"</literal></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name><name>cr16_regs_names</name><index>[<expr><name>src</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><name>src</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cr16_regs_names</name><index>[<expr><name>dst</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>cr16_print_reg_reg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cr16_check_reg_boundaries</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>cr16_check_reg_boundaries</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s,%s"</literal></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><name>src</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cr16_regs_names</name><index>[<expr><name>dst</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>cr16_print_4biti_opcode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>instr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cr16_check_instrs_4bit_bndrs</name><argument_list>(<argument><expr><call><name>cr16_get_opcode_low</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s%c"</literal></expr></argument>,

<argument><expr><name><name>instrs_4bit</name><index>[<expr><call><name>cr16_get_opcode_low</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>cr16_get_opcode_i</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="char">'w'</literal></expr> </then><else>: <expr><literal type="char">'b'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>cr16_print_4bit_opcode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>instr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cr16_check_instrs_4bit_bndrs</name><argument_list>(<argument><expr><call><name>cr16_get_opcode_low</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>instrs_4bit</name><index>[<expr><call><name>cr16_get_opcode_low</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cr16_anal_4bit_opcode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><call><name>cr16_get_opcode_low</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CR16_ADDU</name></expr>:</case>

<case>case <expr><name>CR16_ADD</name></expr>:</case>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_ADD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_BITI</name></expr>:</case>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_BIT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_MUL</name></expr>:</case>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_MUL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_SUBC</name></expr>:</case>

<case>case <expr><name>CR16_SUB</name></expr>:</case>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_SUB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_CMP</name></expr>:</case>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_CMP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_XOR</name></expr>:</case>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_XOR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_OR</name></expr>:</case>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_OR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_ASHU</name></expr>:</case>

<case>case <expr><name>CR16_LSH</name></expr>:</case>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_SHIFT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_MOV</name></expr>:</case>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_MOV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_AND</name></expr>:</case>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_AND</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>cr16_decode_i_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>in</name></decl>, <decl><type ref="prev"/><name>immed</name></decl>, <decl><type ref="prev"/><name>dstreg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">0x0200</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>!=</operator> <name>CR16_TBIT_I_R</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>!=</operator> <name>CR16_TBIT_R_R</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cr16_print_4biti_opcode</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cr16_anal_4bit_opcode</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cr16_print_4bit_opcode</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch<condition>(<expr><operator>(</operator><name>in</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>^</operator> <literal type="number">0x11</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>in</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>immed</name> <operator>=</operator> <call><name>r_read_at_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>immed</name> <operator>=</operator> <call><name>cr16_get_short_imm</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>!=</operator> <name>CR16_TBIT_I_R</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>!=</operator> <name>CR16_TBIT_R_R</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cr16_print_med_reg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>immed</name></expr></argument>, <argument><expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cr16_print_reg_med</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>immed</name></expr></argument>, <argument><expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>dstreg</name> <operator>=</operator> <call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cr16_check_reg_boundaries</name><argument_list>(<argument><expr><name>dstreg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>!=</operator> <name>CR16_TBIT_I_R</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>!=</operator> <name>CR16_TBIT_R_R</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cr16_print_short_reg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>cr16_get_short_imm</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cr16_print_reg_short</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>cr16_get_short_imm</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>cr16_decode_ld_st</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>disp32</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>disp16</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>c</name> <init>= <expr><call><name>r_read_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cr16_print_ld_sw_opcode</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>cr16_get_opcode_159_0</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">0x20</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x04</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0xC0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>disp16</name> <operator>=</operator> <call><name>r_read_at_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>disp32</name> <operator>=</operator> <name>disp16</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x0100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x0020</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cr16_print_short_abs18</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>cr16_get_srcreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>disp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x05</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>disp16</name> <operator>=</operator> <call><name>r_read_at_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cr16_print_short_reg_rel</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>cr16_get_srcreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>disp16</name></expr></argument>, <argument><expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x9</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x45</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cr16_print_short_reg_rel</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>cr16_get_srcreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x9</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">0x4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x12</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>disp16</name> <operator>=</operator> <call><name>r_read_at_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>disp32</name> <operator>=</operator> <name>disp16</name> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cr16_print_reg_rel_reg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>disp32</name></expr></argument>, <argument><expr><call><name>cr16_get_srcreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x13</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>disp16</name> <operator>=</operator> <call><name>r_read_at_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>disp32</name> <operator>=</operator> <name>disp16</name> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cr16_get_srcreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0xF</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cr16_print_long_reg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>disp32</name></expr></argument>, <argument><expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>cr16_print_longregreg_reg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>disp32</name></expr></argument>, <argument><expr><call><name>cr16_get_srcreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1B</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>disp16</name> <operator>=</operator> <call><name>r_read_at_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>disp32</name> <operator>=</operator> <name>disp16</name> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cr16_get_srcreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0xF</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cr16_print_long_reg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>disp32</name></expr></argument>, <argument><expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>cr16_print_longregreg_reg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>disp32</name></expr></argument>, <argument><expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>cr16_get_srcreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1A</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>disp16</name> <operator>=</operator> <call><name>r_read_at_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>disp32</name> <operator>=</operator> <name>disp16</name> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cr16_print_reg_rel_reg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>disp32</name></expr></argument>, <argument><expr><call><name>cr16_get_srcreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x3</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>disp16</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1E</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cr16_print_reg_reg_rel</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>cr16_get_srcreg</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>disp16</name></expr></argument>, <argument><expr><call><name>cr16_get_dstreg</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x2</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>disp16</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1E</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cr16_print_reg_reg_rel</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>cr16_get_srcreg</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>disp16</name></expr></argument>, <argument><expr><call><name>cr16_get_dstreg</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cr16_decode_slpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>c</name> <init>= <expr><call><name>r_read_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ins</name> <init>= <expr><name><name>instrs_4bit</name><index>[<expr><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ins</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>ins</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CR16_LPR</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"%s,%s"</literal></expr></argument>,<argument><expr><name><name>cr16_regs_names</name><index>[<expr><call><name>cr16_get_srcreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>dedicated_regs</name><index>[<expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_SPR</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"%s,%s"</literal></expr></argument>, <argument><expr><name><name>dedicated_regs</name><index>[<expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><call><name>cr16_get_srcreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_SLPR</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cr16_decode_r_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>!=</operator> <name>CR16_TBIT_I_R</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>!=</operator> <name>CR16_TBIT_R_R</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cr16_print_4biti_opcode</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cr16_anal_4bit_opcode</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cr16_print_4bit_opcode</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cr16_print_reg_reg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>cr16_get_srcreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut8</name></type> <name>cr16_get_cond</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut16</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cr16_decode_push_pop</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CR16_PUSH</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"push"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_POP</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"pop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_POPRET_1</name></expr>:</case>

<case>case <expr><name>CR16_POPRET_2</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"popret"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"$0x%x,%s"</literal></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cr16_decode_jmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CR16_JUMP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xE</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"jump"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"j%s"</literal></expr></argument>,

<argument><expr><name><name>cr16_conds</name><index>[<expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><call><name>cr16_get_srcreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_JAL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"jal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cr16_print_reg_reg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cr16_get_srcreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_JUMP_UNK</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0B</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><literal type="string">"jal"</literal></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"(%s,%s),(%s,%s)"</literal></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><call><name>cr16_get_srcreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><call><name>cr16_get_srcreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0xE</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"j%s"</literal></expr></argument>,

<argument><expr><name><name>cr16_conds</name><index>[<expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"(%s,%s)"</literal></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><call><name>cr16_get_srcreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><call><name>cr16_get_srcreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><literal type="string">"jump"</literal></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"(%s,%s)"</literal></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><call><name>cr16_get_srcreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><call><name>cr16_get_srcreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_JUMP_UNK</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cr16_decode_bcond_br</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>disp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>disp32</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>cr16_get_opcode_low</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0xA</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xE</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"br"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>disp</name> <operator>=</operator> <call><name>r_read_at_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>disp32</name> <operator>=</operator> <name>disp</name> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"0x%08x"</literal></expr></argument>, <argument><expr><name>disp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>disp32</name> <operator>&amp;</operator> <literal type="number">0x10000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>disp32</name> <operator>|=</operator> <literal type="number">0xFFFE0000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>reladdr</name></name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><name>disp32</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>reladdr</name></name> <operator>=</operator> <name>disp32</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cr16_get_opcode_i</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>disp</name> <operator>=</operator> <call><name>r_read_at_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>disp32</name> <operator>=</operator> <name>disp</name> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">17</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>disp32</name> <operator>&amp;</operator> <literal type="number">0x80000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>disp32</name> <operator>|=</operator> <literal type="number">0xFFF00000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>reladdr</name></name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><name>disp32</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>reladdr</name></name> <operator>=</operator> <name>disp32</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0x%08x"</literal></expr></argument>, <argument><expr><name>disp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>disp</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1E0</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>disp</name> <operator>&amp;</operator> <literal type="number">0x0100</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>disp</name> <operator>|=</operator> <literal type="number">0xFE00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>reladdr</name></name> <operator>=</operator> <operator>(</operator><name>st16</name><operator>)</operator><name>disp</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>reladdr</name></name> <operator>=</operator> <name>disp</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0x%04x"</literal></expr></argument>, <argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_JUMP</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"b%s"</literal></expr></argument>,

<argument><expr><name><name>cr16_conds</name><index>[<expr><call><name>cr16_get_cond</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>==</operator> <name>CR16_BCOND_2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>disp</name> <operator>=</operator> <call><name>r_read_at_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>disp32</name> <operator>=</operator> <name>disp</name> <operator>|</operator> <operator>(</operator><call><name>GET_BIT</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>disp32</name> <operator>&amp;</operator> <literal type="number">0x80000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>disp32</name> <operator>|=</operator> <literal type="number">0xFFF00000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>reladdr</name></name> <operator>=</operator> <operator>(</operator><name>st32</name><operator>)</operator><name>disp32</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>reladdr</name></name> <operator>=</operator> <name>disp32</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>disp</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1E0</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>disp</name> <operator>&amp;</operator> <literal type="number">0x0100</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>disp</name> <operator>|=</operator> <literal type="number">0xFE00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>reladdr</name></name> <operator>=</operator> <operator>(</operator><name>st16</name><operator>)</operator><name>disp</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>reladdr</name></name> <operator>=</operator> <name>disp</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>disp32</name> <operator>=</operator> <name>disp</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_BCOND</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0x%04x"</literal></expr></argument>, <argument><expr><name>disp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cr16_decode_bcond01i</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x0</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s%c"</literal></expr></argument>,

<argument><expr><literal type="string">"beq0"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>cr16_get_opcode_i</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="char">'w'</literal></expr> </then><else>: <expr><literal type="char">'b'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s%c"</literal></expr></argument>,

<argument><expr><literal type="string">"beq1"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>cr16_get_opcode_i</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="char">'w'</literal></expr> </then><else>: <expr><literal type="char">'b'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x2</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s%c"</literal></expr></argument>,

<argument><expr><literal type="string">"bne0"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>cr16_get_opcode_i</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="char">'w'</literal></expr> </then><else>: <expr><literal type="char">'b'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x3</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s%c"</literal></expr></argument>,

<argument><expr><literal type="string">"bne1"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>cr16_get_opcode_i</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="char">'w'</literal></expr> </then><else>: <expr><literal type="char">'b'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s,0x%x"</literal></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_BCOND</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cr16_decode_misc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CR16_RETX</name></expr>:</case>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><literal type="string">"retx"</literal></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_RETX</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_DI</name></expr>:</case>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><literal type="string">"di"</literal></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_DI</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_EI</name></expr>:</case>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><literal type="string">"ei"</literal></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_EI</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_NOP</name></expr>:</case>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><literal type="string">"nop"</literal></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_NOP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_WAIT</name></expr>:</case>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><literal type="string">"wait"</literal></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_WAIT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_EWAIT</name></expr>:</case>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><literal type="string">"eiwait"</literal></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_EWAIT</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<switch>switch <condition>(<expr><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x3DF</literal></expr>:</case>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><literal type="string">"excp"</literal></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"0x%x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_EXCP</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cr16_decode_bal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>disp16</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>disp32</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>disp16</name> <operator>=</operator> <call><name>r_read_at_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"bal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CR16_BAL</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s,0x%x"</literal></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name>disp16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_TBIT_R_R</name></expr>:</case>

<expr_stmt><expr><name>disp32</name> <operator>=</operator> <name>disp16</name> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"(%s,%s),0x%08x"</literal></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name>disp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cr16_decode_loadm_storm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>instrs_4bit</name><index>[<expr><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"$0x%x"</literal></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_MOV</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cr16_decode_movz</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CR16_MOVXB</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"movxb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_MOVZB</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"movzb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s,%s"</literal></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><call><name>cr16_get_srcreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cr16_decode_movd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>imm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>imm32</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>r_read_at_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"movd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>imm32</name> <operator>=</operator> <name>imm</name> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">17</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"$0x%08x,(%s,%s)"</literal></expr></argument>, <argument><expr><name>imm32</name></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cr16_decode_muls</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CR16_MULSB</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mulsb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s,%s"</literal></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><call><name>cr16_get_srcreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_MULSW</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mulsw"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s,(%s,%s)"</literal></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><call><name>cr16_get_srcreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_MULUW</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;</operator> <literal type="number">0x000C</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"muluw"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s,(%s,%s)"</literal></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><call><name>cr16_get_srcreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cr16_decode_scond</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"s%s"</literal></expr></argument>,

<argument><expr><name><name>cr16_conds</name><index>[<expr><call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><call><name>cr16_get_srcreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_SCOND</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cr16_decode_biti</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>abs18</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>disp16</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg</name></decl>, <decl><type ref="prev"/><name>position</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x3</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>cr16_get_dstreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>position</name> <operator>=</operator> <call><name>cr16_get_srcreg</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>reg</name> <operator>&amp;</operator> <literal type="number">0x6</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s%c"</literal></expr></argument>,

<argument><expr><name><name>ops_biti</name><index>[<expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>]</index></name></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>cr16_get_opcode_i</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="char">'w'</literal></expr> </then><else>: <expr><literal type="char">'b'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x0</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>disp16</name> <operator>=</operator> <call><name>r_read_at_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>abs18</name> <operator>=</operator> <name>disp16</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>reg</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>reg</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">17</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"$0x%02x,0x%08x"</literal></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>abs18</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>disp16</name> <operator>=</operator> <call><name>r_read_at_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"$0x%02x,0x%04x(%s)"</literal></expr></argument>, <argument><expr><name>position</name></expr></argument>,

<argument><expr><name>disp16</name></expr></argument>, <argument><expr><name><name>cr16_regs_names</name><index>[<expr><name>reg</name> <operator>&amp;</operator> <literal type="number">0x9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x3</literal></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>operands</name></name></expr></argument>, <argument><expr><name>CR16_INSTR_MAXLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"$0x%02x,0(%s)"</literal></expr></argument>, <argument><expr><name>position</name></expr></argument>,

<argument><expr><name><name>cr16_regs_names</name><index>[<expr><name>reg</name> <operator>&amp;</operator> <literal type="number">0x9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CR16_TYPE_BIT</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cr16_decode_command</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cr16_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>in</name></decl>;</decl_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>r_read_le16</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>cr16_get_opcode_low</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CR16_MOV</name></expr>:</case>

<case>case <expr><name>CR16_ADD</name></expr>:</case>

<case>case <expr><name>CR16_ADDU</name></expr>:</case>

<case>case <expr><name>CR16_ADDC</name></expr>:</case>

<case>case <expr><name>CR16_MUL</name></expr>:</case>

<case>case <expr><name>CR16_SUB</name></expr>:</case>

<case>case <expr><name>CR16_SUBC</name></expr>:</case>

<case>case <expr><name>CR16_CMP</name></expr>:</case>

<case>case <expr><name>CR16_AND</name></expr>:</case>

<case>case <expr><name>CR16_OR</name></expr>:</case>

<case>case <expr><name>CR16_XOR</name></expr>:</case>

<case>case <expr><name>CR16_ASHU</name></expr>:</case>

<case>case <expr><name>CR16_LSH</name></expr>:</case>

<switch>switch<condition>(<expr><call><name>cr16_get_opcode_hi</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CR16_I_R</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cr16_decode_i_r</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_R_R</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cr16_decode_r_r</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>cr16_get_opcode_low</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CR16_CMP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cr16_decode_scond</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>CR16_BCOND01</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cr16_decode_bcond01i</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_BITI</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cr16_decode_biti</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x2</literal></expr>:</case>

<case>case <expr><literal type="number">0x0</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cr16_decode_bcond_br</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CR16_LPR</name></expr>:</case>

<case>case <expr><name>CR16_SPR</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cr16_decode_slpr</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_TBIT_R_R</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cr16_decode_r_r</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cr16_decode_bal</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>CR16_TBIT_I_R</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cr16_decode_i_r</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_BAL</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cr16_decode_bal</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_JUMP</name></expr>:</case>

<case>case <expr><name>CR16_JAL</name></expr>:</case>

<case>case <expr><literal type="number">0x0B</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cr16_decode_jmp</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cr16_decode_bcond_br</name> <argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>CR16_MOVXB</name></expr>:</case>

<case>case <expr><name>CR16_MOVZB</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cr16_decode_movz</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_MULSB</name></expr>:</case>

<case>case <expr><name>CR16_MULSW</name></expr>:</case>

<case>case <expr><name>CR16_MULUW</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cr16_decode_muls</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CR16_PUSH</name></expr>:</case>

<case>case <expr><name>CR16_POP</name></expr>:</case>

<case>case <expr><name>CR16_POPRET_1</name></expr>:</case>

<case>case <expr><name>CR16_POPRET_2</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cr16_decode_push_pop</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR16_LOADM</name></expr>:</case>

<case>case <expr><name>CR16_STORM</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cr16_decode_loadm_storm</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CR16_MOVD</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cr16_decode_movd</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cr16_decode_misc</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>cr16_get_opcode_hi</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x2</literal></expr>:</case>

<case>case <expr><literal type="number">0x3</literal></expr>:</case>

<case>case <expr><literal type="number">0x1</literal></expr>:</case>

<case>case <expr><literal type="number">0x0</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cr16_decode_ld_st</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
