<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\riscv\riscv.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"riscv-opc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"riscv.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRAY_SIZE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(a) / sizeof(*a))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>riscv_gpr_names</name> <init>= <expr><name>riscv_gpr_names_abi</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>riscv_fpr_names</name> <init>= <expr><name>riscv_fpr_names_abi</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>init</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>arg_p</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier><modifier>*</modifier></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><ternary><condition><expr><name>val</name> <operator>&gt;=</operator> <name>size</name> <operator>||</operator> <name><name>array</name><index>[<expr><name>val</name></expr>]</index></name></expr> ?</condition><then> <expr><name><name>array</name><index>[<expr><name>val</name></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_insn_args</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>insn_t</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rs1</name> <init>= <expr><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <name>OP_SH_RS1</name><operator>)</operator> <operator>&amp;</operator> <name>OP_MASK_RS1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rd</name> <init>= <expr><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <name>OP_SH_RD</name><operator>)</operator> <operator>&amp;</operator> <name>OP_MASK_RD</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>target</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>d</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>d</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>d</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'^'</literal></expr>:</case>

<switch>switch <condition>(<expr><operator>*</operator><operator>++</operator><name>d</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>RS2</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>CUSTOM_IMM</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'C'</literal></expr>:</case> 

<switch>switch <condition>(<expr><operator>*</operator><operator>++</operator><name>d</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> 

<case>case <expr><literal type="char">'w'</literal></expr>:</case> 

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>riscv_gpr_names</name><index>[<expr><call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>CRS1S</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> 

<case>case <expr><literal type="char">'x'</literal></expr>:</case> 

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>riscv_gpr_names</name><index>[<expr><call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>CRS2S</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'U'</literal></expr>:</case> 

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>riscv_gpr_names</name><index>[<expr><name>rd</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> 

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>riscv_gpr_names</name><index>[<expr><name>X_SP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'V'</literal></expr>:</case> 

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>riscv_gpr_names</name><index>[<expr><call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>CRS2</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>EXTRACT_RVC_SIMM3</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>EXTRACT_RVC_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'k'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>EXTRACT_RVC_LW_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>EXTRACT_RVC_LD_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>EXTRACT_RVC_LWSP_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>EXTRACT_RVC_LDSP_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'K'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>EXTRACT_RVC_ADDI4SPN_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'L'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>EXTRACT_RVC_ADDI16SP_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'M'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>EXTRACT_RVC_SWSP_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'N'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>EXTRACT_RVC_SDSP_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>EXTRACT_RVC_B_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>EXTRACT_RVC_J_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0x%x"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name>EXTRACT_RVC_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>RISCV_BIGIMM_REACH</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0x%x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>EXTRACT_RVC_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0x%x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>EXTRACT_RVC_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'T'</literal></expr>:</case> 

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>riscv_fpr_names</name><index>[<expr><call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>CRS2</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'D'</literal></expr>:</case> 

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>riscv_fpr_names</name><index>[<expr><call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>CRS2S</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">','</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%c "</literal></expr></argument>, <argument><expr><operator>*</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'('</literal></expr>:</case>

<case>case <expr><literal type="char">')'</literal></expr>:</case>

<case>case <expr><literal type="char">'['</literal></expr>:</case>

<case>case <expr><literal type="char">']'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><operator>*</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'0'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>riscv_gpr_names</name><index>[<expr><name>rs1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>riscv_gpr_names</name><index>[<expr><call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>RS2</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0x%x"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>EXTRACT_UTYPE_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>RISCV_IMM_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<expr_stmt><expr><call><name>arg_p</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>RM</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>riscv_rm</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name> <argument_list>(<argument><expr><name>riscv_rm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'P'</literal></expr>:</case>

<expr_stmt><expr><call><name>arg_p</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>PRED</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>riscv_pred_succ</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name> <argument_list>(<argument><expr><name>riscv_pred_succ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'Q'</literal></expr>:</case>

<expr_stmt><expr><call><name>arg_p</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>SUCC</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>riscv_pred_succ</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name> <argument_list>(<argument><expr><name>riscv_pred_succ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'o'</literal></expr>:</case>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>EXTRACT_ITYPE_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'q'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>EXTRACT_STYPE_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>EXTRACT_UJTYPE_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>EXTRACT_SBTYPE_IMM</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>riscv_gpr_names</name><index>[<expr><name>rd</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'z'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>riscv_gpr_names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0x%x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>SHAMT</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0x%x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>SHAMTW</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>

<case>case <expr><literal type="char">'U'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>riscv_fpr_names</name><index>[<expr><name>rs1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>riscv_fpr_names</name><index>[<expr><call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>RS2</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'D'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>riscv_fpr_names</name><index>[<expr><name>rd</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'R'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>riscv_fpr_names</name><index>[<expr><call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>RS3</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'E'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>csr_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>csr</name> <init>= <expr><call><name>EXTRACT_OPERAND</name> <argument_list>(<argument><expr><name>CSR</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>csr</name></expr>)</condition>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_CSR</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case num: csr_name = #name; break;</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"riscv-opc.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DECLARE_CSR</name></cpp:undef>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>csr_name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>csr_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0x%x"</literal></expr></argument>, <argument><expr><name>csr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'Z'</literal></expr>:</case>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"#internal error, undefined modifier (%c)"</literal></expr></argument>,

<argument><expr><operator>*</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>riscv_opcode</name></name> <modifier>*</modifier></type><name>get_opcode</name> <parameter_list>(<parameter><decl><type><name>insn_t</name></type> <name>word</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>riscv_opcode</name></name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>riscv_opcode</name></name> <modifier>*</modifier></type><name><name>riscv_hash</name><index>[<expr><name>OP_MASK_OP</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_HASH_IDX</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((i) &amp; (riscv_insn_length (i) == 2 ? 3 : OP_MASK_OP))</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>op</name><operator>=</operator><name>riscv_opcodes</name></expr>;</init> <condition><expr><name>op</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>riscv_opcodes</name><index>[<expr><name>NUMOPCODES</name></expr>]</index></name></expr>;</condition> <incr><expr><name>op</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>riscv_hash</name><index>[<expr><call><name>OP_HASH_IDX</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>match</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>riscv_hash</name><index>[<expr><call><name>OP_HASH_IDX</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>match</name></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for> 

<expr_stmt><expr><name>init</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator>struct <name>riscv_opcode</name> <operator>*</operator><operator>)</operator><name><name>riscv_hash</name><index>[<expr><call><name>OP_HASH_IDX</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>riscv_disassemble</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAsmOp</name> <modifier>*</modifier></type><name>rop</name></decl></parameter>, <parameter><decl><type><name>insn_t</name></type> <name>word</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>no_alias</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>riscv_opcode</name></name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>get_opcode</name> <argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>op</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>riscv_opcodes</name><index>[<expr><name>NUMOPCODES</name></expr>]</index></name></expr>;</condition> <incr><expr><name>op</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>match_func</name></name><operator>)</operator><operator>(</operator><name>op</name><operator>,</operator> <name>word</name><operator>)</operator></expr> )</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>no_alias</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>pinfo</name></name> <operator>&amp;</operator> <name>INSN_ALIAS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isdigit</name> <argument_list>(<argument><expr><operator>(</operator><name>ut8</name><operator>)</operator><name><name>op</name><operator>-&gt;</operator><name>subset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>subset</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>xlen</name></expr> )</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>args</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_asm_op_set_asm</name> <argument_list>(<argument><expr><name>rop</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_insn_args</name> <argument_list>(<argument><expr><call><name>r_asm_op_get_asm</name> <argument_list>(<argument><expr><name>rop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_asm_op_set_asm</name> <argument_list>(<argument><expr><name>rop</name></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"invalid word(%"</literal><name>PFMT64x</name><literal type="string">")"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>word</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>riscv_dis</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAsmOp</name> <modifier>*</modifier></type><name>rop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>insn_t</name></type> <name>insn</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>insn</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>R_MIN</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>insn_len</name> <init>= <expr><call><name>riscv_insn_length</name><argument_list>(<argument><expr><name>insn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>insn_len</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>riscv_disassemble</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>rop</name></expr></argument>, <argument><expr><name>insn</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>insn_len</name></expr>;</return>

</block_content>}</block></function>

</unit>
