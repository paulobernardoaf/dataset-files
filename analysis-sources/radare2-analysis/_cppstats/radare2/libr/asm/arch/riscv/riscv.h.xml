<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\riscv\riscv.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"riscv-opc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>uint64_t</name></type> <name>insn_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>riscv_insn_length</name> <parameter_list>(<parameter><decl><type><name>insn_t</name></type> <name>insn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>insn</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x3</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>insn</name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x1f</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>insn</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x1f</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">6</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>insn</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x3f</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">8</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>riscv_rm</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><literal type="string">"rne"</literal></expr>, <expr><literal type="string">"rtz"</literal></expr>, <expr><literal type="string">"rdn"</literal></expr>, <expr><literal type="string">"rup"</literal></expr>, <expr><literal type="string">"rmm"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"dyn"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>riscv_pred_succ</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"r"</literal></expr>, <expr><literal type="string">"rw"</literal></expr>, <expr><literal type="string">"o"</literal></expr>, <expr><literal type="string">"ow"</literal></expr>, <expr><literal type="string">"or"</literal></expr>, <expr><literal type="string">"orw"</literal></expr>,

<expr><literal type="string">"i"</literal></expr>, <expr><literal type="string">"iw"</literal></expr>, <expr><literal type="string">"ir"</literal></expr>, <expr><literal type="string">"irw"</literal></expr>, <expr><literal type="string">"io"</literal></expr>, <expr><literal type="string">"iow"</literal></expr>, <expr><literal type="string">"ior"</literal></expr>, <expr><literal type="string">"iorw"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RVC_JUMP_BITS</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RVC_JUMP_REACH</name></cpp:macro> <cpp:value>((1ULL &lt;&lt; RVC_JUMP_BITS) * RISCV_JUMP_ALIGN)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RVC_BRANCH_BITS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RVC_BRANCH_REACH</name></cpp:macro> <cpp:value>((1ULL &lt;&lt; RVC_BRANCH_BITS) * RISCV_BRANCH_ALIGN)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RV_X</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;&gt; (s)) &amp; ((1 &lt;&lt; (n)) - 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RV_IMM_SIGN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(-(((x) &gt;&gt; 31) &amp; 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_ITYPE_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RV_X(x, 20, 12) | (RV_IMM_SIGN(x) &lt;&lt; 12))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_STYPE_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RV_X(x, 7, 5) | (RV_X(x, 25, 7) &lt;&lt; 5) | (RV_IMM_SIGN(x) &lt;&lt; 12))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_SBTYPE_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 8, 4) &lt;&lt; 1) | (RV_X(x, 25, 6) &lt;&lt; 5) | (RV_X(x, 7, 1) &lt;&lt; 11) | (RV_IMM_SIGN(x) &lt;&lt; 12))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_UTYPE_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 12, 20) &lt;&lt; 12) | (RV_IMM_SIGN(x) &lt;&lt; 32))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_UJTYPE_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 21, 10) &lt;&lt; 1) | (RV_X(x, 20, 1) &lt;&lt; 11) | (RV_X(x, 12, 8) &lt;&lt; 12) | (RV_IMM_SIGN(x) &lt;&lt; 20))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_RVC_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RV_X(x, 2, 5) | (-RV_X(x, 12, 1) &lt;&lt; 5))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_RVC_LUI_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EXTRACT_RVC_IMM (x) &lt;&lt; RISCV_IMM_BITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_RVC_SIMM3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RV_X(x, 10, 2) | (-RV_X(x, 12, 1) &lt;&lt; 2))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_RVC_ADDI4SPN_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 6, 1) &lt;&lt; 2) | (RV_X(x, 5, 1) &lt;&lt; 3) | (RV_X(x, 11, 2) &lt;&lt; 4) | (RV_X(x, 7, 4) &lt;&lt; 6))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_RVC_ADDI16SP_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 6, 1) &lt;&lt; 4) | (RV_X(x, 2, 1) &lt;&lt; 5) | (RV_X(x, 5, 1) &lt;&lt; 6) | (RV_X(x, 3, 2) &lt;&lt; 7) | (-RV_X(x, 12, 1) &lt;&lt; 9))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_RVC_LW_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 6, 1) &lt;&lt; 2) | (RV_X(x, 10, 3) &lt;&lt; 3) | (RV_X(x, 5, 1) &lt;&lt; 6))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_RVC_LD_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 10, 3) &lt;&lt; 3) | (RV_X(x, 5, 2) &lt;&lt; 6))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_RVC_LWSP_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 4, 3) &lt;&lt; 2) | (RV_X(x, 12, 1) &lt;&lt; 5) | (RV_X(x, 2, 2) &lt;&lt; 6))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_RVC_LDSP_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 5, 2) &lt;&lt; 3) | (RV_X(x, 12, 1) &lt;&lt; 5) | (RV_X(x, 2, 3) &lt;&lt; 6))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_RVC_SWSP_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 9, 4) &lt;&lt; 2) | (RV_X(x, 7, 2) &lt;&lt; 6))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_RVC_SDSP_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 10, 3) &lt;&lt; 3) | (RV_X(x, 7, 3) &lt;&lt; 6))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_RVC_B_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 3, 2) &lt;&lt; 1) | (RV_X(x, 10, 2) &lt;&lt; 3) | (RV_X(x, 2, 1) &lt;&lt; 5) | (RV_X(x, 5, 2) &lt;&lt; 6) | (-RV_X(x, 12, 1) &lt;&lt; 8))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_RVC_J_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 3, 3) &lt;&lt; 1) | (RV_X(x, 11, 1) &lt;&lt; 4) | (RV_X(x, 2, 1) &lt;&lt; 5) | (RV_X(x, 7, 1) &lt;&lt; 6) | (RV_X(x, 6, 1) &lt;&lt; 7) | (RV_X(x, 9, 2) &lt;&lt; 8) | (RV_X(x, 8, 1) &lt;&lt; 10) | (-RV_X(x, 12, 1) &lt;&lt; 11))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODE_ITYPE_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RV_X(x, 0, 12) &lt;&lt; 20)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODE_STYPE_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 0, 5) &lt;&lt; 7) | (RV_X(x, 5, 7) &lt;&lt; 25))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODE_SBTYPE_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 1, 4) &lt;&lt; 8) | (RV_X(x, 5, 6) &lt;&lt; 25) | (RV_X(x, 11, 1) &lt;&lt; 7) | (RV_X(x, 12, 1) &lt;&lt; 31))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODE_UTYPE_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RV_X(x, 12, 20) &lt;&lt; 12)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODE_UJTYPE_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 1, 10) &lt;&lt; 21) | (RV_X(x, 11, 1) &lt;&lt; 20) | (RV_X(x, 12, 8) &lt;&lt; 12) | (RV_X(x, 20, 1) &lt;&lt; 31))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODE_RVC_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 0, 5) &lt;&lt; 2) | (RV_X(x, 5, 1) &lt;&lt; 12))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODE_RVC_LUI_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ENCODE_RVC_IMM ((x) &gt;&gt; RISCV_IMM_BITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODE_RVC_SIMM3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RV_X(x, 0, 3) &lt;&lt; 10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODE_RVC_ADDI4SPN_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 2, 1) &lt;&lt; 6) | (RV_X(x, 3, 1) &lt;&lt; 5) | (RV_X(x, 4, 2) &lt;&lt; 11) | (RV_X(x, 6, 4) &lt;&lt; 7))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODE_RVC_ADDI16SP_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 4, 1) &lt;&lt; 6) | (RV_X(x, 5, 1) &lt;&lt; 2) | (RV_X(x, 6, 1) &lt;&lt; 5) | (RV_X(x, 7, 2) &lt;&lt; 3) | (RV_X(x, 9, 1) &lt;&lt; 12))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODE_RVC_LW_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 2, 1) &lt;&lt; 6) | (RV_X(x, 3, 3) &lt;&lt; 10) | (RV_X(x, 6, 1) &lt;&lt; 5))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODE_RVC_LD_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 3, 3) &lt;&lt; 10) | (RV_X(x, 6, 2) &lt;&lt; 5))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODE_RVC_LWSP_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 2, 3) &lt;&lt; 4) | (RV_X(x, 5, 1) &lt;&lt; 12) | (RV_X(x, 6, 2) &lt;&lt; 2))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODE_RVC_LDSP_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 3, 2) &lt;&lt; 5) | (RV_X(x, 5, 1) &lt;&lt; 12) | (RV_X(x, 6, 3) &lt;&lt; 2))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODE_RVC_SWSP_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 2, 4) &lt;&lt; 9) | (RV_X(x, 6, 2) &lt;&lt; 7))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODE_RVC_SDSP_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 3, 3) &lt;&lt; 10) | (RV_X(x, 6, 3) &lt;&lt; 7))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODE_RVC_B_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 1, 2) &lt;&lt; 3) | (RV_X(x, 3, 2) &lt;&lt; 10) | (RV_X(x, 5, 1) &lt;&lt; 2) | (RV_X(x, 6, 2) &lt;&lt; 5) | (RV_X(x, 8, 1) &lt;&lt; 12))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODE_RVC_J_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RV_X(x, 1, 3) &lt;&lt; 3) | (RV_X(x, 4, 1) &lt;&lt; 11) | (RV_X(x, 5, 1) &lt;&lt; 2) | (RV_X(x, 6, 1) &lt;&lt; 7) | (RV_X(x, 7, 1) &lt;&lt; 6) | (RV_X(x, 8, 2) &lt;&lt; 9) | (RV_X(x, 10, 1) &lt;&lt; 8) | (RV_X(x, 11, 1) &lt;&lt; 12))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_ITYPE_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EXTRACT_ITYPE_IMM(ENCODE_ITYPE_IMM(x)) == (x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_STYPE_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EXTRACT_STYPE_IMM(ENCODE_STYPE_IMM(x)) == (x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_SBTYPE_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EXTRACT_SBTYPE_IMM(ENCODE_SBTYPE_IMM(x)) == (x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_UTYPE_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EXTRACT_UTYPE_IMM(ENCODE_UTYPE_IMM(x)) == (x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_UJTYPE_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EXTRACT_UJTYPE_IMM(ENCODE_UJTYPE_IMM(x)) == (x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_RVC_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EXTRACT_RVC_IMM(ENCODE_RVC_IMM(x)) == (x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_RVC_LUI_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EXTRACT_RVC_LUI_IMM(ENCODE_RVC_LUI_IMM(x)) == (x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_RVC_SIMM3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EXTRACT_RVC_SIMM3(ENCODE_RVC_SIMM3(x)) == (x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_RVC_ADDI4SPN_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EXTRACT_RVC_ADDI4SPN_IMM(ENCODE_RVC_ADDI4SPN_IMM(x)) == (x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_RVC_ADDI16SP_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EXTRACT_RVC_ADDI16SP_IMM(ENCODE_RVC_ADDI16SP_IMM(x)) == (x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_RVC_LW_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EXTRACT_RVC_LW_IMM(ENCODE_RVC_LW_IMM(x)) == (x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_RVC_LD_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EXTRACT_RVC_LD_IMM(ENCODE_RVC_LD_IMM(x)) == (x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_RVC_LWSP_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EXTRACT_RVC_LWSP_IMM(ENCODE_RVC_LWSP_IMM(x)) == (x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_RVC_LDSP_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EXTRACT_RVC_LDSP_IMM(ENCODE_RVC_LDSP_IMM(x)) == (x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_RVC_SWSP_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EXTRACT_RVC_SWSP_IMM(ENCODE_RVC_SWSP_IMM(x)) == (x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_RVC_SDSP_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EXTRACT_RVC_SDSP_IMM(ENCODE_RVC_SDSP_IMM(x)) == (x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_RVC_B_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EXTRACT_RVC_B_IMM(ENCODE_RVC_B_IMM(x)) == (x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_RVC_J_IMM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EXTRACT_RVC_J_IMM(ENCODE_RVC_J_IMM(x)) == (x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_RTYPE</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>, <parameter><type><name>rd</name></type></parameter>, <parameter><type><name>rs1</name></type></parameter>, <parameter><type><name>rs2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((MATCH_ ##insn) | ((rd) &lt;&lt; OP_SH_RD) | ((rs1) &lt;&lt; OP_SH_RS1) | ((rs2) &lt;&lt; OP_SH_RS2))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_ITYPE</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>, <parameter><type><name>rd</name></type></parameter>, <parameter><type><name>rs1</name></type></parameter>, <parameter><type><name>imm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((MATCH_ ##insn) | ((rd) &lt;&lt; OP_SH_RD) | ((rs1) &lt;&lt; OP_SH_RS1) | ENCODE_ITYPE_IMM(imm))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_STYPE</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>, <parameter><type><name>rs1</name></type></parameter>, <parameter><type><name>rs2</name></type></parameter>, <parameter><type><name>imm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((MATCH_ ##insn) | ((rs1) &lt;&lt; OP_SH_RS1) | ((rs2) &lt;&lt; OP_SH_RS2) | ENCODE_STYPE_IMM(imm))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_SBTYPE</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>, <parameter><type><name>rs1</name></type></parameter>, <parameter><type><name>rs2</name></type></parameter>, <parameter><type><name>target</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((MATCH_ ##insn) | ((rs1) &lt;&lt; OP_SH_RS1) | ((rs2) &lt;&lt; OP_SH_RS2) | ENCODE_SBTYPE_IMM(target))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_UTYPE</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>, <parameter><type><name>rd</name></type></parameter>, <parameter><type><name>bigimm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((MATCH_ ##insn) | ((rd) &lt;&lt; OP_SH_RD) | ENCODE_UTYPE_IMM(bigimm))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_UJTYPE</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>, <parameter><type><name>rd</name></type></parameter>, <parameter><type><name>target</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((MATCH_ ##insn) | ((rd) &lt;&lt; OP_SH_RD) | ENCODE_UJTYPE_IMM(target))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_NOP</name></cpp:macro> <cpp:value>RISCV_ITYPE(ADDI, 0, 0, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RVC_NOP</name></cpp:macro> <cpp:value>MATCH_C_ADDI</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_CONST_HIGH_PART</name><parameter_list>(<parameter><type><name>VALUE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((VALUE) + (RISCV_IMM_REACH/2)) &amp; ~(RISCV_IMM_REACH-1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_CONST_LOW_PART</name><parameter_list>(<parameter><type><name>VALUE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((VALUE) - RISCV_CONST_HIGH_PART (VALUE))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_PCREL_HIGH_PART</name><parameter_list>(<parameter><type><name>VALUE</name></type></parameter>, <parameter><type><name>PC</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RISCV_CONST_HIGH_PART((VALUE) - (PC))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_PCREL_LOW_PART</name><parameter_list>(<parameter><type><name>VALUE</name></type></parameter>, <parameter><type><name>PC</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RISCV_CONST_LOW_PART((VALUE) - (PC))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_JUMP_BITS</name></cpp:macro> <cpp:value>RISCV_BIGIMM_BITS</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_JUMP_ALIGN_BITS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_JUMP_ALIGN</name></cpp:macro> <cpp:value>(1 &lt;&lt; RISCV_JUMP_ALIGN_BITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_JUMP_REACH</name></cpp:macro> <cpp:value>((1ULL &lt;&lt; RISCV_JUMP_BITS) * RISCV_JUMP_ALIGN)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_IMM_BITS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_BIGIMM_BITS</name></cpp:macro> <cpp:value>(32 - RISCV_IMM_BITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_IMM_REACH</name></cpp:macro> <cpp:value>(1LL &lt;&lt; RISCV_IMM_BITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_BIGIMM_REACH</name></cpp:macro> <cpp:value>(1LL &lt;&lt; RISCV_BIGIMM_BITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_RVC_IMM_REACH</name></cpp:macro> <cpp:value>(1LL &lt;&lt; 6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_BRANCH_BITS</name></cpp:macro> <cpp:value>RISCV_IMM_BITS</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_BRANCH_ALIGN_BITS</name></cpp:macro> <cpp:value>RISCV_JUMP_ALIGN_BITS</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_BRANCH_ALIGN</name></cpp:macro> <cpp:value>(1 &lt;&lt; RISCV_BRANCH_ALIGN_BITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RISCV_BRANCH_REACH</name></cpp:macro> <cpp:value>(RISCV_IMM_REACH * RISCV_BRANCH_ALIGN)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_OP</name></cpp:macro> <cpp:value>0x7f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_OP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_RS2</name></cpp:macro> <cpp:value>0x1f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_RS2</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_RS1</name></cpp:macro> <cpp:value>0x1f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_RS1</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_RS3</name></cpp:macro> <cpp:value>0x1f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_RS3</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_RD</name></cpp:macro> <cpp:value>0x1f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_RD</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_SHAMT</name></cpp:macro> <cpp:value>0x3f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_SHAMT</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_SHAMTW</name></cpp:macro> <cpp:value>0x1f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_SHAMTW</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_RM</name></cpp:macro> <cpp:value>0x7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_RM</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_PRED</name></cpp:macro> <cpp:value>0xf</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_PRED</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_SUCC</name></cpp:macro> <cpp:value>0xf</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_SUCC</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_AQ</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_AQ</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_RL</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_RL</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_CUSTOM_IMM</name></cpp:macro> <cpp:value>0x7f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_CUSTOM_IMM</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_CSR</name></cpp:macro> <cpp:value>0xfff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_CSR</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_CRS2</name></cpp:macro> <cpp:value>0x1f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_CRS2</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_CRS1S</name></cpp:macro> <cpp:value>0x7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_CRS1S</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MASK_CRS2S</name></cpp:macro> <cpp:value>0x7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SH_CRS2S</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_RA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_SP</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_GP</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_TP</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_T0</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_T1</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_T2</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_T3</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NGPR</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFPR</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSERT_BITS</name><parameter_list>(<parameter><type><name>STRUCT</name></type></parameter>, <parameter><type><name>VALUE</name></type></parameter>, <parameter><type><name>MASK</name></type></parameter>, <parameter><type><name>SHIFT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(STRUCT) = (((STRUCT) &amp; ~((insn_t)(MASK) &lt;&lt; (SHIFT))) | ((insn_t)((VALUE) &amp; (MASK)) &lt;&lt; (SHIFT)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_BITS</name><parameter_list>(<parameter><type><name>STRUCT</name></type></parameter>, <parameter><type><name>MASK</name></type></parameter>, <parameter><type><name>SHIFT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((STRUCT) &gt;&gt; (SHIFT)) &amp; (MASK))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_OPERAND</name><parameter_list>(<parameter><type><name>FIELD</name></type></parameter>, <parameter><type><name>INSN</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EXTRACT_BITS ((INSN), OP_MASK_##FIELD, OP_SH_##FIELD)</cpp:value></cpp:define>

<struct>struct <name>riscv_opcode</name>

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>subset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>insn_t</name></type> <name>match</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>insn_t</name></type> <name>mask</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>match_func</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>riscv_opcode</name></name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>insn_t</name></type> <name>word</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>pinfo</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_ALIAS</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSN_MACRO</name></cpp:macro> <cpp:value>0xffffffff</cpp:value></cpp:define>

<enum>enum

<block>{

<decl><name>M_LA</name></decl>,

<decl><name>M_LLA</name></decl>,

<decl><name>M_LA_TLS_GD</name></decl>,

<decl><name>M_LA_TLS_IE</name></decl>,

<decl><name>M_LB</name></decl>,

<decl><name>M_LBU</name></decl>,

<decl><name>M_LH</name></decl>,

<decl><name>M_LHU</name></decl>,

<decl><name>M_LW</name></decl>,

<decl><name>M_LWU</name></decl>,

<decl><name>M_LD</name></decl>,

<decl><name>M_SB</name></decl>,

<decl><name>M_SH</name></decl>,

<decl><name>M_SW</name></decl>,

<decl><name>M_SD</name></decl>,

<decl><name>M_FLW</name></decl>,

<decl><name>M_FLD</name></decl>,

<decl><name>M_FLQ</name></decl>,

<decl><name>M_FSW</name></decl>,

<decl><name>M_FSD</name></decl>,

<decl><name>M_FSQ</name></decl>,

<decl><name>M_CALL</name></decl>,

<decl><name>M_J</name></decl>,

<decl><name>M_LI</name></decl>,

<decl><name>M_NUM_MACROS</name></decl>

}</block>;</enum>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal> <operator>||</operator> <name>_MSC_VER</name></expr></cpp:if>

extern const char * const riscv_gpr_names_numeric[NGPR];

extern const char * const riscv_gpr_names_abi[NGPR];

extern const char * const riscv_fpr_names_numeric[NFPR];

extern const char * const riscv_fpr_names_abi[NFPR];

extern struct riscv_opcode *riscv_opcodes;

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
extern int bfd_riscv_num_opcodes;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMOPCODES</name></cpp:macro> <cpp:value>bfd_riscv_num_opcodes</cpp:value></cpp:define>

</unit>
