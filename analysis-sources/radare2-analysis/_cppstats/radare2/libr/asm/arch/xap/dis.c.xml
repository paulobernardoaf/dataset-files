<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\xap\dis.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>assert</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (!(x)) { eprintf("assert ##x##\n"); return; }</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dis.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>state</name></name></type> <name>_state</name></decl>;</decl_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>get_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>_state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name>_state</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint16_t</name></type> <name>i2u16</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>instruction</name></name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>in</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static void output(struct state *s, char *fmt, ...)

{

va_list ap;

va_start(ap, fmt);

cons_printf(fmt, ap);

va_end(ap);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_unknown</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>directive</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

printf("Opcode 0x%x reg %d mode %d operand 0x%x",

in-&gt;in_opcode, in-&gt;in_reg, in-&gt;in_mode, in-&gt;in_operand);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_asm</name></name></expr></argument>, <argument><expr><literal type="string">"DC 0x%4x"</literal></expr></argument>, <argument><expr><call><name>i2u16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>d_inst</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_fixed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>directive</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>d_asm</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>i2u16</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>d_inst</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>INST_NOP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s_prefix</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s_nop</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_asm</name></name></expr></argument>, <argument><expr><literal type="string">"nop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INST_BRK</name></expr>:</case> <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_asm</name></name></expr></argument>, <argument><expr><literal type="string">"brk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>INST_SLEEP</name></expr>:</case> <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_asm</name></name></expr></argument>, <argument><expr><literal type="string">"sleep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>INST_SIF</name></expr>:</case> <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_asm</name></name></expr></argument>, <argument><expr><literal type="string">"sif"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>INST_BC</name></expr>:</case> <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_asm</name></name></expr></argument>, <argument><expr><literal type="string">"bc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>INST_BRXL</name></expr>:</case> <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_asm</name></name></expr></argument>, <argument><expr><literal type="string">"brxl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>INST_U</name></expr>:</case> <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_asm</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s_u</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>INST_RTS</name></expr>:</case> <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_asm</name></name></expr></argument>, <argument><expr><literal type="string">"rts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name><name>d</name><operator>-&gt;</operator><name>d_asm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>regname</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch <condition>(<expr><name>reg</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>REG_AH</name></expr>:</case> <return>return <expr><literal type="string">"AH"</literal></expr>;</return>

<case>case <expr><name>REG_AL</name></expr>:</case> <return>return <expr><literal type="string">"AL"</literal></expr>;</return>

<case>case <expr><name>REG_X</name></expr>:</case> <return>return <expr><literal type="string">"X"</literal></expr>;</return>

<case>case <expr><name>REG_Y</name></expr>:</case> <return>return <expr><literal type="string">"Y"</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_num</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_operand</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>directive</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><call><name>get_num</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_inst</name><operator>.</operator><name>in_operand</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s_prefix</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <call><name>get_num</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>s_prefix_val</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s_prefix</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <call><name>get_num</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>s_prefix_val</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>total</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_known</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>directive</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>regn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ptr</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>imm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>fmt</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fmtsz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>branch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>instruction</name></name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>d_inst</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sign</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rti</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>in_opcode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>in_reg</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>in</name><operator>-&gt;</operator><name>in_mode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s_prefix</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s_prefix_val</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s_prefix</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s_prefix</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s_prefix_val</name></name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (s-&gt;s_nopd &amp;&amp; in-&gt;in_operand == 0x80)

strcpy(s-&gt;s_nopd-&gt;d_asm, "");

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s_prefix_val</name></name> <operator>|=</operator> <name><name>in</name><operator>-&gt;</operator><name>in_operand</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_asm</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>i2u16</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"st"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>regn</name> <operator>=</operator> <literal type="string">"FLAGS"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"st"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>regn</name> <operator>=</operator> <literal type="string">"UX"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"st"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>regn</name> <operator>=</operator> <literal type="string">"UY"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"ld"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>regn</name> <operator>=</operator> <literal type="string">"FLAGS"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"ld"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>regn</name> <operator>=</operator> <literal type="string">"UX"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"ld"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>regn</name> <operator>=</operator> <literal type="string">"UY"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xa</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"st"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>regn</name> <operator>=</operator> <literal type="string">"XH"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xd</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"rti"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>regn</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rti</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xe</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"ld"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>regn</name> <operator>=</operator> <literal type="string">"XH"</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"ld"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>in_mode</name></name> <operator>==</operator> <name>DATA_MODE_IMMEDIATE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"print"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"st"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"add"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"addc"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"sub"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"subc"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"nadd"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"cmp"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x9</literal></expr>:</case>

<switch>switch <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>in_reg</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s_u</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"umult"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"smult"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s_u</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s_u</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"udiv"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"sdiv"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s_u</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"tst"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>branch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"bsr"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>in_mode</name></name> <operator>==</operator> <name>ADDR_MODE_RELATIVE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rel</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">0xa</literal></expr>:</case>

<switch>switch <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>in_reg</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"asl"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s_u</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"lsr"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"asr"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s_u</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"rol"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"ror"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">0xb</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"or"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xc</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"and"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xd</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"xor"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>imm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xe</literal></expr>:</case>

<expr_stmt><expr><name>branch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>in_mode</name></name> <operator>==</operator> <name>ADDR_MODE_RELATIVE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rel</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>in_reg</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"bra"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (s-&gt;s_nopd) {

op = "bra2"; 

strcpy(s-&gt;s_nopd-&gt;d_asm, "");

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"blt"</literal></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"bpl"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"bmi"</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">0xf</literal></expr>:</case>

<expr_stmt><expr><name>branch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>in_mode</name></name> <operator>==</operator> <name>ADDR_MODE_RELATIVE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rel</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>in_reg</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"bne"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"beq"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"bcc"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"bcs"</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <name><name>in</name><operator>-&gt;</operator><name>in_mode</name></name> <operator>==</operator> <name>DATA_MODE_IMMEDIATE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>branch</name> <operator>&amp;&amp;</operator> <name><name>in</name><operator>-&gt;</operator><name>in_mode</name></name> <operator>==</operator> <name>ADDR_MODE_X_RELATIVE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>in_mode</name></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>regn</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reg</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>regn</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>regname</name> <argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>in_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>rti</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_asm</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_asm</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_asm</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_asm</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_asm</name></name></expr></argument>, <argument><expr><literal type="string">"@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>imm</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_asm</name></name></expr></argument>, <argument><expr><literal type="string">"#"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&amp;&amp;</operator> <name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_asm</name></name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_prefix</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s_prefix</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>branch</name> <operator>&amp;&amp;</operator> <name>idx</name><operator>)</operator> <operator>||</operator> <name>rti</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_operand</name></name> <operator>=</operator> <call><name>get_operand</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>d_operand</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_operand</name></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="string">"-"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_operand</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s_prefix_val</name></name> <operator>|</operator> <name><name>in</name><operator>-&gt;</operator><name>in_operand</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>d_operand</name></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>d_prefix</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rel</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_operand</name></name> <operator>-=</operator> <literal type="number">0x100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_operand</name></name> <operator>|=</operator> <literal type="number">0xff00</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

operand = d-&gt;d_operand;

if (operand &lt; 0)

operand *= -1;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>fmtsz</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>d_operand</name></name> <operator>&amp;</operator> <literal type="number">0xff0000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fmtsz</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s0x%%.%dX"</literal></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>fmtsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_operand</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_asm</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><ternary><condition><expr><name><name>in</name><operator>-&gt;</operator><name>in_mode</name></name> <operator>==</operator> <name>DATA_MODE_INDEXED_X</name></expr> ?</condition><then> <expr><literal type="string">"X"</literal></expr> </then><else>: <expr><literal type="string">"Y"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>regn</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="string">"Y"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">", %s"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_asm</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_asm</name></name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (!rel &amp;&amp; in-&gt;in_mode == DATA_MODE_IMMEDIATE

&amp;&amp; ((d-&gt;d_operand &amp; 0xff00) == 0x7F00) &amp;&amp; d-&gt;d_operand &amp; 0x80)

s-&gt;s_ff_quirk = 1;

if (rel &amp;&amp; !s-&gt;s_prefix &amp;&amp; d-&gt;d_operand == 0x7F) {

if (s-&gt;s_nopd) {

printf("w00t\n");

strcpy(s-&gt;s_nopd-&gt;d_asm, "nop");

}

printf("Warning: fucking up a branch %x\n", d-&gt;d_off);

decode_unknown(s, d);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xap_decode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>directive</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>prefix</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>s_prefix</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>decode_fixed</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>decode_known</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decode_unknown</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s_prefix</name></name> <operator>==</operator> <name>prefix</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s_prefix_val</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s_prefix</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_bin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>directive</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>d_inst</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>s_buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_inst</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_off</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s_off</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>directive</name></name> <modifier>*</modifier></type><name>next_inst</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>directive</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>d</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"malloc()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (s-&gt;s_format)

rd = read_text(s, d);

else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>rd</name> <operator>=</operator> <call><name>read_bin</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>d</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static void own(struct state *s)

{

struct directive *d;

struct directive *last = &amp;s-&gt;s_dirs;

struct label *l;

int flush = 0;

char fname[128];

char *fnamep;

snprintf(fname, sizeof(fname), "%s", s-&gt;s_fname);

fnamep = strchr(fname, '.');

if (fnamep)

*fnamep = 0;

output(s, "\tMODULE %s\n"

"\t.CODE\n"

"\t.LARGE\n"

"\n", fname);

s-&gt;s_off = 0;

while ((d = next_inst(s))) {

xap_decode(s, d);

if (s-&gt;s_ff_quirk) {

strcpy(last-&gt;d_asm, "DC\t0x8000");

sprintf(d-&gt;d_asm, "DC\t0x%.4x", i2u16(&amp;d-&gt;d_inst));

s-&gt;s_ff_quirk = 0;

}

if (s-&gt;s_nopd) {

last-&gt;d_next = s-&gt;s_nopd;

last = s-&gt;s_nopd;

s-&gt;s_nopd = NULL;

s-&gt;s_nop = 0;

}

if (s-&gt;s_nop) {

assert(!s-&gt;s_nopd);

s-&gt;s_nopd = d;

} else {

last-&gt;d_next = d;

last = d;

}

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

if (flush++ &gt; 10000) {

printf("@0x%.6x\r", d-&gt;d_off);

fflush(stdout);

flush = 0;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}

if (s-&gt;s_nopd)

last-&gt;d_next = s-&gt;s_nopd;

printf("\n");

d = s-&gt;s_dirs.d_next;

l = s-&gt;s_labels.l_next;

while (d) {

while (l) {

if (l-&gt;l_off &gt; d-&gt;d_off)

break;

print_label(s, l);

l = l-&gt;l_next;

}

add_comment(s, d);

output(s, "\t%s\n", d-&gt;d_asm);

d = d-&gt;d_next;

}

if (l) {

print_label(s, l);

assert(!l-&gt;l_next);

}

output(s, "\n\tENDMOD\n");

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
