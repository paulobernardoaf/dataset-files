<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\xap\dis.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__packed</name></cpp:macro> <cpp:value>__attribute__((__packed__))</cpp:value></cpp:define>

<struct>struct <name>instruction</name> <block>{

<decl_stmt><decl><type><name>ut16</name></type> <name>in_mode</name><range>:<expr><literal type="number">2</literal></expr></range></decl>,

<decl><type ref="prev"/><name>in_reg</name><range>:<expr><literal type="number">2</literal></expr></range></decl>,

<decl><type ref="prev"/><name>in_opcode</name><range>:<expr><literal type="number">4</literal></expr></range></decl>,

<decl><type ref="prev"/><name>in_operand</name><range>:<expr><literal type="number">8</literal></expr></range></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__sun</name> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:warning>#<cpp:directive>warning</cpp:directive> XXX related to sunstudio :O</cpp:warning>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block>;</struct>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

} __packed<empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>directive</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>instruction</name></name></type> <name>d_inst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d_operand</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d_prefix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>d_off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>d_asm</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>directive</name></name> <modifier>*</modifier></type><name>d_next</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>label</name> <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>l_name</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>l_off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>directive</name></name> <modifier>*</modifier></type><name><name>l_refs</name><index>[<expr><literal type="number">666</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l_refc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>label</name></name> <modifier>*</modifier></type><name>l_next</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>state</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>s_prefix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>s_prefix_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>s_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>s_off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s_fname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s_u</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>s_labelno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>s_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>directive</name></name></type> <name>s_dirs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>label</name></name></type> <name>s_labels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>s_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s_nop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>directive</name></name> <modifier>*</modifier></type><name>s_nopd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s_ff_quirk</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODE_MASK</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_SHIFT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_MASK</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPCODE_SHIFT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPCODE_MASK</name></cpp:macro> <cpp:value>0xF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPERAND_SHIFT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INST_NOP</name></cpp:macro> <cpp:value>0x0000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INST_BRK</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INST_SLEEP</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INST_U</name></cpp:macro> <cpp:value>0x0009</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INST_SIF</name></cpp:macro> <cpp:value>0x000C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INST_RTS</name></cpp:macro> <cpp:value>0x00E2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INST_BRXL</name></cpp:macro> <cpp:value>0xfe09</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INST_BC</name></cpp:macro> <cpp:value>0xff09</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_AH</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_AL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_X</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_Y</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_MODE_IMMEDIATE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_MODE_DIRECT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_MODE_INDEXED_X</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_MODE_INDEXED_Y</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR_MODE_RELATIVE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR_MODE_X_RELATIVE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>xap_decode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>state</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>directive</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
