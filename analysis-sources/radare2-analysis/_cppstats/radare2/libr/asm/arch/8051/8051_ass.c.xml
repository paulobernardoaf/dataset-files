<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\8051\8051_ass.c"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>"8051_ass.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>parse_hexadecimal</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>hexstr</name></decl></parameter>, <parameter><decl><type><name>ut16</name><modifier>*</modifier></type> <name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>hexstr</name> <operator>||</operator> <name><name>hexstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'0'</literal>

<operator>||</operator> <operator>!</operator><operator>(</operator><name><name>hexstr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name><name>hexstr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>hexstr</name> <operator>+</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>hexstr</name> <operator>+</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr> ;</condition> <incr><expr><name>p</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><literal type="char">'0'</literal> <operator>&lt;=</operator> <operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>|=</operator> <operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><literal type="char">'a'</literal> <operator>&lt;=</operator> <operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>|=</operator> <operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><literal type="char">'A'</literal> <operator>&lt;=</operator> <operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>|=</operator> <operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>!</operator> <operator>*</operator><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_arg</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type><name>multi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>dest</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>lastnonws</name> <init>= <expr><name>dest</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>anynonws</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>in_string</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>multi</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>n</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>multi</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>multi</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>multi</name> <operator>!=</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>multi</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>in_string</name> <operator>=</operator> <operator>!</operator><name>in_string</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_string</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>multi</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>multi</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>multi</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>multi</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>multi</name> <operator>||</operator> <operator>*</operator><name>multi</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>*</operator><name>multi</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>in_string</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>multi</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>multi</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>multi</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>multi</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><operator>*</operator><name>multi</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>multi</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>multi</name> <operator>!=</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>multi</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>in_string</name> <operator>=</operator> <operator>!</operator><name>in_string</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_string</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>multi</name> <operator>==</operator> <literal type="char">';'</literal> <operator>||</operator> <operator>*</operator><name>multi</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>multi</name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>multi</name> <operator>!=</operator> <literal type="char">'\t'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lastnonws</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>

<expr_stmt><expr><name>anynonws</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <operator>*</operator><name>multi</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>multi</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>in_string</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>anynonws</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>lastnonws</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_arguments</name> <parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type><name>arguments</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>arglen</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>arguments</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>arglen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_arg</name> <argument_list>(<argument><expr><name>arguments</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>arglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_arg</name> <argument_list>(<argument><expr><name>arguments</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>arglen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_arg</name> <argument_list>(<argument><expr><name>arguments</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>arglen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_arg</name> <argument_list>(<argument><expr><name>arguments</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">3</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>terminates_asm_line</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>c</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">';'</literal></expr> ;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>str_iwhitecasecmp</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>*</operator><name>a</name> <operator>-</operator> <operator>*</operator><name>b</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name>b</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>a</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>b</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>a</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>b</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isspace</name> <argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isspace</name> <argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tolower</name> <argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>tolower</name> <argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></while>

<return>return <expr><operator>*</operator><name>a</name> <operator>-</operator> <operator>*</operator><name>b</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>parse_mnem_args</name>)<parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ut16</name></type></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier></type> <name>pattern</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>parse_mnem_args</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>args</name></decl>;</decl_stmt>

}</block></struct></type> <name><name>ftable</name><index>[]</index></name>;</typedef>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>pattern_match</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type><name>pattern</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>si</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ti</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pattern</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>pattern</name><index>[<expr><name>ti</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>isspace</name> <argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>si</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name> <argument_list>(<argument><expr><name><name>pattern</name><index>[<expr><name>ti</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>si</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>isspace</name> <argument_list>(<argument><expr><name><name>pattern</name><index>[<expr><name>ti</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ti</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tolower</name> <argument_list>(<argument><expr><name><name>pattern</name><index>[<expr><name>ti</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>tolower</name> <argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>si</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>si</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ti</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>parse_mnem_args</name></type> <name>match_prefix_f</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ftable</name> <specifier>const</specifier></type> <name>tbl</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>tbl</name><index>[<expr><name>row</name></expr>]</index></name><operator>.</operator><name>pattern</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>pattern_match</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>tbl</name><index>[<expr><name>row</name></expr>]</index></name><operator>.</operator><name>pattern</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>args</name> <operator>=</operator> <name><name>tbl</name><index>[<expr><name>row</name></expr>]</index></name><operator>.</operator><name>args</name></expr>;</expr_stmt>

<return>return <expr><name><name>tbl</name><index>[<expr><name>row</name></expr>]</index></name><operator>.</operator><name>res</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>row</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>args</name> <operator>=</operator> <name><name>tbl</name><index>[<expr><name>row</name></expr>]</index></name><operator>.</operator><name>args</name></expr>;</expr_stmt>

<return>return <expr><name><name>tbl</name><index>[<expr><name>row</name></expr>]</index></name><operator>.</operator><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_indirect_reg</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'@'</literal></expr> )</condition> <block>{<block_content>

<return>return <expr><call><name>r_str_ansi_nlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal>

<operator>&amp;&amp;</operator> <call><name>tolower</name> <argument_list>(<argument><expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'r'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr> )</condition> <block>{<block_content>

<return>return <expr><call><name>r_str_ansi_nlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal>

<operator>&amp;&amp;</operator> <call><name>tolower</name> <argument_list>(<argument><expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'r'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_reg</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>str</name> <operator>&amp;&amp;</operator> <call><name>tolower</name> <argument_list>(<argument><expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'r'</literal> <operator>&amp;&amp;</operator> <call><name>r_str_ansi_nlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal>

<operator>&amp;&amp;</operator> <literal type="char">'0'</literal> <operator>&lt;=</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'7'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>relative_address</name><parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>st16</name></type> <name>diff</name> <init>= <expr><name>address</name> <operator>-</operator> <operator>(</operator><name>pc</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <name>INT8_MIN</name> <operator>||</operator> <name>INT8_MAX</name> <operator>&lt;</operator> <name>diff</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>diff</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>resolve_immediate</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>imm_str</name></decl></parameter>, <parameter><decl><type><name>ut16</name><modifier>*</modifier></type> <name>imm_out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>parse_hexadecimal</name> <argument_list>(<argument><expr><name>imm_str</name></expr></argument>, <argument><expr><name>imm_out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>to_address</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>addr_str</name></decl></parameter>, <parameter><decl><type><name>ut16</name><modifier>*</modifier></type> <name>addr_out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>parse_hexadecimal</name> <argument_list>(<argument><expr><name>addr_str</name></expr></argument>, <argument><expr><name>addr_out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>address_direct</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>addr_str</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier></type> <name>addr_out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>addr_big</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>parse_hexadecimal</name> <argument_list>(<argument><expr><name>addr_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr_big</name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><literal type="number">0xFF</literal> <operator>&lt;</operator> <name>addr_big</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>addr_out</name> <operator>=</operator> <name>addr_big</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>address_bit</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>addr_str</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier></type> <name>addr_out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bitpart</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>addr_str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bytepart</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>addr_str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>separator</name> <init>= <expr><call><name>r_str_lchr</name> <argument_list>(<argument><expr><name>addr_str</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>byte</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>separator</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name>bytepart</name></expr></argument>, <argument><expr><name>addr_str</name></expr></argument>, <argument><expr><name>separator</name> <operator>-</operator> <name>addr_str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytepart</name><index>[<expr><name>separator</name> <operator>-</operator> <name>addr_str</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name>bitpart</name></expr></argument>, <argument><expr><name>separator</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>separator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>address_direct</name> <argument_list>(<argument><expr><name>bytepart</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>byte</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>bitpart</name></expr></argument>)</argument_list></call>

<operator>||</operator> <name><name>bitpart</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'0'</literal> <operator>||</operator> <literal type="char">'7'</literal> <operator>&lt;</operator> <name><name>bitpart</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bit</name> <operator>=</operator> <name><name>bitpart</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0x20</literal> <operator>&lt;=</operator> <name>byte</name> <operator>&amp;&amp;</operator> <name>byte</name> <operator>&lt;</operator> <literal type="number">0x30</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>addr_out</name> <operator>=</operator> <operator>(</operator><name>byte</name> <operator>-</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>bit</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0x80</literal> <operator>&lt;=</operator> <name>byte</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>byte</name><operator>%</operator><literal type="number">8</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>addr_out</name> <operator>=</operator> <name>byte</name> <operator>+</operator> <name>bit</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bitpart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>bitpart</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bytepart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>bytepart</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>register_number</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_reg</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>reg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_indirect_reg</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>reg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">8</literal></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>single_byte_instr</name><parameter_list>(<parameter><decl><type><name>ut8</name> <specifier>const</specifier></type> <name>instr</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <name>instr</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>singlearg_bit</name><parameter_list>(<parameter><decl><type><name>ut8</name> <specifier>const</specifier></type> <name>firstbyte</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>address</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>address_bit</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <name>firstbyte</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>address</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>singlearg_reladdr</name><parameter_list>(<parameter><decl><type><name>ut8</name> <specifier>const</specifier></type> <name>firstbyte</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>arg</name></decl></parameter>

, <parameter><decl><type><name>ut16</name> <specifier>const</specifier></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>address</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>to_address</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>relative_address</name> <argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <name>firstbyte</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>singlearg_direct</name><parameter_list>(<parameter><decl><type><name>ut8</name> <specifier>const</specifier></type> <name>firstbyte</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>arg</name></decl></parameter>

, <parameter><decl><type><name>ut8</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>address</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>address_direct</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <name>firstbyte</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>address</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>singlearg_immediate</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>firstbyte</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>imm_str</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>imm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>imm_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'#'</literal>

<operator>||</operator> <operator>!</operator><call><name>resolve_immediate</name> <argument_list>(<argument><expr><name>imm_str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>imm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <name>firstbyte</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>imm</name> <operator>&amp;</operator> <literal type="number">0x00FF</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>singlearg_register</name><parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>firstbyte</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>single_byte_instr</name> <argument_list>(<argument><expr><name>firstbyte</name> <operator>|</operator> <call><name>register_number</name> <argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>single_a_arg_instr</name><parameter_list>(<parameter><decl><type><name>ut8</name> <specifier>const</specifier></type> <name>firstbyte</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>

, <parameter><decl><type><name>ut8</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>single_byte_instr</name> <argument_list>(<argument><expr><name>firstbyte</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_acall</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>address</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>to_address</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><name>address</name> <operator>&amp;</operator> <literal type="number">0x0700</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x11</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>address</name> <operator>&amp;</operator> <literal type="number">0x00FF</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_add</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<break>break;</break> <case>case <expr><literal type="char">'@'</literal></expr>:</case> <case>case <expr><literal type="char">'['</literal></expr>:</case>

<return>return <expr><call><name>singlearg_register</name> <argument_list>(<argument><expr><literal type="number">0x26</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break> <case>case <expr><literal type="char">'#'</literal></expr>:</case>

<return>return <expr><call><name>singlearg_immediate</name> <argument_list>(<argument><expr><literal type="number">0x24</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>is_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_register</name> <argument_list>(<argument><expr><literal type="number">0x28</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>singlearg_direct</name> <argument_list>(<argument><expr><literal type="number">0x25</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_addc</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_indirect_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_register</name> <argument_list>(<argument><expr><literal type="number">0x36</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_immediate</name> <argument_list>(<argument><expr><literal type="number">0x34</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_register</name> <argument_list>(<argument><expr><literal type="number">0x38</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>singlearg_direct</name> <argument_list>(<argument><expr><literal type="number">0x35</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_ajmp</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>address</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>to_address</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><name>address</name> <operator>&amp;</operator> <literal type="number">0x0700</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal> <operator>)</operator> <operator>|</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>address</name> <operator>&amp;</operator> <literal type="number">0x00FF</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_anl</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_bit</name> <argument_list>(<argument><expr><literal type="number">0xb0</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>singlearg_bit</name> <argument_list>(<argument><expr><literal type="number">0x82</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_indirect_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_register</name> <argument_list>(<argument><expr><literal type="number">0x56</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_immediate</name> <argument_list>(<argument><expr><literal type="number">0x54</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_register</name> <argument_list>(<argument><expr><literal type="number">0x58</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>singlearg_direct</name> <argument_list>(<argument><expr><literal type="number">0x55</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>address</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>address_direct</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_direct</name> <argument_list>(<argument><expr><literal type="number">0x52</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>imm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'#'</literal> <operator>||</operator> <operator>!</operator><call><name>resolve_immediate</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>imm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="number">0x53</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>address</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <name>imm</name> <operator>&amp;</operator> <literal type="number">0x00FF</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_cjne</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>address</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>to_address</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>relative_address</name> <argument_list>(<argument><expr><name>pc</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>imm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>resolve_immediate</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>imm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="number">0xb4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>imm</name> <operator>&amp;</operator> <literal type="number">0x00FF</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>address</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>address_direct</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="number">0xb5</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>address</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>imm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>resolve_immediate</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>imm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="number">0xbf</literal> <operator>|</operator> <call><name>register_number</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>imm</name> <operator>&amp;</operator> <literal type="number">0x00FF</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_indirect_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>imm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>resolve_immediate</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>imm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="number">0xb6</literal> <operator>|</operator> <call><name>register_number</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>imm</name> <operator>&amp;</operator> <literal type="number">0x00FF</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_clr</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>single_byte_instr</name> <argument_list>(<argument><expr><literal type="number">0xe4</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>single_byte_instr</name> <argument_list>(<argument><expr><literal type="number">0xc3</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>singlearg_bit</name> <argument_list>(<argument><expr><literal type="number">0xc2</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_cpl</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>single_byte_instr</name> <argument_list>(<argument><expr><literal type="number">0xf4</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>single_byte_instr</name> <argument_list>(<argument><expr><literal type="number">0xb3</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>singlearg_bit</name> <argument_list>(<argument><expr><literal type="number">0xb2</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_da</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>single_a_arg_instr</name> <argument_list>(<argument><expr><literal type="number">0xd4</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_dec</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_indirect_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_register</name> <argument_list>(<argument><expr><literal type="number">0x16</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_register</name> <argument_list>(<argument><expr><literal type="number">0x18</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>single_byte_instr</name> <argument_list>(<argument><expr><literal type="number">0x14</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>singlearg_direct</name> <argument_list>(<argument><expr><literal type="number">0x15</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_div</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><literal type="string">"ab"</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>single_byte_instr</name> <argument_list>(<argument><expr><literal type="number">0x84</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_djnz</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>jmp_address</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>to_address</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jmp_address</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>relative_address</name> <argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>jmp_address</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="number">0xd8</literal> <operator>|</operator> <call><name>register_number</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>dec_address</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>address_direct</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dec_address</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="number">0xd5</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>dec_address</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_inc</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_register</name> <argument_list>(<argument><expr><literal type="number">0x08</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_indirect_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_register</name> <argument_list>(<argument><expr><literal type="number">0x06</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>single_byte_instr</name> <argument_list>(<argument><expr><literal type="number">0x04</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><literal type="string">"dptr"</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>single_byte_instr</name> <argument_list>(<argument><expr><literal type="number">0xa3</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>singlearg_direct</name> <argument_list>(<argument><expr><literal type="number">0x05</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_jb</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>cmp_addr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>address_bit</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp_addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>jmp_addr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>to_address</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jmp_addr</name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>relative_address</name> <argument_list>(<argument><expr><name>pc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>jmp_addr</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>cmp_addr</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_jbc</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>cmp_addr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>address_bit</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp_addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>jmp_addr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>to_address</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jmp_addr</name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>relative_address</name> <argument_list>(<argument><expr><name>pc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>jmp_addr</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>cmp_addr</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_jc</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>singlearg_reladdr</name> <argument_list>(<argument><expr><literal type="number">0x40</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_jnb</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>cmp_addr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>address_bit</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp_addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>jmp_addr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>to_address</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jmp_addr</name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>relative_address</name> <argument_list>(<argument><expr><name>pc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>jmp_addr</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="number">0x30</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>cmp_addr</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_jnc</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>singlearg_reladdr</name> <argument_list>(<argument><expr><literal type="number">0x50</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_jnz</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>singlearg_reladdr</name> <argument_list>(<argument><expr><literal type="number">0x70</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_jz</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>singlearg_reladdr</name> <argument_list>(<argument><expr><literal type="number">0x60</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_lcall</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>address</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>to_address</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="number">0x12</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><name>address</name> <operator>&amp;</operator> <literal type="number">0xFF00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00FF</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <name>address</name> <operator>&amp;</operator> <literal type="number">0x00FF</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_ljmp</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>address</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>to_address</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><name>address</name> <operator>&amp;</operator> <literal type="number">0xFF00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00FF</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <name>address</name> <operator>&amp;</operator> <literal type="number">0x00FF</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_mov_c</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>singlearg_bit</name> <argument_list>(<argument><expr><literal type="number">0xa2</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_mov</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"dptr"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>imm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>resolve_immediate</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>imm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="number">0x90</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <name>imm</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_indirect_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_register</name> <argument_list>(<argument><expr><literal type="number">0xf6</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'#'</literal></expr> )</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_direct</name> <argument_list>(

<argument><expr><literal type="number">0xa6</literal> <operator>|</operator> <call><name>register_number</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>

, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>

, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>singlearg_immediate</name> <argument_list>(<argument><expr><literal type="number">0x76</literal> <operator>|</operator> <call><name>register_number</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>

, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>

, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_indirect_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_register</name> <argument_list>(<argument><expr><literal type="number">0xe6</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_register</name> <argument_list>(<argument><expr><literal type="number">0xe8</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_immediate</name> <argument_list>(<argument><expr><literal type="number">0x74</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>singlearg_direct</name> <argument_list>(<argument><expr><literal type="number">0xe5</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_register</name> <argument_list>(<argument><expr><literal type="number">0xf8</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_immediate</name> <argument_list>(

<argument><expr><literal type="number">0x78</literal> <operator>|</operator> <call><name>register_number</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>

, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>

, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>singlearg_direct</name> <argument_list>(<argument><expr><literal type="number">0xa8</literal> <operator>|</operator> <call><name>register_number</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>

, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>

, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_bit</name> <argument_list>(<argument><expr><literal type="number">0x92</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_direct</name> <argument_list>(<argument><expr><literal type="number">0xf5</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_direct</name> <argument_list>(<argument><expr><literal type="number">0x88</literal> <operator>|</operator> <call><name>register_number</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>

, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>

, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_indirect_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_direct</name> <argument_list>(<argument><expr><literal type="number">0x86</literal> <operator>|</operator> <call><name>register_number</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>

, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>

, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>dest_addr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>address_direct</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dest_addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>imm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>resolve_immediate</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>imm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="number">0x75</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>dest_addr</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <name>imm</name> <operator>&amp;</operator> <literal type="number">0x00FF</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>src_addr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>address_direct</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="number">0x85</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>src_addr</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <name>dest_addr</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_movc</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>str_iwhitecasecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"@a+dptr"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>str_iwhitecasecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"[a+dptr]"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>single_byte_instr</name> <argument_list>(<argument><expr><literal type="number">0x93</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>str_iwhitecasecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"@a+pc"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>str_iwhitecasecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"[a+pc]"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>single_byte_instr</name> <argument_list>(<argument><expr><literal type="number">0x83</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_movx</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_indirect_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_register</name> <argument_list>(<argument><expr><literal type="number">0xe2</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>str_iwhitecasecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"@dptr"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>str_iwhitecasecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"[dptr]"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>single_byte_instr</name> <argument_list>(<argument><expr><literal type="number">0xe0</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_indirect_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_register</name> <argument_list>(<argument><expr><literal type="number">0xf2</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>str_iwhitecasecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"@dptr"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>str_iwhitecasecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"[dptr]"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>single_byte_instr</name> <argument_list>(<argument><expr><literal type="number">0xf0</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_mul</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_str_ncasecmp</name> <argument_list>(<argument><expr><literal type="string">"ab"</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>single_byte_instr</name> <argument_list>(<argument><expr><literal type="number">0xa4</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_nop</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>single_byte_instr</name> <argument_list>(<argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_orl</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_bit</name> <argument_list>(<argument><expr><literal type="number">0xa0</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>singlearg_bit</name> <argument_list>(<argument><expr><literal type="number">0x72</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_indirect_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_register</name> <argument_list>(<argument><expr><literal type="number">0x46</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_immediate</name> <argument_list>(<argument><expr><literal type="number">0x44</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_register</name> <argument_list>(<argument><expr><literal type="number">0x48</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>singlearg_direct</name> <argument_list>(<argument><expr><literal type="number">0x45</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_direct</name> <argument_list>(<argument><expr><literal type="number">0x42</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>dest_addr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>address_direct</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dest_addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>imm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>resolve_immediate</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>imm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="number">0x43</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>dest_addr</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <name>imm</name> <operator>&amp;</operator> <literal type="number">0x00FF</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_pop</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>singlearg_direct</name> <argument_list>(<argument><expr><literal type="number">0xd0</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_push</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>singlearg_direct</name> <argument_list>(<argument><expr><literal type="number">0xc0</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_ret</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>single_byte_instr</name> <argument_list>(<argument><expr><literal type="number">0x22</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_reti</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>single_byte_instr</name> <argument_list>(<argument><expr><literal type="number">0x32</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_rl</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>single_a_arg_instr</name> <argument_list>(<argument><expr><literal type="number">0x23</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_rlc</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>single_a_arg_instr</name> <argument_list>(<argument><expr><literal type="number">0x33</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_rr</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>single_a_arg_instr</name> <argument_list>(<argument><expr><literal type="number">0x03</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_rrc</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>single_a_arg_instr</name> <argument_list>(<argument><expr><literal type="number">0x13</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_setb</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>single_byte_instr</name> <argument_list>(<argument><expr><literal type="number">0xd3</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>singlearg_bit</name> <argument_list>(<argument><expr><literal type="number">0xd2</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_sjmp</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>singlearg_reladdr</name> <argument_list>(<argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_jmp</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>str_iwhitecasecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"@a+dptr"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>str_iwhitecasecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"[a+dptr]"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>single_byte_instr</name> <argument_list>(<argument><expr><literal type="number">0x73</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>address</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>to_address</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>reladdr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>pc</name> <operator>&lt;</operator> <name>address</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>reladdr</name> <operator>=</operator> <name>address</name> <operator>-</operator> <name>pc</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>reladdr</name> <operator>=</operator> <name>pc</name> <operator>-</operator> <name>address</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name>reladdr</name> <operator>&lt;</operator> <literal type="number">0x100</literal></expr> )</condition> <block>{<block_content>

<return>return <expr><call><name>mnem_sjmp</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name>reladdr</name> <operator>&lt;</operator> <literal type="number">0x08FF</literal></expr> )</condition> <block>{<block_content>

<return>return <expr><call><name>mnem_ajmp</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><call><name>mnem_ljmp</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_subb</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_indirect_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_register</name> <argument_list>(<argument><expr><literal type="number">0x96</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_immediate</name> <argument_list>(<argument><expr><literal type="number">0x94</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_register</name> <argument_list>(<argument><expr><literal type="number">0x98</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>singlearg_direct</name> <argument_list>(<argument><expr><literal type="number">0x95</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_swap</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>single_a_arg_instr</name> <argument_list>(<argument><expr><literal type="number">0xc4</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_xrl</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_indirect_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_register</name> <argument_list>(<argument><expr><literal type="number">0x66</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_immediate</name> <argument_list>(<argument><expr><literal type="number">0x64</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_register</name> <argument_list>(<argument><expr><literal type="number">0x68</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>singlearg_direct</name> <argument_list>(<argument><expr><literal type="number">0x65</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>singlearg_direct</name> <argument_list>(<argument><expr><literal type="number">0x62</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>dest_addr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>address_direct</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dest_addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>imm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>resolve_immediate</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>imm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="number">0x63</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>dest_addr</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <name>imm</name> <operator>&amp;</operator> <literal type="number">0x00FF</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_xch</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_indirect_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_register</name> <argument_list>(<argument><expr><literal type="number">0xc6</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>singlearg_register</name> <argument_list>(<argument><expr><literal type="number">0xc8</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>singlearg_direct</name> <argument_list>(<argument><expr><literal type="number">0xc5</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mnem_xchd</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_indirect_reg</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>singlearg_register</name> <argument_list>(<argument><expr><literal type="number">0xd6</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>parse_mnem_args</name></type> <name>mnemonic</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>user_asm</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type><name>nargs</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <macro><name>match_prefix_f</name> <argument_list>(<argument>nargs</argument>, <argument>user_asm</argument>, <argument>(ftable){

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mnem</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>mn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ #mn " ", &amp;mnem_ ##mn, n },</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>zeroarg_mnem</name><parameter_list>(<parameter><type><name>mn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ #mn , &amp;mnem_ ##mn, 0 },</cpp:value></cpp:define>

mnem (<literal type="number">1</literal>, acall)

mnem (<literal type="number">2</literal>, addc)

mnem (<literal type="number">2</literal>, add)

mnem (<literal type="number">1</literal>, ajmp)

mnem (<literal type="number">2</literal>, anl)

mnem (<literal type="number">3</literal>, cjne)

mnem (<literal type="number">1</literal>, clr)

mnem (<literal type="number">1</literal>, cpl)

mnem (<literal type="number">1</literal>, da)

mnem (<literal type="number">1</literal>, dec)

mnem (<literal type="number">1</literal>, div)

mnem (<literal type="number">2</literal>, djnz)

mnem (<literal type="number">1</literal>, inc)

mnem (<literal type="number">2</literal>, jbc)

mnem (<literal type="number">2</literal>, jb)

mnem (<literal type="number">1</literal>, jc)

mnem (<literal type="number">1</literal>, jmp)

mnem (<literal type="number">2</literal>, jnb)

mnem (<literal type="number">1</literal>, jnc)

mnem (<literal type="number">1</literal>, jz)

mnem (<literal type="number">1</literal>, jnz)

mnem (<literal type="number">1</literal>, lcall)

mnem (<literal type="number">1</literal>, ljmp)

{ <literal type="string">"mov c,"</literal></argument>, <argument>&amp;mnem_mov_c</argument>, <argument><literal type="number">2</literal> }</argument>,

<argument>mnem (<literal type="number">2</literal>, movc)

mnem (<literal type="number">2</literal>, movx)

mnem (<literal type="number">2</literal>, mov)

mnem (<literal type="number">1</literal>, mul)

mnem (<literal type="number">2</literal>, orl)

mnem (<literal type="number">1</literal>, pop)

mnem (<literal type="number">1</literal>, push)

mnem (<literal type="number">2</literal>, xchd)

mnem (<literal type="number">2</literal>, xch)

mnem (<literal type="number">2</literal>, xrl)

mnem (<literal type="number">1</literal>, rlc)

mnem (<literal type="number">1</literal>, rl)

mnem (<literal type="number">1</literal>, rrc)

mnem (<literal type="number">1</literal>, rr)

mnem (<literal type="number">1</literal>, setb)

mnem (<literal type="number">1</literal>, sjmp)

mnem (<literal type="number">2</literal>, subb)

mnem (<literal type="number">1</literal>, swap)

zeroarg_mnem (nop)

zeroarg_mnem (reti)

zeroarg_mnem (ret)

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>mnem</name></cpp:undef>

{<literal type="number">0</literal>}}</argument>)</argument_list></macro>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>assemble_8051</name><parameter_list>(<parameter><decl><type><name>RAsm</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RAsmOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>user_asm</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name> <operator>||</operator> <operator>!</operator><name>op</name> <operator>||</operator> <operator>!</operator><name>user_asm</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_strbuf_set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf_asm</name></name></expr></argument>, <argument><expr><name>user_asm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>terminates_asm_line</name> <argument_list>(<argument><expr><operator>*</operator><name>user_asm</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>user_asm</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>user_asm</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>user_asm</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>arguments</name> <init>= <expr><name>user_asm</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>terminates_asm_line</name> <argument_list>(<argument><expr><operator>*</operator><name>arguments</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><literal type="char">'a'</literal> <operator>&lt;=</operator> <operator>*</operator><name>arguments</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>arguments</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><literal type="char">'A'</literal> <operator>&lt;=</operator> <operator>*</operator><name>arguments</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>arguments</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arguments</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><operator>!</operator><call><name>terminates_asm_line</name> <argument_list>(<argument><expr><operator>*</operator><name>arguments</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>arguments</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>arguments</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arguments</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type><name><name>arg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nr_of_arguments</name> <init>= <expr><call><name>get_arguments</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>arguments</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type><name><name>carg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>wants_arguments</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>parse_mnem_args</name></type> <name>mnem</name> <init>= <expr><call><name>mnemonic</name> <argument_list>(<argument><expr><name>user_asm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wants_arguments</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mnem</name> <operator>||</operator> <name>nr_of_arguments</name> <operator>!=</operator> <name>wants_arguments</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>carg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>carg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>carg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name><name>instr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>binp</name> <init>= <expr><name>instr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mnem</name> <argument_list>(<argument><expr><name>carg</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>binp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>carg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>carg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>carg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>carg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>carg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>carg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name>binp</name> <operator>-</operator> <name>instr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_strbuf_setbin</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>instr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>binp</name> <operator>-</operator> <name>instr</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

</unit>
