<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\8051\8051_ops.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut16</name></type> <name>arg_offset</name> <parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>pc</name> <operator>+</operator> <name>offset</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>

<return>return <expr><name>pc</name> <operator>-</operator> <name>offset</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut16</name></type> <name>arg_addr11</name> <parameter_list>(<parameter><decl><type><name>ut16</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>pc</name> <operator>&amp;</operator> <literal type="number">0xf800</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xe0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut8</name></type> <name>arg_bit</name> <parameter_list>(<parameter><decl><type><name>ut8</name></type> <name>bit_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bit_addr</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>bit_addr</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x20</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>bit_addr</name> <operator>&amp;</operator> <literal type="number">0xf8</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><enum>enum <block>{

<decl><name>OP_INVALID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>OP_ADD</name></decl>,

<decl><name>OP_ADDC</name></decl>,

<decl><name>OP_ANL</name></decl>,

<decl><name>OP_CALL</name></decl>,

<decl><name>OP_CJNE</name></decl>,

<decl><name>OP_CLR</name></decl>,

<decl><name>OP_CPL</name></decl>,

<decl><name>OP_DA</name></decl>,

<decl><name>OP_DEC</name></decl>,

<decl><name>OP_DIV</name></decl>,

<decl><name>OP_DJNZ</name></decl>,

<decl><name>OP_INC</name></decl>,

<decl><name>OP_JB</name></decl>,

<decl><name>OP_JBC</name></decl>,

<decl><name>OP_JC</name></decl>,

<decl><name>OP_JMP</name></decl>,

<decl><name>OP_JNB</name></decl>,

<decl><name>OP_JNC</name></decl>,

<decl><name>OP_JNZ</name></decl>,

<decl><name>OP_JZ</name></decl>,

<decl><name>OP_MOV</name></decl>,

<decl><name>OP_MUL</name></decl>,

<decl><name>OP_NOP</name></decl>,

<decl><name>OP_ORL</name></decl>,

<decl><name>OP_POP</name></decl>,

<decl><name>OP_PUSH</name></decl>,

<decl><name>OP_RET</name></decl>,

<decl><name>OP_RL</name></decl>,

<decl><name>OP_RLC</name></decl>,

<decl><name>OP_RR</name></decl>,

<decl><name>OP_RRC</name></decl>,

<decl><name>OP_SETB</name></decl>,

<decl><name>OP_SUBB</name></decl>,

<decl><name>OP_SWAP</name></decl>,

<decl><name>OP_XCH</name></decl>,

<decl><name>OP_XRL</name></decl>

}</block></enum></type> <name>op8051</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>A_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>A_RI</name></decl>, 

<decl><name>A_RN</name></decl>, 

<decl><name>A_ADDR11</name></decl>,

<decl><name>A_ADDR16</name></decl>,

<decl><name>A_DIRECT</name></decl>,

<decl><name>A_BIT</name></decl>,

<decl><name>A_IMMEDIATE</name></decl>,

<decl><name>A_IMM16</name></decl>,

<decl><name>A_OFFSET</name></decl>

}</block></enum></type> <name>argtype8051</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>M_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>M_RI</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,

<decl><name>M_RN</name> <init>= <expr><literal type="number">0x07</literal></expr></init></decl>,

<decl><name>M_ADDR11</name> <init>= <expr><literal type="number">0xe0</literal></expr></init></decl>

}</block></enum></type> <name>argmask8051</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>ut8</name></type> <name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cycles</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>op8051</name></type> <name>instr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>_RAnalOpType</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>string</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>argmask8051</name></type> <name>mask</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>argtype8051</name></type> <name>arg1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>argtype8051</name></type> <name>arg2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>argtype8051</name></type> <name>arg3</name></decl>;</decl_stmt>

}</block></struct></type> <name>_8051_op_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>_8051_op_t</name></type> <name><name>_8051_ops</name><index>[]</index></name> <init>= <expr><block>{

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>R_ANAL_OP_TYPE_ ##op</cpp:value></cpp:define>

<expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_NOP</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>NOP</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"nop"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_JMP</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>JMP</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"ajmp 0x%04x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_ADDR11</name></expr>, <expr><name>A_ADDR11</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_JMP</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>JMP</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"ljmp 0x%04x"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_ADDR16</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_RR</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>ROR</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"rr a"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_INC</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>ADD</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"inc a"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_INC</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>ADD</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"inc 0x%02x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_INC</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>ADD</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"inc @r%d"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_RI</name></expr>, <expr><name>A_RI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_INC</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>ADD</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"inc r%d"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_RN</name></expr>, <expr><name>A_RN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_JBC</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>CJMP</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"jbc 0x%02x.%d, 0x%04x"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_BIT</name></expr>, <expr><name>A_OFFSET</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_CALL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>CALL</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"acall 0x%04x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_ADDR11</name></expr>, <expr><name>A_ADDR11</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_CALL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>CALL</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"lcall 0x%04x"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_ADDR16</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_RRC</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>ROR</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"rrc a"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_DEC</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>SUB</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"dec a"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_DEC</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>SUB</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"dec 0x%02x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_DEC</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>SUB</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"dec @r%d"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_RI</name></expr>, <expr><name>A_RI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>,

<expr><block>{<expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_DEC</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>SUB</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"dec r%d"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_RN</name></expr>, <expr><name>A_RN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_JB</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>CJMP</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"jb 0x%02x.%d, 0x%04x"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_BIT</name></expr>, <expr><name>A_OFFSET</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_RET</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>RET</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"ret"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_RL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>ROL</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"rl a"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_ADD</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>ADD</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"add a, #0x%02x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_IMMEDIATE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_ADD</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>ADD</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"add a, 0x%02x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_ADD</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>ADD</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"add a, @r%d"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_RI</name></expr>, <expr><name>A_RI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_ADD</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>ADD</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"add a, r%d"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_RN</name></expr>, <expr><name>A_RN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_JNB</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>CJMP</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"jnb 0x%02x.%d, 0x%04x"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_BIT</name></expr>, <expr><name>A_OFFSET</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_RET</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>RET</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"reti"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_RLC</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>ROR</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"rlc a"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_ADDC</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>ADD</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"addc a, #0x%02x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_IMMEDIATE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_ADDC</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>ADD</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"addc a, 0x%02x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_ADDC</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>ADD</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"addc a, @r%d"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_RI</name></expr>, <expr><name>A_RI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_ADDC</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>ADD</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"addc a, r%d"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_RN</name></expr>, <expr><name>A_RN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_JC</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>CJMP</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"jc 0x%04x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_OFFSET</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_ORL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>OR</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"orl 0x%02x, a"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_ORL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>OR</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"orl 0x%02x, #0x%02x"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><name>A_IMMEDIATE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_ORL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>OR</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"orl a, #0x%02x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_IMMEDIATE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_ORL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>OR</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"orl a, 0x%02x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_ORL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>OR</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"orl a, @r%d"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_RI</name></expr>, <expr><name>A_RI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_ORL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>OR</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"orl a, r%d"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_RN</name></expr>, <expr><name>A_RN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_JNC</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>CJMP</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"jnc 0x%04x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_OFFSET</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_ANL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>AND</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"anl 0x%02x, a"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_ANL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>AND</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"anl 0x%02x, #0x%02x"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><name>A_IMMEDIATE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_ANL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>AND</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"anl a, #0x%02x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_IMMEDIATE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_ANL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>AND</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"anl a, 0x%02x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_ANL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>AND</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"anl a, @r%d"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_RI</name></expr>, <expr><name>A_RI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_ANL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>AND</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"anl a, r%d"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_RN</name></expr>, <expr><name>A_RN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_JZ</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>CJMP</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"jz 0x%04x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_OFFSET</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_XRL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>XOR</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"xrl 0x%02x, a"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_XRL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>XOR</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"xrl 0x%02x, #0x%02x"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><name>A_IMMEDIATE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_XRL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>XOR</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"xrl a, #0x%02x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_IMMEDIATE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_XRL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>XOR</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"xrl a, 0x%02x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_XRL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>XOR</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"xrl a, @r%d"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_RI</name></expr>, <expr><name>A_RI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_XRL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>XOR</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"xrl a, r%d"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_RN</name></expr>, <expr><name>A_RN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_JNZ</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>CJMP</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"jnz 0x%04x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_OFFSET</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_ORL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>OR</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"orl c, 0x%02x.%d"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_BIT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_JMP</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>UJMP</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"jmp @a+dptr"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_MOV</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>MOV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"mov a, #0x%02x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_IMMEDIATE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_MOV</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>MOV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"mov 0x%02x, #0x%02x"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><name>A_IMMEDIATE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_MOV</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>MOV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"mov @r%d, #0x%02x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_RI</name></expr>, <expr><name>A_RI</name></expr>, <expr><name>A_IMMEDIATE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_MOV</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>MOV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"mov r%d, #0x%02x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_RN</name></expr>, <expr><name>A_RN</name></expr>, <expr><name>A_IMMEDIATE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_JMP</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>JMP</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"sjmp 0x%04x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_OFFSET</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_ANL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>AND</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"anl c, 0x%02x.%d"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_BIT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_MOV</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>MOV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"movc a, @a+pc"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>OP_DIV</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>DIV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"div ab"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_MOV</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>MOV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"mov 0x%02x, 0x%02x"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_MOV</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>MOV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"mov 0x%02x, @r%d"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_RI</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><name>A_RI</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_MOV</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>MOV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"mov 0x%02x, r%d"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_RN</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><name>A_RN</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_MOV</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>MOV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"mov dptr, #0x%04x"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_IMM16</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_MOV</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>MOV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"mov 0x%02x.%d, c"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_BIT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_MOV</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>MOV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"movc a, @a+dptr"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_SUBB</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>SUB</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"subb a, #0x%02x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_IMMEDIATE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_SUBB</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>SUB</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"subb a, 0x%02x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_SUBB</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>SUB</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"subb a, @r%d"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_RI</name></expr>, <expr><name>A_RI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_SUBB</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>SUB</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"subb a, r%d"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_RN</name></expr>, <expr><name>A_RN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_ORL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>OR</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"orl c, /0x%02x.%d"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_BIT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_MOV</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>MOV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"mov c, 0x%02x.%d"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_BIT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_INC</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>ADD</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"inc dptr"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>OP_MUL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>MUL</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"mul ab"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_MOV</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>MOV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"mov @r%d, 0x%02x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_RI</name></expr>, <expr><name>A_RI</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_MOV</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>MOV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"mov r%d, 0x%02x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_RN</name></expr>, <expr><name>A_RN</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_ANL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>AND</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"anl c, /0x%02x.%d"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_BIT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_CPL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>CPL</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"cpl 0x%02x.%d"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_BIT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_CPL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>CPL</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"cpl c"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_CJNE</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>CJMP</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"cjne a, #0x%02x, 0x%04x"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_IMMEDIATE</name></expr>, <expr><name>A_OFFSET</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_CJNE</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>CJMP</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"cjne a, 0x%02x, 0x%04x"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><name>A_OFFSET</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_CJNE</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>CJMP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name> <argument_list>(<argument><expr><name>IND</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"cjne @r%d, #0x%02x, 0x%04x"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>M_RI</name></expr>, <expr><name>A_RI</name></expr>, <expr><name>A_IMMEDIATE</name></expr>, <expr><name>A_OFFSET</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_CJNE</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>CJMP</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"cjne r%d, #0x%02x, 0x%04x"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>M_RN</name></expr>, <expr><name>A_RN</name></expr>, <expr><name>A_IMMEDIATE</name></expr>, <expr><name>A_OFFSET</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_PUSH</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>PUSH</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name> <argument_list>(<argument><expr><name>MEM</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"push 0x%02x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_CLR</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>IO</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"clr 0x%02x.%d"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_BIT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_CLR</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>IO</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"clr c"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_SWAP</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>XCHG</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"swap a"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_XCH</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>XCHG</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"xch a, 0x%02x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_XCH</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>XCHG</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"xch a, @r%d"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_RI</name></expr>, <expr><name>A_RI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_XCH</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>XCHG</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"xch a, r%d"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_RN</name></expr>, <expr><name>A_RN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_POP</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>POP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name> <argument_list>(<argument><expr><name>MEM</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"pop 0x%02x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_SETB</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>IO</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"setb 0x%02x.%d"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_BIT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_SETB</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>IO</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"setb c"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_DA</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>CAST</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"da a"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_DJNZ</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>CJMP</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"djnz 0x%02x, 0x%04x"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><name>A_OFFSET</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_XCH</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>XCHG</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"xchd a, @r%d"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_RI</name></expr>, <expr><name>A_RI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_DJNZ</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>CJMP</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"djnz r%d, 0x%04x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_RN</name></expr>, <expr><name>A_RN</name></expr>, <expr><name>A_OFFSET</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_MOV</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>MOV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"movx a, @dptr"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_MOV</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>MOV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"movx a, @r%d"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_RI</name></expr>, <expr><name>A_RI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_CLR</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>IO</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"clr a"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_MOV</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>MOV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"mov a, 0x%02x"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_MOV</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>MOV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"mov a, @r%d"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_RI</name></expr>, <expr><name>A_RI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_MOV</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>MOV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"mov a, r%d"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_RN</name></expr>, <expr><name>A_RN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_MOV</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>MOV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"movx @dptr, a"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>OP_MOV</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>MOV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"movx @r%d, a"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_RI</name></expr>, <expr><name>A_RI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_CPL</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>CPL</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"cpl a"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_MOV</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>MOV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"mov 0x%02x, a"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>M_NONE</name></expr>, <expr><name>A_DIRECT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_MOV</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>MOV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"mov @r%d, a"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_RI</name></expr>, <expr><name>A_RI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_MOV</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>MOV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"mov r%d, a"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_RN</name></expr>, <expr><name>A_RN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>OP_INVALID</name></expr>, <expr><call><name>T</name> <argument_list>(<argument><expr><name>ILL</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>T</name></cpp:undef>

}</block></expr></init></decl>;</decl_stmt>

</unit>
