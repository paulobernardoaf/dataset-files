<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\hexagon\hexagon.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_asm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hexagon.h"</cpp:file></cpp:include>

<function><type><name>char</name><modifier>*</modifier></type> <name>hex_get_cntl_reg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opreg</name></decl></parameter>)</parameter_list><block>{<block_content>

<switch>switch <condition>(<expr><name>opreg</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>HEX_REG_SA0</name></expr>:</case>

<return>return <expr><literal type="string">"SA0"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_LC0</name></expr>:</case>

<return>return <expr><literal type="string">"LC0"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_SA1</name></expr>:</case>

<return>return <expr><literal type="string">"SA1"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_LC1</name></expr>:</case>

<return>return <expr><literal type="string">"LC1"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_P</name></expr>:</case>

<return>return <expr><literal type="string">"P"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_M0</name></expr>:</case>

<return>return <expr><literal type="string">"M0"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_M1</name></expr>:</case>

<return>return <expr><literal type="string">"M1"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_USR</name></expr>:</case>

<return>return <expr><literal type="string">"USR"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_PC</name></expr>:</case>

<return>return <expr><literal type="string">"PC"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_UGP</name></expr>:</case>

<return>return <expr><literal type="string">"UGP"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_GP</name></expr>:</case>

<return>return <expr><literal type="string">"GP"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_CS0</name></expr>:</case>

<return>return <expr><literal type="string">"CS0"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_CS1</name></expr>:</case>

<return>return <expr><literal type="string">"CS1"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_UPCYCLELO</name></expr>:</case>

<return>return <expr><literal type="string">"UPCYCLELO"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_UPCYCLEHI</name></expr>:</case>

<return>return <expr><literal type="string">"UPCYCLEHI"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_FRAMELIMIT</name></expr>:</case>

<return>return <expr><literal type="string">"FRAMELIMIT"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_FRAMEKEY</name></expr>:</case>

<return>return <expr><literal type="string">"FRAMEKEY"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_PKTCOUNTLO</name></expr>:</case>

<return>return <expr><literal type="string">"PKTCOUNTLO"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_PKTCOUNTHI</name></expr>:</case>

<return>return <expr><literal type="string">"PKTCOUNTHI"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_UTIMERLO</name></expr>:</case>

<return>return <expr><literal type="string">"UTIMERLO"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_UTIMERHI</name></expr>:</case>

<return>return <expr><literal type="string">"UTIMERHI"</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="string">"&lt;CRerr&gt;"</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>hex_get_sys_reg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opreg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>opreg</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>HEX_REG_SGP0</name></expr>:</case>

<return>return <expr><literal type="string">"SGP0"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_SGP1</name></expr>:</case>

<return>return <expr><literal type="string">"SGP1"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_STID</name></expr>:</case>

<return>return <expr><literal type="string">"STID"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_ELR</name></expr>:</case>

<return>return <expr><literal type="string">"ELR"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_BADVA0</name></expr>:</case>

<return>return <expr><literal type="string">"BADVA0"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_BADVA1</name></expr>:</case>

<return>return <expr><literal type="string">"BADVA1"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_SSR</name></expr>:</case>

<return>return <expr><literal type="string">"SSR"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_CCR</name></expr>:</case>

<return>return <expr><literal type="string">"CCR"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_HTID</name></expr>:</case>

<return>return <expr><literal type="string">"HTID"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_BADVA</name></expr>:</case>

<return>return <expr><literal type="string">"BADVA"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_IMASK</name></expr>:</case>

<return>return <expr><literal type="string">"IMASK"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_EVB</name></expr>:</case>

<return>return <expr><literal type="string">"EVB"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_MODECTL</name></expr>:</case>

<return>return <expr><literal type="string">"MODECTL"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_SYSCFG</name></expr>:</case>

<return>return <expr><literal type="string">"SYSCFG"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_IPEND</name></expr>:</case>

<return>return <expr><literal type="string">"IPEND"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_VID</name></expr>:</case>

<return>return <expr><literal type="string">"VID"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_IAD</name></expr>:</case>

<return>return <expr><literal type="string">"IAD"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_IEL</name></expr>:</case>

<return>return <expr><literal type="string">"IEL"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_IAHL</name></expr>:</case>

<return>return <expr><literal type="string">"IAHL"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_CFGBASE</name></expr>:</case>

<return>return <expr><literal type="string">"CFGBASE"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_DIAG</name></expr>:</case>

<return>return <expr><literal type="string">"DIAG"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_REV</name></expr>:</case>

<return>return <expr><literal type="string">"REV"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_PCYCLELO</name></expr>:</case>

<return>return <expr><literal type="string">"PCYCLELO"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_PCYCLEHI</name></expr>:</case>

<return>return <expr><literal type="string">"PCYCLEHI"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_ISDBST</name></expr>:</case>

<return>return <expr><literal type="string">"ISDBST"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_ISDBCFG0</name></expr>:</case>

<return>return <expr><literal type="string">"ISDBCFG0"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_ISDBCFG1</name></expr>:</case>

<return>return <expr><literal type="string">"ISDBCFG1"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_BRKPTPC0</name></expr>:</case>

<return>return <expr><literal type="string">"BRKPTPC0"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_BRKPTCFG0</name></expr>:</case>

<return>return <expr><literal type="string">"BRKPTCFG0"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_BRKPTPC1</name></expr>:</case>

<return>return <expr><literal type="string">"BRKPTPC1"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_BRKPTCFG1</name></expr>:</case>

<return>return <expr><literal type="string">"BRKPTCFG1"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_ISDBMBXIN</name></expr>:</case>

<return>return <expr><literal type="string">"ISDBMBXIN"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_ISDBMBXOUT</name></expr>:</case>

<return>return <expr><literal type="string">"ISDBMBXOUT"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_ISDBEN</name></expr>:</case>

<return>return <expr><literal type="string">"ISDBEN"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_ISDBGPR</name></expr>:</case>

<return>return <expr><literal type="string">"ISDBGPR"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_PMUCNT0</name></expr>:</case>

<return>return <expr><literal type="string">"PMUCNT0"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_PMUCNT1</name></expr>:</case>

<return>return <expr><literal type="string">"PMUCNT1"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_PMUCNT2</name></expr>:</case>

<return>return <expr><literal type="string">"PMUCNT2"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_PMUCNT3</name></expr>:</case>

<return>return <expr><literal type="string">"PMUCNT3"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_PMUEVTCFG</name></expr>:</case>

<return>return <expr><literal type="string">"PMUEVTCFG"</literal></expr>;</return>

<case>case <expr><name>HEX_REG_PMUCFG</name></expr>:</case>

<return>return <expr><literal type="string">"PMUCFG"</literal></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"S%d"</literal></expr></argument>, <argument><expr><name>opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tmp</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>hex_get_sub_reg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opreg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>opreg</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>HEX_SUB_REG_R0</name></expr>:</case>

<return>return <expr><literal type="string">"R0"</literal></expr>;</return>

<case>case <expr><name>HEX_SUB_REG_R1</name></expr>:</case>

<return>return <expr><literal type="string">"R1"</literal></expr>;</return>

<case>case <expr><name>HEX_SUB_REG_R2</name></expr>:</case>

<return>return <expr><literal type="string">"R2"</literal></expr>;</return>

<case>case <expr><name>HEX_SUB_REG_R3</name></expr>:</case>

<return>return <expr><literal type="string">"R3"</literal></expr>;</return>

<case>case <expr><name>HEX_SUB_REG_R4</name></expr>:</case>

<return>return <expr><literal type="string">"R4"</literal></expr>;</return>

<case>case <expr><name>HEX_SUB_REG_R5</name></expr>:</case>

<return>return <expr><literal type="string">"R5"</literal></expr>;</return>

<case>case <expr><name>HEX_SUB_REG_R6</name></expr>:</case>

<return>return <expr><literal type="string">"R6"</literal></expr>;</return>

<case>case <expr><name>HEX_SUB_REG_R7</name></expr>:</case>

<return>return <expr><literal type="string">"R7"</literal></expr>;</return>

<case>case <expr><name>HEX_SUB_REG_R16</name></expr>:</case>

<return>return <expr><literal type="string">"R16"</literal></expr>;</return>

<case>case <expr><name>HEX_SUB_REG_R17</name></expr>:</case>

<return>return <expr><literal type="string">"R17"</literal></expr>;</return>

<case>case <expr><name>HEX_SUB_REG_R18</name></expr>:</case>

<return>return <expr><literal type="string">"R18"</literal></expr>;</return>

<case>case <expr><name>HEX_SUB_REG_R19</name></expr>:</case>

<return>return <expr><literal type="string">"R19"</literal></expr>;</return>

<case>case <expr><name>HEX_SUB_REG_R20</name></expr>:</case>

<return>return <expr><literal type="string">"R20"</literal></expr>;</return>

<case>case <expr><name>HEX_SUB_REG_R21</name></expr>:</case>

<return>return <expr><literal type="string">"R21"</literal></expr>;</return>

<case>case <expr><name>HEX_SUB_REG_R22</name></expr>:</case>

<return>return <expr><literal type="string">"R22"</literal></expr>;</return>

<case>case <expr><name>HEX_SUB_REG_R23</name></expr>:</case>

<return>return <expr><literal type="string">"R23"</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="string">"&lt;err&gt;"</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>hex_get_sub_regpair</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opreg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>opreg</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>HEX_SUB_REGPAIR_R1_R0</name></expr>:</case>

<return>return <expr><literal type="string">"R1:R0"</literal></expr>;</return>

<case>case <expr><name>HEX_SUB_REGPAIR_R3_R2</name></expr>:</case>

<return>return <expr><literal type="string">"R3:R2"</literal></expr>;</return>

<case>case <expr><name>HEX_SUB_REGPAIR_R5_R4</name></expr>:</case>

<return>return <expr><literal type="string">"R5:R4"</literal></expr>;</return>

<case>case <expr><name>HEX_SUB_REGPAIR_R7_R6</name></expr>:</case>

<return>return <expr><literal type="string">"R7:R6"</literal></expr>;</return>

<case>case <expr><name>HEX_SUB_REGPAIR_R17_R16</name></expr>:</case>

<return>return <expr><literal type="string">"R17:R16"</literal></expr>;</return>

<case>case <expr><name>HEX_SUB_REGPAIR_R19_R18</name></expr>:</case>

<return>return <expr><literal type="string">"R19:R18"</literal></expr>;</return>

<case>case <expr><name>HEX_SUB_REGPAIR_R21_R20</name></expr>:</case>

<return>return <expr><literal type="string">"R21:R20"</literal></expr>;</return>

<case>case <expr><name>HEX_SUB_REGPAIR_R23_R22</name></expr>:</case>

<return>return <expr><literal type="string">"R23:R22"</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="string">"&lt;err&gt;"</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>hex_if_duplex</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>insn_word</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>insn_word</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>ut32</name></type> <name>constant_extender</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>hex_op_extend</name><parameter_list>(<parameter><decl><type><name>HexOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>constant_extender</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>HEX_OP_TYPE_IMM</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>imm</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>imm</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>constant_extender</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>constant_extender</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>hex_op_extend_off</name><parameter_list>(<parameter><decl><type><name>HexOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>constant_extender</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>HEX_OP_TYPE_IMM</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>imm</name></name> <operator>=</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>imm</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hex_op_extend</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
