<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\hexagon\gnu\opcode\hexagon.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_MACH</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_MACH_V2</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_MACH_V3</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_MACH_V4</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_MACH_V5</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_MACH_BIG</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_MACH_CPU_MASK</name></cpp:macro> <cpp:value>(HEXAGON_MACH_BIG - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_MACH_MASK</name></cpp:macro> <cpp:value>((HEXAGON_MACH_BIG &lt;&lt; 1) - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_IS_V2</name></cpp:macro> <cpp:value>(1 &lt;&lt; 31)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_IS_V3</name></cpp:macro> <cpp:value>(1 &lt;&lt; 30)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_IS_V4</name></cpp:macro> <cpp:value>(1 &lt;&lt; 29)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_IS_V5</name></cpp:macro> <cpp:value>(1 &lt;&lt; 28)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V2_AND_V3</name></cpp:macro> <cpp:value>(HEXAGON_IS_V3 | HEXAGON_IS_V2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V2_AND_UP</name></cpp:macro> <cpp:value>(HEXAGON_IS_V5 | HEXAGON_IS_V4 | HEXAGON_IS_V3 | HEXAGON_IS_V2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V3_AND_UP</name></cpp:macro> <cpp:value>(HEXAGON_IS_V5 | HEXAGON_IS_V4 | HEXAGON_IS_V3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V4_AND_UP</name></cpp:macro> <cpp:value>(HEXAGON_IS_V5 | HEXAGON_IS_V4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_INSN_LEN</name></cpp:macro> <cpp:value>(4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PACKET_INSNS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_MAPPED_LEN</name></cpp:macro> <cpp:value>(256)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_IS16BITS</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_IS16INSN</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_LO16</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((num) &amp; ~(-1UL &lt;&lt; 16))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HI16</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(HEXAGON_LO16 ((num) &gt;&gt; 16))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_KXER_MASK</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((num) &amp; (-1 &lt;&lt; 6))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_KXED_MASK</name><parameter_list>(<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((num) &amp; ~(-1 &lt;&lt; 6))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_NUM_GENERAL_PURPOSE_REGS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_NUM_CONTROL_REGS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_NUM_SYS_CTRL_REGS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_NUM_PREDICATE_REGS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_NUM_GUEST_REGS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_SUBREGS</name></cpp:macro> <cpp:value>(16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_SUBREGS_LO</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_SUBREGS_HI</name></cpp:macro> <cpp:value>(16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_SUBREGS_TO</name><parameter_list>(<parameter><type><name>r</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((r) &lt; HEXAGON_SUBREGS_HI ? (r) : (r) - HEXAGON_SUBREGS / 2) / ((p)? 2: 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_SUBREGS_FROM</name><parameter_list>(<parameter><type><name>r</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((r) * ((p)? 2: 1) &lt; HEXAGON_SUBREGS / 2 ? (r) * ((p)? 2: 1) : (r) * ((p)? 2: 1) - HEXAGON_SUBREGS / 2 + HEXAGON_SUBREGS_HI)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_SLOTS_DUPLEX</name></cpp:macro> <cpp:value>(0x3)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_SLOTS_STORES</name></cpp:macro> <cpp:value>(0x2)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_SLOTS_1</name></cpp:macro> <cpp:value>(0x2)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_SLOTS_MEM1</name></cpp:macro> <cpp:value>(0x1)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_INSN_TYPE_A7</name></cpp:macro> <cpp:value>(0x70000000)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_INSN_TYPE_X8</name></cpp:macro> <cpp:value>(0x80000000)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_INSN_TYPE_A11</name></cpp:macro> <cpp:value>(0xb0000000)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_INSN_TYPE_X12</name></cpp:macro> <cpp:value>(0xc0000000)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_INSN_TYPE_X13</name></cpp:macro> <cpp:value>(0xd0000000)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_INSN_TYPE_X14</name></cpp:macro> <cpp:value>(0xe0000000)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_INSN_TYPE_A15</name></cpp:macro> <cpp:value>(0xf0000000)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_INSN_TYPE_MASK</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((i) &amp; 0xf0000000)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_INSN_TYPE_A</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((HEXAGON_INSN_TYPE_MASK (i) == HEXAGON_INSN_TYPE_A7) || (HEXAGON_INSN_TYPE_MASK (i) == HEXAGON_INSN_TYPE_A11) || (HEXAGON_INSN_TYPE_MASK (i) == HEXAGON_INSN_TYPE_A15))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_INSN_TYPE_X</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((HEXAGON_INSN_TYPE_MASK (i) == HEXAGON_INSN_TYPE_X8) || (HEXAGON_INSN_TYPE_MASK (i) == HEXAGON_INSN_TYPE_X12) || (HEXAGON_INSN_TYPE_MASK (i) == HEXAGON_INSN_TYPE_X13) || (HEXAGON_INSN_TYPE_MASK (i) == HEXAGON_INSN_TYPE_X14))</cpp:value></cpp:define>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>hexagon_insn</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_hexagon_opcode</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>syntax</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_CODE_CPU</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((b) &amp; HEXAGON_MACH_CPU_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_CODE_MACH</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((b) &amp; HEXAGON_MACH_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_CODE_FLAG</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((f) &lt;&lt; 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_CODE_IS_PREFIX</name></cpp:macro> <cpp:value>(HEXAGON_CODE_FLAG (0x0001))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_CODE_IS_DUPLEX</name></cpp:macro> <cpp:value>(HEXAGON_CODE_FLAG (0x0002))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_CODE_IS_COMPND</name></cpp:macro> <cpp:value>(HEXAGON_CODE_FLAG (0x0004))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_CODE_IS_BRANCH</name></cpp:macro> <cpp:value>(HEXAGON_CODE_FLAG (0x0008))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_CODE_IS_MEMORY</name></cpp:macro> <cpp:value>(HEXAGON_CODE_FLAG (0x0010))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_CODE_IS_LOAD</name></cpp:macro> <cpp:value>(HEXAGON_CODE_FLAG (0x0020))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_CODE_IS_STORE</name></cpp:macro> <cpp:value>(HEXAGON_CODE_FLAG (0x0040))</cpp:value></cpp:define>

<decl_stmt><decl><type><name><name>struct</name> <name>_hexagon_opcode</name></name> <modifier>*</modifier></type><name>next_asm</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>_hexagon_opcode</name></name> <modifier>*</modifier></type><name>next_dis</name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HASH_OPCODE</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>hexagon_hash_opcode (string)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HASH_ICODE</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>hexagon_hash_icode (insn)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_CODE_NEXT_ASM</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((op)? (op)-&gt;next_asm: (op))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_CODE_NEXT_DIS</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((op)? (op)-&gt;next_dis: (op))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>slots</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>implicit</name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPLICIT_LR</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPLICIT_SP</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPLICIT_FP</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPLICIT_PC</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPLICIT_LC0</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPLICIT_SA0</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPLICIT_LC1</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPLICIT_SA1</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPLICIT_SR_OVF</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPLICIT_P3</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPLICIT_P0</name></cpp:macro> <cpp:value>0x0400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPLICIT_P1</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>attributes</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_IT_NOP</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_RESTRICT_NOSRMOVE</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_RESTRICT_LOOP_LA</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NOTE_LA_RESTRICT</name></cpp:macro> <cpp:value>A_RESTRICT_LOOP_LA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_RESTRICT_COF_MAX1</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_RESTRICT_NOPACKET</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NOTE_NOPACKET</name></cpp:macro> <cpp:value>A_RESTRICT_NOPACKET</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_RESTRICT_NOSLOT1</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NOTE_NOSLOT1</name></cpp:macro> <cpp:value>A_RESTRICT_NOSLOT1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_RESTRICT_NOCOF</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_COF</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_RESTRICT_BRANCHADDER_MAX1</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NOTE_BRANCHADDER_MAX1</name></cpp:macro> <cpp:value>A_RESTRICT_BRANCHADDER_MAX1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_BRANCHADDER</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_RESTRICT_SINGLE_MEM_FIRST</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONDITIONAL_EXEC</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_CONDEXEC</name></cpp:macro> <cpp:value>CONDITIONAL_EXEC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NOTE_CONDITIONAL</name></cpp:macro> <cpp:value>CONDITIONAL_EXEC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONDITION_SENSE_INVERTED</name></cpp:macro> <cpp:value>0x00001000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONDITION_DOTNEW</name></cpp:macro> <cpp:value>0x00002000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_DOTNEW</name></cpp:macro> <cpp:value>CONDITION_DOTNEW</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_RESTRICT_PREFERSLOT0</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_RESTRICT_LATEPRED</name></cpp:macro> <cpp:value>0x00008000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NOTE_LATEPRED</name></cpp:macro> <cpp:value>A_RESTRICT_LATEPRED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_RESTRICT_PACKET_AXOK</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NOTE_AXOK</name></cpp:macro> <cpp:value>A_RESTRICT_PACKET_AXOK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_RESTRICT_PACKET_SOMEREGS_OK</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_RELAX_COF_1ST</name></cpp:macro> <cpp:value>0x00040000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_RELAX_COF_2ND</name></cpp:macro> <cpp:value>0x00080000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKED</name></cpp:macro> <cpp:value>0x00100000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_IT_EXTENDER</name></cpp:macro> <cpp:value>0x00200000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENDABLE_LOWER_CASE_IMMEDIATE</name></cpp:macro> <cpp:value>0x00400000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENDABLE_UPPER_CASE_IMMEDIATE</name></cpp:macro> <cpp:value>0x00800000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_RESTRICT_SLOT0ONLY</name></cpp:macro> <cpp:value>0x01000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_STORE</name></cpp:macro> <cpp:value>0x02000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_STOREIMMED</name></cpp:macro> <cpp:value>0x04000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_RESTRICT_NOSLOT1_STORE</name></cpp:macro> <cpp:value>0x08000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUST_EXTEND</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_MUST_EXTEND</name></cpp:macro> <cpp:value>MUST_EXTEND</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_IT_HWLOOP</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_RESTRICT_NOLOOPSETUP</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_GUEST</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NOTE_GUEST</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_EXTENDABLE</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_EXT_LOWER_IMMED</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_EXT_UPPER_IMMED</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_ARCHV2</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_ARCHV3</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_CRSLOT23</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NOTE_CRSLOT23</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_MEMSIZE_1B</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_MEMSIZE_2B</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_MEMSIZE_4B</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_MEMSIZE_8B</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_MEMLIKE</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_IMPLICIT_WRITES_SP</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_IMPLICIT_READS_SP</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_IMPLICIT_READS_LR</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_IMPLICIT_WRITES_LR</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_IMPLICIT_WRITES_FP</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_IMPLICIT_READS_FP</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_IMPLICIT_READS_PC</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_IMPLICIT_WRITES_PC</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_IMPLICIT_READS_GP</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_IMPLICIT_READS_CS</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_IMPLICIT_READS_P0</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_IMPLICIT_WRITES_P0</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_IMPLICIT_READS_P1</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_IMPLICIT_WRITES_P1</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_IMPLICIT_WRITES_P3</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_IMPLICIT_WRITES_SRBIT</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_IMPLICIT_WRITES_LC0</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_IMPLICIT_WRITES_LC1</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_IMPLICIT_WRITES_SA0</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_IMPLICIT_WRITES_SA1</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_JUMP</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_CJUMP</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NEWCMPJUMP</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_DIRECT</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_INDIRECT</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_CALL</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_ROPS_2</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_ROPS_3</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_MEMOP</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_LOAD</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NVSTORE</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_DOTOLD</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_COMMUTES</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_PRIV</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NOTE_PRIV</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_SATURATE</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_USATURATE</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NOTE_SR_OVF_WHEN_SATURATING</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_BIDIRSHIFTL</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_BIDIRSHIFTR</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NOTE_OOBVSHIFT</name></cpp:macro> <cpp:value>0X00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_ICOP</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_INTRINSIC_RETURNS_UNSIGNED</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_CIRCADDR</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_BREVADDR</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_IT_MPY</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_IT_MPY_32</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NOTE_SPECIALGROUPING</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NOTE_PACKET_PC</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NOTE_PACKET_NPC</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NOTE_RELATIVE_ADDRESS</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_EXCEPTION_SWI</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NOTE_NEWVAL_SLOT0</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_DOTNEWVALUE</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_FPOP</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_FPDOUBLE</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_FPSINGLE</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_RET_TYPE</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_PRED_BIT_4</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NOTE_COMPAT_ACCURACY</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_MPY</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_CACHEOP</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_RESTRICT_SLOT1_AOK</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NOTE_SLOT1_AOK</name></cpp:macro> <cpp:value>A_RESTRICT_SLOT1_AOK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NOTE_DEALLOCRET</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_HINTJR</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_PRED_BIT_7</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_PRED_BIT_12</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_PRED_BIT_13</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NOTE_NVSLOT0</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NOTE_DEPRECATED</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_HWLOOP0_SETUP</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_HWLOOP1_SETUP</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_DOTNEW_LOAD</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

}</block></struct></type> <name>hexagon_opcode</name>;</typedef>

<typedef>typedef <type><name>size_t</name></type> <name>hexagon_hash</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_hexagon_operand</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>enc_letter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>shift_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bfd_reloc_code_real_type</name></type> <name>reloc_type</name></decl>, <name>reloc_kxer</name>, <name>reloc_kxed</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_OPERAND_IS_IMMEDIATE</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_OPERAND_PC_RELATIVE</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_OPERAND_IS_SIGNED</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_OPERAND_IS_PAIR</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_OPERAND_IS_SUBSET</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_OPERAND_IS_MODIFIER</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_OPERAND_IS_PREDICATE</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_OPERAND_IS_CONTROL</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_OPERAND_IS_SYSTEM</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_OPERAND_IS_LO16</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_OPERAND_IS_HI16</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_OPERAND_IS_READ</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_OPERAND_IS_WRITE</name></cpp:macro> <cpp:value>0x00001000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_OPERAND_IS_MODIFIED</name></cpp:macro> <cpp:value>0x00002000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_OPERAND_IS_NEGATIVE</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_OPERAND_IS_CONSTANT</name></cpp:macro> <cpp:value>0x00008000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_OPERAND_IS_NEW</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_OPERAND_IS_GUEST</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_OPERAND_IS_REGISTER</name></cpp:macro> <cpp:value>0x00040000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_OPERAND_IS_RNEW</name></cpp:macro> <cpp:value>0x00080000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_OPERAND_IS_RELAX</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_OPERAND_IS_KXER</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_OPERAND_IS_KXED</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_OPERAND_IS_INVALID</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dis_fmt</name></decl>, <modifier>*</modifier><name>alt_fmt</name>;</decl_stmt>

<function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>parse</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>_hexagon_operand</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>hexagon_operand</name>;</typedef>

<typedef>typedef <type><struct>struct <name>hexagon_operand_arg</name>

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>operand</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>string</name> <index>[<expr><name>HEXAGON_MAPPED_LEN</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>hexagon_operand_arg</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>hexagon_mapping</name>) <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>hexagon_operand_arg</name> <index>[]</index></name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>hexagon_reg</name>

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reg_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_REG_IS_READONLY</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_REG_IS_WRITEONLY</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_REG_IS_READWRITE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>

}</block></struct></type> <name>hexagon_reg</name>;</typedef>

<typedef>typedef <type><struct>struct <name>hexagon_reg_score</name>

<block>{

<decl_stmt><decl><type><name>char</name></type> <name>used</name></decl>, <name>letter</name>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_PRED_LEN</name></cpp:macro> <cpp:value>(3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_PRED_MSK</name></cpp:macro> <cpp:value>(~(-1 &lt;&lt; HEXAGON_PRED_LEN))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_PRED_YES</name></cpp:macro> <cpp:value>(0x01)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_PRED_NOT</name></cpp:macro> <cpp:value>(0x02)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_PRED_NEW</name></cpp:macro> <cpp:value>(0x04)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_PRED_GET</name><parameter_list>(<parameter><type><name>P</name></type></parameter>, <parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((P) &gt;&gt; ((I) * HEXAGON_PRED_LEN)) &amp; HEXAGON_PRED_MSK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_PRED_SET</name><parameter_list>(<parameter><type><name>P</name></type></parameter>, <parameter><type><name>I</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((HEXAGON_PRED_GET (P, I) | ((N) &amp; HEXAGON_PRED_MSK)) &lt;&lt; ((I) * HEXAGON_PRED_LEN))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>long</name></type> <name>pred</name><range>: <expr><operator>(</operator><name>HEXAGON_NUM_PREDICATE_REGS</name> <operator>*</operator> <name>HEXAGON_PRED_LEN</name><operator>)</operator></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ndx</name></decl>;</decl_stmt>

}</block></struct></type> <name>hexagon_reg_score</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HAVE_CPU</name><parameter_list>(<parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bits) &amp; HEXAGON_MACH_CPU_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HAVE_MACH</name><parameter_list>(<parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bits) &amp; HEXAGON_MACH_MASK)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>hexagon_operand</name></type> <name><name>hexagon_operands</name> <index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>hexagon_operand_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>hexagon_opcodes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>hexagon_opcodes_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>hexagon_verify_hw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>hexagon_insn</name></type> <name>hexagon_nop</name></decl>, <decl><type ref="prev"/><name>hexagon_kext</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKET_BEGIN</name></cpp:macro> <cpp:value>'{'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKET_END</name></cpp:macro> <cpp:value>'}'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKET_END_INNER</name></cpp:macro> <cpp:value>":endloop0"</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKET_END_OUTER</name></cpp:macro> <cpp:value>":endloop1"</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKET_PAIR</name></cpp:macro> <cpp:value>';'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_END_PACKET_POS</name></cpp:macro> <cpp:value>(14)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_END_PACKET_MASK</name></cpp:macro> <cpp:value>(3 &lt;&lt; HEXAGON_END_PACKET_POS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_END_PACKET</name></cpp:macro> <cpp:value>(3 &lt;&lt; HEXAGON_END_PACKET_POS)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_END_LOOP</name></cpp:macro> <cpp:value>(2 &lt;&lt; HEXAGON_END_PACKET_POS)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_END_NOT</name></cpp:macro> <cpp:value>(1 &lt;&lt; HEXAGON_END_PACKET_POS)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_END_PAIR</name></cpp:macro> <cpp:value>(0 &lt;&lt; HEXAGON_END_PACKET_POS)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_END_PACKET_GET</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((insn) &amp; HEXAGON_END_PACKET_MASK)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_END_PACKET_SET</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((insn) &amp; ~HEXAGON_END_PACKET_MASK) | (bits))</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_END_PACKET_RESET</name><parameter_list>(<parameter><type><name>insn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(HEXAGON_END_PACKET_SET ((insn), HEXAGON_END_PACKET_GET (insn) == HEXAGON_END_PAIR ? HEXAGON_END_PAIR: HEXAGON_END_NOT))</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hexagon_if_arch_v1</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(FALSE)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hexagon_if_arch_v2</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(hexagon_if_arch (HEXAGON_MACH_V2))</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hexagon_if_arch_v3</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(hexagon_if_arch (HEXAGON_MACH_V3))</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hexagon_if_arch_v4</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(hexagon_if_arch (HEXAGON_MACH_V4))</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hexagon_if_arch_v5</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(hexagon_if_arch (HEXAGON_MACH_V5))</cpp:value></cpp:define> 

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>hexagon_arch</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>hexagon_if_arch</name> <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>hexagon_if_arch_kext</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>hexagon_if_arch_pairs</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>hexagon_if_arch_autoand</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>hexagon_get_opcode_mach</name> <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>hexagon_hash</name></type> <name>hexagon_hash_opcode</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>hexagon_hash</name></type> <name>hexagon_hash_icode</name> <parameter_list>(<parameter><decl><type><name>hexagon_insn</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>hexagon_insn</name></type> <name>hexagon_encode_opcode</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>hexagon_insn</name></type> <name>hexagon_encode_mask</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>hexagon_opcode_init_tables</name> <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>hexagon_opcode_next_asm</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>hexagon_opcode_lookup_asm</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>hexagon_opcode_lookup_dis</name> <parameter_list>(<parameter><decl><type><name>hexagon_insn</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type><name>hexagon_lookup_insn</name> <parameter_list>(<parameter><decl><type><name>hexagon_insn</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>hexagon_opcode_supported</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>hexagon_encode_operand</name>

<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>long</name></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>hexagon_lookup_operand</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>hexagon_lookup_reloc</name>

<parameter_list>(<parameter><decl><type><name>bfd_reloc_code_real_type</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>hexagon_extract_operand</name>

<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name></type></decl></parameter>, <parameter><decl><type><name>bfd_vma</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>hexagon_extract_predicate_operand</name>

<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>hexagon_extract_modifier_operand</name>

<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>hexagon_dis_operand</name>

<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name></type></decl></parameter>, <parameter><decl><type><name>bfd_vma</name></type></decl></parameter>, <parameter><decl><type><name>bfd_vma</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>hexagon_dis_opcode</name>

<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>hexagon_insn</name></type></decl></parameter>, <parameter><decl><type><name>bfd_vma</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>hexagon_opcode</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>hexagon_operand_find_lo16</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>hexagon_operand_find_hi16</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type><name>hexagon_operand_find</name>

<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hexagon_operand</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>hexagon_opcode</name></type> <name>hexagon_packet_header_opcode</name></decl>;</decl_stmt>

</unit>
