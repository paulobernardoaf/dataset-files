<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\gb\gb_op_table.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_8BIT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_16BIT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_8</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_16</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IO</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>type</name></decl>;</decl_stmt>

}</block></struct></type> <name>gb_opcode</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>cb_ops</name><index>[]</index></name><init>=<expr><block>{ <expr><literal type="string">"rlc"</literal></expr>,<expr><literal type="string">"rrc"</literal></expr>,<expr><literal type="string">"rl"</literal></expr>,<expr><literal type="string">"rr"</literal></expr>,<expr><literal type="string">"sla"</literal></expr>,<expr><literal type="string">"sra"</literal></expr>,<expr><literal type="string">"swap"</literal></expr>,<expr><literal type="string">"srl"</literal></expr>,

<expr><literal type="string">"bit 0,"</literal></expr>,<expr><literal type="string">"bit 1,"</literal></expr>,<expr><literal type="string">"bit 2,"</literal></expr>,<expr><literal type="string">"bit 3,"</literal></expr>,<expr><literal type="string">"bit 4,"</literal></expr>,<expr><literal type="string">"bit 5,"</literal></expr>,<expr><literal type="string">"bit 6,"</literal></expr>,<expr><literal type="string">"bit 7,"</literal></expr>,

<expr><literal type="string">"res 0,"</literal></expr>,<expr><literal type="string">"res 1,"</literal></expr>,<expr><literal type="string">"res 2,"</literal></expr>,<expr><literal type="string">"res 3,"</literal></expr>,<expr><literal type="string">"res 4,"</literal></expr>,<expr><literal type="string">"res 5,"</literal></expr>,<expr><literal type="string">"res 6,"</literal></expr>,<expr><literal type="string">"res 7,"</literal></expr>,

<expr><literal type="string">"set 0,"</literal></expr>,<expr><literal type="string">"set 1,"</literal></expr>,<expr><literal type="string">"set 2,"</literal></expr>,<expr><literal type="string">"set 3,"</literal></expr>,<expr><literal type="string">"set 4,"</literal></expr>,<expr><literal type="string">"set 5,"</literal></expr>,<expr><literal type="string">"set 6,"</literal></expr>,<expr><literal type="string">"set 7,"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>cb_regs</name><index>[]</index></name><init>=<expr><block>{ <expr><literal type="string">"b"</literal></expr>,<expr><literal type="string">"c"</literal></expr>,<expr><literal type="string">"d"</literal></expr>,<expr><literal type="string">"e"</literal></expr>,<expr><literal type="string">"h"</literal></expr>,<expr><literal type="string">"l"</literal></expr>,<expr><literal type="string">"[hl]"</literal></expr>,<expr><literal type="string">"a"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>gb_opcode</name></type> <name><name>gb_op</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"nop"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"ld bc, 0x%04x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_16</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld [bc], a"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"inc bc"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"inc b"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"dec b"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld b, 0x%02x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_8</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rlca"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld [0x%04x], sp"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_16</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"add hl, bc"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld a, [bc]"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"dec bc"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"inc c"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"dec c"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld c, 0x%02x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_8</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rrca"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"stop"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"ld de, 0x%04x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_16</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld [de], a"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"inc de"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"inc d"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"dec d"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld d, 0x%02x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_8</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rla"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jr 0x%02x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_8</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"add hl, de"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld a, [de]"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"dec de"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"inc e"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"dec e"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld e, 0x%02x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_8</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rra"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jr nZ, 0x%02x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_8</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"ld hl, 0x%04x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_16</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ldi [hl], a"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"inc hl"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"inc h"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"dec h"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld h, 0x%02x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_8</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"daa"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jr Z, 0x%02x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_8</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"add hl, hl"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ldi a, [hl]"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"dec hl"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"inc l"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"dec l"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld l, 0x%02x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_8</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cpl"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jr nC, 0x%02x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_8</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"ld sp, 0x%04x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_16</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ldd [hl], a"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"inc sp"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"inc [hl]"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"dec [hl]"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld [hl], 0x%02x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_8</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"scf"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jr C, 0x%02x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_8</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"add hl, sp"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ldd a, [hl]"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"dec sp"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"inc a"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"dec a"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld a, 0x%02x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_8</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ccf"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld b, b"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"ld b, c"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld b, d"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld b, e"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld b, h"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld b, l"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld b, [hl]"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld b, a"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld c, b"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld c, c"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld c, d"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld c, e"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld c, h"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld c, l"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld c, [hl]"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld c, a"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld d, b"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"ld d, c"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld d, d"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld d, e"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld d, h"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld d, l"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld d, [hl]"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld d, a"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld e, b"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld e, c"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld e, d"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld e, e"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld e, h"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld e, l"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld e, [hl]"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld e, a"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld h, b"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"ld h, c"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld h, d"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld h, e"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld h, h"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld h, l"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld h, [hl]"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld h, a"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld l, b"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld l, c"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld l, d"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld l, e"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld l, h"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld l, l"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld l, [hl]"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld l, a"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld [hl], b"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"ld [hl], c"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld [hl], d"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld [hl], e"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld [hl], h"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld [hl], l"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"halt"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld [hl], a"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld a, b"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld a, c"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld a, d"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld a, e"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld a, h"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld a, l"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld a, [hl]"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld a, a"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"add b"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"add c"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"add d"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"add e"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"add h"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"add l"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"add [hl]"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"add a"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"adc b"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"adc c"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"adc d"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"adc e"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"adc h"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"adc l"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"adc [hl]"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"adc a"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sub b"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"sub c"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sub d"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sub e"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sub h"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sub l"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sub [hl]"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sub a"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sbc b"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sbc c"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sbc d"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sbc e"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sbc h"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sbc l"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sbc [hl]"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sbc a"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"and b"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"and c"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"and d"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"and e"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"and h"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"and l"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"and [hl]"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"and a"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"xor b"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"xor c"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"xor d"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"xor e"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"xor h"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"xor l"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"xor [hl]"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"xor a"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"or b"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"or c"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"or d"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"or e"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"or h"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"or l"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"or [hl]"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"or a"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cp b"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cp c"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cp d"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cp e"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cp h"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cp l"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cp [hl]"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cp a"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ret nZ"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"pop bc"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jp nZ, 0x%04x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_16</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jp 0x%04x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_16</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"call nZ, 0x%04x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_16</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"push bc"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"add 0x%02x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_8</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rst 0"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ret Z"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ret"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jp Z, 0x%04x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_16</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">""</literal></expr> ,<expr><name>GB_16BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"call Z, 0x%04x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_16</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"call 0x%04x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_16</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"adc 0x%02x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_8</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rst 8"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ret nC"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"pop de"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jp nC, 0x%04x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_16</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"invalid"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"call nC, 0x%04x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_16</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"push de"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sub 0x%02x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_8</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rst 16"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ret C"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"reti"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jp C, 0x%04x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_16</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"invalid"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"call C, 0x%04x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_16</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"invalid"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sbc 0x%02x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_8</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rst 24"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld [%s], a"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_8</name><operator>+</operator><name>GB_IO</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"pop hl"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld [0xff00 + c], a"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"invalid"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"invalid"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"push hl"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"and 0x%02x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_8</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rst 32"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"add sp, 0x%02x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_8</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"jp hl"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld [0x%04x], a"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_16</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"invalid"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"invalid"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"invalid"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"xor 0x%02x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_8</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rst 40"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld a, [%s]"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_8</name><operator>+</operator><name>GB_IO</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"pop af"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld a, [0xff00 + c]"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"di"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"invalid"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"push af"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"or 0x%02x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_8</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rst 48"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld hl, sp + 0x%02x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_8</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"ld sp, hl"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ld a, [0x%04x]"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_16</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ei"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"invalid"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"invalid"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cp 0x%02x"</literal></expr> ,<expr><name>GB_8BIT</name><operator>+</operator><name>ARG_8</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rst 56"</literal></expr> ,<expr><name>GB_8BIT</name></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
