<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\lm32\lm32_isa.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAsmLm32RegNameLength</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAsmLm32OpNameLength</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>r_asm_lm32_csr_t</name> <block>{

<decl_stmt><decl><type><name>ut8</name></type> <name>number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>RAsmLm32RegNameLength</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>RAsmLm32Csr</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAsmLm32CsrNumber</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>RAsmLm32Csr</name></type> <name><name>RAsmLm32Csrs</name><index>[<expr><name>RAsmLm32CsrNumber</name></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="string">"IE"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x01</literal></expr>, <expr><literal type="string">"IM"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x02</literal></expr>, <expr><literal type="string">"IP"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x03</literal></expr>, <expr><literal type="string">"ICC"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x04</literal></expr>, <expr><literal type="string">"DCC"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x05</literal></expr>, <expr><literal type="string">"CC"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x06</literal></expr>, <expr><literal type="string">"CFG"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x07</literal></expr>, <expr><literal type="string">"EBA"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x08</literal></expr>, <expr><literal type="string">"DC"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x09</literal></expr>, <expr><literal type="string">"DEBA"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0a</literal></expr>, <expr><literal type="string">"CFG2"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0e</literal></expr>, <expr><literal type="string">"JTX"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0f</literal></expr>, <expr><literal type="string">"JRX"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x10</literal></expr>, <expr><literal type="string">"BP0"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x11</literal></expr>, <expr><literal type="string">"BP1"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x12</literal></expr>, <expr><literal type="string">"BP2"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x13</literal></expr>, <expr><literal type="string">"BP3"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x18</literal></expr>, <expr><literal type="string">"WP0"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x19</literal></expr>, <expr><literal type="string">"WP1"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x1a</literal></expr>, <expr><literal type="string">"WP2"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x1b</literal></expr>, <expr><literal type="string">"WP3"</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>r_asm_lm32_reg_t</name> <block>{

<decl_stmt><decl><type><name>ut8</name></type> <name>number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>RAsmLm32RegNameLength</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>RAsmLm32Reg</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAsmLm32RegNumber</name></cpp:macro> <cpp:value>39</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>RAsmLm32Reg</name></type> <name><name>RAsmLm32Regs</name><index>[<expr><name>RAsmLm32RegNumber</name></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="string">"r0"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="string">"zero"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x01</literal></expr>, <expr><literal type="string">"r1"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x02</literal></expr>, <expr><literal type="string">"r2"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x03</literal></expr>, <expr><literal type="string">"r3"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x04</literal></expr>, <expr><literal type="string">"r4"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x05</literal></expr>, <expr><literal type="string">"r5"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x06</literal></expr>, <expr><literal type="string">"r6"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x07</literal></expr>, <expr><literal type="string">"r7"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x08</literal></expr>, <expr><literal type="string">"r8"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x09</literal></expr>, <expr><literal type="string">"r9"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0a</literal></expr>, <expr><literal type="string">"r10"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0b</literal></expr>, <expr><literal type="string">"r11"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0c</literal></expr>, <expr><literal type="string">"r12"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0d</literal></expr>, <expr><literal type="string">"r13"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0e</literal></expr>, <expr><literal type="string">"r14"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0f</literal></expr>, <expr><literal type="string">"r15"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x10</literal></expr>, <expr><literal type="string">"r16"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x11</literal></expr>, <expr><literal type="string">"r17"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x12</literal></expr>, <expr><literal type="string">"r18"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x13</literal></expr>, <expr><literal type="string">"r19"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x14</literal></expr>, <expr><literal type="string">"r20"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x15</literal></expr>, <expr><literal type="string">"r21"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x16</literal></expr>, <expr><literal type="string">"r22"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x17</literal></expr>, <expr><literal type="string">"r23"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x18</literal></expr>, <expr><literal type="string">"r24"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x19</literal></expr>, <expr><literal type="string">"r25"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x1a</literal></expr>, <expr><literal type="string">"gp"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x1a</literal></expr>, <expr><literal type="string">"r26"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x1b</literal></expr>, <expr><literal type="string">"fp"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x1b</literal></expr>, <expr><literal type="string">"r27"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x1c</literal></expr>, <expr><literal type="string">"sp"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x1c</literal></expr>, <expr><literal type="string">"r28"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x1d</literal></expr>, <expr><literal type="string">"ra"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x1d</literal></expr>, <expr><literal type="string">"r29"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x1e</literal></expr>, <expr><literal type="string">"ea"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x1e</literal></expr>, <expr><literal type="string">"r30"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x1f</literal></expr>, <expr><literal type="string">"ba"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x1f</literal></expr>, <expr><literal type="string">"r31"</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <name>r_asm_lm32_instr_type_t</name> <block>{

<decl><name>reserved</name></decl>,

<decl><name>reg_imm16_signextend</name></decl>,

<decl><name>reg_imm16_shift2_signextend</name></decl>,

<decl><name>reg_imm16_zeroextend</name></decl>,

<decl><name>reg_imm5</name></decl>,

<decl><name>raise_instr</name></decl>,

<decl><name>one_reg</name></decl>,

<decl><name>two_regs</name></decl>,

<decl><name>three_regs</name></decl>,

<decl><name>reg_csr</name></decl>, 

<decl><name>csr_reg</name></decl>, 

<decl><name>imm26</name></decl>,

}</block></enum></type> <name>RAsmLm32InstructionType</name>;</typedef>

<enum>enum <name>r_asm_lm32_opcode_list_t</name> <block>{

<decl><name>lm32_op_srui</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,

<decl><name>lm32_op_nori</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,

<decl><name>lm32_op_muli</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,

<decl><name>lm32_op_sh</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl>,

<decl><name>lm32_op_lb</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,

<decl><name>lm32_op_sri</name> <init>= <expr><literal type="number">0x05</literal></expr></init></decl>,

<decl><name>lm32_op_xori</name> <init>= <expr><literal type="number">0x06</literal></expr></init></decl>,

<decl><name>lm32_op_lh</name> <init>= <expr><literal type="number">0x07</literal></expr></init></decl>,

<decl><name>lm32_op_andi</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,

<decl><name>lm32_op_xnori</name> <init>= <expr><literal type="number">0x09</literal></expr></init></decl>,

<decl><name>lm32_op_lw</name> <init>= <expr><literal type="number">0x0a</literal></expr></init></decl>,

<decl><name>lm32_op_lhu</name> <init>= <expr><literal type="number">0x0b</literal></expr></init></decl>,

<decl><name>lm32_op_sb</name> <init>= <expr><literal type="number">0x0c</literal></expr></init></decl>,

<decl><name>lm32_op_addi</name> <init>= <expr><literal type="number">0x0d</literal></expr></init></decl>,

<decl><name>lm32_op_ori</name> <init>= <expr><literal type="number">0x0e</literal></expr></init></decl>,

<decl><name>lm32_op_sli</name> <init>= <expr><literal type="number">0x0f</literal></expr></init></decl>,

<decl><name>lm32_op_lbu</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,

<decl><name>lm32_op_be</name> <init>= <expr><literal type="number">0x11</literal></expr></init></decl>,

<decl><name>lm32_op_bg</name> <init>= <expr><literal type="number">0x12</literal></expr></init></decl>,

<decl><name>lm32_op_bge</name> <init>= <expr><literal type="number">0x13</literal></expr></init></decl>,

<decl><name>lm32_op_bgeu</name> <init>= <expr><literal type="number">0x14</literal></expr></init></decl>,

<decl><name>lm32_op_bgu</name> <init>= <expr><literal type="number">0x15</literal></expr></init></decl>,

<decl><name>lm32_op_sw</name> <init>= <expr><literal type="number">0x16</literal></expr></init></decl>,

<decl><name>lm32_op_bne</name> <init>= <expr><literal type="number">0x17</literal></expr></init></decl>,

<decl><name>lm32_op_andhi</name> <init>= <expr><literal type="number">0x18</literal></expr></init></decl>,

<decl><name>lm32_op_cmpei</name> <init>= <expr><literal type="number">0x19</literal></expr></init></decl>,

<decl><name>lm32_op_cmpgi</name> <init>= <expr><literal type="number">0x1a</literal></expr></init></decl>,

<decl><name>lm32_op_cmpgei</name> <init>= <expr><literal type="number">0x1b</literal></expr></init></decl>,

<decl><name>lm32_op_cmpgeui</name> <init>= <expr><literal type="number">0x1c</literal></expr></init></decl>,

<decl><name>lm32_op_cmpgui</name> <init>= <expr><literal type="number">0x1d</literal></expr></init></decl>,

<decl><name>lm32_op_orhi</name> <init>= <expr><literal type="number">0x1e</literal></expr></init></decl>,

<decl><name>lm32_op_cmpnei</name> <init>= <expr><literal type="number">0x1f</literal></expr></init></decl>,

<decl><name>lm32_op_sru</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>,

<decl><name>lm32_op_nor</name> <init>= <expr><literal type="number">0x21</literal></expr></init></decl>,

<decl><name>lm32_op_mul</name> <init>= <expr><literal type="number">0x22</literal></expr></init></decl>,

<decl><name>lm32_op_divu</name> <init>= <expr><literal type="number">0x23</literal></expr></init></decl>,

<decl><name>lm32_op_rcsr</name> <init>= <expr><literal type="number">0x24</literal></expr></init></decl>,

<decl><name>lm32_op_sr</name> <init>= <expr><literal type="number">0x25</literal></expr></init></decl>,

<decl><name>lm32_op_xor</name> <init>= <expr><literal type="number">0x26</literal></expr></init></decl>,

<decl><name>lm32_op_div</name> <init>= <expr><literal type="number">0x27</literal></expr></init></decl>,

<decl><name>lm32_op_and</name> <init>= <expr><literal type="number">0x28</literal></expr></init></decl>,

<decl><name>lm32_op_xnor</name> <init>= <expr><literal type="number">0x29</literal></expr></init></decl>,

<decl><name>lm32_op_reserved1</name> <init>= <expr><literal type="number">0x2a</literal></expr></init></decl>,

<decl><name>lm32_op_raise</name> <init>= <expr><literal type="number">0x2b</literal></expr></init></decl>,

<decl><name>lm32_op_sextb</name> <init>= <expr><literal type="number">0x2c</literal></expr></init></decl>,

<decl><name>lm32_op_add</name> <init>= <expr><literal type="number">0x2d</literal></expr></init></decl>,

<decl><name>lm32_op_or</name> <init>= <expr><literal type="number">0x2e</literal></expr></init></decl>,

<decl><name>lm32_op_sl</name> <init>= <expr><literal type="number">0x2f</literal></expr></init></decl>,

<decl><name>lm32_op_b</name> <init>= <expr><literal type="number">0x30</literal></expr></init></decl>,

<decl><name>lm32_op_modu</name> <init>= <expr><literal type="number">0x31</literal></expr></init></decl>,

<decl><name>lm32_op_sub</name> <init>= <expr><literal type="number">0x32</literal></expr></init></decl>,

<decl><name>lm32_op_reserved2</name> <init>= <expr><literal type="number">0x33</literal></expr></init></decl>,

<decl><name>lm32_op_wcsr</name> <init>= <expr><literal type="number">0x34</literal></expr></init></decl>,

<decl><name>lm32_op_mod</name> <init>= <expr><literal type="number">0x35</literal></expr></init></decl>,

<decl><name>lm32_op_call</name> <init>= <expr><literal type="number">0x36</literal></expr></init></decl>,

<decl><name>lm32_op_sexth</name> <init>= <expr><literal type="number">0x37</literal></expr></init></decl>,

<decl><name>lm32_op_bi</name> <init>= <expr><literal type="number">0x38</literal></expr></init></decl>,

<decl><name>lm32_op_cmpe</name> <init>= <expr><literal type="number">0x39</literal></expr></init></decl>,

<decl><name>lm32_op_cmpg</name> <init>= <expr><literal type="number">0x3a</literal></expr></init></decl>,

<decl><name>lm32_op_cmpge</name> <init>= <expr><literal type="number">0x3b</literal></expr></init></decl>,

<decl><name>lm32_op_cmpgeu</name> <init>= <expr><literal type="number">0x3c</literal></expr></init></decl>,

<decl><name>lm32_op_cmpgu</name> <init>= <expr><literal type="number">0x3d</literal></expr></init></decl>,

<decl><name>lm32_op_calli</name> <init>= <expr><literal type="number">0x3e</literal></expr></init></decl>,

<decl><name>lm32_op_cmpne</name> <init>= <expr><literal type="number">0x3f</literal></expr></init></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>r_asm_lm32_opcode</name> <block>{

<decl_stmt><decl><type><name>RAsmLm32InstructionType</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>RAsmLm32OpNameLength</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>RAsmLm32Opcode</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAsmLm32OpcodeNumber</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>RAsmLm32Opcode</name></type> <name><name>RAsmLm32OpcodeList</name><index>[<expr><name>RAsmLm32OpcodeNumber</name></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><name>reg_imm5</name></expr>, <expr><literal type="string">"srui"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_zeroextend</name></expr>, <expr><literal type="string">"nori"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_signextend</name></expr>, <expr><literal type="string">"muli"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_signextend</name></expr>, <expr><literal type="string">"sh"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_signextend</name></expr>, <expr><literal type="string">"lb"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm5</name></expr>, <expr><literal type="string">"sri"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_zeroextend</name></expr>, <expr><literal type="string">"xori"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_signextend</name></expr>, <expr><literal type="string">"lh"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_zeroextend</name></expr>, <expr><literal type="string">"andi"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_zeroextend</name></expr>, <expr><literal type="string">"xnori"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_signextend</name></expr>, <expr><literal type="string">"lw"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_signextend</name></expr>, <expr><literal type="string">"lhu"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_signextend</name></expr>, <expr><literal type="string">"sb"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_signextend</name></expr>, <expr><literal type="string">"addi"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_zeroextend</name></expr>, <expr><literal type="string">"ori"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm5</name></expr>, <expr><literal type="string">"sli"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_signextend</name></expr>, <expr><literal type="string">"lbu"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_shift2_signextend</name></expr>, <expr><literal type="string">"be"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_shift2_signextend</name></expr>, <expr><literal type="string">"bg"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_shift2_signextend</name></expr>, <expr><literal type="string">"bge"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_shift2_signextend</name></expr>, <expr><literal type="string">"bgeu"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_shift2_signextend</name></expr>, <expr><literal type="string">"bgu"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_signextend</name></expr>, <expr><literal type="string">"sw"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_shift2_signextend</name></expr>, <expr><literal type="string">"bne"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_zeroextend</name></expr>, <expr><literal type="string">"andhi"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_signextend</name></expr>, <expr><literal type="string">"cmpei"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_signextend</name></expr>, <expr><literal type="string">"cmpgi"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_signextend</name></expr>, <expr><literal type="string">"cmpgei"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_zeroextend</name></expr>, <expr><literal type="string">"cmpgeui"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_zeroextend</name></expr>, <expr><literal type="string">"cmpgui"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_zeroextend</name></expr>, <expr><literal type="string">"orhi"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_imm16_signextend</name></expr>, <expr><literal type="string">"cmpnei"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>three_regs</name></expr>, <expr><literal type="string">"sru"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>three_regs</name></expr>, <expr><literal type="string">"nor"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>three_regs</name></expr>, <expr><literal type="string">"mul"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>three_regs</name></expr>, <expr><literal type="string">"divu"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>csr_reg</name></expr>, <expr><literal type="string">"rcsr"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>three_regs</name></expr>, <expr><literal type="string">"sr"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>three_regs</name></expr>, <expr><literal type="string">"xor"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>three_regs</name></expr>, <expr><literal type="string">"div"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>three_regs</name></expr>, <expr><literal type="string">"and"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>three_regs</name></expr>, <expr><literal type="string">"xnor"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reserved</name></expr>, <expr><literal type="string">"reserved"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>raise_instr</name></expr>, <expr><literal type="string">"raise"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>two_regs</name></expr>, <expr><literal type="string">"sextb"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>three_regs</name></expr>, <expr><literal type="string">"add"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>three_regs</name></expr>, <expr><literal type="string">"or"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>three_regs</name></expr>, <expr><literal type="string">"sl"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>one_reg</name></expr>, <expr><literal type="string">"b"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>three_regs</name></expr>, <expr><literal type="string">"modu"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>three_regs</name></expr>, <expr><literal type="string">"sub"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reserved</name></expr>, <expr><literal type="string">"reserved"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>reg_csr</name></expr>, <expr><literal type="string">"wcsr"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>three_regs</name></expr>, <expr><literal type="string">"mod"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>one_reg</name></expr>, <expr><literal type="string">"call"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>two_regs</name></expr>, <expr><literal type="string">"sexth"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>imm26</name></expr>, <expr><literal type="string">"bi"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>three_regs</name></expr>, <expr><literal type="string">"cmpe"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>three_regs</name></expr>, <expr><literal type="string">"cmpg"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>three_regs</name></expr>, <expr><literal type="string">"cmpge"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>three_regs</name></expr>, <expr><literal type="string">"cmpgeu"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>three_regs</name></expr>, <expr><literal type="string">"cmpgu"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>imm26</name></expr>, <expr><literal type="string">"calli"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>three_regs</name></expr>, <expr><literal type="string">"cmpne"</literal></expr>}</block></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>r_asm_lm32_instruction</name> <block>{

<decl_stmt><decl><type><name>ut32</name></type> <name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAsmLm32Opcode</name></type> <name>op_decode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>dest_reg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>dest_reg_str</name><index>[<expr><name>RAsmLm32RegNameLength</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>src0_reg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>src0_reg_str</name><index>[<expr><name>RAsmLm32RegNameLength</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>src1_reg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>src1_reg_str</name><index>[<expr><name>RAsmLm32RegNameLength</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>csr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>csr_reg_str</name><index>[<expr><name>RAsmLm32RegNameLength</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>immediate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>pseudoInstruction</name></decl>;</decl_stmt>

}</block></struct></type> <name>RAsmLm32Instruction</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>RAsmLm32OpShift</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut32</name></type> <name>RAsmLm32OpMask</name> <init>= <expr><literal type="number">0xfc000000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>RAsmLm32RegUShift</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut32</name></type> <name>RAsmLm32RegUMask</name> <init>= <expr><literal type="number">0x03e00000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>RAsmLm32RegVShift</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut32</name></type> <name>RAsmLm32RegVMask</name> <init>= <expr><literal type="number">0x001f0000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>RAsmLm32RegWShift</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut32</name></type> <name>RAsmLm32RegWMask</name> <init>= <expr><literal type="number">0x0000f800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut32</name></type> <name>RAsmLm32Imm5Mask</name> <init>= <expr><literal type="number">0x0000001f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut32</name></type> <name>RAsmLm32Imm16Mask</name> <init>= <expr><literal type="number">0x0000ffff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut32</name></type> <name>RAsmLm32Imm16SignBitPos</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut32</name></type> <name>RAsmLm32Imm26Mask</name> <init>= <expr><literal type="number">0x03ffffff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut32</name></type> <name>RAsmLm32Imm26SignBitPos</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut32</name></type> <name>RAsmLm32InstrImm5InvalidBitsMask</name> <init>= <expr><literal type="number">0x0000ffe0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut32</name></type> <name>RAsmLm32InstrOneRegInvalidBitsMask</name> <init>= <expr><literal type="number">0x001fffff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut32</name></type> <name>RAsmLm32InstrTwoRegsInvalidBitsMask</name> <init>= <expr><literal type="number">0x001f07ff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut32</name></type> <name>RAsmLm32InstrWcsrInvalidBitsMask</name> <init>= <expr><literal type="number">0x0000ffff</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>extract_opcode</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>instr_dword</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>instr_dword</name> <operator>&amp;</operator> <name>RAsmLm32OpMask</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RAsmLm32OpShift</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>extract_reg_u</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>instr_dword</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>instr_dword</name> <operator>&amp;</operator> <name>RAsmLm32RegUMask</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RAsmLm32RegUShift</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>extract_reg_v</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>instr_dword</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>instr_dword</name> <operator>&amp;</operator> <name>RAsmLm32RegVMask</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RAsmLm32RegVShift</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>extract_reg_w</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>instr_dword</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>instr_dword</name> <operator>&amp;</operator> <name>RAsmLm32RegWMask</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>RAsmLm32RegWShift</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>extract_imm5</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>instr_dword</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>instr_dword</name> <operator>&amp;</operator> <name>RAsmLm32Imm5Mask</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>extract_imm16</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>instr_dword</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>instr_dword</name> <operator>&amp;</operator> <name>RAsmLm32Imm16Mask</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>extract_imm26</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>instr_dword</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>instr_dword</name> <operator>&amp;</operator> <name>RAsmLm32Imm26Mask</name></expr>;</return>

</block_content>}</block></function>

</unit>
