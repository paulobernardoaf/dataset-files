<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\avr\avr_disasm.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>avrdis</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVR_TOTAL_INSTRUCTIONS</name></cpp:macro> <cpp:value>145</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVR_MAX_NUM_OPERANDS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<enum>enum <name>AVR_Operand_Types</name> <block>{

<decl><name>OPERAND_NONE</name></decl>, <decl><name>OPERAND_REGISTER_GHOST</name></decl>,

<decl><name>OPERAND_REGISTER</name></decl>, <decl><name>OPERAND_REGISTER_STARTR16</name></decl>,

<decl><name>OPERAND_REGISTER_EVEN_PAIR</name></decl>, <decl><name>OPERAND_REGISTER_EVEN_PAIR_STARTR24</name></decl>,

<decl><name>OPERAND_BRANCH_ADDRESS</name></decl>, <decl><name>OPERAND_RELATIVE_ADDRESS</name></decl>, <decl><name>OPERAND_LONG_ABSOLUTE_ADDRESS</name></decl>,

<decl><name>OPERAND_IO_REGISTER</name></decl>, <decl><name>OPERAND_DATA</name></decl>, <decl><name>OPERAND_DES_ROUND</name></decl>, <decl><name>OPERAND_COMPLEMENTED_DATA</name></decl>, <decl><name>OPERAND_BIT</name></decl>, <decl><name>OPERAND_WORD_DATA</name></decl>,

<decl><name>OPERAND_X</name></decl>, <decl><name>OPERAND_XP</name></decl>, <decl><name>OPERAND_MX</name></decl>,

<decl><name>OPERAND_Y</name></decl>, <decl><name>OPERAND_YP</name></decl>, <decl><name>OPERAND_MY</name></decl>, <decl><name>OPERAND_YPQ</name></decl>,

<decl><name>OPERAND_Z</name></decl>, <decl><name>OPERAND_ZP</name></decl>, <decl><name>OPERAND_MZ</name></decl>, <decl><name>OPERAND_ZPQ</name></decl>,

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVR_LONG_INSTRUCTION_FOUND</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVR_LONG_INSTRUCTION_PRINT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<struct>struct <name>_instructionInfo</name> <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>mnemonic</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>opcodeMask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numOperands</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>operandMasks</name><index>[<expr><name>AVR_MAX_NUM_OPERANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>operandTypes</name><index>[<expr><name>AVR_MAX_NUM_OPERANDS</name></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>_instructionInfo</name></name></type> <name>instructionInfo</name>;</typedef>

<struct>struct <name>_assembledInstruction</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>address</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>opcode</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>_assembledInstruction</name></name></type> <name>assembledInstruction</name>;</typedef>

<struct>struct <name>_disassembledInstruction</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>address</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>instructionInfo</name> <modifier>*</modifier></type><name>instruction</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>operands</name><index>[<expr><name>AVR_MAX_NUM_OPERANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>_disassembledInstruction</name></name> <modifier>*</modifier></type><name>alternateInstruction</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>_disassembledInstruction</name></name></type> <name>disassembledInstruction</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>disassembleInstruction</name><parameter_list>(<parameter><decl><type><name>disassembledInstruction</name> <modifier>*</modifier></type><name>dInstruction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>assembledInstruction</name></type> <name>aInstruction</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
