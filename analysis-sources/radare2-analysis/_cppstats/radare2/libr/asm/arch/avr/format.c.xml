<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\avr\format.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"format.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>formatDisassembledOperand</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>strOperand</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>operandNum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>disassembledInstruction</name></type> <name>dInstruction</name></decl></parameter>, <parameter><decl><type><name>formattingOptions</name></type> <name>fOptions</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>printDisassembledInstruction</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>disassembledInstruction</name></type> <name>dInstruction</name></decl></parameter>, <parameter><decl><type><name>formattingOptions</name></type> <name>fOptions</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>retVal</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>strOperand</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>AVR_Long_Instruction</name> <operator>==</operator> <name>AVR_LONG_INSTRUCTION_FOUND</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>dInstruction</name><operator>.</operator><name>instruction</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dInstruction</name><operator>.</operator><name>instruction</name><operator>-&gt;</operator><name>numOperands</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dInstruction</name><operator>.</operator><name>instruction</name><operator>-&gt;</operator><name>numOperands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name><name>dInstruction</name><operator>.</operator><name>instruction</name><operator>-&gt;</operator><name>numOperands</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>formatDisassembledOperand</name><argument_list>(<argument><expr><name>strOperand</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>dInstruction</name></expr></argument>, <argument><expr><name>fOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retVal</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>retVal</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>strOperand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>formatDisassembledOperand</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>strOperand</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>operandNum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>disassembledInstruction</name></type> <name>dInstruction</name></decl></parameter>, <parameter><decl><type><name>formattingOptions</name></type> <name>fOptions</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>binary</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retVal</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>operandNum</name> <operator>&gt;=</operator> <name>AVR_MAX_NUM_OPERANDS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>dInstruction</name><operator>.</operator><name>instruction</name><operator>-&gt;</operator><name>operandTypes</name><index>[<expr><name>operandNum</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>OPERAND_NONE</name></expr>:</case>

<case>case <expr><name>OPERAND_REGISTER_GHOST</name></expr>:</case>

<expr_stmt><expr><name>strOperand</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retVal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OPERAND_REGISTER</name></expr>:</case>

<case>case <expr><name>OPERAND_REGISTER_STARTR16</name></expr>:</case>

<case>case <expr><name>OPERAND_REGISTER_EVEN_PAIR_STARTR24</name></expr>:</case>

<case>case <expr><name>OPERAND_REGISTER_EVEN_PAIR</name></expr>:</case>

<expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>sprintf</name> <argument_list>(<argument><expr><name>strOperand</name></expr></argument>, <argument><expr><literal type="string">"%s%d"</literal></expr></argument>, <argument><expr><name>OPERAND_PREFIX_REGISTER</name></expr></argument>,

<argument><expr><name><name>dInstruction</name><operator>.</operator><name>operands</name><index>[<expr><name>operandNum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OPERAND_DATA</name></expr>:</case>

<case>case <expr><name>OPERAND_COMPLEMENTED_DATA</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>fOptions</name><operator>.</operator><name>options</name></name> <operator>&amp;</operator> <name>FORMAT_OPTION_DATA_BIN</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">7</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dInstruction</name><operator>.</operator><name>operands</name><index>[<expr><name>operandNum</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>binary</name><index>[<expr><literal type="number">7</literal><operator>-</operator><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>binary</name><index>[<expr><literal type="number">7</literal><operator>-</operator><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>binary</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>strOperand</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>,

<argument><expr><name>OPERAND_PREFIX_DATA_BIN</name></expr></argument>, <argument><expr><name>binary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fOptions</name><operator>.</operator><name>options</name></name> <operator>&amp;</operator> <name>FORMAT_OPTION_DATA_DEC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>strOperand</name></expr></argument>, <argument><expr><literal type="string">"%s%d"</literal></expr></argument>,

<argument><expr><name>OPERAND_PREFIX_DATA_DEC</name></expr></argument>,

<argument><expr><name><name>dInstruction</name><operator>.</operator><name>operands</name><index>[<expr><name>operandNum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>strOperand</name></expr></argument>, <argument><expr><literal type="string">"%s%02x"</literal></expr></argument>,

<argument><expr><name>OPERAND_PREFIX_DATA_HEX</name></expr></argument>,

<argument><expr><name><name>dInstruction</name><operator>.</operator><name>operands</name><index>[<expr><name>operandNum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>OPERAND_BIT</name></expr>:</case>

<expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>strOperand</name></expr></argument>, <argument><expr><literal type="string">"%s%d"</literal></expr></argument>, <argument><expr><name>OPERAND_PREFIX_BIT</name></expr></argument>,

<argument><expr><name><name>dInstruction</name><operator>.</operator><name>operands</name><index>[<expr><name>operandNum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OPERAND_BRANCH_ADDRESS</name></expr>:</case>

<case>case <expr><name>OPERAND_RELATIVE_ADDRESS</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if ((fOptions.options &amp; FORMAT_OPTION_ADDRESS_LABEL) &amp;&amp; fOptions.addressLabelPrefix != NULL) {

retVal = sprintf(strOperand, "%s%0*X",

fOptions.addressLabelPrefix,

fOptions.addressFieldWidth,

dInstruction.address+dInstruction.operands[operandNum]+2);

} else {

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (dInstruction.operands[operandNum] &gt; 0) {

retVal = sprintf(strOperand, "0x%x", dInstruction.address + dInstruction.operands[operandNum]);

} else {

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>strOperand</name></expr></argument>, <argument><expr><literal type="string">"0x%x"</literal></expr></argument>,

<argument><expr><name><name>dInstruction</name><operator>.</operator><name>address</name></name> <operator>+</operator> <name><name>dInstruction</name><operator>.</operator><name>operands</name><index>[<expr><name>operandNum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OPERAND_LONG_ABSOLUTE_ADDRESS</name></expr>:</case>

<expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>strOperand</name></expr></argument>, <argument><expr><literal type="string">"%s%0*x"</literal></expr></argument>,

<argument><expr><name>OPERAND_PREFIX_ABSOLUTE_ADDRESS</name></expr></argument>,

<argument><expr><name><name>fOptions</name><operator>.</operator><name>addressFieldWidth</name></name></expr></argument>, <argument><expr><name>AVR_Long_Address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OPERAND_IO_REGISTER</name></expr>:</case>

<expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>strOperand</name></expr></argument>, <argument><expr><literal type="string">"%s%02x"</literal></expr></argument>,

<argument><expr><name>OPERAND_PREFIX_IO_REGISTER</name></expr></argument>,

<argument><expr><name><name>dInstruction</name><operator>.</operator><name>operands</name><index>[<expr><name>operandNum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OPERAND_WORD_DATA</name></expr>:</case>

<expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>sprintf</name> <argument_list>(<argument><expr><name>strOperand</name></expr></argument>, <argument><expr><literal type="string">"%s%0*x"</literal></expr></argument>,

<argument><expr><name>OPERAND_PREFIX_WORD_DATA</name></expr></argument>,

<argument><expr><name><name>fOptions</name><operator>.</operator><name>addressFieldWidth</name></name></expr></argument>,

<argument><expr><name><name>dInstruction</name><operator>.</operator><name>operands</name><index>[<expr><name>operandNum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OPERAND_DES_ROUND</name></expr>:</case>

<expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>sprintf</name> <argument_list>(<argument><expr><name>strOperand</name></expr></argument>, <argument><expr><literal type="string">"%s%02x"</literal></expr></argument>,

<argument><expr><name>OPERAND_PREFIX_WORD_DATA</name></expr></argument>,

<argument><expr><name><name>dInstruction</name><operator>.</operator><name>operands</name><index>[<expr><name>operandNum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OPERAND_YPQ</name></expr>:</case>

<expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>strOperand</name></expr></argument>, <argument><expr><literal type="string">"y+%d"</literal></expr></argument>,

<argument><expr><name><name>dInstruction</name><operator>.</operator><name>operands</name><index>[<expr><name>operandNum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OPERAND_ZPQ</name></expr>:</case>

<expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>strOperand</name></expr></argument>, <argument><expr><literal type="string">"z+%d"</literal></expr></argument>,

<argument><expr><name><name>dInstruction</name><operator>.</operator><name>operands</name><index>[<expr><name>operandNum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OPERAND_X</name></expr>:</case> <expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>strOperand</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>OPERAND_XP</name></expr>:</case> <expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>strOperand</name></expr></argument>, <argument><expr><literal type="string">"x+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>OPERAND_MX</name></expr>:</case> <expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>strOperand</name></expr></argument>, <argument><expr><literal type="string">"-x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>OPERAND_Y</name></expr>:</case> <expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>strOperand</name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>OPERAND_YP</name></expr>:</case> <expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>strOperand</name></expr></argument>, <argument><expr><literal type="string">"y+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>OPERAND_MY</name></expr>:</case> <expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>strOperand</name></expr></argument>, <argument><expr><literal type="string">"-y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>OPERAND_Z</name></expr>:</case> <expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>strOperand</name></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>OPERAND_ZP</name></expr>:</case> <expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>strOperand</name></expr></argument>, <argument><expr><literal type="string">"z+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>OPERAND_MZ</name></expr>:</case> <expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>strOperand</name></expr></argument>, <argument><expr><literal type="string">"-z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <return>return <expr><name>ERROR_UNKNOWN_OPERAND</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>retVal</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ERROR_MEMORY_ALLOCATION_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
