<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\arm\winedbg\be_arm.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_util.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"be_arm.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARM_INSN_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THUMB_INSN_SIZE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THUMB2_INSN_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROR32</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((n) &gt;&gt; (r)) | ((n) &lt;&lt; (32 - (r))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_cond</name><parameter_list>(<parameter><type><name>ins</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tbl_cond[(((ins)) &gt;&gt; 28) &amp; 0x0f]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_nibble</name><parameter_list>(<parameter><type><name>ins</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((ins)) &gt;&gt; (((num)) * 4)) &amp; 0x0f)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier></type> <name><name>tbl_regs</name><index>[]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"r0"</literal></expr>, <expr><literal type="string">"r1"</literal></expr>, <expr><literal type="string">"r2"</literal></expr>, <expr><literal type="string">"r3"</literal></expr>, <expr><literal type="string">"r4"</literal></expr>, <expr><literal type="string">"r5"</literal></expr>, <expr><literal type="string">"r6"</literal></expr>, <expr><literal type="string">"r7"</literal></expr>, <expr><literal type="string">"r8"</literal></expr>, <expr><literal type="string">"r9"</literal></expr>, <expr><literal type="string">"r10"</literal></expr>,

<expr><literal type="string">"fp"</literal></expr>, <expr><literal type="string">"ip"</literal></expr>, <expr><literal type="string">"sp"</literal></expr>, <expr><literal type="string">"lr"</literal></expr>, <expr><literal type="string">"pc"</literal></expr>, <expr><literal type="string">"cpsr"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier></type> <name><name>tbl_addrmode</name><index>[]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"da"</literal></expr>, <expr><literal type="string">"ia"</literal></expr>, <expr><literal type="string">"db"</literal></expr>, <expr><literal type="string">"ib"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier></type> <name><name>tbl_cond</name><index>[]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"eq"</literal></expr>, <expr><literal type="string">"ne"</literal></expr>, <expr><literal type="string">"cs"</literal></expr>, <expr><literal type="string">"cc"</literal></expr>, <expr><literal type="string">"mi"</literal></expr>, <expr><literal type="string">"pl"</literal></expr>, <expr><literal type="string">"vs"</literal></expr>, <expr><literal type="string">"vc"</literal></expr>, <expr><literal type="string">"hi"</literal></expr>, <expr><literal type="string">"ls"</literal></expr>, <expr><literal type="string">"ge"</literal></expr>,

<expr><literal type="string">"lt"</literal></expr>, <expr><literal type="string">"gt"</literal></expr>, <expr><literal type="string">"le"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier></type> <name><name>tbl_dataops</name><index>[]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"and"</literal></expr>, <expr><literal type="string">"eor"</literal></expr>, <expr><literal type="string">"sub"</literal></expr>, <expr><literal type="string">"rsb"</literal></expr>, <expr><literal type="string">"add"</literal></expr>, <expr><literal type="string">"adc"</literal></expr>, <expr><literal type="string">"sbc"</literal></expr>, <expr><literal type="string">"rsc"</literal></expr>, <expr><literal type="string">"tst"</literal></expr>, <expr><literal type="string">"teq"</literal></expr>,

<expr><literal type="string">"cmp"</literal></expr>, <expr><literal type="string">"cmn"</literal></expr>, <expr><literal type="string">"orr"</literal></expr>, <expr><literal type="string">"mov"</literal></expr>, <expr><literal type="string">"bic"</literal></expr>, <expr><literal type="string">"mvn"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier></type> <name><name>tbl_shifts</name><index>[]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"lsl"</literal></expr>, <expr><literal type="string">"lsr"</literal></expr>, <expr><literal type="string">"asr"</literal></expr>, <expr><literal type="string">"ror"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier></type> <name><name>tbl_hiops_t</name><index>[]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"add"</literal></expr>, <expr><literal type="string">"cmp"</literal></expr>, <expr><literal type="string">"mov"</literal></expr>, <expr><literal type="string">"bx"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier></type> <name><name>tbl_aluops_t</name><index>[]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"and"</literal></expr>, <expr><literal type="string">"eor"</literal></expr>, <expr><literal type="string">"lsl"</literal></expr>, <expr><literal type="string">"lsr"</literal></expr>, <expr><literal type="string">"asr"</literal></expr>, <expr><literal type="string">"adc"</literal></expr>, <expr><literal type="string">"sbc"</literal></expr>, <expr><literal type="string">"ror"</literal></expr>, <expr><literal type="string">"tst"</literal></expr>, <expr><literal type="string">"neg"</literal></expr>,

<expr><literal type="string">"cmp"</literal></expr>, <expr><literal type="string">"cmn"</literal></expr>, <expr><literal type="string">"orr"</literal></expr>, <expr><literal type="string">"mul"</literal></expr>, <expr><literal type="string">"bic"</literal></expr>, <expr><literal type="string">"mvn"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier></type> <name><name>tbl_immops_t</name><index>[]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"mov"</literal></expr>, <expr><literal type="string">"cmp"</literal></expr>, <expr><literal type="string">"add"</literal></expr>, <expr><literal type="string">"sub"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier></type> <name><name>tbl_sregops_t</name><index>[]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"strh"</literal></expr>, <expr><literal type="string">"ldsb"</literal></expr>, <expr><literal type="string">"ldrh"</literal></expr>, <expr><literal type="string">"ldsh"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>db_get_inst</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ut32</name><operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ut16</name><operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>arm_disasm_branch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>link</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03ffffff</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&amp;</operator> <literal type="number">0x02000000</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>|=</operator> <literal type="number">0xfc000000</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"b%s%s 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><ternary><condition><expr><name>link</name></expr> ?</condition><then> <expr><literal type="string">"l"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>get_cond</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>pc</name></name><operator>+</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>jmp</name></name> <operator>=</operator> <name><name>arminsn</name><operator>-&gt;</operator><name>pc</name></name><operator>+</operator><name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name><name>arminsn</name><operator>-&gt;</operator><name>pc</name></name><operator>+</operator><literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>arm_disasm_mul</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>accu</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>condcodes</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>accu</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"mla%s%s %s, %s, %s, %s"</literal></expr></argument>, <argument><expr><call><name>get_cond</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>condcodes</name></expr> ?</condition><then> <expr><literal type="string">"s"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"mul%s%s %s, %s, %s"</literal></expr></argument>, <argument><expr><call><name>get_cond</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>condcodes</name></expr> ?</condition><then> <expr><literal type="string">"s"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>arm_disasm_longmul</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>sign</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>accu</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>condcodes</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s%s%s %s, %s, %s, %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><literal type="string">"s"</literal></expr> </then><else>: <expr><literal type="string">"u"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>accu</name></expr> ?</condition><then> <expr><literal type="string">"mlal"</literal></expr> </then><else>: <expr><literal type="string">"mull"</literal></expr></else></ternary></expr></argument>,

<argument><expr><call><name>get_cond</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>condcodes</name></expr> ?</condition><then> <expr><literal type="string">"s"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>arm_disasm_swp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>byte</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"swp%s%s %s, %s, [%s]"</literal></expr></argument>, <argument><expr><call><name>get_cond</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>byte</name></expr> ?</condition><then> <expr><literal type="string">"b"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>arm_disasm_branchreg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"b%s %s"</literal></expr></argument>, <argument><expr><call><name>get_cond</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>arm_disasm_branchxchg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"bx%s %s"</literal></expr></argument>, <argument><expr><call><name>get_cond</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>arm_disasm_mrstrans</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>src</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"mrs%s %s, %s"</literal></expr></argument>, <argument><expr><call><name>get_cond</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>src</name></expr> ?</condition><then> <expr><literal type="string">"spsr"</literal></expr> </then><else>: <expr><literal type="string">"cpsr"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>arm_disasm_msrtrans</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>immediate</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">25</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>dst</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>simple</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>simple</name> <operator>||</operator> <operator>!</operator><name>immediate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"msr%s %s, %s"</literal></expr></argument>, <argument><expr><call><name>get_cond</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>dst</name></expr> ?</condition><then> <expr><literal type="string">"spsr"</literal></expr> </then><else>: <expr><literal type="string">"cpsr"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"msr%s %s, #%u"</literal></expr></argument>, <argument><expr><call><name>get_cond</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>dst</name></expr> ?</condition><then> <expr><literal type="string">"spsr"</literal></expr> </then><else>: <expr><literal type="string">"cpsr"</literal></expr></else></ternary></expr></argument>,

<argument><expr><call><name>ROR32</name> <argument_list>(<argument><expr><name>inst</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>arm_disasm_wordmov</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>top</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"mov%s%s %s, #%u"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>top</name></expr> ?</condition><then> <expr><literal type="string">"t"</literal></expr> </then><else>: <expr><literal type="string">"w"</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>get_cond</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>inst</name> <operator>&amp;</operator> <literal type="number">0x0fff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>arm_disasm_nop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"nop%s"</literal></expr></argument>, <argument><expr><call><name>get_cond</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>arm_disasm_dataprocessing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>condcodes</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>opcode</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>immediate</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">25</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>no_op1</name> <init>= <expr><operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0x0d</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x0d</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>no_dst</name> <init>= <expr><operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0x0c</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x08</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name><name>tbl_dataops</name><index>[<expr><name>opcode</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>condcodes</name></expr> ?</condition><then> <expr><literal type="string">"s"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>get_cond</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_dst</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">" %s, "</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>no_op1</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>immediate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"#%u"</literal></expr></argument>, <argument><expr><call><name>ROR32</name> <argument_list>(<argument><expr><name>inst</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>immediate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s, #%u"</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><call><name>ROR32</name> <argument_list>(<argument><expr><name>inst</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s, %s"</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x09</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x01</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s, %s, %s %s"</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_shifts</name><index>[<expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s, %s, %s #%d"</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name><name>tbl_shifts</name><index>[<expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><name>inst</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>arm_disasm_singletrans</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>load</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>writeback</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>byte</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>direction</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>indexing</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>immediate</name> <init>= <expr><operator>!</operator><operator>(</operator><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">25</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>offset</name> <init>= <expr><name>inst</name> <operator>&amp;</operator> <literal type="number">0x0fff</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>direction</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>load</name></expr> ?</condition><then> <expr><literal type="string">"ldr"</literal></expr> </then><else>: <expr><literal type="string">"str"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>byte</name></expr> ?</condition><then> <expr><literal type="string">"b"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>writeback</name></expr> ?</condition><then> <expr><literal type="string">"t"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><call><name>get_cond</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">" %s, "</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>indexing</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>immediate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"[%s, #%d]"</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"[%s, %s]"</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"[%s, %s, %s #%d]"</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name><name>tbl_shifts</name><index>[<expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><name>inst</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>immediate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"[%s], #%d"</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"[%s], %s"</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"[%s], %s, %s #%d"</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name><name>tbl_shifts</name><index>[<expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><name>inst</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>arm_disasm_halfwordtrans</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>halfword</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>sign</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>load</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>writeback</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>immediate</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>direction</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>indexing</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>offset</name> <init>= <expr><operator>(</operator><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>inst</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>direction</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s%s%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>load</name></expr> ?</condition><then> <expr><literal type="string">"ldr"</literal></expr> </then><else>: <expr><literal type="string">"str"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><literal type="string">"s"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>halfword</name></expr> ?</condition><then> <expr><literal type="string">"h"</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><literal type="string">"b"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>writeback</name></expr> ?</condition><then> <expr><literal type="string">"t"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>get_cond</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">" %s, "</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>indexing</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>immediate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"[%s, #%d]"</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"[%s, %s]"</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>immediate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"[%s], #%d"</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"[%s], %s"</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>arm_disasm_blocktrans</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>load</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>writeback</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>psr</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>addrmode</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>last</name><init>=<expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">15</literal></expr>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>inst</name><operator>&gt;&gt;</operator><name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s%s %s%s, {"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>load</name></expr> ?</condition><then> <expr><literal type="string">"ldm"</literal></expr> </then><else>: <expr><literal type="string">"stm"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>tbl_addrmode</name><index>[<expr><name>addrmode</name></expr>]</index></name></expr></argument>,

<argument><expr><call><name>get_cond</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>writeback</name></expr> ?</condition><then> <expr><literal type="string">"!"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">15</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>inst</name><operator>&gt;&gt;</operator><name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>last</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s, "</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"}%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>psr</name></expr> ?</condition><then> <expr><literal type="string">"^"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>arm_disasm_swi</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>comment</name> <init>= <expr><name>inst</name> <operator>&amp;</operator> <literal type="number">0x00ffffff</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"swi%s #%d"</literal></expr></argument>, <argument><expr><call><name>get_cond</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>arm_disasm_coproctrans</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>CRm</name> <init>= <expr><name>inst</name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>CP</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>CPnum</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>CRn</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>load</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>CP_Opc</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s %u, %u, %s, cr%u, cr%u, {%u}"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>load</name></expr> ?</condition><then> <expr><literal type="string">"mrc"</literal></expr> </then><else>: <expr><literal type="string">"mcr"</literal></expr></else></ternary></expr></argument>,

<argument><expr><call><name>get_cond</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CPnum</name></expr></argument>, <argument><expr><name>CP</name></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name>CRn</name></expr></argument>, <argument><expr><name>CRm</name></expr></argument>, <argument><expr><name>CP_Opc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>arm_disasm_coprocdataop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>CRm</name> <init>= <expr><name>inst</name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>CP</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>CPnum</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>CRd</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>CRn</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>CP_Opc</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"cdp%s %u, %u, cr%u, cr%u, cr%u, {%u}"</literal></expr></argument>, <argument><expr><call><name>get_cond</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>CPnum</name></expr></argument>, <argument><expr><name>CP</name></expr></argument>, <argument><expr><name>CRd</name></expr></argument>, <argument><expr><name>CRn</name></expr></argument>, <argument><expr><name>CRm</name></expr></argument>, <argument><expr><name>CP_Opc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>arm_disasm_coprocdatatrans</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>CPnum</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>CRd</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>load</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>writeback</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>translen</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>direction</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>indexing</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>direction</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>load</name></expr> ?</condition><then> <expr><literal type="string">"ldc"</literal></expr> </then><else>: <expr><literal type="string">"stc"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>translen</name></expr> ?</condition><then> <expr><literal type="string">"l"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>get_cond</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>indexing</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">" %u, cr%u, [%s, #%d]%s"</literal></expr></argument>, <argument><expr><name>CPnum</name></expr></argument>, <argument><expr><name>CRd</name></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>, <argument><expr><ternary><condition><expr><name>writeback</name></expr> ?</condition><then> <expr><literal type="string">"!"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">" %u, cr%u, [%s], #%d"</literal></expr></argument>, <argument><expr><name>CPnum</name></expr></argument>, <argument><expr><name>CRd</name></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>thumb_disasm_hireg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>dst</name> <init>= <expr><name>inst</name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>src</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>h2</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>h1</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>op</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>h1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>h2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>dst</name> <operator>==</operator> <name>src</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"nop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"b%sx %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>h1</name></expr>?</condition><then><expr><literal type="string">"l"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><name>src</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s %s, %s"</literal></expr></argument>, <argument><expr><name><name>tbl_hiops_t</name><index>[<expr><name>op</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><name>dst</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><name>src</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>thumb_disasm_aluop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>dst</name> <init>= <expr><name>inst</name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>src</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>op</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s %s, %s"</literal></expr></argument>, <argument><expr><name><name>tbl_aluops_t</name><index>[<expr><name>op</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><name>dst</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><name>src</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>thumb_disasm_pushpop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>lrpc</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>load</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>last</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">7</literal></expr>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>inst</name><operator>&gt;&gt;</operator><name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s {"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>load</name></expr> ?</condition><then> <expr><literal type="string">"pop"</literal></expr> </then><else>: <expr><literal type="string">"push"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">7</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>inst</name><operator>&gt;&gt;</operator><name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>last</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s, "</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>lrpc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>last</name></expr> ?</condition><then> <expr><literal type="string">", "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>load</name></expr> ?</condition><then> <expr><literal type="string">"pc"</literal></expr> </then><else>: <expr><literal type="string">"lr"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>thumb_disasm_blocktrans</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>load</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>last</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">7</literal></expr>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>inst</name><operator>&gt;&gt;</operator><name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s %s!, {"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>load</name></expr> ?</condition><then> <expr><literal type="string">"ldmia"</literal></expr> </then><else>: <expr><literal type="string">"stmia"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">7</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>inst</name><operator>&gt;&gt;</operator><name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>last</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s, "</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>thumb_disasm_condbranch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>offset</name> <init>= <expr><name>inst</name> <operator>&amp;</operator> <literal type="number">0x00ff</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"b%s 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>tbl_cond</name><index>[<expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>pc</name></name><operator>+</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>jmp</name></name> <operator>=</operator> <name><name>arminsn</name><operator>-&gt;</operator><name>pc</name></name><operator>+</operator><name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name><name>arminsn</name><operator>-&gt;</operator><name>pc</name></name><operator>+</operator><literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>thumb_disasm_uncondbranch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&amp;</operator> <literal type="number">0x07ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&amp;</operator> <literal type="number">0x0800</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>|=</operator> <literal type="number">0xf000</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"b 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>pc</name></name><operator>+</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>jmp</name></name> <operator>=</operator> <name><name>arminsn</name><operator>-&gt;</operator><name>pc</name></name><operator>+</operator><name>offset</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>thumb_disasm_loadadr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>src</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"add %s, %s, #%d"</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>src</name></expr> ?</condition><then> <expr><literal type="string">"sp"</literal></expr> </then><else>: <expr><literal type="string">"pc"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>thumb_disasm_swi</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>comment</name> <init>= <expr><name>inst</name> <operator>&amp;</operator> <literal type="number">0x00ff</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"swi #%d"</literal></expr></argument>, <argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>thumb_disasm_nop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"nop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>thumb_disasm_ldrpcrel</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"ldr %s, [pc, #%u]"</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>]</index></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>thumb_disasm_ldrsprel</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s %s, [sp, #%u]"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>inst</name> <operator>&amp;</operator> <literal type="number">0x0800</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"ldr"</literal></expr></then><else>:<expr><literal type="string">"str"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>]</index></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>thumb_disasm_addsprel</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"sub sp, sp, #%u"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"add sp, sp, #%u"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>thumb_disasm_ldrimm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&amp;</operator> <literal type="number">0x07c0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s %s, [%s, #%u]"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>inst</name> <operator>&amp;</operator> <literal type="number">0x0800</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"ldr"</literal></expr></then><else>:<expr><literal type="string">"str"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>inst</name> <operator>&amp;</operator> <literal type="number">0x1000</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"b"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><name>inst</name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>]</index></name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>inst</name> <operator>&amp;</operator> <literal type="number">0x1000</literal><operator>)</operator></expr>?</condition><then><expr><name>offset</name></expr></then><else>:<expr><operator>(</operator><name>offset</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>thumb_disasm_ldrhimm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&amp;</operator> <literal type="number">0x07c0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s %s, [%s, #%u]"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>inst</name> <operator>&amp;</operator> <literal type="number">0x0800</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"ldrh"</literal></expr></then><else>:<expr><literal type="string">"strh"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><name>inst</name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>]</index></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>thumb_disasm_ldrreg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s %s, [%s, %s]"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>inst</name> <operator>&amp;</operator> <literal type="number">0x0800</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"ldr"</literal></expr></then><else>:<expr><literal type="string">"str"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>inst</name> <operator>&amp;</operator> <literal type="number">0x0400</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"b"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><name>inst</name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>thumb_disasm_ldrsreg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s %s, [%s, %s]"</literal></expr></argument>,

<argument><expr><name><name>tbl_sregops_t</name><index>[<expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><name>inst</name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>thumb_disasm_immop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>op</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s %s, #%u"</literal></expr></argument>, <argument><expr><name><name>tbl_immops_t</name><index>[<expr><name>op</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>inst</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>thumb_disasm_addsub</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>op</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>immediate</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s %s, %s, "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>op</name></expr> ?</condition><then> <expr><literal type="string">"sub"</literal></expr> </then><else>: <expr><literal type="string">"add"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><name>inst</name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>immediate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"#%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut16</name></type> <name>thumb_disasm_movshift</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>op</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s %s, %s, #%u"</literal></expr></argument>, <argument><expr><name><name>tbl_shifts</name><index>[<expr><name>op</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><name>inst</name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>thumb2_disasm_branchlinked</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>offset</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>inst</name> <operator>&amp;</operator> <literal type="number">0x07ff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>inst</name> <operator>&amp;</operator> <literal type="number">0x000007ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"bl 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>pc</name></name><operator>+</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>jmp</name></name> <operator>=</operator> <name><name>arminsn</name><operator>-&gt;</operator><name>pc</name></name><operator>+</operator><name>offset</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>thumb2_disasm_misc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>op1</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>op2</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>inst</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>op1</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>op2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"clz %s, %s "</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>op1</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>op2</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"rev "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"rev16 "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"rbit "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"revsh "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s, %s "</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>inst</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>thumb2_disasm_mul</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>op1</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>op2</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>op1</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>inst</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>op2</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"mla %s, %s, %s, %s "</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>op2</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"mul %s, %s, %s "</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>op2</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"mls %s, %s, %s, %s "</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>inst</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>thumb2_disasm_longmuldiv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>op1</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>op2</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>op2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>op1</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"smull "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"umull "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"smlal "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"umlal "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>inst</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s, %s, %s, %s "</literal></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>op2</name> <operator>==</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>op1</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"sdiv "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"udiv "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>inst</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"%s, %s, %s "</literal></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>inst</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>thumb2_disasm_coprocmov1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>opc1</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>opc2</name> <init>= <expr><operator>(</operator><name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opc2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>,

<argument><expr><literal type="string">"%s%s\tp%u, #%u, %s, cr%u, cr%u, #%u"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>inst</name> <operator>&amp;</operator> <literal type="number">0x00100000</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"mrc"</literal></expr></then><else>:<expr><literal type="string">"mcr"</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>inst</name> <operator>&amp;</operator> <literal type="number">0x10000000</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"2"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>opc1</name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>opc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>,

<argument><expr><literal type="string">"%s%s\tp%u, #%u, %s, cr%u, cr%u"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>inst</name> <operator>&amp;</operator> <literal type="number">0x00100000</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"mrc"</literal></expr></then><else>:<expr><literal type="string">"mcr"</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>inst</name> <operator>&amp;</operator> <literal type="number">0x10000000</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"2"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>opc1</name></expr></argument>,

<argument><expr><name><name>tbl_regs</name><index>[<expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_nibble</name> <argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>inst_arm</name> <block>{

<decl_stmt><decl><type><name>ut32</name></type> <name>mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>pattern</name></decl>;</decl_stmt>

<function_decl><type><name>ut32</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ut32</name></type></decl></parameter>)</parameter_list>;</function_decl>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>inst_arm</name></name></type> <name><name>tbl_arm</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0x0e000000</literal></expr>, <expr><literal type="number">0x0a000000</literal></expr>, <expr><name>arm_disasm_branch</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x0fc000f0</literal></expr>, <expr><literal type="number">0x00000090</literal></expr>, <expr><name>arm_disasm_mul</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x0f8000f0</literal></expr>, <expr><literal type="number">0x00800090</literal></expr>, <expr><name>arm_disasm_longmul</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x0fb00ff0</literal></expr>, <expr><literal type="number">0x01000090</literal></expr>, <expr><name>arm_disasm_swp</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x0e000090</literal></expr>, <expr><literal type="number">0x00000090</literal></expr>, <expr><name>arm_disasm_halfwordtrans</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x0ffffff0</literal></expr>, <expr><literal type="number">0x012fff00</literal></expr>, <expr><name>arm_disasm_branchreg</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x0ffffff0</literal></expr>, <expr><literal type="number">0x012fff10</literal></expr>, <expr><name>arm_disasm_branchxchg</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x0fbf0fff</literal></expr>, <expr><literal type="number">0x010f0000</literal></expr>, <expr><name>arm_disasm_mrstrans</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x0dbef000</literal></expr>, <expr><literal type="number">0x0128f000</literal></expr>, <expr><name>arm_disasm_msrtrans</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x0fb00000</literal></expr>, <expr><literal type="number">0x03000000</literal></expr>, <expr><name>arm_disasm_wordmov</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x0fffffff</literal></expr>, <expr><literal type="number">0x0320f000</literal></expr>, <expr><name>arm_disasm_nop</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x0c000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><name>arm_disasm_dataprocessing</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x0c000000</literal></expr>, <expr><literal type="number">0x04000000</literal></expr>, <expr><name>arm_disasm_singletrans</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x0e000000</literal></expr>, <expr><literal type="number">0x08000000</literal></expr>, <expr><name>arm_disasm_blocktrans</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x0f000000</literal></expr>, <expr><literal type="number">0x0f000000</literal></expr>, <expr><name>arm_disasm_swi</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x0f000010</literal></expr>, <expr><literal type="number">0x0e000010</literal></expr>, <expr><name>arm_disasm_coproctrans</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x0f000010</literal></expr>, <expr><literal type="number">0x0e000000</literal></expr>, <expr><name>arm_disasm_coprocdataop</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x0e000000</literal></expr>, <expr><literal type="number">0x0c000000</literal></expr>, <expr><name>arm_disasm_coprocdatatrans</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>inst_thumb16</name> <block>{

<decl_stmt><decl><type><name>ut16</name></type> <name>mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>pattern</name></decl>;</decl_stmt>

<function_decl><type><name>ut16</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ut16</name></type></decl></parameter>)</parameter_list>;</function_decl>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>inst_thumb16</name></name></type> <name><name>tbl_thumb16</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0xfc00</literal></expr>, <expr><literal type="number">0x4400</literal></expr>, <expr><name>thumb_disasm_hireg</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xfc00</literal></expr>, <expr><literal type="number">0x4000</literal></expr>, <expr><name>thumb_disasm_aluop</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xf600</literal></expr>, <expr><literal type="number">0xb400</literal></expr>, <expr><name>thumb_disasm_pushpop</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xf000</literal></expr>, <expr><literal type="number">0xc000</literal></expr>, <expr><name>thumb_disasm_blocktrans</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xf000</literal></expr>, <expr><literal type="number">0xd000</literal></expr>, <expr><name>thumb_disasm_condbranch</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xf800</literal></expr>, <expr><literal type="number">0xe000</literal></expr>, <expr><name>thumb_disasm_uncondbranch</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xf000</literal></expr>, <expr><literal type="number">0xa000</literal></expr>, <expr><name>thumb_disasm_loadadr</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xf800</literal></expr>, <expr><literal type="number">0x4800</literal></expr>, <expr><name>thumb_disasm_ldrpcrel</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xf000</literal></expr>, <expr><literal type="number">0x9000</literal></expr>, <expr><name>thumb_disasm_ldrsprel</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xff00</literal></expr>, <expr><literal type="number">0xb000</literal></expr>, <expr><name>thumb_disasm_addsprel</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xe000</literal></expr>, <expr><literal type="number">0x6000</literal></expr>, <expr><name>thumb_disasm_ldrimm</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xf000</literal></expr>, <expr><literal type="number">0x8000</literal></expr>, <expr><name>thumb_disasm_ldrhimm</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xf200</literal></expr>, <expr><literal type="number">0x5000</literal></expr>, <expr><name>thumb_disasm_ldrreg</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xf200</literal></expr>, <expr><literal type="number">0x5200</literal></expr>, <expr><name>thumb_disasm_ldrsreg</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xe000</literal></expr>, <expr><literal type="number">0x2000</literal></expr>, <expr><name>thumb_disasm_immop</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xff00</literal></expr>, <expr><literal type="number">0xdf00</literal></expr>, <expr><name>thumb_disasm_swi</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xff00</literal></expr>, <expr><literal type="number">0xbf00</literal></expr>, <expr><name>thumb_disasm_nop</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xf800</literal></expr>, <expr><literal type="number">0x1800</literal></expr>, <expr><name>thumb_disasm_addsub</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xe000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><name>thumb_disasm_movshift</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>inst_arm</name></name></type> <name><name>tbl_thumb32</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0xf800f800</literal></expr>, <expr><literal type="number">0xf000f800</literal></expr>, <expr><name>thumb2_disasm_branchlinked</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xffc0f0c0</literal></expr>, <expr><literal type="number">0xfa80f080</literal></expr>, <expr><name>thumb2_disasm_misc</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xff8000c0</literal></expr>, <expr><literal type="number">0xfb000000</literal></expr>, <expr><name>thumb2_disasm_mul</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xff8000f0</literal></expr>, <expr><literal type="number">0xfb800000</literal></expr>, <expr><name>thumb2_disasm_longmuldiv</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xff8000f0</literal></expr>, <expr><literal type="number">0xfb8000f0</literal></expr>, <expr><name>thumb2_disasm_longmuldiv</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xef100010</literal></expr>, <expr><literal type="number">0xee100010</literal></expr>, <expr><name>thumb2_disasm_coprocmov1</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xef100010</literal></expr>, <expr><literal type="number">0xee000010</literal></expr>, <expr><name>thumb2_disasm_coprocmov1</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>arm_set_pc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>pc</name></name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>arm_set_input_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>arm_set_thumb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thumb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>thumb</name></name> <operator>=</operator> <name>thumb</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>winedbg_arm_insn_asm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>winedbg_arm_insn_hex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_hex</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>arm_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_hex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>arminsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>winedbg_arm_insn</name></name><modifier>*</modifier></type> <name>arm_new</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>winedbg_arm_insn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>pc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>thumb</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>str_hex</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>arm_disasm_one_insn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winedbg_arm_insn</name></name> <modifier>*</modifier></type><name>arminsn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>inst_arm</name></name> <modifier>*</modifier></type><name>a_ptr</name> <init>= <expr><operator>(</operator>struct <name>inst_arm</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tbl_arm</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>inst_thumb16</name></name> <modifier>*</modifier></type><name>t_ptr</name> <init>= <expr><operator>(</operator>struct <name>inst_thumb16</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tbl_thumb16</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>inst_arm</name></name> <modifier>*</modifier></type><name>t2_ptr</name> <init>= <expr><operator>(</operator>struct <name>inst_arm</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tbl_thumb32</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>inst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>tinst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>matched</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>jmp</name></name> <operator>=</operator> <name><name>arminsn</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1LL</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>arminsn</name><operator>-&gt;</operator><name>thumb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>ARM_INSN_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>db_get_inst</name><argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>a_ptr</name><operator>-&gt;</operator><name>func</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>inst</name> <operator>&amp;</operator> <name><name>a_ptr</name><operator>-&gt;</operator><name>mask</name></name><operator>)</operator> <operator>==</operator> <name><name>a_ptr</name><operator>-&gt;</operator><name>pattern</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>a_ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>matched</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"Unknown ARM Instruction: %08x"</literal></expr></argument>, <argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>a_ptr</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name>arminsn</name></expr></argument>, <argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_hex</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_hex</name></name></expr></argument>, <argument><expr><literal type="string">"%02x%02x%02x%02x"</literal></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>inst</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>inst</name><operator>)</operator><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>inst</name><operator>)</operator><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>inst</name><operator>)</operator><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tinst</name> <operator>=</operator> <call><name>db_get_inst</name><argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>THUMB_INSN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>tinst</name> <operator>&amp;</operator> <literal type="number">0xf800</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0xe800</literal></expr>:</case>

<case>case <expr><literal type="number">0xf000</literal></expr>:</case>

<case>case <expr><literal type="number">0xf800</literal></expr>:</case>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>THUMB2_INSN_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>db_get_inst</name><argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>buf</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>THUMB_INSN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inst</name> <operator>|=</operator> <operator>(</operator><name>tinst</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>t2_ptr</name><operator>-&gt;</operator><name>func</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>inst</name> <operator>&amp;</operator> <name><name>t2_ptr</name><operator>-&gt;</operator><name>mask</name></name><operator>)</operator> <operator>==</operator> <name><name>t2_ptr</name><operator>-&gt;</operator><name>pattern</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t2_ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>matched</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"Unknown Thumb2 Instruction: %08x"</literal></expr></argument>, <argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>t2_ptr</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name>arminsn</name></expr></argument>, <argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt> 

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_hex</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_hex</name></name></expr></argument>, <argument><expr><literal type="string">"%02x%02x%02x%02x"</literal></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>inst</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>inst</name><operator>)</operator><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>inst</name><operator>)</operator><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>inst</name><operator>)</operator><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>THUMB_INSN_SIZE</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>t_ptr</name><operator>-&gt;</operator><name>func</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tinst</name> <operator>&amp;</operator> <name><name>t_ptr</name><operator>-&gt;</operator><name>mask</name></name><operator>)</operator> <operator>==</operator> <name><name>t_ptr</name><operator>-&gt;</operator><name>pattern</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t_ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>matched</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_asm</name></name></expr></argument>, <argument><expr><literal type="string">"Unknown Thumb Instruction: %04x"</literal></expr></argument>, <argument><expr><name>tinst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>t_ptr</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name>arminsn</name></expr></argument>, <argument><expr><name>tinst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_hex</name></name> <operator>=</operator> <call><name>r_str_appendf</name> <argument_list>(<argument><expr><name><name>arminsn</name><operator>-&gt;</operator><name>str_hex</name></name></expr></argument>, <argument><expr><literal type="string">"%02x%02x"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>tinst</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>tinst</name><operator>)</operator><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

</unit>
