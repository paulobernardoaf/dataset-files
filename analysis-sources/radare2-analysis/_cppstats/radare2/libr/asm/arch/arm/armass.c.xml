<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\arm\armass.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"armass16_const.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>ut64</name></type> <name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>o</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>op</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>opstr</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>a</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>ArmOpcode</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

}</block></struct></type> <name>ArmOp</name>;</typedef>

<enum>enum <block>{

<decl><name>TYPE_MOV</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>TYPE_TST</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>TYPE_SWI</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>TYPE_HLT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>TYPE_BRA</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>TYPE_BRR</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,

<decl><name>TYPE_ARI</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,

<decl><name>TYPE_IMM</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,

<decl><name>TYPE_MEM</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,

<decl><name>TYPE_BKP</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,

<decl><name>TYPE_SWP</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,

<decl><name>TYPE_MOVW</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,

<decl><name>TYPE_MOVT</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,

<decl><name>TYPE_UDF</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,

<decl><name>TYPE_SHFT</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,

<decl><name>TYPE_COPROC</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

<decl><name>TYPE_ENDIAN</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>,

<decl><name>TYPE_MUL</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>,

<decl><name>TYPE_CLZ</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>,

<decl><name>TYPE_REV</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,

<decl><name>TYPE_NEG</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>

}</block>;</enum>

<function><type><specifier>static</specifier> <name>int</name></type> <name>strcmpnull</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>a</name> <operator>&amp;&amp;</operator> <name>b</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>ArmOp</name></type> <name><name>ops</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"adc"</literal></expr>, <expr><literal type="number">0xa000</literal></expr>, <expr><name>TYPE_ARI</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"adcs"</literal></expr>, <expr><literal type="number">0xb000</literal></expr>, <expr><name>TYPE_ARI</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"adds"</literal></expr>, <expr><literal type="number">0x9000</literal></expr>, <expr><name>TYPE_ARI</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"add"</literal></expr>, <expr><literal type="number">0x8000</literal></expr>, <expr><name>TYPE_ARI</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bkpt"</literal></expr>, <expr><literal type="number">0x2001</literal></expr>, <expr><name>TYPE_BKP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"subs"</literal></expr>, <expr><literal type="number">0x5000</literal></expr>, <expr><name>TYPE_ARI</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sub"</literal></expr>, <expr><literal type="number">0x4000</literal></expr>, <expr><name>TYPE_ARI</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sbcs"</literal></expr>, <expr><literal type="number">0xd000</literal></expr>, <expr><name>TYPE_ARI</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sbc"</literal></expr>, <expr><literal type="number">0xc000</literal></expr>, <expr><name>TYPE_ARI</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rsb"</literal></expr>, <expr><literal type="number">0x6000</literal></expr>, <expr><name>TYPE_ARI</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rsbs"</literal></expr>, <expr><literal type="number">0x7000</literal></expr>, <expr><name>TYPE_ARI</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rsc"</literal></expr>, <expr><literal type="number">0xe000</literal></expr>, <expr><name>TYPE_ARI</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rscs"</literal></expr>, <expr><literal type="number">0xf000</literal></expr>, <expr><name>TYPE_ARI</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bic"</literal></expr>, <expr><literal type="number">0x0000c0e1</literal></expr>, <expr><name>TYPE_ARI</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"udf"</literal></expr>, <expr><literal type="number">0xf000f000</literal></expr>, <expr><name>TYPE_UDF</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"push"</literal></expr>, <expr><literal type="number">0x2d09</literal></expr>, <expr><name>TYPE_IMM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pop"</literal></expr>, <expr><literal type="number">0xbd08</literal></expr>, <expr><name>TYPE_IMM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cps"</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><name>TYPE_IMM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"nop"</literal></expr>, <expr><literal type="number">0xa0e1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ldrex"</literal></expr>, <expr><literal type="number">0x9f0f9000</literal></expr>, <expr><name>TYPE_MEM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ldr"</literal></expr>, <expr><literal type="number">0x9000</literal></expr>, <expr><name>TYPE_MEM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"strexh"</literal></expr>, <expr><literal type="number">0x900fe000</literal></expr>, <expr><name>TYPE_MEM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"strexb"</literal></expr>, <expr><literal type="number">0x900fc000</literal></expr>, <expr><name>TYPE_MEM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"strex"</literal></expr>, <expr><literal type="number">0x900f8000</literal></expr>, <expr><name>TYPE_MEM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"strbt"</literal></expr>, <expr><literal type="number">0x0000e0e4</literal></expr>, <expr><name>TYPE_MEM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"strb"</literal></expr>, <expr><literal type="number">0x0000c0e5</literal></expr>, <expr><name>TYPE_MEM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"strd"</literal></expr>, <expr><literal type="number">0xf000c0e1</literal></expr>, <expr><name>TYPE_MEM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"strh"</literal></expr>, <expr><literal type="number">0xb00080e1</literal></expr>, <expr><name>TYPE_MEM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"str"</literal></expr>, <expr><literal type="number">0x8000</literal></expr>, <expr><name>TYPE_MEM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"blx"</literal></expr>, <expr><literal type="number">0x30ff2fe1</literal></expr>, <expr><name>TYPE_BRR</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bx"</literal></expr>, <expr><literal type="number">0x10ff2fe1</literal></expr>, <expr><name>TYPE_BRR</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bl"</literal></expr>, <expr><literal type="number">0xb</literal></expr>, <expr><name>TYPE_BRA</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="number">0xa</literal></expr>, <expr><name>TYPE_BRA</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"movw"</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><name>TYPE_MOVW</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"movt"</literal></expr>, <expr><literal type="number">0x4003</literal></expr>, <expr><name>TYPE_MOVT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mov"</literal></expr>, <expr><literal type="number">0xa001</literal></expr>, <expr><name>TYPE_MOV</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mvn"</literal></expr>, <expr><literal type="number">0xe000</literal></expr>, <expr><name>TYPE_MOV</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"svc"</literal></expr>, <expr><literal type="number">0xf</literal></expr>, <expr><name>TYPE_SWI</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="string">"hlt"</literal></expr>, <expr><literal type="number">0x70000001</literal></expr>, <expr><name>TYPE_HLT</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="string">"mul"</literal></expr>, <expr><literal type="number">0x900000e0</literal></expr>, <expr><name>TYPE_MUL</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"smull"</literal></expr>, <expr><literal type="number">0x9000c0e0</literal></expr>, <expr><name>TYPE_MUL</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"umull"</literal></expr>, <expr><literal type="number">0x900080e0</literal></expr>, <expr><name>TYPE_MUL</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"smlal"</literal></expr>, <expr><literal type="number">0x9000e0e0</literal></expr>, <expr><name>TYPE_MUL</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"smlabb"</literal></expr>, <expr><literal type="number">0x800000e1</literal></expr>, <expr><name>TYPE_MUL</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"smlabt"</literal></expr>, <expr><literal type="number">0xc00000e1</literal></expr>, <expr><name>TYPE_MUL</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"smlatb"</literal></expr>, <expr><literal type="number">0xa00000e1</literal></expr>, <expr><name>TYPE_MUL</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"smlatt"</literal></expr>, <expr><literal type="number">0xe00000e1</literal></expr>, <expr><name>TYPE_MUL</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"smlawb"</literal></expr>, <expr><literal type="number">0x800020e1</literal></expr>, <expr><name>TYPE_MUL</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"smlawt"</literal></expr>, <expr><literal type="number">0xc00020e1</literal></expr>, <expr><name>TYPE_MUL</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"ands"</literal></expr>, <expr><literal type="number">0x1000</literal></expr>, <expr><name>TYPE_ARI</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"and"</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><name>TYPE_ARI</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"eors"</literal></expr>, <expr><literal type="number">0x3000</literal></expr>, <expr><name>TYPE_ARI</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"eor"</literal></expr>, <expr><literal type="number">0x2000</literal></expr>, <expr><name>TYPE_ARI</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"orrs"</literal></expr>, <expr><literal type="number">0x9001</literal></expr>, <expr><name>TYPE_ARI</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"orr"</literal></expr>, <expr><literal type="number">0x8001</literal></expr>, <expr><name>TYPE_ARI</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cmp"</literal></expr>, <expr><literal type="number">0x5001</literal></expr>, <expr><name>TYPE_TST</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"swp"</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><name>TYPE_SWP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cmn"</literal></expr>, <expr><literal type="number">0x0</literal></expr>, <expr><name>TYPE_TST</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"teq"</literal></expr>, <expr><literal type="number">0x0</literal></expr>, <expr><name>TYPE_TST</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tst"</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><name>TYPE_TST</name></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"lsr"</literal></expr>, <expr><literal type="number">0x3000a0e1</literal></expr>, <expr><name>TYPE_SHFT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"asr"</literal></expr>, <expr><literal type="number">0x5000a0e1</literal></expr>, <expr><name>TYPE_SHFT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"lsl"</literal></expr>, <expr><literal type="number">0x1000a0e1</literal></expr>, <expr><name>TYPE_SHFT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ror"</literal></expr>, <expr><literal type="number">0x7000a0e1</literal></expr>, <expr><name>TYPE_SHFT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rev16"</literal></expr>, <expr><literal type="number">0xb00fbf06</literal></expr>, <expr><name>TYPE_REV</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"revsh"</literal></expr>, <expr><literal type="number">0xb00fff06</literal></expr>, <expr><name>TYPE_REV</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rev"</literal></expr>, <expr><literal type="number">0x300fbf06</literal></expr>, <expr><name>TYPE_REV</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rbit"</literal></expr>, <expr><literal type="number">0x300fff06</literal></expr>, <expr><name>TYPE_REV</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mrc"</literal></expr>, <expr><literal type="number">0x100010ee</literal></expr>, <expr><name>TYPE_COPROC</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setend"</literal></expr>, <expr><literal type="number">0x000001f1</literal></expr>, <expr><name>TYPE_ENDIAN</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"clz"</literal></expr>, <expr><literal type="number">0x000f6f01</literal></expr>, <expr><name>TYPE_CLZ</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"neg"</literal></expr>, <expr><literal type="number">0x7000</literal></expr>, <expr><name>TYPE_NEG</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>M_BIT</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>S_BIT</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>C_BITS</name> <init>= <expr><literal type="number">0x3c</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>DOTN_BIT</name> <init>= <expr><literal type="number">0x40</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>DOTW_BIT</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>L_BIT</name> <init>= <expr><literal type="number">0x100</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>X_BIT</name> <init>= <expr><literal type="number">0x200</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>TWO_BIT</name> <init>= <expr><literal type="number">0x400</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>IE_BIT</name> <init>= <expr><literal type="number">0x800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>ID_BIT</name> <init>= <expr><literal type="number">0x1000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>EA_BIT</name> <init>= <expr><literal type="number">0x2000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>FD_BIT</name> <init>= <expr><literal type="number">0x4000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>T_BIT</name> <init>= <expr><literal type="number">0x8000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>B_BIT</name> <init>= <expr><literal type="number">0x10000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>H_BIT</name> <init>= <expr><literal type="number">0x20000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>D_BIT</name> <init>= <expr><literal type="number">0x40000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>W_BIT</name> <init>= <expr><literal type="number">0x80000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>EIGHT_BIT</name> <init>= <expr><literal type="number">0x100000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>SIXTEEN_BIT</name> <init>= <expr><literal type="number">0x200000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>BB_BIT</name> <init>= <expr><literal type="number">0x400000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>BT_BIT</name> <init>= <expr><literal type="number">0x800000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>TB_BIT</name> <init>= <expr><literal type="number">0x1000000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>TT_BIT</name> <init>= <expr><literal type="number">0x2000000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>R_BIT</name> <init>= <expr><literal type="number">0x4000000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>IA_BIT</name> <init>= <expr><literal type="number">0x8000000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>DB_BIT</name> <init>= <expr><literal type="number">0x10000000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>SH_BIT</name> <init>= <expr><literal type="number">0x20000000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>WB_BIT</name> <init>= <expr><literal type="number">0x40000000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>WT_BIT</name> <init>= <expr><literal type="number">0x80000000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut64</name></type> <name>C_MATCH_BIT</name> <init>= <expr><literal type="number">0x100000000</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>parse_hints</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmpnull</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"unst"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="string">"6"</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmpnull</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"un"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="string">"7"</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmpnull</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"st"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="string">"14"</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmpnull</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"sy"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="string">"15"</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="string">"-1"</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st8</name></type> <name>iflag</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>st8</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <literal type="number">0x4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <literal type="number">0x2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></for>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>cqcheck</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>conds</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"eq"</literal></expr>, <expr><literal type="string">"ne"</literal></expr>, <expr><literal type="string">"cs"</literal></expr>, <expr><literal type="string">"cc"</literal></expr>, <expr><literal type="string">"mi"</literal></expr>, <expr><literal type="string">"pl"</literal></expr>, <expr><literal type="string">"vs"</literal></expr>, <expr><literal type="string">"vc"</literal></expr>,

<expr><literal type="string">"hi"</literal></expr>, <expr><literal type="string">"ls"</literal></expr>, <expr><literal type="string">"ge"</literal></expr>, <expr><literal type="string">"lt"</literal></expr>, <expr><literal type="string">"gt"</literal></expr>, <expr><literal type="string">"le"</literal></expr>, <expr><literal type="string">"al"</literal></expr>, <expr><literal type="string">"nv"</literal></expr>, <expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>conds</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><operator>*</operator><name>input</name></expr></argument>, <argument><expr><name><name>conds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>C_MATCH_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>input</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><operator>*</operator><name>input</name></expr></argument>, <argument><expr><literal type="string">".n"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>DOTN_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>input</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><operator>*</operator><name>input</name></expr></argument>, <argument><expr><literal type="string">".w"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>DOTW_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>input</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>input</name> <operator>-=</operator> <name>offset</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>opmask</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>opcode</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>allowed_mask</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>M_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <call><name>cqcheck</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'s'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>S_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>S_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <call><name>cqcheck</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>WB_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>WB_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"wt"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>WT_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>WT_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <call><name>cqcheck</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>DB_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>DB_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"ea"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>EA_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>EA_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"ia"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>IA_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>IA_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"fd"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>FD_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>FD_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <call><name>cqcheck</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'l'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>L_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>L_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <call><name>cqcheck</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"bb"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>BB_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>BB_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"tt"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>TT_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>TT_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"bt"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>BT_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>BT_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"tb"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>TB_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>TB_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <call><name>cqcheck</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'w'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>W_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>W_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'b'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>B_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>B_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'h'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>H_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>H_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'d'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>D_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>D_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'t'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>T_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>T_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'s'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>S_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>S_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <call><name>cqcheck</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'r'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>R_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>R_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <call><name>cqcheck</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'2'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>TWO_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>TWO_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'8'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>EIGHT_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>EIGHT_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"16"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>SIXTEEN_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>SIXTEEN_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <call><name>cqcheck</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'l'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>L_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>L_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'x'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>X_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>X_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <call><name>cqcheck</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ID_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>ID_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"ie"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>IE_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>IE_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <call><name>cqcheck</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"sh"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>SH_BIT</name> <operator>&amp;</operator> <name>allowed_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>SH_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <call><name>cqcheck</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>res</name> <operator>&amp;</operator> <name>C_MATCH_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <literal type="number">15</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>input</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>itmask</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>&gt;</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"it"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>input</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></for>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>err</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>getnum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'$'</literal> <operator>||</operator> <operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strtoll</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>endptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>endptr</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>getnumbang</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>str</name> <operator>||</operator> <operator>!</operator><call><name>r_str_endswith</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"!"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><call><name>r_str_ndup</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>temp</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>getimmed8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>num</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>rotate</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;=</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>num</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>rotate</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>rotate</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>rotate</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>num</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>num</name> <operator>|</operator> <operator>(</operator><name>rotate</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st32</name></type> <name>firstsigdigit</name> <parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>st32</name></type> <name>f</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>b</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>forwardmask</name> <init>= <expr><literal type="number">0x80000000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>backwardmask</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>forwardmask</name> <operator>&amp;</operator> <name>num</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>f</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>backwardmask</name> <operator>&amp;</operator> <name>num</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>b</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">32</literal><operator>-</operator><name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>forwardmask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>backwardmask</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>b</name><operator>-</operator><name>f</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>f</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>getthbimmed</name><parameter_list>(<parameter><decl><type><name>st32</name></type> <name>number</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>number</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator><operator>(</operator> <name>number</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>number</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator> <name>number</name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>number</name> <operator>&gt;&gt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator><operator>(</operator> <name>number</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>number</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator><operator>(</operator> <name>number</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>number</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator><operator>(</operator> <name>number</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>number</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator><operator>(</operator> <name>number</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><operator>!</operator><operator>(</operator> <name>number</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>number</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><operator>!</operator><operator>(</operator> <name>number</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>getthzeroimmed12</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>number</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator><name>number</name> <operator>&amp;</operator> <literal type="number">0x800</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator><name>number</name> <operator>&amp;</operator> <literal type="number">0x700</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator><name>number</name> <operator>&amp;</operator> <literal type="number">0x0ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>getthzeroimmed16</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name>number</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator><name>number</name> <operator>&amp;</operator> <literal type="number">0xf000</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator><name>number</name> <operator>&amp;</operator> <literal type="number">0x0800</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator><name>number</name> <operator>&amp;</operator> <literal type="number">0x0700</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator><name>number</name> <operator>&amp;</operator> <literal type="number">0x00ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>getthimmed12</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>num</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>FSD</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;=</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>num</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>(</operator><operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0xff00ff00</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x00ff0000</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x000000ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x000000ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <literal type="number">0x00000010</literal></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>(</operator><operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x00ff00ff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <name>num</name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <literal type="number">0x00000020</literal></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>(</operator><operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x00ff0000</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>num</name> <operator>&amp;</operator><literal type="number">0xff000000</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x000000ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <name>num</name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <literal type="number">0x00000030</literal></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>FSD</name> <operator>=</operator> <call><name>firstsigdigit</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>FSD</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">24</literal><operator>-</operator><name>FSD</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0000007f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><literal type="number">8</literal><operator>+</operator><name>FSD</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><literal type="number">8</literal><operator>+</operator><name>FSD</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xe</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><literal type="number">8</literal><operator>+</operator><name>FSD</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>getrange</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'['</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getreg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>aliases</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"sl"</literal></expr>, <expr><literal type="string">"fp"</literal></expr>, <expr><literal type="string">"ip"</literal></expr>, <expr><literal type="string">"sp"</literal></expr>, <expr><literal type="string">"lr"</literal></expr>, <expr><literal type="string">"pc"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>reg</name> <init>= <expr><call><name>strtol</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ep</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>reg</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>reg</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>aliases</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmpnull</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>aliases</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">10</literal> <operator>+</operator> <name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st32</name></type> <name>getlistmask</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>st32</name></type> <name>tempres</name></decl>, <decl><type ref="prev"/><name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>otemp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp2</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>temp2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name> <argument_list>(<argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>temp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>otemp</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>input</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>input</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_str_ncpy</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>input</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tempres</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tempres</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>tempres</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>tempres</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>+=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>start</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>end</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>end</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>otemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st32</name></type> <name>getregmemstart</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><operator>(</operator><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'['</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><call><name>getreg</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st32</name></type> <name>getregmemstartend</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>st32</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name> <operator>||</operator> <operator>(</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>input</name> <operator>!=</operator> <literal type="char">'['</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>r_str_endswith</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><call><name>r_str_ndup</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>temp</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st32</name></type> <name>getregmemend</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>st32</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>input</name> <operator>||</operator> <operator>!</operator><call><name>r_str_endswith</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><call><name>r_str_ndup</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>temp</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st32</name></type> <name>getreglist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>st32</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name> <operator>||</operator> <operator>(</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>input</name> <operator>!=</operator> <literal type="char">'{'</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>r_str_endswith</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>input</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><call><name>r_str_ndup</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>temp</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>getlistmask</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st32</name></type> <name>getnummemend</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>st32</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>input</name> <operator>||</operator> <operator>!</operator><call><name>r_str_endswith</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><call><name>r_str_ndup</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>temp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st32</name></type> <name>getnummemendbang</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>st32</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name> <operator>||</operator> <operator>(</operator><call><name>strlen</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>input</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">']'</literal> <operator>||</operator> <operator>!</operator><call><name>r_str_endswith</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"!"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><call><name>r_str_ndup</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>temp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st32</name></type> <name>getregmembang</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>st32</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>input</name> <operator>||</operator> <operator>!</operator><call><name>r_str_endswith</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"!"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><call><name>r_str_ndup</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>temp</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getcoproc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>coproc</name> <init>= <expr><call><name>strtol</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ep</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>coproc</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>coproc</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>coproc</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getcoprocreg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>reg</name> <init>= <expr><call><name>strtol</name> <argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ep</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>reg</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>reg</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut8</name></type> <name>interpret_msrbank</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ut8</name> <modifier>*</modifier></type><name>spsr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>fields</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'x'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"spsr_"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>spsr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>spsr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"apsr_"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name><operator>+</operator><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"g"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0x4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name><operator>+</operator><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"nzcvq"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0x8</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>str</name><operator>+</operator><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"nzcvqg"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0xc</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"cpsr_"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"spsr_"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>str</name><index>[<expr><literal type="number">5</literal><operator>+</operator><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>fields</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">5</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>fields</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fields</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>thumb_getshift</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>shifts</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"LSL"</literal></expr>, <expr><literal type="string">"LSR"</literal></expr>, <expr><literal type="string">"ASR"</literal></expr>, <expr><literal type="string">"ROR"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"RRX"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>space</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>shift</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>argn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name>type</name></expr></argument>,<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>shifts</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>space</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>space</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>space</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><operator>++</operator><name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>shifts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>shifts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shift</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>argn</name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>||</operator> <name>argn</name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator> <operator>(</operator><name>argn</name> <operator>&amp;</operator> <literal type="number">0x1c</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator> <operator>(</operator><name>argn</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st32</name></type> <name>getshiftmemend</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>st32</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>input</name> <operator>||</operator> <operator>!</operator><call><name>r_str_endswith</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><call><name>r_str_ndup</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>temp</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>thumb_getshift</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>collect_list</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>input</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>temp</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>conc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>arrsz</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>arrsz</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>input</name><index>[<expr><name>arrsz</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>arrsz</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>conc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>conc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>conc</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name><name>input</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'}'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>conc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>input</name><index>[<expr><name>start</name></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arrsz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><operator>(</operator><name>end</name><operator>-</operator><name>start</name><operator>)</operator> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>thumb_selector</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>args</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>collect_list</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>thumb_getshift</name> <argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <literal type="number">3</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getcoproc</name> <argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <literal type="number">4</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getcoprocreg</name> <argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <literal type="number">5</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getregmemstart</name> <argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <literal type="number">6</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getregmemstartend</name> <argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <literal type="number">7</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getnummemend</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <literal type="number">8</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getnummemendbang</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <literal type="number">9</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getregmembang</name> <argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <literal type="number">0xa</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getreglist</name> <argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <literal type="number">0xb</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getregmemend</name> <argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <literal type="number">0xc</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getshiftmemend</name> <argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <literal type="number">0xd</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getnumbang</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <literal type="number">0xe</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <literal type="number">0xf</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>getshift</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>type</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>arg</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>space</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>shift</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>shifts</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"LSL"</literal></expr>, <expr><literal type="string">"LSR"</literal></expr>, <expr><literal type="string">"ASR"</literal></expr>, <expr><literal type="string">"ROR"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="string">"RRX"</literal></expr> 

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>shifts</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>space</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>space</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>space</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>++</operator><name>space</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>shifts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_str_casecmp</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>shifts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shift</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>i</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>i</name> <operator>|=</operator> <name>shift</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bracket</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bracket</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>bracket</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>&amp;=</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>|=</operator> <name>shift</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>arm_opcode_parse</name><parameter_list>(<parameter><decl><type><name>ArmOpcode</name> <modifier>*</modifier></type><name>ao</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ArmOpcode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>opstr</name></name></expr></argument>, <argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><operator>++</operator><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<while>while <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>arm_opcode_cond</name><parameter_list>(<parameter><decl><type><name>ArmOpcode</name> <modifier>*</modifier></type><name>ao</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delta</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>conds</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"eq"</literal></expr>, <expr><literal type="string">"ne"</literal></expr>, <expr><literal type="string">"cs"</literal></expr>, <expr><literal type="string">"cc"</literal></expr>, <expr><literal type="string">"mi"</literal></expr>, <expr><literal type="string">"pl"</literal></expr>, <expr><literal type="string">"vs"</literal></expr>, <expr><literal type="string">"vc"</literal></expr>,

<expr><literal type="string">"hi"</literal></expr>, <expr><literal type="string">"ls"</literal></expr>, <expr><literal type="string">"ge"</literal></expr>, <expr><literal type="string">"lt"</literal></expr>, <expr><literal type="string">"gt"</literal></expr>, <expr><literal type="string">"le"</literal></expr>, <expr><literal type="string">"al"</literal></expr>, <expr><literal type="string">"nv"</literal></expr>, <expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>cond</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name><operator>+</operator><name>delta</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>conds</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmpnull</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>conds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cond</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>cond</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><name>cond</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st32</name></type> <name>thumb_getoffset</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>cur</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>st32</name></type> <name>res</name> <init>= <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>-=</operator> <name>cur</name></expr>;</expr_stmt> 

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st8</name></type> <name>std_16bit_2reg</name><parameter_list>(<parameter><decl><type><name>ArmOpcode</name> <modifier>*</modifier></type><name>ao</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>rd</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>rn</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>rd</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>rn</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>rd</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>rn</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st8</name></type> <name>mem_16bit_2reg</name><parameter_list>(<parameter><decl><type><name>ArmOpcode</name> <modifier>*</modifier></type><name>ao</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>rd</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>rn</name> <init>= <expr><call><name>getregmemstart</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>rd</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>rn</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>rd</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>rn</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st8</name></type> <name>std_32bit_2reg</name><parameter_list>(<parameter><decl><type><name>ArmOpcode</name> <modifier>*</modifier></type><name>ao</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>shift</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>rd</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>rn</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rd</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>rn</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTN_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>shiftnum</name> <init>= <expr><call><name>thumb_getshift</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>shiftnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>rd</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>rn</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>rd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>rn</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st8</name></type> <name>mem_32bit_2reg</name><parameter_list>(<parameter><decl><type><name>ArmOpcode</name> <modifier>*</modifier></type><name>ao</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>rd</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>rn</name> <init>= <expr><call><name>getregmemstart</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rd</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>rn</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTN_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>rd</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>rn</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>st8</name></type> <name>std_32bit_3reg</name><parameter_list>(<parameter><decl><type><name>ArmOpcode</name> <modifier>*</modifier></type><name>ao</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>shift</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>rd</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>rn</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>rm</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rd</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>rn</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>rm</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTN_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>rd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>rn</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>rm</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>shiftnum</name> <init>= <expr><call><name>thumb_getshift</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>shiftnum</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>std_opt_2</name><parameter_list>(<parameter><decl><type><name>ArmOpcode</name> <modifier>*</modifier></type><name>ao</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>std_opt_3</name><parameter_list>(<parameter><decl><type><name>ArmOpcode</name> <modifier>*</modifier></type><name>ao</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>thumb_assemble</name><parameter_list>(<parameter><decl><type><name>ArmOpcode</name> <modifier>*</modifier></type><name>ao</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <name>UT32_MAX</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmpnull</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"udf"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xde</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"add"</literal></expr></argument>, <argument><expr><name>S_BIT</name> <operator>|</operator> <name>W_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_CONST</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>num</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reg2</name> <operator>==</operator> <literal type="number">13</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">1024</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>%</operator> <literal type="number">4</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>W_BIT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00a8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>==</operator> <literal type="number">13</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">512</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>%</operator> <literal type="number">4</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>W_BIT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00b0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>thnum</name> <init>= <expr><call><name>getthimmed12</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>W_BIT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0df10000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>thnum</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">4095</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0df20000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <call><name>getthzeroimmed12</name> <argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x001c</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>std_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>reg1</name> <operator>==</operator> <name>reg2</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">256</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0030</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>thnum</name> <init>= <expr><call><name>getthimmed12</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>W_BIT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00f10000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>thnum</name></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">4095</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00f20000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <call><name>getthzeroimmed12</name> <argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"lsl 0"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>std_opt_3</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg3</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>shift</name> <init>= <expr><call><name>thumb_getshift</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg3</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reg2</name> <operator>==</operator> <literal type="number">13</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>==</operator> <name>reg3</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>shift</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x6844</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>reg1</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>reg1</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>==</operator> <literal type="number">13</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>shift</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x8544</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg3</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0deb0000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg3</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>shift</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg3</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>shift</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0018</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>reg3</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>reg3</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>std_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>==</operator> <name>reg2</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>shift</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0044</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>reg1</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>reg1</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg3</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00eb0000</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"adc"</literal></expr></argument>, <argument><expr><name>S_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_CONST</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_CONST</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x40f10000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <call><name>getthimmed12</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x4041</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>std_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x40eb0000</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_3</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x40eb0000</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name><argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"adr"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>label</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>reg</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>label</name> <operator>&lt;</operator> <literal type="number">1024</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>label</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>label</name> <operator>%</operator> <literal type="number">4</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00a0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>label</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>label</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>label</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">4096</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>DOTN_BIT</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xaff20000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <call><name>getthzeroimmed12</name> <argument_list>(<argument><expr><operator>-</operator><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>label</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>label</name> <operator>&lt;</operator> <literal type="number">4096</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>DOTN_BIT</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0ff20000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <call><name>getthzeroimmed12</name> <argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"and"</literal></expr></argument>, <argument><expr><name>S_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0040</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>std_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00ea0000</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_CONST</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>imm</name> <init>= <expr><call><name>getthimmed12</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00f00000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>imm</name></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_3</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00ea0000</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"asr"</literal></expr></argument>, <argument><expr><name>S_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>imm</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>imm</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>imm</name> <operator>&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0010</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0x1c</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>std_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x4fea2000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0x1c</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0041</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>std_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x40fa00f0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator> <name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>st32</name></type> <name>offset</name> <init>= <expr><call><name>thumb_getoffset</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>C_BITS</name><operator>)</operator> <operator>==</operator> <name>C_BITS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>offset</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">2048</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>offset</name> <operator>&lt;=</operator> <literal type="number">2046</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00e0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>offset</name><operator>/</operator><literal type="number">2</literal> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>offset</name><operator>/</operator><literal type="number">2</literal> <operator>&amp;</operator> <literal type="number">0x700</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>offset</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">16777216</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>offset</name> <operator>&gt;</operator> <literal type="number">16777214</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>offset</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00f00090</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <call><name>getthbimmed</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>offset</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">256</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>offset</name> <operator>&lt;=</operator> <literal type="number">254</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00d0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>ut16</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>offset</name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>C_BITS</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>offset</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1048576</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>offset</name> <operator>&gt;</operator> <literal type="number">1048574</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>offset</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00f00080</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><operator>(</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">0x80000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><operator>(</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">0x40000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><operator>(</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">0x3f000</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><operator>(</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">0xe00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>ut32</name><operator>)</operator><operator>(</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">0x1fe</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>C_BITS</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xc</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>C_BITS</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x30</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator> <name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"bl"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>st32</name></type> <name>offset</name> <init>= <expr><call><name>thumb_getoffset</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00f000d0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>offset</name> <operator>&gt;</operator> <literal type="number">16777214</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>offset</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">16777216</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>offset</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <call><name>getthbimmed</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator> <name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"bx"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0047</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else 

if <condition>(<expr><operator>(</operator> <name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"blx"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x8047</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>st32</name></type> <name>offset</name> <init>= <expr><call><name>thumb_getoffset</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00f000c0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>offset</name> <operator>&gt;</operator> <literal type="number">16777214</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>offset</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">16777216</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>offset</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>off</name> <operator>&amp;</operator> <literal type="number">0x2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <call><name>getthbimmed</name> <argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator> <name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"bfc"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_CONST_CONST</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>DOTN_BIT</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>lsb</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>width</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>msb</name> <init>= <expr><name>lsb</name> <operator>+</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lsb</name> <operator>&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>msb</name> <operator>&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x6ff30000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>lsb</name> <operator>&amp;</operator> <literal type="number">0x1c</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>lsb</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>msb</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator> <name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"bfi"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG_CONST_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>lsb</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>width</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>msb</name> <init>= <expr><name>lsb</name> <operator>+</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lsb</name> <operator>&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>msb</name> <operator>&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x60f30000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>lsb</name> <operator>&amp;</operator> <literal type="number">0x1c</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>lsb</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>msb</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator> <name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"bic"</literal></expr></argument>, <argument><expr><name>S_BIT</name></expr></argument>)</argument_list></call> <operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x8043</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>std_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x20ea0000</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_CONST</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_CONST</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x20f00000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <call><name>getthimmed12</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_3</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x20ea0000</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator> <name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"bkpt"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>num</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00be</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator> <name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"cbnz"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>offset</name> <init>= <expr><call><name>thumb_getoffset</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>offset</name> <operator>&gt;</operator> <literal type="number">127</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>offset</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00b9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">0x3e</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator> <name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"cbz"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>offset</name> <init>= <expr><call><name>thumb_getoffset</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>offset</name> <operator>&gt;</operator> <literal type="number">127</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>offset</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00b1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">0x3e</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator> <name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"cdp"</literal></expr></argument>, <argument><expr><name>TWO_BIT</name></expr></argument>)</argument_list></call> <operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_COPROC_CONST_COREG_COREG_COREG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"0"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_COPROC_CONST_COREG_COREG_COREG_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>coproc</name> <init>= <expr><call><name>getcoproc</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>opc1</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getcoprocreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getcoprocreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg3</name> <init>= <expr><call><name>getcoprocreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>opc2</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>coproc</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>opc1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>opc2</name> <operator>&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00ee0000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>TWO_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>coproc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>opc1</name> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg3</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>opc2</name> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else 

if <condition>(<expr><operator>(</operator> <name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"clrex"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_NONE</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xbff32f8f</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator> <name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"clz"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xb0fa80f0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator> <name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"cmn"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>num</name> <init>= <expr><call><name>getthimmed12</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10f1000f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xc042</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>std_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"lsl 0"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10eb000f</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator> <name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"cmp"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>num</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">256</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0028</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>getthimmed12</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xb0f1000f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x8042</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>std_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0045</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>reg1</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>reg1</name> <operator>&amp;</operator> <literal type="number">0x8</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"lsl 0"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>shift</name> <init>= <expr><call><name>thumb_getshift</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xb0eb000f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>shift</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator> <name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"cps"</literal></expr></argument>, <argument><expr><name>ID_BIT</name> <operator>|</operator> <name>IE_BIT</name></expr></argument>)</argument_list></call> <operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_OTHER</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>st8</name></type> <name>aif</name> <init>= <expr><call><name>iflag</name><argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>aif</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x60b6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>aif</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>ID_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"0"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_OTHER_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>st8</name></type> <name>aif</name> <init>= <expr><call><name>iflag</name><argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>mode</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>aif</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xaff30085</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>mode</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>aif</name> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>ID_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>mode</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>ID_BIT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>m</name> <operator>&amp;</operator> <name>IE_BIT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>mode</name> <operator>&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xaff30081</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>mode</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"dbg"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>option</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>option</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xaff3f080</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>option</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"dmb"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_NONE</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xbff35f8f</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_OTHER</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmpnull</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"sy"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"15"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>option</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>option</name> <operator>!=</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xbff3508f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>option</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"dsb"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_NONE</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xbff34f8f</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<case>case <expr><name>THUMB_OTHER</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmpnull</name> <argument_list>(<argument><expr><operator>(</operator><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>parse_hints</name><argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>option</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>option</name> <operator>!=</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>option</name> <operator>!=</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>option</name> <operator>!=</operator> <literal type="number">14</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>option</name> <operator>!=</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xbff3408f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>option</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"eor"</literal></expr></argument>, <argument><expr><name>S_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_CONST</name></expr>:</case>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>THUMB_REG_REG_CONST</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>imm</name> <init>= <expr><call><name>getthimmed12</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x80f00000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>imm</name></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x4040</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>std_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"lsl 0"</literal></expr>;</expr_stmt>

<case>case <expr><name>THUMB_REG_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x80ea0000</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"isb"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_NONE</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xbff36f8f</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<case>case <expr><name>THUMB_OTHER</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmpnull</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"sy"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"15"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>option</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>option</name> <operator>!=</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xbff3608f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>option</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>itmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_OTHER</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>cond</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>conds</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"eq"</literal></expr>, <expr><literal type="string">"ne"</literal></expr>, <expr><literal type="string">"cs"</literal></expr>, <expr><literal type="string">"cc"</literal></expr>, <expr><literal type="string">"mi"</literal></expr>, <expr><literal type="string">"pl"</literal></expr>, <expr><literal type="string">"vs"</literal></expr>, <expr><literal type="string">"vc"</literal></expr>,

<expr><literal type="string">"hi"</literal></expr>, <expr><literal type="string">"ls"</literal></expr>, <expr><literal type="string">"ge"</literal></expr>, <expr><literal type="string">"lt"</literal></expr>, <expr><literal type="string">"gt"</literal></expr>, <expr><literal type="string">"le"</literal></expr>, <expr><literal type="string">"al"</literal></expr>, <expr><literal type="string">"nv"</literal></expr>, <expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>conds</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>strcmpnull</name><argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>conds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cond</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00bf</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>cond</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>nrcs</name> <init>= <expr><operator>(</operator><name>m</name> <operator>&amp;</operator> <literal type="number">0x30</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>thiset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nrcs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>thiset</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>cond</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>^</operator> <name>thiset</name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">11</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">11</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"ldc"</literal></expr></argument>, <argument><expr><name>TWO_BIT</name> <operator>|</operator> <name>L_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_COPROC_COREG_BRACKREG_CONSTBRACK</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>proc</name> <init>= <expr><call><name>getcoproc</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getcoprocreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getregmemstart</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>imm</name> <init>= <expr><call><name>getnummemend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10ed0000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>L_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>TWO_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>imm</name> <operator>=</operator> <operator>-</operator><name>imm</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>proc</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>imm</name> <operator>&gt;</operator> <literal type="number">1024</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>imm</name> <operator>%</operator> <literal type="number">4</literal> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>proc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_COPROC_COREG_BRACKREGBRACK</name></expr>:</case>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"0"</literal></expr>;</expr_stmt>

<case>case <expr><name>THUMB_COPROC_COREG_BRACKREGBRACK_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>proc</name> <init>= <expr><call><name>getcoproc</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getcoprocreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getregmemstartend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>imm</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x30ec0000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>L_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>TWO_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>imm</name> <operator>=</operator> <operator>-</operator><name>imm</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>proc</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>imm</name> <operator>&gt;</operator> <literal type="number">1024</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>imm</name> <operator>%</operator> <literal type="number">4</literal> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>proc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_COPROC_COREG_BRACKREG_CONSTBRACKBANG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>proc</name> <init>= <expr><call><name>getcoproc</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getcoprocreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getregmemstart</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>imm</name> <init>= <expr><call><name>getnummemendbang</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x30ed0000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>L_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>TWO_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>imm</name> <operator>=</operator> <operator>-</operator><name>imm</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>proc</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>imm</name> <operator>&gt;</operator> <literal type="number">1024</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>imm</name> <operator>%</operator> <literal type="number">4</literal> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>proc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"ldm"</literal></expr></argument>, <argument><expr><name>DB_BIT</name> <operator>|</operator> <name>EA_BIT</name> <operator>|</operator> <name>IA_BIT</name> <operator>|</operator> <name>FD_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REGBANG_LIST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getregmembang</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>list</name> <init>= <expr><call><name>getreglist</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DB_BIT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>m</name> <operator>&amp;</operator> <name>EA_BIT</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>list</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>reg1</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00c8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>reg1</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>list</name> <operator>^=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>reg1</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>list</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name> <operator>&amp;</operator> <literal type="number">0x2000</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DB_BIT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>m</name> <operator>&amp;</operator> <name>EA_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x30e90000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xb0e80000</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>list</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>list</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_LIST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>list</name> <init>= <expr><call><name>getreglist</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DB_BIT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>m</name> <operator>&amp;</operator> <name>EA_BIT</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>list</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>reg1</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00c8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>reg1</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>list</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name> <operator>&amp;</operator> <literal type="number">0x2000</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DB_BIT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>m</name> <operator>&amp;</operator> <name>EA_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10e90000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x90e80000</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>list</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>list</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"ldr"</literal></expr></argument>, <argument><expr><name>B_BIT</name> <operator>|</operator> <name>H_BIT</name> <operator>|</operator> <name>D_BIT</name> <operator>|</operator> <name>T_BIT</name> <operator>|</operator> <name>S_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>ldrsel</name> <init>= <expr><name>m</name> <operator>&amp;</operator> <operator>(</operator><name>B_BIT</name> <operator>|</operator> <name>H_BIT</name> <operator>|</operator> <name>D_BIT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>S_BIT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <operator>(</operator><name>B_BIT</name> <operator>|</operator> <name>H_BIT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_CONST</name></expr>:</case>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"[r15"</literal></expr>;</expr_stmt>

<case>case <expr><name>THUMB_REG_BRACKREGBRACK</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"0]"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<case>case <expr><name>THUMB_REG_BRACKREG_CONSTBRACK</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getregmemstart</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>num</name> <init>= <expr><call><name>getnummemend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ldrsel</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>T_BIT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">255</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x50f8000e</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><call><name>mem_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reg2</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">4095</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">4095</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">1024</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>%</operator> <literal type="number">4</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0048</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x5ff80000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>-</operator><name>num</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x0f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg2</name> <operator>==</operator> <literal type="number">13</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>reg1</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">1024</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>%</operator> <literal type="number">4</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0098</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">128</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>%</operator> <literal type="number">4</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0068</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mem_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">4095</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1023</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xd0f80000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0xf00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><call><name>mem_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x50f8000c</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>-</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><call><name>mem_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>ldrsel</name> <operator>==</operator> <name>B_BIT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>T_BIT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">255</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10f8000e</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><call><name>mem_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reg2</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">4095</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">4095</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x1ff80000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>-</operator><name>num</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x0f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>S_BIT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0078</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mem_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">4095</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">255</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x90f80000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0xf00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><call><name>mem_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10f8000c</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>-</operator><name>num</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><call><name>mem_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>ldrsel</name> <operator>==</operator> <name>H_BIT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>T_BIT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">255</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x30f8000e</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><call><name>mem_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reg2</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">4095</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">4095</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x3ff80000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>-</operator><name>num</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x0f00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>S_BIT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0088</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mem_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">4095</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">255</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xb0f80000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0xf00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><call><name>mem_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x30f8000c</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>-</operator><name>num</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><call><name>mem_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt> 

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_BRACKREGBRACK_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getregmemstartend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>num</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">255</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">255</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ldrsel</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x50f80009</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else 

if <condition>(<expr><name>ldrsel</name> <operator>==</operator> <name>B_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10f80009</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else 

if <condition>(<expr><name>ldrsel</name> <operator>==</operator> <name>H_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x30f80009</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>-</operator><name>num</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_BRACKREG_CONSTBRACKBANG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>st32</name></type> <name>num</name> <init>= <expr><call><name>getnummemendbang</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">255</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">255</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ldrsel</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x50f8000d</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else 

if <condition>(<expr><name>ldrsel</name> <operator>==</operator> <name>B_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10f8000d</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else 

if <condition>(<expr><name>ldrsel</name> <operator>==</operator> <name>H_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x30f8000d</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>-</operator><name>num</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><call><name>mem_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_BRACKREG_REGBRACK</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg3</name> <init>= <expr><call><name>getregmemend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reg3</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ldrsel</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0058</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>ldrsel</name> <operator>==</operator> <name>B_BIT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0056</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x005c</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>ldrsel</name> <operator>==</operator> <name>H_BIT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x005e</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x005a</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else

<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>reg3</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>reg3</name> <operator>&amp;</operator> <literal type="number">0x4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mem_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"lsl 0]"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_BRACKREG_REG_SHIFTBRACK</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg3</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>shift</name> <init>= <expr><call><name>getshiftmemend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>shift</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&amp;</operator> <literal type="number">0xffffcfff</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ldrsel</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x50f80000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>ldrsel</name> <operator>==</operator> <name>B_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10f80000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>ldrsel</name> <operator>==</operator> <name>H_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x30f80000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg3</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>shift</name></expr>;</expr_stmt>

<return>return <expr><call><name>mem_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG_BRACKREGBRACK</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"0]"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_BRACKREG_CONSTBRACK</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg3</name> <init>= <expr><call><name>getregmemstart</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>num</name> <init>= <expr><call><name>getnummemend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">1020</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1020</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>%</operator> <literal type="number">4</literal> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ldrsel</name> <operator>!=</operator> <name>D_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x50e90000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>-</operator><name>num</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg3</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG_BRACKREGBRACK_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg3</name> <init>= <expr><call><name>getregmemstartend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>num</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">1020</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1020</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>%</operator> <literal type="number">4</literal> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ldrsel</name> <operator>!=</operator> <name>D_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x70e80000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>-</operator><name>num</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg3</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG_BRACKREG_CONSTBRACKBANG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg3</name> <init>= <expr><call><name>getregmemstart</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>num</name> <init>= <expr><call><name>getnummemendbang</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">1020</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1020</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>%</operator> <literal type="number">4</literal> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ldrsel</name> <operator>!=</operator> <name>D_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x70e90000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>-</operator><name>num</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg3</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"ldrex"</literal></expr></argument>, <argument><expr><name>B_BIT</name> <operator>|</operator> <name>H_BIT</name> <operator>|</operator> <name>D_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>ldrsel</name> <init>= <expr><name>m</name> <operator>&amp;</operator> <operator>(</operator><name>B_BIT</name> <operator>|</operator> <name>H_BIT</name> <operator>|</operator> <name>D_BIT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_BRACKREGBRACK</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getregmemstartend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ldrsel</name> <operator>==</operator> <name>B_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xd0e84f0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>ldrsel</name> <operator>==</operator> <name>H_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xd0e85f0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>ldrsel</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"0]"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_BRACKREG_CONSTBRACK</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>st32</name></type> <name>num</name> <init>= <expr><call><name>getnummemend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ldrsel</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">1020</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>%</operator> <literal type="number">4</literal> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x50e8000f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><call><name>mem_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG_BRACKREGBRACK</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg3</name> <init>= <expr><call><name>getregmemstartend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ldrsel</name> <operator>&amp;</operator> <name>D_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xd0e87f00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg3</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"lsl"</literal></expr></argument>, <argument><expr><name>S_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>num</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0000</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>std_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x4fea0000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x8040</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>std_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00fa00f0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else 

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"lsr"</literal></expr></argument>, <argument><expr><name>S_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>num</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0008</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>std_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x4fea1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xc040</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>std_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x20fa00f0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"mcr"</literal></expr></argument>, <argument><expr><name>R_BIT</name> <operator>|</operator> <name>TWO_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_COPROC_CONST_REG_COREG_COREG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"0"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_COPROC_CONST_REG_COREG_COREG_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>coproc</name> <init>= <expr><call><name>getcoproc</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>opc1</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>coreg1</name> <init>= <expr><call><name>getcoprocreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>coreg2</name> <init>= <expr><call><name>getcoprocreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>opc2</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>coproc</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>opc1</name> <operator>&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>coreg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>coreg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>opc2</name> <operator>&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>m</name> <operator>&amp;</operator> <name>R_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00ee1000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>TWO_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>coproc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>opc1</name> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>coreg1</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>coreg2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>opc2</name> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_COPROC_CONST_REG_REG_COREG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>coproc</name> <init>= <expr><call><name>getcoproc</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>opc</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>coreg</name> <init>= <expr><call><name>getcoprocreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>coproc</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>opc</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>coreg</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>R_BIT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x40ec0000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>TWO_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>coproc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>opc</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>coreg</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"mla"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>reg4</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reg4</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00fb0000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg4</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"mls"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>reg4</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reg4</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00fb1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg4</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"mov"</literal></expr></argument>, <argument><expr><name>S_BIT</name> <operator>|</operator> <name>W_BIT</name> <operator>|</operator> <name>T_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>num</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>W_BIT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>m</name> <operator>&amp;</operator> <name>T_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>wnum</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wnum</name> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x40f20000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>T_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <call><name>getthzeroimmed16</name> <argument_list>(<argument><expr><name>wnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">256</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>reg1</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0020</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x4ff00000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <call><name>getthimmed12</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>S_BIT</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0046</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>reg1</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>reg1</name> <operator>&amp;</operator> <literal type="number">0x8</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>reg2</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x4fea0000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else 

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"mrc"</literal></expr></argument>, <argument><expr><name>TWO_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_COPROC_CONST_REG_COREG_COREG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"0"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_COPROC_CONST_REG_COREG_COREG_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>coproc</name> <init>= <expr><call><name>getcoproc</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>opc1</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>coreg1</name> <init>= <expr><call><name>getcoprocreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>coreg2</name> <init>= <expr><call><name>getcoprocreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>opc2</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>coproc</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>opc1</name> <operator>&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>coreg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>coreg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>opc2</name> <operator>&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10ee1000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>TWO_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>coproc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>opc1</name> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>coreg1</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>coreg2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>opc2</name> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"mrrc"</literal></expr></argument>, <argument><expr><name>TWO_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_COPROC_CONST_REG_REG_COREG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>coproc</name> <init>= <expr><call><name>getcoproc</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>opc</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>coreg</name> <init>= <expr><call><name>getcoprocreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>coproc</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>opc</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>coreg</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x50ec0000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>TWO_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>coproc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>opc</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>coreg</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"mrs"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_OTHER</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"cpsr"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"apsr"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xeff30080</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"spsr"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xfff30080</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else 

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"msr"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_OTHER_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>spsr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>bank</name> <init>= <expr><call><name>interpret_msrbank</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spsr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bank</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x80f30080</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>bank</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>spsr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"mul"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg3</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x4043</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>==</operator> <name>reg3</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>std_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00fb00f0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"mvn"</literal></expr></argument>, <argument><expr><name>S_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>num</name> <init>= <expr><call><name>getthimmed12</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <name>err</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x6ff00000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"lsl 0"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>shift</name> <init>= <expr><call><name>thumb_getshift</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xc043</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>shift</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>std_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x6fea0000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>shift</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"nop"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_NONE</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xaff30080</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00bf</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"orn"</literal></expr></argument>, <argument><expr><name>S_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_CONST</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_CONST</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>num</name> <init>= <expr><call><name>getthimmed12</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x60f00000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>std_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"lsl 0"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>std_opt_3</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x60ea0000</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else 

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"orr"</literal></expr></argument>, <argument><expr><name>S_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_CONST</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_CONST</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>num</name> <init>= <expr><call><name>getthimmed12</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x40f00000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0043</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>std_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"lsl 0"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>std_opt_3</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x40ea0000</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else 

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"pkh"</literal></expr></argument>, <argument><expr><name>BT_BIT</name> <operator>|</operator> <name>TB_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>TB_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"asr 0"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>BT_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"lsl 0"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>std_opt_3</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>shift</name> <init>= <expr><call><name>thumb_getshift</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>TB_BIT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>shift</name> <operator>&amp;</operator> <literal type="number">0x00003000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x00002000</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>BT_BIT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>shift</name> <operator>&amp;</operator> <literal type="number">0x00003000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <operator>(</operator><name>TB_BIT</name> <operator>|</operator> <name>BT_BIT</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xc0ea0000</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"pld"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_BRACKREG_CONSTBRACK</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getregmemstart</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>num</name> <init>= <expr><call><name>getnummemend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reg1</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">4095</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">4095</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x1ff800f0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>-</operator><name>num</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x0ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0xf00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">255</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">4095</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x90f800f0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x0ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0xf00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>-</operator><name>num</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10f800fc</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_BRACKREG_REGBRACK</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"lsl 0]"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_BRACKREG_REG_SHIFTBRACK</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getregmemstart</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>shift</name> <init>= <expr><call><name>getshiftmemend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>shift</name> <operator>&amp;</operator> <literal type="number">0xffffcfff</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10f800f0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>shift</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"pli"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_BRACKREG_CONSTBRACK</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getregmemstart</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>num</name> <init>= <expr><call><name>getnummemend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reg1</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">4095</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">4095</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x1ff900f0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>-</operator><name>num</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x0ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0xf00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">255</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">4095</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x90f900f0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x0ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0xf00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>-</operator><name>num</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10f900fc</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_BRACKREG_REGBRACK</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"lsl 0]"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_BRACKREG_REG_SHIFTBRACK</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getregmemstart</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>shift</name> <init>= <expr><call><name>getshiftmemend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>shift</name> <operator>&amp;</operator> <literal type="number">0xffffcfff</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10f900f0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>shift</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"pop"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_LIST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>st32</name></type> <name>list</name> <init>= <expr><call><name>getreglist</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>list</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>list</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>list</name> <operator>&amp;</operator> <literal type="number">0x00007f00</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00bc</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>list</name> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>list</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xbde80000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>list</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>list</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"push"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_LIST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>st32</name></type> <name>list</name> <init>= <expr><call><name>getreglist</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>list</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>list</name> <operator>&amp;</operator> <literal type="number">0x0000a000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>list</name> <operator>&amp;</operator> <literal type="number">0x00001f00</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00b4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>list</name> <operator>&amp;</operator> <literal type="number">0x4000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>list</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x2de90000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>list</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>list</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"qadd"</literal></expr></argument>, <argument><expr><name>EIGHT_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>SIXTEEN_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x90fa10f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>EIGHT_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x80fa10f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x80fa80f0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"qasx"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xa0fa10f0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"qdadd"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x80fa90f0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"qdsub"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x80fab0f0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"qsax"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xe0fa10f0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"qsub"</literal></expr></argument>, <argument><expr><name>EIGHT_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>SIXTEEN_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xd0fa10f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>EIGHT_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xc0fa10f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x80faa0f0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"rbit"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x90faa0f0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"rev"</literal></expr></argument>, <argument><expr><name>SIXTEEN_BIT</name> <operator>|</operator> <name>SH_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>SIXTEEN_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x40ba</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>SH_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xc0ba</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00ba</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>std_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>SIXTEEN_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x90fa90f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>SH_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x90fab0f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x90fa80f0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"rfe"</literal></expr></argument>, <argument><expr><name>IA_BIT</name> <operator>|</operator> <name>FD_BIT</name> <operator>|</operator> <name>DB_BIT</name> <operator>|</operator> <name>EA_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>wb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REGBANG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>wb</name> <operator>=</operator> <literal type="number">0x20000000</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DB_BIT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>m</name> <operator>&amp;</operator> <name>EA_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10e800c0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x90e900c0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>wb</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"ror"</literal></expr></argument>, <argument><expr><name>S_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>num</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x4fea3000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x1c</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xc041</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>std_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x60fa00f0</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"rrx"</literal></expr></argument>, <argument><expr><name>S_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x4fea3000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"rsb"</literal></expr></argument>, <argument><expr><name>S_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_CONST</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_CONST</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>num</name> <init>= <expr><call><name>getthimmed12</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x4042</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>std_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xc0f10000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>std_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"lsl 0"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>std_opt_3</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xc0eb0000</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"sadd"</literal></expr></argument>, <argument><expr><name>EIGHT_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>SIXTEEN_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x90fa00f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>EIGHT_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x80fa00f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"sasx"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xa0fa00f0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"sbc"</literal></expr></argument>, <argument><expr><name>S_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x8041</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>std_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"lsl 0"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>std_opt_3</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x60eb0000</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_CONST</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_CONST</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x60f10000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>num</name> <init>= <expr><call><name>getthimmed12</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator> <name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"sbfx"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG_CONST_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>lsb</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>width</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>msb</name> <init>= <expr><name>lsb</name> <operator>+</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lsb</name> <operator>&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>msb</name> <operator>&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x40f30000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>lsb</name> <operator>&amp;</operator> <literal type="number">0x1c</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>lsb</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>width</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"sdiv"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x90fbf0f0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"sel"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xa0fa80f0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"setend"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_OTHER</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>r_str_case</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x50b6</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>strcmpnull</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"be"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>strcmpnull</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"le"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"sev"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_NONE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xaff30480</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x40bf</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"shadd"</literal></expr></argument>, <argument><expr><name>EIGHT_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name></expr></argument> )</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>SIXTEEN_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x90fa20f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>EIGHT_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x80fa20f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"shasx"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xa0fa20f0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"shsax"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xe0fa20f0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"shsub"</literal></expr></argument>, <argument><expr><name>EIGHT_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>SIXTEEN_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xd0fa20f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>EIGHT_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xc0fa20f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"smc"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_CONST</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>num</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xf0f70080</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"smla"</literal></expr></argument>, <argument><expr><name>BB_BIT</name> <operator>|</operator> <name>BT_BIT</name> <operator>|</operator> <name>TB_BIT</name> <operator>|</operator> <name>TT_BIT</name> <operator>|</operator> <name>WB_BIT</name> <operator>|</operator> <name>WT_BIT</name> <operator>|</operator> <name>L_BIT</name> <operator>|</operator> <name>D_BIT</name> <operator>|</operator> <name>X_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg3</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg4</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg3</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg4</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTN_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>L_BIT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>BB_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xc0fb8000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>BT_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xc0fb9000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>TB_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xc0fba000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>TT_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xc0fbb000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>D_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xc0fbc000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>X_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xc0fb0000</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg3</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg4</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>BB_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10fb0000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg4</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>BT_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10fb1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg4</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>TB_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10fb2000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg4</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>TT_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10fb3000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg4</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>D_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x20fb0000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>X_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg4</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>WB_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x30fb0000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg4</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>WT_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x30fb1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg4</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"smlsd"</literal></expr></argument>, <argument><expr><name>X_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg4</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reg4</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x40fb0000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>X_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg4</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"smlsld"</literal></expr></argument>, <argument><expr><name>X_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg3</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg4</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg3</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg4</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTN_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xd0fbc000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>X_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg3</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg4</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"smmla"</literal></expr></argument>, <argument><expr><name>R_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg4</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reg4</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x50fb0000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>R_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg4</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"smmls"</literal></expr></argument>, <argument><expr><name>R_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg4</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reg4</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x60fb0000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>R_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg4</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"smmul"</literal></expr></argument>, <argument><expr><name>R_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x50fb00f0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>R_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"smuad"</literal></expr></argument>, <argument><expr><name>X_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x20fb00f0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>X_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"smul"</literal></expr></argument>, <argument><expr><name>BB_BIT</name> <operator>|</operator> <name>BT_BIT</name> <operator>|</operator> <name>TB_BIT</name> <operator>|</operator> <name>TT_BIT</name> <operator>|</operator> <name>WB_BIT</name> <operator>|</operator> <name>WT_BIT</name> <operator>|</operator> <name>L_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>BB_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10fb00f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>BT_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10fb10f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>TB_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10fb20f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>TT_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10fb30f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>WB_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x30fb00f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>WT_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x30fb10f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg3</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg4</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg3</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg4</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTN_BIT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>L_BIT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x80fb0000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg3</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg4</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"smusd"</literal></expr></argument>, <argument><expr><name>X_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x40fb00f0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>X_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"srs"</literal></expr></argument>, <argument><expr><name>DB_BIT</name> <operator>|</operator> <name>FD_BIT</name> <operator>|</operator> <name>IA_BIT</name> <operator>|</operator> <name>EA_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_CONSTBANG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>num</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DB_BIT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>m</name> <operator>&amp;</operator> <name>FD_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0de800c0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x8de900c0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt> 

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>w</name> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"ssat"</literal></expr></argument>, <argument><expr><name>SIXTEEN_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_CONST_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"lsl 0"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_CONST_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>num</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>shift</name> <init>= <expr><call><name>thumb_getshift</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>||</operator> <operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>shift</name> <operator>&amp;</operator> <literal type="number">0x00001000</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>SIXTEEN_BIT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>shift</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&amp;</operator> <literal type="number">0x00002000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shift</name> <operator>|=</operator> <literal type="number">0x20000000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name> <operator>&amp;=</operator> <literal type="number">0xffffdfff</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>SIXTEEN_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x20f30000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00f30000</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>shift</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"ssax"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xe0fa00f0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"ssub"</literal></expr></argument>, <argument><expr><name>EIGHT_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>EIGHT_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xc0fa00f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>SIXTEEN_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xd0fa00f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"stc"</literal></expr></argument>, <argument><expr><name>L_BIT</name> <operator>|</operator> <name>TWO_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_COPROC_COREG_BRACKREGBRACK</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"0]"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_COPROC_COREG_BRACKREG_CONSTBRACK</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>coproc</name> <init>= <expr><call><name>getcoproc</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>coreg</name> <init>= <expr><call><name>getcoprocreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg</name> <init>= <expr><call><name>getregmemstart</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>num</name> <init>= <expr><call><name>getnummemend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>coproc</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>coreg</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">4092</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">4092</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>%</operator> <literal type="number">4</literal> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00ed0000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>L_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>TWO_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>-</operator><name>num</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt> 

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>coproc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>coreg</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_COPROC_COREG_BRACKREGBRACK_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>coproc</name> <init>= <expr><call><name>getcoproc</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>coreg</name> <init>= <expr><call><name>getcoprocreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg</name> <init>= <expr><call><name>getregmemstartend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>num</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>coproc</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>coreg</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">4092</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">4092</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>%</operator> <literal type="number">4</literal> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x20ec0000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>L_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>TWO_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>-</operator><name>num</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>coproc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>coreg</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_COPROC_COREG_BRACKREG_CONSTBRACKBANG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>coproc</name> <init>= <expr><call><name>getcoproc</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>coreg</name> <init>= <expr><call><name>getcoprocreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg</name> <init>= <expr><call><name>getregmemstart</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>num</name> <init>= <expr><call><name>getnummemendbang</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>coproc</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>coreg</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">4092</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">4092</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>%</operator> <literal type="number">4</literal> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x20ed0000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>L_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>TWO_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>-</operator><name>num</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>coproc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>coreg</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"stm"</literal></expr></argument>, <argument><expr><name>FD_BIT</name> <operator>|</operator> <name>DB_BIT</name> <operator>|</operator> <name>IA_BIT</name> <operator>|</operator> <name>EA_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>wb</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REGBANG_LIST</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>wb</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_LIST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>list</name> <init>= <expr><call><name>getreglist</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>list</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>list</name> <operator>&amp;</operator> <literal type="number">0x0000a000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>list</name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <operator>(</operator><name>FD_BIT</name> <operator>|</operator> <name>DB_BIT</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>wb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00c0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>list</name> <operator>&amp;</operator> <literal type="number">0x000000ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>&amp;</operator> <operator>(</operator><name>FD_BIT</name> <operator>|</operator> <name>DB_BIT</name> <operator>|</operator> <name>IA_BIT</name> <operator>|</operator> <name>EA_BIT</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <operator>(</operator><name>FD_BIT</name> <operator>|</operator> <name>DB_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00e90000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x80e80000</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>list</name> <operator>&amp;</operator> <literal type="number">0x000000ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>list</name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"str"</literal></expr></argument>, <argument><expr><name>B_BIT</name> <operator>|</operator> <name>T_BIT</name> <operator>|</operator> <name>D_BIT</name> <operator>|</operator> <name>H_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>strsel</name> <init>= <expr><name>m</name> <operator>&amp;</operator> <operator>(</operator><name>B_BIT</name> <operator>|</operator> <name>H_BIT</name> <operator>|</operator> <name>D_BIT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_BRACKREGBRACK</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"0]"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<case>case <expr><name>THUMB_REG_BRACKREG_CONSTBRACK</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getregmemstart</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>num</name> <init>= <expr><call><name>getnummemend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>T_BIT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">255</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>strsel</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x40f8000e</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>strsel</name> <operator>==</operator> <name>H_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x20f8000e</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>strsel</name> <operator>==</operator> <name>B_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00f8000e</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><call><name>mem_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>strsel</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>reg2</name> <operator>==</operator> <literal type="number">13</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">1024</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>num</name> <operator>%</operator> <literal type="number">4</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>reg1</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0090</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>t1form</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>strsel</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">128</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>%</operator> <literal type="number">4</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0060</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t1form</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>strsel</name> <operator>==</operator> <name>B_BIT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0070</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t1form</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>strsel</name> <operator>==</operator> <name>H_BIT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0080</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t1form</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t1form</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mem_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">4095</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">255</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>strsel</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xc0f80000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>strsel</name> <operator>==</operator> <name>B_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x80f80000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>strsel</name> <operator>==</operator> <name>H_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xa0f80000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x000000ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><call><name>mem_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>strsel</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x40f8000c</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>strsel</name> <operator>==</operator> <name>B_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00f8000c</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>strsel</name> <operator>==</operator> <name>H_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x20f8000c</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>-</operator><name>num</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><call><name>mem_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_BRACKREGBRACK_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getregmemstartend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>num</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">255</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">255</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>strsel</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x40f80009</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else 

if <condition>(<expr><name>strsel</name> <operator>==</operator> <name>B_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00f80009</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else 

if <condition>(<expr><name>strsel</name> <operator>==</operator> <name>H_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x20f80009</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>-</operator><name>num</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_BRACKREG_CONSTBRACKBANG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>st32</name></type> <name>num</name> <init>= <expr><call><name>getnummemendbang</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">255</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">255</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>strsel</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x40f8000d</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else 

if <condition>(<expr><name>strsel</name> <operator>==</operator> <name>B_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00f8000d</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else 

if <condition>(<expr><name>strsel</name> <operator>==</operator> <name>H_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x20f8000d</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>-</operator><name>num</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><call><name>mem_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_BRACKREG_REGBRACK</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getregmemstart</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg3</name> <init>= <expr><call><name>getregmemend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>reg2</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>reg3</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>strsel</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0050</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>strsel</name> <operator>==</operator> <name>B_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0054</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>strsel</name> <operator>==</operator> <name>H_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0052</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>reg3</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>reg3</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"lsl 0]"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_BRACKREG_REG_SHIFTBRACK</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getregmemstart</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg3</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>shift</name> <init>= <expr><call><name>getshiftmemend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>shift</name> <operator>&amp;</operator> <literal type="number">0xffffcfff</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg3</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>strsel</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x40f80000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else 

if <condition>(<expr><name>strsel</name> <operator>==</operator> <name>B_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00f80000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else 

if <condition>(<expr><name>strsel</name> <operator>==</operator> <name>H_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x20f80000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg3</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>shift</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG_BRACKREGBRACK</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"0]"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_BRACKREG_CONSTBRACK</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg3</name> <init>= <expr><call><name>getregmemstart</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>num</name> <init>= <expr><call><name>getnummemend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg3</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>strsel</name> <operator>!=</operator> <name>D_BIT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">1023</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1023</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>num</name> <operator>%</operator> <literal type="number">4</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x40e90000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>-</operator><name>num</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg3</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG_BRACKREG_CONSTBRACKBANG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg3</name> <init>= <expr><call><name>getregmemstart</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>num</name> <init>= <expr><call><name>getnummemendbang</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg3</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>strsel</name> <operator>!=</operator> <name>D_BIT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">1023</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1023</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>num</name> <operator>%</operator> <literal type="number">4</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x60e90000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>-</operator><name>num</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg3</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG_BRACKREGBRACK_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg3</name> <init>= <expr><call><name>getregmemstartend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>num</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg3</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>strsel</name> <operator>!=</operator> <name>D_BIT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">1023</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1023</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>num</name> <operator>%</operator> <literal type="number">4</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x60e80000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>-</operator><name>num</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg3</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"strex"</literal></expr></argument>, <argument><expr><name>B_BIT</name> <operator>|</operator> <name>D_BIT</name> <operator>|</operator> <name>H_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>strsel</name> <init>= <expr><name>m</name> <operator>&amp;</operator> <operator>(</operator><name>B_BIT</name> <operator>|</operator> <name>H_BIT</name> <operator>|</operator> <name>D_BIT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG_BRACKREGBRACK</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg3</name> <init>= <expr><call><name>getregmemstartend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>strsel</name> <operator>==</operator> <name>D_BIT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg3</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>strsel</name> <operator>==</operator> <name>B_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xc0e8400f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg3</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>strsel</name> <operator>==</operator> <name>H_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xc0e8500f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg3</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"0]"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_BRACKREG_CONSTBRACK</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg3</name> <init>= <expr><call><name>getregmemstart</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st32</name></type> <name>num</name> <init>= <expr><call><name>getnummemend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>strsel</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg3</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">1023</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>num</name> <operator>%</operator> <literal type="number">4</literal><operator>)</operator> <operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x40e80000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg3</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG_REG_BRACKREGBRACK</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg3</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg4</name> <init>= <expr><call><name>getregmemstartend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>strsel</name> <operator>!=</operator> <name>D_BIT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg3</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg4</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xc0e87000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg4</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else 

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"sub"</literal></expr></argument>, <argument><expr><name>S_BIT</name> <operator>|</operator> <name>W_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_CONST</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>num</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>==</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>reg2</name> <operator>==</operator> <literal type="number">14</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">256</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xdef3008f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reg2</name> <operator>==</operator> <literal type="number">13</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>==</operator> <literal type="number">13</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>W_BIT</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&lt;=</operator> <literal type="number">4096</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>%</operator> <literal type="number">4</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x80b0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>thnum</name> <init>= <expr><call><name>getthimmed12</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>W_BIT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xadf10000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>thnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xadf20000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <call><name>getthzeroimmed12</name> <argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>reg2</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>W_BIT</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x001e</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>reg1</name> <operator>==</operator> <name>reg2</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>W_BIT</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">256</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0038</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>thnum</name> <init>= <expr><call><name>getthimmed12</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>W_BIT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xa0f10000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>thnum</name></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xa0f20000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <call><name>getthzeroimmed12</name> <argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"lsl 0"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_SHIFT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>std_opt_3</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<case>case <expr><name>THUMB_REG_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg3</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>shift</name> <init>= <expr><call><name>thumb_getshift</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reg2</name> <operator>==</operator> <literal type="number">13</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xadeb0000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg3</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>shift</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>S_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>shift</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>reg1</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>reg2</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>reg3</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x001a</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>reg3</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>reg3</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xa0eb0000</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"svc"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>num</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00df</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"sxta"</literal></expr></argument>, <argument><expr><name>B_BIT</name> <operator>|</operator> <name>H_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"lsl 0"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>std_opt_3</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>shift</name> <init>= <expr><call><name>thumb_getshift</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>shift</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>shift</name> <operator>&amp;</operator> <literal type="number">0x0000f010</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x00003000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>sufsel</name> <init>= <expr><name>m</name> <operator>&amp;</operator> <operator>(</operator><name>B_BIT</name> <operator>|</operator> <name>H_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sufsel</name> <operator>==</operator> <name>B_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x40fa80f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>sufsel</name> <operator>==</operator> <operator>(</operator><name>B_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x20fa80f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>sufsel</name> <operator>==</operator> <name>H_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00fa80f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>shift</name> <operator>&amp;</operator> <literal type="number">0x00000060</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"sxt"</literal></expr></argument>, <argument><expr><name>B_BIT</name> <operator>|</operator> <name>H_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>sufsel</name> <init>= <expr><name>m</name> <operator>&amp;</operator> <operator>(</operator><name>B_BIT</name> <operator>|</operator> <name>H_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"lsl 0"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>shift</name> <init>= <expr><call><name>thumb_getshift</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>shift</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>shift</name> <operator>&amp;</operator> <literal type="number">0x0000f010</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x00003000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sufsel</name> <operator>==</operator> <name>B_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x40b2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>shift</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>std_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x4ffa80f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>sufsel</name> <operator>==</operator> <operator>(</operator><name>B_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x2ffa80f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>sufsel</name> <operator>==</operator> <name>H_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x00b2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>shift</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>std_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0ffa80f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>shift</name> <operator>&amp;</operator> <literal type="number">0x00000060</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"tb"</literal></expr></argument>, <argument><expr><name>B_BIT</name> <operator>|</operator> <name>H_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>sufsel</name> <init>= <expr><name>m</name> <operator>&amp;</operator> <operator>(</operator><name>B_BIT</name> <operator>|</operator> <name>H_BIT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_BRACKREG_REGBRACK</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getregmemstart</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getregmemend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sufsel</name> <operator>==</operator> <name>B_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xd0e800f0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"lsl 1]"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_BRACKREG_REG_SHIFTBRACK</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getregmemstart</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>shift</name> <init>= <expr><call><name>getshiftmemend</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>shift</name> <operator>!=</operator> <literal type="number">0x00004000</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>sufsel</name> <operator>!=</operator> <name>H_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xd0e810f0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"teq"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>num</name> <init>= <expr><call><name>getthimmed12</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>||</operator> <operator>(</operator><name>reg</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x90f0000f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"lsl 0"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x90ea000f</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"tst"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>num</name> <init>= <expr><call><name>getthimmed12</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>||</operator> <operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10f0000f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x0042</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>std_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"lsl 0"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10ea000f</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"uadd"</literal></expr></argument>, <argument><expr><name>EIGHT_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>EIGHT_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x80fa40f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>SIXTEEN_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x90fa40f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"uasx"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xa0fa40f0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"ubfx"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG_CONST_CONST</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>lsb</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>widthm1</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>lsb</name> <operator>&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>lsb</name><operator>)</operator> <operator>&lt;=</operator> <name>widthm1</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xc0f30000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>lsb</name> <operator>&amp;</operator> <literal type="number">0x1c</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>lsb</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>widthm1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"udiv"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xb0fbf0f0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"uhadd"</literal></expr></argument>, <argument><expr><name>EIGHT_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>sufsel</name> <init>= <expr><name>m</name> <operator>&amp;</operator> <operator>(</operator><name>EIGHT_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sufsel</name> <operator>==</operator> <name>EIGHT_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x80fa60f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else 

if <condition>(<expr><name>sufsel</name> <operator>==</operator> <name>SIXTEEN_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x90fa60f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"uhasx"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xa0fa60f0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"uhsax"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xe0fa60f0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"uhsub"</literal></expr></argument>, <argument><expr><name>EIGHT_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>sufsel</name> <init>= <expr><name>m</name> <operator>&amp;</operator> <operator>(</operator><name>EIGHT_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sufsel</name> <operator>==</operator> <name>EIGHT_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xc0fa60f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else 

if <condition>(<expr><name>sufsel</name> <operator>==</operator> <name>SIXTEEN_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xd0fa60f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"umaal"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg3</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg4</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg3</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg4</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xe0fb6000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg3</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg4</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"umlal"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg3</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg4</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg3</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg4</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xe0fb0000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg3</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg4</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"umull"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg3</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg4</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg3</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg4</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xa0fb0000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg3</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg4</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"uqadd"</literal></expr></argument>, <argument><expr><name>EIGHT_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>sufsel</name> <init>= <expr><name>m</name> <operator>&amp;</operator> <operator>(</operator><name>EIGHT_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sufsel</name> <operator>==</operator> <name>EIGHT_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x80fa50f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else 

if <condition>(<expr><name>sufsel</name> <operator>==</operator> <name>SIXTEEN_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x90fa50f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"uqasx"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xa0fa50f0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"uqsax"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xe0fa50f0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"uqsub"</literal></expr></argument>, <argument><expr><name>EIGHT_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>sufsel</name> <init>= <expr><name>m</name> <operator>&amp;</operator> <operator>(</operator><name>EIGHT_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sufsel</name> <operator>==</operator> <name>EIGHT_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xc0fa50f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else 

if <condition>(<expr><name>sufsel</name> <operator>==</operator> <name>SIXTEEN_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xd0fa50f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"usad8"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x70fb00f0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"usada8"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg3</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg4</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg3</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg4</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x70fb0000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg3</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg4</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"usat"</literal></expr></argument>, <argument><expr><name>SIXTEEN_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_CONST_REG</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>SIXTEEN_BIT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>num</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xa0f30000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>num</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"lsl 0"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_CONST_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>num</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>shift</name> <init>= <expr><call><name>thumb_getshift</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>m</name> <operator>&amp;</operator> <name>SIXTEEN_BIT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>shift</name> <operator>&amp;</operator> <literal type="number">0x00001000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x80f30000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>shift</name> <operator>&amp;</operator> <literal type="number">0x00002000</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>shift</name> <operator>&amp;</operator> <literal type="number">0x0000c070</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"usax"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xe0fa40f0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"usub"</literal></expr></argument>, <argument><expr><name>EIGHT_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>sufsel</name> <init>= <expr><name>m</name> <operator>&amp;</operator> <operator>(</operator><name>EIGHT_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sufsel</name> <operator>==</operator> <name>EIGHT_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xc0fa40f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else 

if <condition>(<expr><name>sufsel</name> <operator>==</operator> <name>SIXTEEN_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xd0fa40f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"uxta"</literal></expr></argument>, <argument><expr><name>B_BIT</name> <operator>|</operator> <name>H_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>sufsel</name> <init>= <expr><name>m</name> <operator>&amp;</operator> <operator>(</operator><name>B_BIT</name> <operator>|</operator> <name>H_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>std_opt_2</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"lsl 0"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>std_opt_3</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>shift</name> <init>= <expr><call><name>thumb_getshift</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>shift</name> <operator>&amp;</operator> <literal type="number">0x0000f010</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x00003000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sufsel</name> <operator>==</operator> <name>B_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x50fa80f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>sufsel</name> <operator>==</operator> <operator>(</operator><name>B_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x30fa80f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>sufsel</name> <operator>==</operator> <name>H_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10fa80f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>shift</name> <operator>&amp;</operator> <literal type="number">0x00000060</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>std_32bit_3reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"uxt"</literal></expr></argument>, <argument><expr><name>B_BIT</name> <operator>|</operator> <name>H_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>sufsel</name> <init>= <expr><name>m</name> <operator>&amp;</operator> <operator>(</operator><name>B_BIT</name> <operator>|</operator> <name>H_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_REG_REG</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sufsel</name> <operator>==</operator> <name>B_BIT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>sufsel</name> <operator>==</operator> <name>H_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sufsel</name> <operator>==</operator> <name>B_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xc0b2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x80b2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>std_16bit_2reg</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"lsl 0"</literal></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>THUMB_REG_REG_SHIFT</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>reg2</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>shift</name> <init>= <expr><call><name>thumb_getshift</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg1</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reg2</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>shift</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>shift</name> <operator>&amp;</operator> <literal type="number">0x0000f010</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x00003000</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sufsel</name> <operator>==</operator> <name>B_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x5ffa80f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>sufsel</name> <operator>==</operator> <operator>(</operator><name>B_BIT</name> <operator>|</operator> <name>SIXTEEN_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x3ffa80f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><name>sufsel</name> <operator>==</operator> <name>H_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x1ffa80f0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>shift</name> <operator>&amp;</operator> <literal type="number">0x00000060</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"wfe"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_NONE</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xaff30280</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x20bf</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"wfi"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_NONE</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xaff30380</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x30bf</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>opmask</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"yield"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>argt</name> <init>= <expr><call><name>thumb_selector</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>THUMB_NONE</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>DOTW_BIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xaff30180</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x10bf</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>findyz</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">0xff</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">0xf</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name>i</name> <operator>&lt;&lt;</operator> <name>j</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <name>x</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>x</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>z</name> <operator>=</operator> <literal type="number">16</literal> <operator>-</operator> <operator>(</operator><name>j</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>arm_assemble</name><parameter_list>(<parameter><decl><type><name>ArmOpcode</name> <modifier>*</modifier></type><name>ao</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>reg</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coproc</name></decl>, <decl><type ref="prev"/><name>opc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>rex</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>, <decl><type ref="prev"/><name>low</name></decl>, <decl><type ref="prev"/><name>high</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arm_opcode_cond</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TYPE_BKP</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TYPE_MEM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"strex"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rex</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"str"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"ldr"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"0"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>getrange</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getrange</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getrange</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>rn</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>rn</name></expr></argument>, <argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r0</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>r0</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>r0</name></expr></argument> &gt;</argument_list></name> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>r1</name> <operator>&gt;</operator> <literal type="number">15</literal> <operator>||</operator> <name>r1</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>r0</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"strd"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r1</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>r1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bracket</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bracket</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>bracket</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"strh"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>r1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rex</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>r1</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>r1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rex</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>ret</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><call><name>strstr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"],"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">6</literal></expr> </then><else>: <expr><literal type="number">7</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>ret</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <call><name>getshift</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name>shift</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name>shift</name> <operator>&amp;</operator> <literal type="number">0xFF00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>low</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>high</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xfff</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rex</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><call><name>strstr</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"],"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">5</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_IMM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>getrange</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">24</literal> <operator>+</operator> <name>reg</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>+</operator> <name>reg</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_BRA</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>ao</name><operator>-&gt;</operator><name>off</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0x00800000</literal> <operator>||</operator> <name>ret</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><literal type="number">0xff800000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Branch into out of range\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>ret</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>ret</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>ret</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"This branch does not accept reg as arg\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_BKP</name></expr>:</case>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">0x70</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_BRR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>dst</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dst</name> <operator>-=</operator> <operator>(</operator><name><name>ao</name><operator>-&gt;</operator><name>off</name></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <literal type="number">0x2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xfb</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xfa</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>/=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>dst</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>dst</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>dst</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_HLT</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>o</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>o</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>o</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>o</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>o</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>n</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator><name>o</name></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>TYPE_SWI</name></expr>:</case>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_UDF</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>n</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">0xe7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>TYPE_ARI</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>imm</name> <init>= <expr><call><name>getnum</name><argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <operator>(</operator><name>imm</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>imm</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>r</name> <operator>!=</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>r</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>imm</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>imm</name> <operator>=</operator> <operator>(</operator><name>imm</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>imm</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <call><name>getshift</name><argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_SWP</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a1</name> <init>= <expr><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xe1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">0x90</literal> <operator>+</operator> <name>a1</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0xff</literal> <operator>==</operator> <operator>(</operator><operator>(</operator><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>TYPE_MOV</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmpnull</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"movs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0xb0e1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>ret</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>immed</name> <init>= <expr><call><name>getimmed8</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">0xa003</literal> <operator>|</operator> <operator>(</operator><name>immed</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator> <operator>(</operator><name>immed</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_MOVW</name></expr>:</case>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">0x3</literal> <operator>|</operator> <name>ret</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>ret</name> <operator>&amp;</operator> <literal type="number">0xf000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>ret</name> <operator>&amp;</operator> <literal type="number">0xf00</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_MOVT</name></expr>:</case>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">0x4003</literal> <operator>|</operator> <name>ret</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>ret</name> <operator>&amp;</operator> <literal type="number">0xf000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>ret</name> <operator>&amp;</operator> <literal type="number">0xf00</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_MUL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmpnull</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"mul"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>a</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>ret</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>a</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>b</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>low</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>low</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>high</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>a</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>b</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmpnull</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"smlal"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>low</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>high</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>a</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>b</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"smla"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>low</name> <operator>&gt;</operator> <literal type="number">14</literal> <operator>||</operator> <name>high</name> <operator>&gt;</operator> <literal type="number">14</literal> <operator>||</operator> <name>a</name> <operator>&gt;</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>low</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>high</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>a</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>b</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>low</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>high</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>a</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>b</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_TST</name></expr>:</case>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>&lt;=</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x50e3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>a</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><call><name>findyz</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <literal type="number">0x50e3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>z</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Parameter %d out0x3000a0e1 of range (0-255)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>a</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>b</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <call><name>getshift</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid multiplier\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_SHFT</name></expr>:</case>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>reg</name> <operator>&gt;</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>reg</name> <operator>&gt;</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>reg</name> <operator>&gt;</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_REV</name></expr>:</case>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>reg</name> <operator>&gt;</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>reg</name> <operator>&gt;</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_ENDIAN</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"le"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"be"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">0x20000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_COPROC</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>coproc</name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>coproc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>coproc</name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>coproc</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>opc</name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>opc</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>opc</name> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>reg</name> <operator>&gt;</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a3</name> <init>= <expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>coproc</name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name>a3</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>coproc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>coproc</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>coproc</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a4</name> <init>= <expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>coproc</name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>coproc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>coproc</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>coproc</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>coproc</name> <operator>=</operator> <call><name>getnum</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>coproc</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>coproc</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>coproc</name> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_CLZ</name></expr>:</case>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>reg</name> <operator>&gt;</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>getreg</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>reg</name> <operator>&gt;</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>o</name></name> <operator>|=</operator> <name>reg</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_NEG</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"0"</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ao</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>ao</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"rsbs"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arm_assemble</name> <argument_list>(<argument><expr><name>ao</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>AssembleFunction</name>)<parameter_list>(<parameter><decl><type><name>ArmOpcode</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ut64</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>AssembleFunction</name></type> <name><name>assemble</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>&amp;</operator><name>arm_assemble</name></expr>, <expr><operator>&amp;</operator><name>thumb_assemble</name></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><name>ut32</name></type> <name>armass_assemble</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thumb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ArmOpcode</name></type> <name>aop</name> <init>= <expr><block>{<expr><operator>.</operator><name>off</name> <operator>=</operator> <name>off</name></expr>}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt> <continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>tolower</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>)</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arm_opcode_parse</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>aop</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aop</name><operator>.</operator><name>off</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>thumb</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>thumb</name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>assemble</name><index>[<expr><name>thumb</name></expr>]</index></name> <operator>(</operator><operator>&amp;</operator><name>aop</name><operator>,</operator> <name>off</name><operator>,</operator> <name>buf</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>aop</name><operator>.</operator><name>o</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>thisplay</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>cmd</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>op</name> <init>= <expr><call><name>armass_assemble</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">0x1000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"[%04x] %s\n"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"rasm2 -d -b 16 -a arm %04x"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>system</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>display</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>cmd</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>op</name> <init>= <expr><call><name>armass_assemble</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">0x1000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"[%08x] %s\n"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"rasm2 -d -a arm %08x"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>system</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>thisplay</name> <argument_list>(<argument><expr><literal type="string">"ldmia r1!, {r3, r4, r5}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>thisplay</name> <argument_list>(<argument><expr><literal type="string">"stmia r1!, {r3, r4, r5}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>thisplay</name> <argument_list>(<argument><expr><literal type="string">"bkpt 12"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<expr_stmt><expr><call><name>thisplay</name><argument_list>(<argument><expr><literal type="string">"sub r1, r2, 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>thisplay</name><argument_list>(<argument><expr><literal type="string">"sub r1, r2, 4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>thisplay</name><argument_list>(<argument><expr><literal type="string">"sub r1, r2, 5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>thisplay</name><argument_list>(<argument><expr><literal type="string">"sub r1, r2, 7"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>thisplay</name><argument_list>(<argument><expr><literal type="string">"sub r3, 44"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

thisplay("mov r0, 11");

thisplay("mov r0, r2");

thisplay("mov r1, r4");

thisplay("cmp r1, r2");

thisplay("cmp r3, 44");

thisplay("nop");

thisplay("svc 15");

thisplay("add r1, r2");

thisplay("add r3, 44");

thisplay("sub r1, r2, 3");

thisplay("sub r3, 44");

thisplay("tst r3,r4");

thisplay("bx r3");

thisplay("b 33");

thisplay("b 0");

thisplay("bne 44");

thisplay("and r2,r3");

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

thisplay("ldr r1, [pc, 12]");

thisplay("ldr r1, [sp, 24]");

thisplay("ldr r1, [r2, r3]");

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

0: 8991 ldrh r1, [r2, #12]

2: 7b11 ldrb r1, [r2, #12]

4: 8191 strh r1, [r2, #12]

6: 7311 strb r1, [r2, #12]

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>thisplay</name><argument_list>(<argument><expr><literal type="string">"ldrh r1, [r2, 8]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>thisplay</name><argument_list>(<argument><expr><literal type="string">"ldrh r1, [r3, 8]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>thisplay</name><argument_list>(<argument><expr><literal type="string">"ldrh r1, [r4, 16]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>thisplay</name><argument_list>(<argument><expr><literal type="string">"ldrh r1, [r2, 32]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>thisplay</name><argument_list>(<argument><expr><literal type="string">"ldrb r1, [r2, 20]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>thisplay</name><argument_list>(<argument><expr><literal type="string">"strh r1, [r2, 20]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>thisplay</name><argument_list>(<argument><expr><literal type="string">"strb r1, [r2, 20]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>thisplay</name><argument_list>(<argument><expr><literal type="string">"str r1, [sp, 20]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>thisplay</name><argument_list>(<argument><expr><literal type="string">"str r1, [r2, 12]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>thisplay</name><argument_list>(<argument><expr><literal type="string">"str r1, [r2, r3]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

display("mov r0, 33");

display("mov r1, 33");

display("movne r0, 33");

display("tst r0, r1, lsl #2");

display("svc 0x80");

display("sub r3, r1, r2");

display("add r0, r1, r2");

display("mov fp, 0");

display("pop {pc}");

display("pop {r3}");

display("bx r1");

display("bx r3");

display("bx pc");

display("blx fp");

display("pop {pc}");

display("add lr, pc, lr");

display("adds r3, #8");

display("adds r3, r2, #8");

display("subs r2, #1");

display("cmp r0, r4");

display("cmp r7, pc");

display("cmp r1, r3");

display("mov pc, 44");

display("mov pc, r3");

display("push {pc}");

display("pop {pc}");

display("nop");

display("ldr r1, [r2, 33]");

display("ldr r1, [r2, r3]");

display("ldr r3, [r4, r6]");

display("str r1, [pc, 33]");

display("str r1, [pc], 2");

display("str r1, [pc, 3]");

display("str r1, [pc, r4]");

display("bx r3");

display("bcc 33");

display("blx r3");

display("bne 0x1200");

display("str r0, [r1]");

display("push {fp,lr}");

display("pop {fp,lr}");

display("pop {pc}");

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>display</name><argument_list>(<argument><expr><literal type="string">"andeq r7, r4, r0, lsr lr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>display</name><argument_list>(<argument><expr><literal type="string">"andeq r6, r3, r0, ror lr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>display</name><argument_list>(<argument><expr><literal type="string">"pop {r4,r5,r6,r7,pc}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

display("blx r1");

display("blx 0x8048");

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

display("b 0x123");

display("bl 0x123");

display("blt 0x123"); 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
