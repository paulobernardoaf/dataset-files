<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\asm\arch\arm\gnu\floatformat.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>FLOATFORMAT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOATFORMAT_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ansidecl.h"</cpp:file></cpp:include>

<enum>enum <name>floatformat_byteorders</name> <block>{

<decl><name>floatformat_little</name></decl>,

<decl><name>floatformat_big</name></decl>,

<decl><name>floatformat_littlebyte_bigword</name></decl>,

<decl><name>floatformat_vax</name></decl>

}</block>;</enum>

<enum>enum <name>floatformat_intbit</name> <block>{ <decl><name>floatformat_intbit_yes</name></decl>, <decl><name>floatformat_intbit_no</name></decl> }</block>;</enum>

<struct>struct <name>floatformat</name>

<block>{

<decl_stmt><decl><type><name><name>enum</name> <name>floatformat_byteorders</name></name></type> <name>byteorder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>totalsize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sign_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>exp_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>exp_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>exp_bias</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>exp_nan</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>man_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>man_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>floatformat_intbit</name></name></type> <name>intbit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>is_valid</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name> <modifier>*</modifier></type><name>split_half</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name></type> <name>floatformat_ieee_half_big</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name></type> <name>floatformat_ieee_half_little</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name></type> <name>floatformat_ieee_single_big</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name></type> <name>floatformat_ieee_single_little</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name></type> <name>floatformat_ieee_double_big</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name></type> <name>floatformat_ieee_double_little</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name></type> <name>floatformat_ieee_double_littlebyte_bigword</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name></type> <name>floatformat_vax_f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name></type> <name>floatformat_vax_d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name></type> <name>floatformat_vax_g</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name></type> <name>floatformat_i387_ext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name></type> <name>floatformat_m68881_ext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name></type> <name>floatformat_i960_ext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name></type> <name>floatformat_m88110_ext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name></type> <name>floatformat_m88110_harris_ext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name></type> <name>floatformat_arm_ext_big</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name></type> <name>floatformat_arm_ext_littlebyte_bigword</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name></type> <name>floatformat_ia64_spill_big</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name></type> <name>floatformat_ia64_spill_little</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name></type> <name>floatformat_ia64_quad_big</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name></type> <name>floatformat_ia64_quad_little</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name></type> <name>floatformat_ibm_long_double_big</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name></type> <name>floatformat_ibm_long_double_little</name></decl>;</decl_stmt>

<function_decl><type><specifier>extern</specifier> <name>void</name></type>

<name>floatformat_to_double</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type>

<name>floatformat_from_double</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type>

<name>floatformat_is_valid</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>floatformat</name></name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
