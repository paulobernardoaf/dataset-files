<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\crypto\p\crypto_serpent_algo.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crypto_serpent_algo.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut8</name></type> <name><name>S</name><index>[]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>,<expr><literal type="number">15</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">13</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">12</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="number">15</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">14</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>,<expr><literal type="number">13</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">3</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><literal type="number">14</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">11</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>,<expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>,<expr><literal type="number">14</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><literal type="number">15</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">11</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr>,<expr><literal type="number">13</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>,<expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>,<expr><literal type="number">14</literal></expr>, <expr><literal type="number">8</literal></expr>,<expr><literal type="number">13</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">14</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">13</literal></expr>, <expr><literal type="number">3</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">14</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>,<expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut8</name></type> <name><name>Sinv</name><index>[]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">3</literal></expr>,<expr><literal type="number">11</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><literal type="number">14</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>,<expr><literal type="number">15</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">15</literal></expr>, <expr><literal type="number">6</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">3</literal></expr>,<expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">15</literal></expr>, <expr><literal type="number">4</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">14</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>,<expr><literal type="number">13</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">7</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>,<expr><literal type="number">13</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>,<expr><literal type="number">15</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr>,<expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">11</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">8</literal></expr>,<expr><literal type="number">15</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">11</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="number">15</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>,<expr><literal type="number">11</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>,<expr><literal type="number">13</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">15</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut8</name></type> <name><name>IPTable</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">99</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">102</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">71</literal></expr>, <expr><literal type="number">103</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">104</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">105</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">74</literal></expr>, <expr><literal type="number">106</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><literal type="number">107</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">108</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><literal type="number">111</literal></expr>,

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">114</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">83</literal></expr>, <expr><literal type="number">115</literal></expr>,

<expr><literal type="number">20</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">116</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><literal type="number">117</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">118</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">119</literal></expr>,

<expr><literal type="number">24</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">89</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">123</literal></expr>,

<expr><literal type="number">28</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">93</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">94</literal></expr>, <expr><literal type="number">126</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">95</literal></expr>, <expr><literal type="number">127</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ut8</name></type> <name><name>FPTable</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">60</literal></expr>,

<expr><literal type="number">64</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">104</literal></expr>, <expr><literal type="number">108</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">116</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">124</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">61</literal></expr>,

<expr><literal type="number">65</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><literal type="number">89</literal></expr>, <expr><literal type="number">93</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">105</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="number">117</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">125</literal></expr>,

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">62</literal></expr>,

<expr><literal type="number">66</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">74</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">94</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">102</literal></expr>, <expr><literal type="number">106</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">114</literal></expr>, <expr><literal type="number">118</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="number">126</literal></expr>,

<expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">63</literal></expr>,

<expr><literal type="number">67</literal></expr>, <expr><literal type="number">71</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><literal type="number">83</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">95</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">115</literal></expr>, <expr><literal type="number">119</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">127</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rotr</name><parameter_list>(<parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>x</name> <operator>&gt;&gt;</operator> <name>s</name><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>*</operator><name>x</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>s</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rotl</name><parameter_list>(<parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>x</name> <operator>&lt;&lt;</operator> <name>s</name><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>*</operator><name>x</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>s</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut8</name></type> <name>apply_sbox</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>si</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>S</name><index>[<expr><name>si</name></expr>]</index><index>[<expr><name>x</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut8</name></type> <name>apply_sbox_inv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>si</name></decl></parameter>, <parameter><decl><type><name>ut8</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>Sinv</name><index>[<expr><name>si</name></expr>]</index><index>[<expr><name>x</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ut8</name></type> <name>get_bit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name><argument_list>(<argument><expr><literal type="string">"Wrong bit asked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>input</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>apply_IP</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name><name>in</name><index>[<expr><name>DW_BY_BLOCK</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name><name>out</name><index>[<expr><name>DW_BY_BLOCK</name></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DW_BY_BLOCK</name><operator>*</operator><literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>IPTable</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>/</operator><literal type="number">32</literal></expr>]</index></name> <operator>^=</operator> <operator>(</operator><operator>-</operator><operator>(</operator><name>ut32</name><operator>)</operator><call><name>get_bit</name> <argument_list>(<argument><expr><name>index</name><operator>%</operator><literal type="number">32</literal></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>index</name><operator>/</operator><literal type="number">32</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>out</name><index>[<expr><name>i</name><operator>/</operator><literal type="number">32</literal></expr>]</index></name><operator>)</operator>

<operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>apply_FP</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name><name>in</name><index>[<expr><name>DW_BY_BLOCK</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name><name>out</name><index>[<expr><name>DW_BY_BLOCK</name></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DW_BY_BLOCK</name><operator>*</operator><literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>FPTable</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>/</operator><literal type="number">32</literal></expr>]</index></name> <operator>^=</operator> <operator>(</operator><operator>-</operator><operator>(</operator><name>ut32</name><operator>)</operator><call><name>get_bit</name> <argument_list>(<argument><expr><name>index</name><operator>%</operator><literal type="number">32</literal></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>index</name><operator>/</operator><literal type="number">32</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>out</name><index>[<expr><name>i</name><operator>/</operator><literal type="number">32</literal></expr>]</index></name><operator>)</operator>

<operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>serpent_keyschedule</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>serpent_state</name></name></type> <name>st</name></decl></parameter>,

<parameter><decl><type><name>ut32</name></type> <name><name>subkeys</name><index>[<expr><name>NB_SUBKEYS</name><operator>*</operator><name>DW_BY_BLOCK</name></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>st</name><operator>.</operator><name>key_size</name></name> <operator>!=</operator> <literal type="number">128</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>st</name><operator>.</operator><name>key_size</name></name> <operator>!=</operator> <literal type="number">192</literal><operator>)</operator> 

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>st</name><operator>.</operator><name>key_size</name></name> <operator>!=</operator> <literal type="number">256</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Invalid key size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name><name>tmpkeys</name><index>[<expr><name>DW_BY_BLOCK</name><operator>*</operator><name>NB_SUBKEYS</name><operator>+</operator><name>DW_BY_USERKEY</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>phi</name> <init>= <expr><literal type="number">0x9e3779b9</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>in</name></decl>, <decl><type ref="prev"/><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>st</name><operator>.</operator><name>key_size</name></name><operator>/</operator><literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>tmpkeys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>.</operator><name>key_size</name></name> <operator>!=</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tmpkeys</name><index>[<expr><name><name>st</name><operator>.</operator><name>key_size</name></name><operator>/</operator><literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><name>DW_BY_USERKEY</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_SUBKEYS</name><operator>*</operator><name>DW_BY_BLOCK</name><operator>+</operator><name>DW_BY_USERKEY</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>tmpkeys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tmpkeys</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">8</literal></expr>]</index></name> <operator>^</operator> <name><name>tmpkeys</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">5</literal></expr>]</index></name> <operator>^</operator> <name><name>tmpkeys</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name><name>tmpkeys</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>

<operator>^</operator> <name>phi</name> <operator>^</operator> <operator>(</operator><name>i</name><operator>-</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rotl</name> <argument_list>(<argument><expr><name>tmpkeys</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_SUBKEYS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>si</name> <operator>=</operator> <operator>(</operator><literal type="number">32</literal> <operator>+</operator> <literal type="number">3</literal> <operator>-</operator> <name>i</name><operator>)</operator> <operator>%</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>NIBBLES_BY_SUBKEY</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>get_bit</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>tmpkeys</name><index>[<expr><literal type="number">0</literal><operator>+</operator><name>DW_BY_BLOCK</name><operator>*</operator><name>i</name><operator>+</operator><name>DW_BY_USERKEY</name></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>|</operator> <call><name>get_bit</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>tmpkeys</name><index>[<expr><literal type="number">1</literal><operator>+</operator><name>DW_BY_BLOCK</name><operator>*</operator><name>i</name><operator>+</operator><name>DW_BY_USERKEY</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal>

<operator>|</operator> <call><name>get_bit</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>tmpkeys</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>DW_BY_BLOCK</name><operator>*</operator><name>i</name><operator>+</operator><name>DW_BY_USERKEY</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal>

<operator>|</operator> <call><name>get_bit</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>tmpkeys</name><index>[<expr><literal type="number">3</literal><operator>+</operator><name>DW_BY_BLOCK</name><operator>*</operator><name>i</name><operator>+</operator><name>DW_BY_USERKEY</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>apply_sbox</name> <argument_list>(<argument><expr><name>si</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>DW_BY_BLOCK</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>subkeys</name><index>[<expr><name>l</name><operator>+</operator><name>DW_BY_BLOCK</name><operator>*</operator><name>i</name></expr>]</index></name> <operator>|=</operator> <call><name>get_bit</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name>out</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_SUBKEYS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>apply_IP</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>subkeys</name><index>[<expr><name>i</name><operator>*</operator><name>DW_BY_BLOCK</name></expr>]</index></name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name><name>tmpkeys</name><index>[<expr><name>DW_BY_USERKEY</name> <operator>+</operator> <name>i</name><operator>*</operator><name>DW_BY_BLOCK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>subkeys</name></expr></argument>, <argument><expr><name>tmpkeys</name> <operator>+</operator> <name>DW_BY_USERKEY</name></expr></argument>, <argument><expr><literal type="number">132</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ut32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>apply_xor</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name><name>block</name><index>[<expr><name>DW_BY_BLOCK</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name><name>subkey</name><index>[<expr><name>DW_BY_BLOCK</name></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DW_BY_BLOCK</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>subkey</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>apply_permut</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name><name>block</name><index>[<expr><name>DW_BY_BLOCK</name></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name><name>tmp_block</name><index>[<expr><name>DW_BY_BLOCK</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>apply_FP</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>tmp_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rotl</name> <argument_list>(<argument><expr><name>tmp_block</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rotl</name> <argument_list>(<argument><expr><name>tmp_block</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>tmp_block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <name><name>tmp_block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>tmp_block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp_block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^=</operator> <name><name>tmp_block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>tmp_block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rotl</name> <argument_list>(<argument><expr><name>tmp_block</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rotl</name> <argument_list>(<argument><expr><name>tmp_block</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp_block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <name><name>tmp_block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>tmp_block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp_block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^=</operator> <name><name>tmp_block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>tmp_block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rotl</name> <argument_list>(<argument><expr><name>tmp_block</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rotl</name> <argument_list>(<argument><expr><name>tmp_block</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_IP</name> <argument_list>(<argument><expr><name>tmp_block</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>apply_permut_inv</name><parameter_list>(<parameter><decl><type><name>ut32</name></type> <name><name>block</name><index>[<expr><name>DW_BY_BLOCK</name></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name><name>tmp_block</name><index>[<expr><name>DW_BY_BLOCK</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>apply_FP</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>tmp_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rotr</name> <argument_list>(<argument><expr><name>tmp_block</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rotr</name> <argument_list>(<argument><expr><name>tmp_block</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp_block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^=</operator> <name><name>tmp_block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>tmp_block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp_block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <name><name>tmp_block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>tmp_block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rotr</name> <argument_list>(<argument><expr><name>tmp_block</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rotr</name> <argument_list>(<argument><expr><name>tmp_block</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp_block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^=</operator> <name><name>tmp_block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>tmp_block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp_block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <name><name>tmp_block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>tmp_block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rotr</name> <argument_list>(<argument><expr><name>tmp_block</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rotr</name> <argument_list>(<argument><expr><name>tmp_block</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_IP</name> <argument_list>(<argument><expr><name>tmp_block</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>apply_round</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>round</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name><name>block</name><index>[<expr><name>DW_BY_BLOCK</name></expr>]</index></name></decl></parameter>, 

<parameter><decl><type><name>ut32</name></type> <name><name>subkeys</name><index>[<expr><name>DW_BY_BLOCK</name><operator>*</operator><name>NB_SUBKEYS</name></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>apply_xor</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>subkeys</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>round</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DW_BY_BLOCK</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <call><name>apply_sbox</name> <argument_list>(<argument><expr><name>round</name><operator>%</operator><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>*</operator><name>j</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>*</operator><name>j</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <name>NB_ROUNDS</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>apply_xor</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>subkeys</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><operator>(</operator><name>round</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>apply_permut</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>apply_round_inv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>round</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name><name>block</name><index>[<expr><name>DW_BY_BLOCK</name></expr>]</index></name></decl></parameter>, 

<parameter><decl><type><name>ut32</name></type> <name><name>subkeys</name><index>[<expr><name>DW_BY_BLOCK</name><operator>*</operator><name>NB_SUBKEYS</name></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <name>NB_ROUNDS</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>apply_xor</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>subkeys</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><operator>(</operator><name>round</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>apply_permut_inv</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>res</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DW_BY_BLOCK</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <call><name>apply_sbox_inv</name> <argument_list>(<argument><expr><name>round</name><operator>%</operator><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>*</operator><name>j</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>*</operator><name>j</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>apply_xor</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>subkeys</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>round</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>serpent_encrypt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>serpent_state</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name><name>in</name><index>[<expr><name>DW_BY_BLOCK</name></expr>]</index></name></decl></parameter>, 

<parameter><decl><type><name>ut32</name></type> <name><name>out</name><index>[<expr><name>DW_BY_BLOCK</name></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name><name>subkeys</name><index>[<expr><name>DW_BY_BLOCK</name><operator>*</operator><name>NB_SUBKEYS</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name><name>tmp_block</name><index>[<expr><name>DW_BY_BLOCK</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>serpent_keyschedule</name> <argument_list>(<argument><expr><operator>*</operator><name>st</name></expr></argument>, <argument><expr><name>subkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_IP</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>tmp_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_ROUNDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>apply_round</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>tmp_block</name></expr></argument>, <argument><expr><name>subkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>apply_FP</name> <argument_list>(<argument><expr><name>tmp_block</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>serpent_decrypt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>serpent_state</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name><name>in</name><index>[<expr><name>DW_BY_BLOCK</name></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>ut32</name></type> <name><name>out</name><index>[<expr><name>DW_BY_BLOCK</name></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name><name>subkeys</name><index>[<expr><name>DW_BY_BLOCK</name><operator>*</operator><name>NB_SUBKEYS</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name><name>tmp_block</name><index>[<expr><name>DW_BY_BLOCK</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>serpent_keyschedule</name> <argument_list>(<argument><expr><operator>*</operator><name>st</name></expr></argument>, <argument><expr><name>subkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_IP</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>tmp_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>NB_ROUNDS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>apply_round_inv</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>tmp_block</name></expr></argument>, <argument><expr><name>subkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>apply_FP</name> <argument_list>(<argument><expr><name>tmp_block</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
