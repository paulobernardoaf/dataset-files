<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\crypto\crypto.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_crypto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>R_LIB_VERSION</name> <argument_list>(<argument><expr><name>r_crypto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>bit</name></decl>;</decl_stmt>

}</block> <decl><name><name>crypto_name_bytes</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"all"</literal></expr>, <expr><name>UT64_MAX</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rc2"</literal></expr>, <expr><name>R_CRYPTO_RC2</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rc4"</literal></expr>, <expr><name>R_CRYPTO_RC4</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rc6"</literal></expr>, <expr><name>R_CRYPTO_RC6</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"aes-ecb"</literal></expr>, <expr><name>R_CRYPTO_AES_ECB</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"aes-cbc"</literal></expr>, <expr><name>R_CRYPTO_AES_CBC</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ror"</literal></expr>, <expr><name>R_CRYPTO_ROR</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rol"</literal></expr>, <expr><name>R_CRYPTO_ROL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rot"</literal></expr>, <expr><name>R_CRYPTO_ROT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"blowfish"</literal></expr>, <expr><name>R_CRYPTO_BLOWFISH</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cps2"</literal></expr>, <expr><name>R_CRYPTO_CPS2</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"des-ecb"</literal></expr>, <expr><name>R_CRYPTO_DES_ECB</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"xor"</literal></expr>, <expr><name>R_CRYPTO_XOR</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"serpent-ecb"</literal></expr>, <expr><name>R_CRYPTO_SERPENT</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>

}</block></expr></init></decl>;</struct>

<function><type><name>R_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r_crypto_name</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>bit</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>crypto_name_bytes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bit</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bit</name> <operator>&amp;</operator> <name><name>crypto_name_bytes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bit</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>crypto_name_bytes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="string">""</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>RCryptoPlugin</name> <modifier>*</modifier></type><name><name>crypto_static_plugins</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>R_CRYPTO_STATIC_PLUGINS</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>R_API</name> <name>RCrypto</name> <modifier>*</modifier></type><name>r_crypto_init</name><parameter_list>(<parameter><decl><type><name>RCrypto</name> <modifier>*</modifier></type><name>cry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hard</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cry</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cry</name><operator>-&gt;</operator><name>iv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cry</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cry</name><operator>-&gt;</operator><name>key_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cry</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hard</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_crypto_get_output</name> <argument_list>(<argument><expr><name>cry</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cry</name><operator>-&gt;</operator><name>plugins</name></name> <operator>=</operator> <call><name>r_list_newf</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>crypto_static_plugins</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RCryptoPlugin</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RCryptoPlugin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>crypto_static_plugins</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>RCryptoPlugin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_crypto_add</name> <argument_list>(<argument><expr><name>cry</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>cry</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_crypto_add</name><parameter_list>(<parameter><decl><type><name>RCrypto</name> <modifier>*</modifier></type><name>cry</name></decl></parameter>, <parameter><decl><type><name>RCryptoPlugin</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name><name>cry</name><operator>-&gt;</operator><name>plugins</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_crypto_del</name><parameter_list>(<parameter><decl><type><name>RCrypto</name> <modifier>*</modifier></type><name>cry</name></decl></parameter>, <parameter><decl><type><name>RCryptoPlugin</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_delete_data</name> <argument_list>(<argument><expr><name><name>cry</name><operator>-&gt;</operator><name>plugins</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name><name>struct</name> <name>r_crypto_t</name></name> <modifier>*</modifier></type><name>r_crypto_new</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCrypto</name> <modifier>*</modifier></type><name>cry</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RCrypto</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_crypto_init</name> <argument_list>(<argument><expr><name>cry</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name><name>struct</name> <name>r_crypto_t</name></name> <modifier>*</modifier></type><name>r_crypto_as_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_crypto_t</name></name> <modifier>*</modifier></type><name>cry</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCrypto</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>RCrypto</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_crypto_init</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>plugins</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cry</name><operator>-&gt;</operator><name>plugins</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>cry</name><operator>-&gt;</operator><name>plugins</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name><name>struct</name> <name>r_crypto_t</name></name> <modifier>*</modifier></type><name>r_crypto_free</name><parameter_list>(<parameter><decl><type><name>RCrypto</name> <modifier>*</modifier></type><name>cry</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name><name>cry</name><operator>-&gt;</operator><name>plugins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>cry</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>cry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>cry</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_crypto_use</name><parameter_list>(<parameter><decl><type><name>RCrypto</name> <modifier>*</modifier></type><name>cry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>algo</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCryptoPlugin</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>cry-&gt;plugins</argument>, <argument>iter</argument>, <argument>h</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>use</name></name> <operator>&amp;&amp;</operator> <call><name><name>h</name><operator>-&gt;</operator><name>use</name></name> <argument_list>(<argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cry</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cry</name><operator>-&gt;</operator><name>key_len</name></name> <operator>=</operator> <call><name><name>h</name><operator>-&gt;</operator><name>get_key_size</name></name> <argument_list>(<argument><expr><name>cry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cry</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>cry</name><operator>-&gt;</operator><name>key_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>cry</name><operator>-&gt;</operator><name>key</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_crypto_set_key</name><parameter_list>(<parameter><decl><type><name>RCrypto</name> <modifier>*</modifier></type><name>cry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>keylen</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cry</name> <operator>||</operator> <operator>!</operator><name><name>cry</name><operator>-&gt;</operator><name>h</name></name> <operator>||</operator> <operator>!</operator><name><name>cry</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>set_key</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name><name>cry</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>set_key</name></name> <argument_list>(<argument><expr><name>cry</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_crypto_get_key_size</name><parameter_list>(<parameter><decl><type><name>RCrypto</name> <modifier>*</modifier></type><name>cry</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>cry</name> <operator>&amp;&amp;</operator> <name><name>cry</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;&amp;</operator> <name><name>cry</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>get_key_size</name></name><operator>)</operator></expr>?</condition><then>

<expr><call><name><name>cry</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>get_key_size</name></name> <argument_list>(<argument><expr><name>cry</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>bool</name></type> <name>r_crypto_set_iv</name><parameter_list>(<parameter><decl><type><name>RCrypto</name> <modifier>*</modifier></type><name>cry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ivlen</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>cry</name> <operator>&amp;&amp;</operator> <name><name>cry</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;&amp;</operator> <name><name>cry</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>set_iv</name></name><operator>)</operator></expr>?</condition><then>

<expr><call><name><name>cry</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>set_iv</name></name><argument_list>(<argument><expr><name>cry</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>ivlen</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_crypto_update</name><parameter_list>(<parameter><decl><type><name>RCrypto</name> <modifier>*</modifier></type><name>cry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>cry</name> <operator>&amp;&amp;</operator> <name><name>cry</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;&amp;</operator> <name><name>cry</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>update</name></name><operator>)</operator></expr>?</condition><then>

<expr><call><name><name>cry</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>update</name></name> <argument_list>(<argument><expr><name>cry</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_crypto_final</name><parameter_list>(<parameter><decl><type><name>RCrypto</name> <modifier>*</modifier></type><name>cry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>cry</name> <operator>&amp;&amp;</operator> <name><name>cry</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;&amp;</operator> <name><name>cry</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>final</name></name><operator>)</operator></expr>?</condition><then>

<expr><call><name><name>cry</name><operator>-&gt;</operator><name>h</name><operator>-&gt;</operator><name>final</name></name> <argument_list>(<argument><expr><name>cry</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_crypto_append</name><parameter_list>(<parameter><decl><type><name>RCrypto</name> <modifier>*</modifier></type><name>cry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cry</name> <operator>||</operator> <operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cry</name><operator>-&gt;</operator><name>output_len</name></name><operator>+</operator><name>len</name> <operator>&gt;</operator> <name><name>cry</name><operator>-&gt;</operator><name>output_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cry</name><operator>-&gt;</operator><name>output_size</name></name> <operator>+=</operator> <literal type="number">4096</literal> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cry</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name><name>cry</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name><name>cry</name><operator>-&gt;</operator><name>output_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>cry</name><operator>-&gt;</operator><name>output</name></name> <operator>+</operator> <name><name>cry</name><operator>-&gt;</operator><name>output_len</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cry</name><operator>-&gt;</operator><name>output_len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><name><name>cry</name><operator>-&gt;</operator><name>output_len</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>ut8</name> <modifier>*</modifier></type><name>r_crypto_get_output</name><parameter_list>(<parameter><decl><type><name>RCrypto</name> <modifier>*</modifier></type><name>cry</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cry</name><operator>-&gt;</operator><name>output_size</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>cry</name><operator>-&gt;</operator><name>output_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>cry</name><operator>-&gt;</operator><name>output_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>cry</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cry</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cry</name><operator>-&gt;</operator><name>output</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cry</name><operator>-&gt;</operator><name>output_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cry</name><operator>-&gt;</operator><name>output_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

</unit>
