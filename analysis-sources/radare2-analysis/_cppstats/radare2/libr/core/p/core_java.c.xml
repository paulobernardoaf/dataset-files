<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\core\p\core_java.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cmd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_cons.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../shlr/java/ops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../shlr/java/class.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../shlr/java/code.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../shlr/java/dsojson.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_THE_DBG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IFDBG</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IFDBG</name></cpp:macro> <cpp:value>if (DO_THE_DBG)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>found_idx_t</name> <block>{

<decl_stmt><decl><type><name>ut16</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

}</block></struct></type> <name>RCmdJavaCPResult</name>;</typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>RCMDJavaCmdHandler</name>) <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>r_cmd_java_strtok</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>r_cmd_java_consumetok</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_reload_bin_from_buf</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_json_definitions</name><parameter_list>( <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_all_definitions</name><parameter_list>( <parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_class_definitions</name><parameter_list>( <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_field_definitions</name><parameter_list>( <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_method_definitions</name><parameter_list>( <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_import_definitions</name><parameter_list>( <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_resolve_cp_idx</name> <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_resolve_cp_type</name> <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_resolve_cp_idx_b64</name> <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_resolve_cp_address</name> <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_resolve_cp_to_key</name> <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_resolve_cp_summary</name> <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_class_access_flags_value</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>flags</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_field_access_flags_value</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>flags</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_method_access_flags_value</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>flags</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_get_all_access_flags_value</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_set_acc_flags</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>num_acc_flag</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UNUSED_FUNCTION(x)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_field_summary</name> <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name> <name>_</name></type>(<name>r_cmd_java_print_field_count</name>) <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_field_name</name> <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_field_num_name</name> <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_method_summary</name> <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name> <name>_</name></type>(<name>r_cmd_java_print_method_count</name>) <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_method_name</name> <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_method_num_name</name> <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RBinJavaObj</name> <modifier>*</modifier></type> <name>r_cmd_java_get_bin_obj</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type> <name>r_cmd_java_get_bin_obj_list</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ut64</name></type> <name>r_cmd_java_get_input_num_value</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_is_valid_input_num_value</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_call</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_help</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type> <name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>input</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_set_flags</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type> <name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_prototypes</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type> <name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_resolve_cp</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type> <name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_calc_flags</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type> <name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_flags_str</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_flags_str_at</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_field_info</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_method_info</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_find_cp_const</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type> <name>cpfind_float</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type> <name>cpfind_double</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type> <name>cpfind_long</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type> <name>cpfind_int</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type> <name>cpfind_str</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpfind</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_get_cp_bytes_and_write</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_replace_cp_value_float</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_replace_cp_value_double</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_replace_cp_value_long</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_replace_cp_value_int</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_replace_cp_value_str</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_replace_cp_value</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_replace_classname_value</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>r_cmd_replace_name_def</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s_new</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>replace_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s_old</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>match_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>buf_len</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>res_len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>r_cmd_replace_name</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s_new</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>replace_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s_old</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>match_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>buf_len</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>res_len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_is_object_descriptor</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>name_len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ut32</name></type> <name>r_cmd_get_num_classname_str_occ</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>match_me</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>r_cmd_get_next_classname_str</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>match_me</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_summary_info</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_reload_bin</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_print_exceptions</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_insert_method_ref</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_yara_code_extraction_refs</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_isvalid</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_calc_class_sz</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>r_cmd_java_cms_t</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ut32</name></type> <name>name_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCMDJavaCmdHandler</name></type> <name>handler</name></decl>;</decl_stmt>

}</block></struct></type> <name>RCmdJavaCmd</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALC_SZ</name></cpp:macro> <cpp:value>"calc_sz"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALC_SZ_ARGS</name></cpp:macro> <cpp:value>" &lt;addr&gt;"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALC_SZ_DESC</name></cpp:macro> <cpp:value>"calculate class file size at location"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALC_SZ_LEN</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISVALID</name></cpp:macro> <cpp:value>"is_valid"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISVALID_ARGS</name></cpp:macro> <cpp:value>" &lt;addr&gt; &lt;sz&gt;"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISVALID_DESC</name></cpp:macro> <cpp:value>"check buffer to see if it is a valid class file"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISVALID_LEN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_ACC_FLAGS</name></cpp:macro> <cpp:value>"set_flags"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_ACC_FLAGS_ARGS</name></cpp:macro> <cpp:value>" [addr cmf &lt;value&gt;]"</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_ACC_FLAGS_DESC</name></cpp:macro> <cpp:value>"set the access flags attributes for a field or method"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_ACC_FLAGS_LEN</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTOTYPES</name></cpp:macro> <cpp:value>"prototypes"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTOTYPES_ARGS</name></cpp:macro> <cpp:value>" &lt;jaicmf&gt;"</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTOTYPES_DESC</name></cpp:macro> <cpp:value>"show in JSON, or All,Imports,Class,Methods,Fields"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTOTYPES_LEN</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESOLVE_CP</name></cpp:macro> <cpp:value>"resolve_cp"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESOLVE_CP_ARGS</name></cpp:macro> <cpp:value>" [&lt;stecadg&gt; idx]"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESOLVE_CP_DESC</name></cpp:macro> <cpp:value>"cp type or value @ idx. Summary,Type,b64Encode,Const,Addr,Dump,Gsumarize"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESOLVE_CP_LEN</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALC_FLAGS</name></cpp:macro> <cpp:value>"calc_flags"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALC_FLAGS_ARGS</name></cpp:macro> <cpp:value>" &lt;lcfm&gt; [visib.]"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALC_FLAGS_DESC</name></cpp:macro> <cpp:value>"value from access flags: ListAll, flags, Class, Field, Method"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALC_FLAGS_LEN</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS_STR_AT</name></cpp:macro> <cpp:value>"flags_str_at"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS_STR_AT_ARGS</name></cpp:macro> <cpp:value>" &lt;cfm&gt; [addr]"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS_STR_AT_DESC</name></cpp:macro> <cpp:value>"string value from access flags @ addr: Class, Field, Method"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS_STR_AT_LEN</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS_STR</name></cpp:macro> <cpp:value>"flags_str"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS_STR_ARGS</name></cpp:macro> <cpp:value>" [&lt;cfm&gt; &lt;access&gt;]"</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS_STR_DESC</name></cpp:macro> <cpp:value>"string value for the flags number: Class, Field, Method"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS_STR_LEN</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METHOD_INFO</name></cpp:macro> <cpp:value>"m_info"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METHOD_INFO_ARGS</name></cpp:macro> <cpp:value>" [&lt;p,c,s idx&gt; | &lt;n idx&gt;]"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METHOD_INFO_DESC</name></cpp:macro> <cpp:value>"method information at index (c:method+ord, s:metadata)"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METHOD_INFO_LEN</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIELD_INFO</name></cpp:macro> <cpp:value>"f_info"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIELD_INFO_ARGS</name></cpp:macro> <cpp:value>" [&lt;p,c,s idx&gt; | #idx]"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIELD_INFO_DESC</name></cpp:macro> <cpp:value>"field information at index (c:field+ord, s:metadata)"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIELD_INFO_LEN</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HELP</name></cpp:macro> <cpp:value>"help"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HELP_DESC</name></cpp:macro> <cpp:value>"displays this message"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HELP_ARGS</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HELP_LEN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIND_CP_CONST</name></cpp:macro> <cpp:value>"find_cp_const"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIND_CP_CONST_ARGS</name></cpp:macro> <cpp:value>" [a|#idx]"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIND_CP_CONST_DESC</name></cpp:macro> <cpp:value>"find references to constant CP Object in code: AllReferences"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIND_CP_CONST_LEN</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIND_CP_VALUE</name></cpp:macro> <cpp:value>"find_cp_value"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIND_CP_VALUE_ARGS</name></cpp:macro> <cpp:value>" [&lt;silfd&gt; V]"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIND_CP_VALUE_DESC</name></cpp:macro> <cpp:value>"find references to CP constants by value"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIND_CP_VALUE_LEN</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLACE_CP_VALUE</name></cpp:macro> <cpp:value>"replace_cp_value"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLACE_CP_VALUE_ARGS</name></cpp:macro> <cpp:value>" [&lt;idx&gt; V]"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLACE_CP_VALUE_DESC</name></cpp:macro> <cpp:value>"replace CP constants with value if the no resizing is required"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLACE_CP_VALUE_LEN</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLACE_CLASS_NAME</name></cpp:macro> <cpp:value>"replace_classname_value"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLACE_CLASS_NAME_ARGS</name></cpp:macro> <cpp:value>" &lt;c&gt; &lt;nc&gt;"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLACE_CLASS_NAME_DESC</name></cpp:macro> <cpp:value>"rename class name"</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLACE_CLASS_NAME_LEN</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RELOAD_BIN</name></cpp:macro> <cpp:value>"reload_bin"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RELOAD_BIN_ARGS</name></cpp:macro> <cpp:value>" addr [size]"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RELOAD_BIN_DESC</name></cpp:macro> <cpp:value>"reload and reanalyze the Java class file starting at address"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RELOAD_BIN_LEN</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUMMARY_INFO</name></cpp:macro> <cpp:value>"summary"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUMMARY_INFO_ARGS</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUMMARY_INFO_DESC</name></cpp:macro> <cpp:value>"print summary information for the current java class file"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUMMARY_INFO_LEN</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_CODE_REFS</name></cpp:macro> <cpp:value>"lcr"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_CODE_REFS_ARGS</name></cpp:macro> <cpp:value>" [addr]"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_CODE_REFS_DESC</name></cpp:macro> <cpp:value>"list all references to fields and methods in code sections"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_CODE_REFS_LEN</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_EXC</name></cpp:macro> <cpp:value>"exc"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_EXC_ARGS</name></cpp:macro> <cpp:value>" [&lt;addr&gt;]"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_EXC_DESC</name></cpp:macro> <cpp:value>"list all exceptions to fields and methods in code sections"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_EXC_LEN</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YARA_CODE_REFS</name></cpp:macro> <cpp:value>"yc_w_refs"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YARA_CODE_REFS_ARGS</name></cpp:macro> <cpp:value>" [name] [start] [count]"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YARA_CODE_REFS_DESC</name></cpp:macro> <cpp:value>"yara code bytes extraction with a name starting at &lt;start&gt; to &lt;count&gt;"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YARA_CODE_REFS_LEN</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSERT_MREF</name></cpp:macro> <cpp:value>"i_mref"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSERT_MREF_ARGS</name></cpp:macro> <cpp:value>" C M S"</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSERT_MREF_DESC</name></cpp:macro> <cpp:value>"add Method to Class with given method signature"</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSERT_MREF_LEN</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>RCmdJavaCmd</name></type> <name><name>JAVA_CMDS</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><name>HELP</name></expr>, <expr><name>HELP_ARGS</name></expr>, <expr><name>HELP_DESC</name></expr>, <expr><name>HELP_LEN</name></expr>, <expr><name>r_cmd_java_handle_help</name></expr>}</block></expr>,

<expr><block>{<expr><name>SET_ACC_FLAGS</name></expr>, <expr><name>SET_ACC_FLAGS_ARGS</name></expr>, <expr><name>SET_ACC_FLAGS_DESC</name></expr>, <expr><name>SET_ACC_FLAGS_LEN</name></expr>, <expr><name>r_cmd_java_handle_set_flags</name></expr>}</block></expr>,

<expr><block>{<expr><name>PROTOTYPES</name></expr>, <expr><name>PROTOTYPES_ARGS</name></expr>, <expr><name>PROTOTYPES_DESC</name></expr>, <expr><name>PROTOTYPES_LEN</name></expr>, <expr><name>r_cmd_java_handle_prototypes</name></expr>}</block></expr>,

<expr><block>{<expr><name>RESOLVE_CP</name></expr>, <expr><name>RESOLVE_CP_ARGS</name></expr>, <expr><name>RESOLVE_CP_DESC</name></expr>, <expr><name>RESOLVE_CP_LEN</name></expr>, <expr><name>r_cmd_java_handle_resolve_cp</name></expr>}</block></expr>,

<expr><block>{<expr><name>CALC_FLAGS</name></expr>, <expr><name>CALC_FLAGS_ARGS</name></expr>, <expr><name>CALC_FLAGS_DESC</name></expr>, <expr><name>CALC_FLAGS_LEN</name></expr>, <expr><name>r_cmd_java_handle_calc_flags</name></expr>}</block></expr>,

<expr><block>{<expr><name>FLAGS_STR_AT</name></expr>, <expr><name>FLAGS_STR_AT_ARGS</name></expr>, <expr><name>FLAGS_STR_AT_DESC</name></expr>, <expr><name>FLAGS_STR_AT_LEN</name></expr>, <expr><name>r_cmd_java_handle_flags_str_at</name></expr>}</block></expr>,

<expr><block>{<expr><name>FLAGS_STR</name></expr>, <expr><name>FLAGS_STR_ARGS</name></expr>, <expr><name>FLAGS_STR_DESC</name></expr>, <expr><name>FLAGS_STR_LEN</name></expr>, <expr><name>r_cmd_java_handle_flags_str</name></expr>}</block></expr>,

<expr><block>{<expr><name>METHOD_INFO</name></expr>, <expr><name>METHOD_INFO_ARGS</name></expr>, <expr><name>METHOD_INFO_DESC</name></expr>, <expr><name>METHOD_INFO_LEN</name></expr>, <expr><name>r_cmd_java_handle_method_info</name></expr>}</block></expr>,

<expr><block>{<expr><name>FIELD_INFO</name></expr>, <expr><name>FIELD_INFO_ARGS</name></expr>, <expr><name>FIELD_INFO_DESC</name></expr>, <expr><name>FIELD_INFO_LEN</name></expr>, <expr><name>r_cmd_java_handle_field_info</name></expr>}</block></expr>,

<expr><block>{<expr><name>FIND_CP_CONST</name></expr>, <expr><name>FIND_CP_CONST_ARGS</name></expr>, <expr><name>FIND_CP_CONST_DESC</name></expr>, <expr><name>FIND_CP_CONST_LEN</name></expr>, <expr><name>r_cmd_java_handle_find_cp_const</name></expr>}</block></expr>,

<expr><block>{<expr><name>FIND_CP_VALUE</name></expr>, <expr><name>FIND_CP_VALUE_ARGS</name></expr>, <expr><name>FIND_CP_VALUE_DESC</name></expr>, <expr><name>FIND_CP_VALUE_LEN</name></expr>, <expr><name>cpfind</name></expr>}</block></expr>,

<expr><block>{<expr><name>REPLACE_CP_VALUE</name></expr>, <expr><name>REPLACE_CP_VALUE_ARGS</name></expr>, <expr><name>REPLACE_CP_VALUE_DESC</name></expr>, <expr><name>REPLACE_CP_VALUE_LEN</name></expr>, <expr><name>r_cmd_java_handle_replace_cp_value</name></expr>}</block></expr>,

<expr><block>{<expr><name>REPLACE_CLASS_NAME</name></expr>, <expr><name>REPLACE_CLASS_NAME_ARGS</name></expr>, <expr><name>REPLACE_CLASS_NAME_DESC</name></expr>, <expr><name>REPLACE_CLASS_NAME_LEN</name></expr>, <expr><name>r_cmd_java_handle_replace_classname_value</name></expr>}</block></expr>,

<expr><block>{<expr><name>RELOAD_BIN</name></expr>, <expr><name>RELOAD_BIN_ARGS</name></expr>, <expr><name>RELOAD_BIN_DESC</name></expr>, <expr><name>RELOAD_BIN_LEN</name></expr>, <expr><name>r_cmd_java_handle_reload_bin</name></expr>}</block></expr>,

<expr><block>{<expr><name>SUMMARY_INFO</name></expr>, <expr><name>SUMMARY_INFO_ARGS</name></expr>, <expr><name>SUMMARY_INFO_DESC</name></expr>, <expr><name>SUMMARY_INFO_LEN</name></expr>, <expr><name>r_cmd_java_handle_summary_info</name></expr>}</block></expr>,

<expr><block>{<expr><name>PRINT_EXC</name></expr>, <expr><name>PRINT_EXC_ARGS</name></expr>, <expr><name>PRINT_EXC_DESC</name></expr>, <expr><name>PRINT_EXC_LEN</name></expr>, <expr><name>r_cmd_java_handle_print_exceptions</name></expr>}</block></expr>,

<expr><block>{<expr><name>YARA_CODE_REFS</name></expr>, <expr><name>YARA_CODE_REFS_ARGS</name></expr>, <expr><name>YARA_CODE_REFS_DESC</name></expr>, <expr><name>YARA_CODE_REFS_LEN</name></expr>, <expr><name>r_cmd_java_handle_yara_code_extraction_refs</name></expr>}</block></expr>,

<expr><block>{<expr><name>INSERT_MREF</name></expr>, <expr><name>INSERT_MREF_ARGS</name></expr>, <expr><name>INSERT_MREF_DESC</name></expr>, <expr><name>INSERT_MREF_LEN</name></expr>, <expr><name>r_cmd_java_handle_insert_method_ref</name></expr>}</block></expr>,

<expr><block>{<expr><name>CALC_SZ</name></expr>, <expr><name>CALC_SZ_ARGS</name></expr>, <expr><name>CALC_SZ_DESC</name></expr>, <expr><name>CALC_SZ_LEN</name></expr>, <expr><name>r_cmd_java_handle_calc_class_sz</name></expr>}</block></expr>,

<expr><block>{<expr><name>ISVALID</name></expr>, <expr><name>ISVALID_ARGS</name></expr>, <expr><name>ISVALID_DESC</name></expr>, <expr><name>ISVALID_LEN</name></expr>, <expr><name>r_cmd_java_handle_isvalid</name></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<enum>enum <block>{

<decl><name>HELP_IDX</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>SET_ACC_FLAGS_IDX</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>PROTOTYPES_IDX</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>RESOLVE_CP_IDX</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>CALC_FLAGS_IDX</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>FLAGS_STR_AT_IDX</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>FLAGS_STR_IDX</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,

<decl><name>METHOD_INFO_IDX</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,

<decl><name>FIELD_INFO_IDX</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,

<decl><name>FIND_CP_CONST_IDX</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,

<decl><name>FIND_CP_VALUE_IDX</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,

<decl><name>REPLACE_CP_VALUE_IDX</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,

<decl><name>REPLACE_CLASS_NAME_IDX</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,

<decl><name>RELOAD_BIN_IDX</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,

<decl><name>SUMMARY_INFO_IDX</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,

<decl><name>LIST_CODE_REFS_IDX</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,

<decl><name>PRINT_EXC_IDX</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

<decl><name>YARA_CODE_REFS_IDX</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>,

<decl><name>INSERT_MREF_IDX</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>,

<decl><name>CALC_SZ_IDX</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>,

<decl><name>ISVALID_IDX</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,

<decl><name>END_CMDS</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,

}</block>;</enum>

<function><type><specifier>static</specifier> <name>ut8</name> <name>_</name></type>(<name>r_cmd_java_obj_ref</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><name>class_name</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>name</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'L'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>name</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><operator>(</operator><name>name</name> <operator>+</operator> <name>len</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>r_cmd_get_next_classname_str</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>match_me</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>len</name> <init>= <expr><ternary><condition><expr><name>match_me</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>match_me</name></expr> ?</condition><then> <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>match_me</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <name>str</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>result</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>result</name> <operator>-</operator> <name>str</name> <operator>&lt;</operator> <name>len</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>match_me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut32</name></type> <name>r_cmd_get_num_classname_str_occ</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>match_me</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>len</name> <init>= <expr><ternary><condition><expr><name>match_me</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>match_me</name></expr> ?</condition><then> <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>match_me</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>occ</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>str</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>result</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>result</name> <operator>-</operator> <name>str</name> <operator>&lt;</operator> <name>len</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>match_me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"result: %s\n"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name><operator>+=</operator><name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>occ</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>occ</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>r_cmd_java_consumetok</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>str1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>str1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>b</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>r_cmd_java_strtok</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>str1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>str1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Looking for char (%c) in (%s) up to %d\n"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>b</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Found? for char (%c) @ %d: (%s)\n"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Found? for char (%c) @ %d: (%s)\n"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RAnal</name> <modifier>*</modifier></type> <name>get_anal</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name>core</name></expr>?</condition><then> <expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_cmd_java_print_cmd_help</name> <parameter_list>(<parameter><decl><type><name>RCmdJavaCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[*] %s %s\n[+] %s\n\n"</literal></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_help</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type> <name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>help_msg</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>END_CMDS</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>help_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"Usage:"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>help_msg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"java [cmd] [arg..] "</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>help_msg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>r_core_plugin_java</name><operator>.</operator><name>desc</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator><name>END_CMDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RCmdJavaCmd</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><operator>&amp;</operator><name><name>JAVA_CMDS</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>help_msg</name><index>[<expr><literal type="number">3</literal><operator>+</operator><operator>(</operator><name>i</name><operator>*</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>help_msg</name><index>[<expr><literal type="number">3</literal><operator>+</operator><operator>(</operator><name>i</name><operator>*</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>args</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>help_msg</name><index>[<expr><literal type="number">3</literal><operator>+</operator><operator>(</operator><name>i</name><operator>*</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>desc</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>help_msg</name><index>[<expr><literal type="number">3</literal><operator>+</operator><operator>(</operator><name>i</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_cmd_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>help_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>help_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_prototypes</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>get_anal</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><operator>(</operator><name>RBinJavaObj</name> <operator>*</operator><operator>)</operator> <call><name>r_cmd_java_get_bin_obj</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Function call made: %s\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[-] r_cmd_java: no valid java bins found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><operator>(</operator><name>cmd</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> <return>return <expr><call><name>r_cmd_java_print_method_definitions</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> <return>return <expr><call><name>r_cmd_java_print_field_definitions</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'i'</literal></expr>:</case> <return>return <expr><call><name>r_cmd_java_print_import_definitions</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> <return>return <expr><call><name>r_cmd_java_print_class_definitions</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> <return>return <expr><call><name>r_cmd_java_print_all_definitions</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'j'</literal></expr>:</case> <return>return <expr><call><name>r_cmd_java_print_json_definitions</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_summary_info</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>get_anal</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><operator>(</operator><name>RBinJavaObj</name> <operator>*</operator><operator>)</operator> <call><name>r_cmd_java_get_bin_obj</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Function call made: %s\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[-] r_cmd_java: no valid java bins found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Summary for %s:\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" Size 0x%"</literal><name>PFMT64x</name><literal type="string">":\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" Constants size: 0x%"</literal><name>PFMT64x</name><literal type="string">" count: %d:\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>cp_size</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>cp_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" Methods size: 0x%"</literal><name>PFMT64x</name><literal type="string">" count: %d:\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>methods_size</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>methods_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" Fields size: 0x%"</literal><name>PFMT64x</name><literal type="string">" count: %d:\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>fields_size</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>fields_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" Attributes size: 0x%"</literal><name>PFMT64x</name><literal type="string">" count: %d:\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>attrs_size</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>attrs_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" Interfaces size: 0x%"</literal><name>PFMT64x</name><literal type="string">" count: %d:\n"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>interfaces_size</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>interfaces_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>_</name></type>(<name>r_cmd_java_check_op_idx</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type><name>op_bytes</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name>op_bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>idx</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type> <name>cpfind_double</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>value</name> <init>= <expr><ternary><condition><expr><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name></expr> ?</condition><then> <expr><call><name>strtod</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">0.0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>cmd</name> <operator>&amp;&amp;</operator> <name><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>cmd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>cmd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>r_bin_java_find_cp_const_by_val</name> <argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>R_BIN_JAVA_CP_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type> <name>cpfind_float</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>value</name> <init>= <expr><ternary><condition><expr><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name></expr> ?</condition><then> <expr><call><name>atof</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">0.0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>cmd</name> <operator>&amp;&amp;</operator> <name><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>cmd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>cmd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>r_bin_java_find_cp_const_by_val</name> <argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>R_BIN_JAVA_CP_FLOAT</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type> <name>cpfind_long</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>value</name> <init>= <expr><call><name>r_cmd_java_get_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_cmd_java_is_valid_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>r_bin_java_find_cp_const_by_val</name> <argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>R_BIN_JAVA_CP_LONG</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type> <name>cpfind_int</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>value</name> <init>= <expr><operator>(</operator><name>ut32</name><operator>)</operator> <call><name>r_cmd_java_get_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_cmd_java_is_valid_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>r_bin_java_find_cp_const_by_val</name> <argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>R_BIN_JAVA_CP_INTEGER</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type> <name>cpfind_str</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Looking for str: %s (%d)\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<return>return <expr><call><name>r_bin_java_find_cp_const_by_val</name> <argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator> <name>cmd</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>R_BIN_JAVA_CP_UTF8</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cpfind</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><operator>(</operator><name>RBinJavaObj</name> <operator>*</operator><operator>)</operator> <call><name>r_cmd_java_get_bin_obj</name> <argument_list>(<argument><expr><call><name>get_anal</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>cmd</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>f_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>find_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name> <modifier>*</modifier></type><name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[-] r_cmd_java: no valid java bins found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Function call made: %s\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_cmd_java_consumetok</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f_type</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Function call made: %s\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>f_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> <expr_stmt><expr><name>find_list</name> <operator>=</operator> <call><name>cpfind_str</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case> <expr_stmt><expr><name>find_list</name> <operator>=</operator> <call><name>cpfind_int</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>r_cmd_java_consumetok</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'l'</literal></expr>:</case> <expr_stmt><expr><name>find_list</name> <operator>=</operator> <call><name>cpfind_long</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>r_cmd_java_consumetok</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> <expr_stmt><expr><name>find_list</name> <operator>=</operator> <call><name>cpfind_float</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>r_cmd_java_consumetok</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case> <expr_stmt><expr><name>find_list</name> <operator>=</operator> <call><name>cpfind_double</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>r_cmd_java_consumetok</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[-] r_cmd_java: invalid java type to search for.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></switch>

<macro><name>r_list_foreach</name> <argument_list>(<argument>find_list</argument>, <argument>iter</argument>, <argument>idx</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><call><name>r_bin_java_resolve_cp_idx_address</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>(</operator><name>ut16</name><operator>)</operator> <operator>*</operator><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Offset: 0x%"</literal><name>PFMT64x</name><literal type="string">" idx: %d\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>*</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>find_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_reload_bin_from_buf</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut8</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>r_bin_java_load_bin</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RBinPlugin</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>core-&gt;bin-&gt;plugins</argument>, <argument>iter</argument>, <argument>tmp</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><literal type="string">"java"</literal></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_get_cp_bytes_and_write</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut8</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ut64</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name> <modifier>*</modifier></type><name>cp_obj</name> <init>= <expr><call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>c_file_sz</name> <init>= <expr><call><name>r_io_size</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>n_sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c_sz</name> <init>= <expr><ternary><condition><expr><name>obj</name></expr> ?</condition><then> <expr><call><name>r_bin_java_cp_get_size</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type> <name>bytes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c_sz</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>r_bin_java_cp_get_bytes</name> <argument_list>(<argument><expr><name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_sz</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n_sz</name> <operator>&lt;</operator> <name>c_sz</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_core_shift_block</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>addr</name><operator>+</operator><name>c_sz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>n_sz</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>c_sz</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>r_io_resize</name><argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>c_file_sz</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>n_sz</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>c_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n_sz</name> <operator>&gt;</operator> <name>c_sz</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_core_extend_at</name><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>n_sz</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>c_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[X] r_cmd_java_get_cp_bytes_and_write: Failed to resize the file correctly aborting.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n_sz</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>bytes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_core_write_at</name><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator><name>bytes</name></expr></argument>, <argument><expr><name>n_sz</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>r_core_seek</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[X] r_cmd_java_get_cp_bytes_and_write: Failed to write the bytes to the file correctly aborting.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>n_file_sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type> <name>bin_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_io_use_fd</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n_file_sz</name> <operator>=</operator> <call><name>r_io_size</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bin_buffer</name> <operator>=</operator> <ternary><condition><expr><name>n_file_sz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>n_file_sz</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bin_buffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>bin_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n_file_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><name>n_file_sz</name> <operator>==</operator> <call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>,

<argument><expr><name>bin_buffer</name></expr></argument>, <argument><expr><name>n_file_sz</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_cmd_java_reload_bin_from_buf</name> <argument_list>(

<argument><expr><name>core</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>bin_buffer</name></expr></argument>, <argument><expr><name>n_file_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[X] r_cmd_java_get_cp_bytes_and_write: Failed to read the file in aborted, bin reload.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bin_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_replace_cp_value_float</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>value</name> <init>= <expr><ternary><condition><expr><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name></expr> ?</condition><then> <expr><call><name>atof</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_cmd_java_get_cp_bytes_and_write</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_replace_cp_value_double</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>value</name> <init>= <expr><ternary><condition><expr><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name></expr> ?</condition><then> <expr><call><name>strtod</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_cmd_java_get_cp_bytes_and_write</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_replace_cp_value_long</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>value</name> <init>= <expr><call><name>r_cmd_java_get_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_cmd_java_get_cp_bytes_and_write</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_replace_cp_value_int</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>value</name> <init>= <expr><operator>(</operator><name>ut32</name><operator>)</operator> <call><name>r_cmd_java_get_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_cmd_java_get_cp_bytes_and_write</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_replace_cp_value_str</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>len</name> <init>= <expr><ternary><condition><expr><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name></expr> ?</condition><then> <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cmd</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name></expr> ?</condition><then> <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_cmd_java_get_cp_bytes_and_write</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <name>cmd</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_replace_cp_value</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><operator>(</operator><name>RBinJavaObj</name> <operator>*</operator><operator>)</operator> <call><name>r_cmd_java_get_bin_obj</name> <argument_list>(<argument><expr><call><name>get_anal</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>cmd</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>cp_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Function call made: %s\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_cmd_java_consumetok</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_cmd_java_is_valid_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>r_cmd_java_get_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_cmd_java_strtok</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <operator>(</operator><name>ut16</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[-] r_cmd_java: Invalid index value.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[-] r_cmd_java: The current binary is not a Java Bin Object.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>p</name> <operator>||</operator> <operator>(</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>p</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cmd_java_print_cmd_help</name> <argument_list>(<argument><expr><name>JAVA_CMDS</name><operator>+</operator><name>REPLACE_CP_VALUE_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cp_type</name> <operator>=</operator> <call><name>r_bin_java_resolve_cp_idx_tag</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>r_bin_java_resolve_cp_idx_address</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Function call made: %s\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>cp_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_BIN_JAVA_CP_UTF8</name></expr>:</case> <return>return <expr><call><name>r_cmd_java_handle_replace_cp_value_str</name> <argument_list>(

<argument><expr><name>core</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>r_cmd_java_consumetok</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>R_BIN_JAVA_CP_INTEGER</name></expr>:</case> <return>return <expr><call><name>r_cmd_java_handle_replace_cp_value_int</name> <argument_list>(

<argument><expr><name>core</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>r_cmd_java_consumetok</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>R_BIN_JAVA_CP_LONG</name></expr>:</case> <return>return <expr><call><name>r_cmd_java_handle_replace_cp_value_long</name> <argument_list>(

<argument><expr><name>core</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>r_cmd_java_consumetok</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>R_BIN_JAVA_CP_FLOAT</name></expr>:</case> <return>return <expr><call><name>r_cmd_java_handle_replace_cp_value_float</name> <argument_list>(

<argument><expr><name>core</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>r_cmd_java_consumetok</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>R_BIN_JAVA_CP_DOUBLE</name></expr>:</case> <return>return <expr><call><name>r_cmd_java_handle_replace_cp_value_double</name> <argument_list>(

<argument><expr><name>core</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>r_cmd_java_consumetok</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[-] r_cmd_java: invalid java type to search for.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>r_cmd_replace_name_def</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s_new</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>replace_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s_old</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>match_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>buf_len</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>res_len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>fmt</name> <init>= <expr><literal type="string">"L%s;"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s_new_ref</name> <init>= <expr><ternary><condition><expr><name>s_new</name> <operator>&amp;&amp;</operator> <name>replace_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">3</literal> <operator>+</operator> <name>replace_len</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s_old_ref</name> <init>= <expr><ternary><condition><expr><name>s_old</name> <operator>&amp;&amp;</operator> <name>match_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">3</literal> <operator>+</operator> <name>match_len</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>res_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s_new_ref</name> <operator>&amp;&amp;</operator> <name>s_old_ref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>s_new_ref</name></expr></argument>, <argument><expr><name>replace_len</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>s_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>s_old_ref</name></expr></argument>, <argument><expr><name>match_len</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>s_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>r_cmd_replace_name</name> <argument_list>(<argument><expr><name>s_new_ref</name></expr></argument>, <argument><expr><name>replace_len</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_old_ref</name></expr></argument>, <argument><expr><name>match_len</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>res_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s_new_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s_old_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_is_object_descriptor</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>name_len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>found_L</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>found_Semi</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>L_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>Semi_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_name</name> <init>= <expr><name>name</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>L_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>name_len</name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr><operator>,</operator><expr><name>p_name</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_name</name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found_L</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>L_pos</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>Semi_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>name_len</name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr><operator>,</operator><expr><name>p_name</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_name</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found_Semi</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Semi_pos</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><ternary><condition><expr><name>true</name></expr> ?</condition><then> <expr><name>found_L</name> <operator>==</operator> <name>found_Semi</name> <operator>&amp;&amp;</operator> <name>found_L</name> <operator>==</operator> <name>true</name> <operator>&amp;&amp;</operator> <name>L_pos</name> <operator>&lt;</operator> <name>Semi_pos</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>r_cmd_replace_name</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s_new</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>replace_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s_old</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>match_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>buf_len</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>res_len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>num_occurrences</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>num_occurrences</name> <operator>=</operator> <call><name>r_cmd_get_num_classname_str_occ</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>s_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>res_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_occurrences</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>replace_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>s_old</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>consumed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>next</name> <init>= <expr><call><name>r_cmd_get_next_classname_str</name> <argument_list>(<argument><expr><name>buffer</name><operator>+</operator><name>consumed</name></expr></argument>, <argument><expr><name>s_old</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Replacing \"%s\" with \"%s\" in: %s\n"</literal></expr></argument>, <argument><expr><name>s_old</name></expr></argument>, <argument><expr><name>s_new</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>num_occurrences</name><operator>*</operator><name>replace_len</name> <operator>+</operator> <name>buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_occurrences</name><operator>*</operator><name>replace_len</name> <operator>+</operator> <name>buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_result</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>next</name> <operator>&amp;&amp;</operator> <name>consumed</name> <operator>&lt;</operator> <name>buf_len</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"next: \"%s\", len to: %d\n"</literal></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>next</name><operator>-</operator><name>buffer</name></expr></argument> )</argument_list></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>buffer</name> <operator>+</operator> <name>consumed</name> <operator>&lt;</operator> <name>next</name> <operator>&amp;&amp;</operator> <name>consumed</name> <operator>&lt;</operator> <name>buf_len</name></expr>;</condition> <incr><expr><name>consumed</name><operator>++</operator></expr><operator>,</operator> <expr><name>p_result</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_result</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>buffer</name> <operator>+</operator> <name>consumed</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>res_len</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>replace_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>p_result</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_result</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>s_new</name> <operator>+</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>res_len</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>consumed</name> <operator>+=</operator> <name>match_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>r_cmd_get_next_classname_str</name> <argument_list>(<argument><expr><name>buffer</name><operator>+</operator><name>consumed</name></expr></argument>, <argument><expr><name>s_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Found last occurrence of: \"%s\", remaining: %s\n"</literal></expr></argument>, <argument><expr><name>s_old</name></expr></argument>, <argument><expr><name>buffer</name><operator>+</operator><name>consumed</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"result is: \"%s\"\n"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>consumed</name> <operator>&lt;</operator> <name>buf_len</name></expr>;</condition> <incr><expr><name>consumed</name><operator>++</operator></expr><operator>,</operator> <expr><name>p_result</name><operator>++</operator></expr><operator>,</operator> <expr><operator>(</operator><operator>*</operator><name>res_len</name><operator>)</operator><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_result</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>buffer</name> <operator>+</operator> <name>consumed</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Old: %s\nNew: %s\n"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_get_class_names_from_input</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>class_name_len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>new_class_name</name></decl></parameter>, <parameter><decl><type><name>ut32</name> <modifier>*</modifier></type><name>new_class_name_len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>input</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>cmd_sz</name> <init>= <expr><ternary><condition><expr><name>input</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>input</name></expr> ?</condition><then> <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>class_name</name> <operator>||</operator> <operator>*</operator><name>class_name</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>new_class_name</name> <operator>||</operator> <operator>*</operator><name>new_class_name</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>new_class_name_len</name> <operator>||</operator> <operator>!</operator><name>class_name_len</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>new_class_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>class_name_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <name>cmd_sz</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_cmd_java_consumetok</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>cmd_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <ternary><condition><expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr> ?</condition><then> <expr><call><name>r_cmd_java_strtok</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name>end</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>!=</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>class_name_len</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>class_name</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><operator>*</operator><name>class_name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><operator>*</operator><name>class_name</name></expr></argument>, <argument><expr><operator>*</operator><name>class_name_len</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd_sz</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>class_name_len</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>cmd_sz</name></expr> ?</condition><then> <expr><name>cmd_sz</name> <operator>-</operator> <operator>*</operator><name>class_name_len</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>class_name</name> <operator>&amp;&amp;</operator> <name>cmd_sz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_cmd_java_consumetok</name> <argument_list>(<argument><expr><name>end</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>cmd_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <ternary><condition><expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr> ?</condition><then> <expr><call><name>r_cmd_java_strtok</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>end</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>cmd_sz</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name>end</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>!=</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>new_class_name_len</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>new_class_name</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><operator>*</operator><name>new_class_name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><operator>*</operator><name>new_class_name</name></expr></argument>, <argument><expr><operator>*</operator><name>new_class_name_len</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_replace_classname_value</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_name</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new_class_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>class_name_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>new_class_name_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>get_anal</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>cmd</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core</name> <operator>||</operator> <operator>!</operator><name>anal</name> <operator>||</operator> <operator>!</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Function call made: %s\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator><name>RBinJavaObj</name> <operator>*</operator><operator>)</operator> <call><name>r_cmd_java_get_bin_obj</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"The current binary is not a Java Bin Object.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_cmd_java_get_class_names_from_input</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>class_name</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>class_name_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_class_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_class_name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name> <operator>||</operator> <operator>!</operator><name>class_name</name> <operator>||</operator> <operator>!</operator><name>new_class_name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cmd_java_print_cmd_help</name> <argument_list>(<argument><expr><name>JAVA_CMDS</name><operator>+</operator><name>REPLACE_CLASS_NAME_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>new_class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;=</operator><name><name>obj</name><operator>-&gt;</operator><name>cp_count</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RBinJavaCPTypeObj</name><modifier>*</modifier></type> <name>cp_obj</name> <init>= <expr><call><name>r_bin_java_get_item_from_bin_cp_list</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type> <name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>buffer_sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cp_obj</name> <operator>&amp;&amp;</operator> <name><name>cp_obj</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>R_BIN_JAVA_CP_UTF8</name> <operator>&amp;&amp;</operator>

<name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name><name>cp_obj</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cp_utf8</name><operator>.</operator><name>length</name></name> <operator>&gt;=</operator> <name>class_name_len</name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>num_occurrences</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name><name>cp_obj</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <name><name>cp_obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>r_bin_java_cp_get_idx_bytes</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>( <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>len</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>buffer</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num_occurrences</name> <operator>=</operator> <call><name>r_cmd_get_num_classname_str_occ</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_occurrences</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>res_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_cmd_is_object_descriptor</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>r_cmd_replace_name_def</name> <argument_list>(<argument><expr><name>new_class_name</name></expr></argument>,

<argument><expr><name>new_class_name_len</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>class_name</name></expr></argument>,

<argument><expr><name>class_name_len</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>r_cmd_replace_name</name> <argument_list>(<argument><expr><name>new_class_name</name></expr></argument>,

<argument><expr><name>new_class_name_len</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>class_name</name></expr></argument>,

<argument><expr><name>class_name_len</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_cmd_java_get_cp_bytes_and_write</name> <argument_list>(

<argument><expr><name>core</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name><operator>*</operator><operator>)</operator><name>result</name></expr></argument>, <argument><expr><name>res_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"ERROR: r_cmd_java: Failed to write bytes or reload the binary.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>new_class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_reload_bin</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>get_anal</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><operator>(</operator><name>RBinJavaObj</name> <operator>*</operator><operator>)</operator> <call><name>r_cmd_java_get_bin_obj</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>cmd</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ut64</name></type> <name>buf_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type> <name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_cmd_java_consumetok</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cmd_java_print_cmd_help</name> <argument_list>(<argument><expr><name>JAVA_CMDS</name><operator>+</operator><name>RELOAD_BIN_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <ternary><condition><expr><call><name>r_cmd_java_is_valid_input_num_value</name><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>r_cmd_java_get_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_cmd_java_consumetok</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <ternary><condition><expr><call><name>r_cmd_java_is_valid_input_num_value</name><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>r_cmd_java_get_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_io_use_fd</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <call><name>r_io_size</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&amp;&amp;</operator> <name>obj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_cmd_java_reload_bin_from_buf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_find_cp_const</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr>?</condition><then> <expr><call><name>r_cmd_java_consumetok</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><operator>(</operator><name>RBinJavaObj</name> <operator>*</operator><operator>)</operator> <call><name>r_cmd_java_get_bin_obj</name> <argument_list>(<argument><expr><call><name>get_anal</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>bb_iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fn_iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCmdJavaCPResult</name> <modifier>*</modifier></type><name>cp_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>find_list</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'a'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>r_cmd_java_get_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Function call made: %s\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[-] r_cmd_java: no valid java bins found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[-] r_cmd_java: invalid command syntax.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cmd_java_print_cmd_help</name> <argument_list>(<argument><expr><name>JAVA_CMDS</name><operator>+</operator><name>FIND_CP_CONST_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[-] r_cmd_java: invalid CP Obj Index Supplied.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>find_list</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>find_list</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>core-&gt;anal-&gt;fcns</argument>, <argument>fn_iter</argument>, <argument>fcn</argument>)</argument_list></macro> <block>{<block_content>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fcn-&gt;bbs</argument>, <argument>bb_iter</argument>, <argument>bb</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>op</name> <init>= <expr><name><name>bb</name><operator>-&gt;</operator><name>op_bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cp_res</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x12</literal></expr>:</case>

<expr_stmt><expr><name>cp_res</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>idx</name> <operator>==</operator> <operator>(</operator><name>ut16</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>bb</name><operator>-&gt;</operator><name>op_bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>idx</name><operator>)</operator></expr> ?</condition><then>

<expr><call><name>R_NEW0</name><argument_list>(<argument><expr><name>RCmdJavaCPResult</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cp_res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cp_res</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name><name>bb</name><operator>-&gt;</operator><name>op_bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x13</literal></expr>:</case>

<case>case <expr><literal type="number">0x14</literal></expr>:</case>

<expr_stmt><expr><name>cp_res</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>idx</name> <operator>==</operator> <operator>(</operator><name>ut16</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>op_bytes</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>idx</name><operator>)</operator></expr> ?</condition><then>

<expr><call><name>R_NEW0</name><argument_list>(<argument><expr><name>RCmdJavaCPResult</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cp_res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cp_res</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>op_bytes</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>cp_res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cp_res</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>bb</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cp_res</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <call><name>r_bin_java_get_item_from_cp</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>cp_res</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>find_list</name></expr></argument>, <argument><expr><name>cp_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <operator>(</operator><name>ut16</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<macro><name>r_list_foreach</name> <argument_list>(<argument>find_list</argument>, <argument>iter</argument>, <argument>cp_res</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>(</operator><operator>(</operator><name>RBinJavaCPTypeMetas</name> <operator>*</operator><operator>)</operator> <name><name>cp_res</name><operator>-&gt;</operator><name>obj</name><operator>-&gt;</operator><name>metas</name><operator>-&gt;</operator><name>type_info</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"@0x%"</literal><name>PFMT64x</name><literal type="string">" idx = %d Type = %s\n"</literal></expr></argument>, <argument><expr><name><name>cp_res</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>cp_res</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if> <else>else <block>{<block_content>

<macro><name>r_list_foreach</name> <argument_list>(<argument>find_list</argument>, <argument>iter</argument>, <argument>cp_res</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"@0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cp_res</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>find_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_field_info</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>get_anal</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><operator>(</operator><name>RBinJavaObj</name> <operator>*</operator><operator>)</operator> <call><name>r_cmd_java_get_bin_obj</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Function call made: %s\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[-] r_cmd_java: no valid java bins found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>cmd</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[-] r_cmd_java: invalid command syntax.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cmd_java_print_cmd_help</name> <argument_list>(<argument><expr><name>JAVA_CMDS</name><operator>+</operator><name>FIELD_INFO_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>cmd</name><operator>)</operator> <operator>==</operator> <literal type="char">'s'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>cmd</name><operator>)</operator> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>r_cmd_java_get_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><operator>(</operator><name>cmd</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> <return>return <expr><call><name>r_cmd_java_print_field_num_name</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> <return>return <expr><call><name>r_cmd_java_print_field_summary</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'n'</literal></expr>:</case> <return>return <expr><call><name>r_cmd_java_print_field_name</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Command is (%s)\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[-] r_cmd_java: invalid command syntax.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cmd_java_print_cmd_help</name> <argument_list>(<argument><expr><name>JAVA_CMDS</name><operator>+</operator><name>FIELD_INFO_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_method_info</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>get_anal</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><operator>(</operator><name>RBinJavaObj</name> <operator>*</operator><operator>)</operator> <call><name>r_cmd_java_get_bin_obj</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Command is (%s)\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[-] r_cmd_java: no valid java bins found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>cmd</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[-] r_cmd_java: invalid command syntax.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cmd_java_print_cmd_help</name> <argument_list>(<argument><expr><name>JAVA_CMDS</name><operator>+</operator><name>METHOD_INFO_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>cmd</name><operator>)</operator> <operator>==</operator> <literal type="char">'s'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>cmd</name><operator>)</operator> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>r_cmd_java_get_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><operator>(</operator><name>cmd</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> <return>return <expr><call><name>r_cmd_java_print_method_num_name</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> <return>return <expr><call><name>r_cmd_java_print_method_summary</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'n'</literal></expr>:</case> <return>return <expr><call><name>r_cmd_java_print_method_name</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Command is (%s)\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[-] r_cmd_java: invalid command syntax.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cmd_java_print_cmd_help</name> <argument_list>(<argument><expr><name>JAVA_CMDS</name><operator>+</operator><name>METHOD_INFO_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_calc_class_sz</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>sz</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>res_size</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>,

<decl><type ref="prev"/><name>cur_fsz</name> <init>= <expr><call><name>r_io_fd_size</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><call><name>r_core_file_cur</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>tbuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>init_size</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><ternary><condition><expr><name>cmd</name></expr> ?</condition><then> <expr><call><name>r_cmd_java_consumetok</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <ternary><condition><expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <call><name>r_cmd_java_is_valid_input_num_value</name><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>r_cmd_java_get_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>UT64_MAX</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>!=</operator> <name>UT64_MAX</name> <operator>&amp;&amp;</operator> <name>sz</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Function call made: %s\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to calculate class file size @ : 0x%"</literal><name>PFMT64x</name><literal type="string">".\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <ternary><condition><expr><name>cur_fsz</name> <operator>&lt;</operator> <name>init_size</name></expr> ?</condition><then> <expr><name>cur_fsz</name></expr> </then><else>: <expr><name>init_size</name></expr></else></ternary></expr>;</expr_stmt>

<while>while <condition>(<expr><name>sz</name> <operator>&lt;=</operator> <name>cur_fsz</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tbuf</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tbuf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Memory allocation failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>tbuf</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>r_sz</name> <init>= <expr><ternary><condition><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>sz</name></expr> </then><else>: <expr><literal type="number">0LL</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r_sz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res_size</name> <operator>=</operator> <call><name>r_bin_java_calc_class_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res_size</name> <operator>!=</operator> <name>UT64_MAX</name> <operator>||</operator>

<name>r_sz</name> <operator>&lt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><name>r_sz</name> <operator>&lt;</operator> <name>sz</name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if><else>else <block>{<block_content>

<expr_stmt><expr><name>sz</name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PFMT64d</name></expr></argument>, <argument><expr><name>res_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_cmd_java_print_cmd_help</name> <argument_list>(<argument><expr><name>JAVA_CMDS</name><operator>+</operator><name>CALC_SZ_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_isvalid</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>res_size</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name> <modifier>*</modifier></type><name>tbuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>cur_fsz</name> <init>= <expr><call><name>r_io_fd_size</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><call><name>r_core_file_cur</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>sz</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><ternary><condition><expr><name>cmd</name></expr> ?</condition><then> <expr><call><name>r_cmd_java_consumetok</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name>UT64_MAX</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <ternary><condition><expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <call><name>r_cmd_java_is_valid_input_num_value</name><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>r_cmd_java_get_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>UT64_MAX</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>!=</operator> <name>UT64_MAX</name> <operator>&amp;&amp;</operator> <name>sz</name> <operator>==</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Function call made: %s\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Attempting to calculate class file size @ : 0x%"</literal><name>PFMT64x</name><literal type="string">".\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<while>while <condition>(<expr><name>sz</name> <operator>&lt;=</operator> <name>cur_fsz</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tbuf</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tbuf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Memory allocation failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>tbuf</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>r_sz</name> <init>= <expr><ternary><condition><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>sz</name></expr> </then><else>: <expr><literal type="number">0LL</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r_sz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res_size</name> <operator>=</operator> <call><name>r_bin_java_calc_class_size</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res_size</name> <operator>!=</operator> <name>UT64_MAX</name> <operator>||</operator>

<name>r_sz</name> <operator>&lt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><name>r_sz</name> <operator>&lt;</operator> <name>sz</name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>sz</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>r_str_bool</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_cmd_java_print_cmd_help</name> <argument_list>(<argument><expr><name>JAVA_CMDS</name> <operator>+</operator> <name>ISVALID_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_resolve_cp</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>get_anal</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>c_type</name> <init>= <expr><ternary><condition><expr><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name></expr> ?</condition><then> <expr><operator>*</operator><name>cmd</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>r_cmd_java_get_bin_obj</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut16</name></type> <name>idx</name> <init>= <expr><call><name>r_cmd_java_get_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Function call made: %s\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Ctype: %d (%c) RBinJavaObj points to: %p and the idx is (%s): %d\n"</literal></expr></argument>, <argument><expr><name>c_type</name></expr></argument>, <argument><expr><name>c_type</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>cmd</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>obj</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>c_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> <return>return <expr><call><name>r_cmd_java_resolve_cp_type</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> <return>return <expr><call><name>r_cmd_java_resolve_cp_idx</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'e'</literal></expr>:</case> <return>return <expr><call><name>r_cmd_java_resolve_cp_idx_b64</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> <return>return <expr><call><name>r_cmd_java_resolve_cp_address</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> <return>return <expr><call><name>r_cmd_java_resolve_cp_summary</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'k'</literal></expr>:</case> <return>return <expr><call><name>r_cmd_java_resolve_cp_to_key</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <name>c_type</name> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;=</operator><name><name>obj</name><operator>-&gt;</operator><name>cp_count</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><call><name>r_bin_java_resolve_cp_idx_address</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>str</name> <init>= <expr><call><name>r_bin_java_resolve_cp_idx_type</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"CP_OBJ Type %d = %s @ 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <name>c_type</name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;=</operator> <name><name>obj</name><operator>-&gt;</operator><name>cp_count</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_cmd_java_resolve_cp_summary</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[-] r_cmd_java: no valid java bins found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[-] r_cmd_java: invalid cp index given, must idx &gt; 1.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cmd_java_print_cmd_help</name> <argument_list>(<argument><expr><name>JAVA_CMDS</name><operator>+</operator><name>RESOLVE_CP_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_get_all_access_flags_value</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>the_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><operator>*</operator><operator>(</operator><name>cmd</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> <expr_stmt><expr><name>the_list</name> <operator>=</operator> <call><name>retrieve_all_field_access_string_and_value</name> <argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> <expr_stmt><expr><name>the_list</name> <operator>=</operator> <call><name>retrieve_all_method_access_string_and_value</name> <argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> <expr_stmt><expr><name>the_list</name> <operator>=</operator> <call><name>retrieve_all_class_access_string_and_value</name> <argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>the_list</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[-] r_cmd_java: incorrect syntax for the flags calculation.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cmd_java_print_cmd_help</name> <argument_list>(<argument><expr><name>JAVA_CMDS</name><operator>+</operator><name>CALC_FLAGS_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><operator>(</operator><name>cmd</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> <expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"[=] Fields Access Flags List\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> <expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"[=] Methods Access Flags List\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> <expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"[=] Class Access Flags List\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt> <break>break;</break>

</block_content>}</block></switch>

<macro><name>r_list_foreach</name> <argument_list>(<argument>the_list</argument>, <argument>iter</argument>, <argument>str</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_calc_flags</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Function call made: %s\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><operator>*</operator><operator>(</operator><name>cmd</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> <return>return <expr><call><name>r_cmd_java_print_field_access_flags_value</name> <argument_list>(<argument><expr><name>cmd</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> <return>return <expr><call><name>r_cmd_java_print_method_access_flags_value</name> <argument_list>(<argument><expr><name>cmd</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> <return>return <expr><call><name>r_cmd_java_print_class_access_flags_value</name> <argument_list>(<argument><expr><name>cmd</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>( <expr><operator>*</operator><operator>(</operator><name>cmd</name><operator>)</operator> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lcmd</name> <init>= <expr><ternary><condition><expr><operator>*</operator><name>cmd</name><operator>+</operator><literal type="number">1</literal> <operator>==</operator> <literal type="char">' '</literal></expr>?</condition><then> <expr><name>cmd</name><operator>+</operator><literal type="number">2</literal></expr> </then><else>: <expr><name>cmd</name><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Seeing %s and accepting %s\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>lcmd</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<switch>switch <condition>(<expr><operator>*</operator><operator>(</operator><name>lcmd</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_cmd_java_get_all_access_flags_value</name> <argument_list>(<argument><expr><name>lcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cmd_java_get_all_access_flags_value</name> <argument_list>(<argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cmd_java_get_all_access_flags_value</name> <argument_list>(<argument><expr><literal type="string">"m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_cmd_java_get_all_access_flags_value</name> <argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[-] r_cmd_java: incorrect syntax for the flags calculation.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cmd_java_print_cmd_help</name> <argument_list>(<argument><expr><name>JAVA_CMDS</name><operator>+</operator><name>CALC_FLAGS_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_flags_str</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>flag_value</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>f_type</name> <init>= <expr><ternary><condition><expr><name>cmd</name></expr> ?</condition><then> <expr><operator>*</operator><name>cmd</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><ternary><condition><expr><name>cmd</name></expr> ?</condition><then> <expr><name>cmd</name> <operator>+</operator> <literal type="number">2</literal></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>flags_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"r_cmd_java_handle_flags_str: ftype = %c, idx = %s\n"</literal></expr></argument>, <argument><expr><name>f_type</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flag_value</name> <operator>=</operator> <ternary><condition><expr><call><name>r_cmd_java_is_valid_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>r_cmd_java_get_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name>f_type</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>f_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> <expr_stmt><expr><name>flags_str</name> <operator>=</operator> <call><name>retrieve_method_access_string</name><argument_list>(<argument><expr><operator>(</operator><name>ut16</name><operator>)</operator> <name>flag_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> <expr_stmt><expr><name>flags_str</name> <operator>=</operator> <call><name>retrieve_field_access_string</name><argument_list>(<argument><expr><operator>(</operator><name>ut16</name><operator>)</operator> <name>flag_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> <expr_stmt><expr><name>flags_str</name> <operator>=</operator> <call><name>retrieve_class_method_access_string</name><argument_list>(<argument><expr><operator>(</operator><name>ut16</name><operator>)</operator> <name>flag_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>flags_str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags_str</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>f_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> <expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Method Access Flags String: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> <expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Field Access Flags String: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> <expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Class Access Flags String: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name>flags_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>flags_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[-] r_cmd_java: incorrect syntax for the flags calculation.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cmd_java_print_cmd_help</name> <argument_list>(<argument><expr><name>JAVA_CMDS</name><operator>+</operator><name>FLAGS_STR_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_flags_str_at</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>flag_value_addr</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>flag_value</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>f_type</name> <init>= <expr><ternary><condition><expr><name>cmd</name></expr> ?</condition><then> <expr><operator>*</operator><call><name>r_cmd_java_consumetok</name> <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><ternary><condition><expr><name>cmd</name></expr> ?</condition><then> <expr><name>cmd</name> <operator>+</operator> <literal type="number">2</literal></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>flags_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"r_cmd_java_handle_flags_str_at: ftype = 0x%02x, idx = %s\n"</literal></expr></argument>, <argument><expr><name>f_type</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flag_value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>cur_offset</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>flag_value_addr</name> <operator>=</operator> <ternary><condition><expr><call><name>r_cmd_java_is_valid_input_num_value</name><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>r_cmd_java_get_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>flag_value_addr</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>flag_value</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"r_cmd_java_handle_flags_str_at: read = 0x%04x\n"</literal></expr></argument>, <argument><expr><name>flag_value</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_offset</name> <operator>!=</operator> <name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_core_seek</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cur_offset</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flag_value</name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>flag_value</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name>f_type</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>f_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> <expr_stmt><expr><name>flags_str</name> <operator>=</operator> <call><name>retrieve_method_access_string</name><argument_list>(<argument><expr><operator>(</operator><name>ut16</name><operator>)</operator> <name>flag_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> <expr_stmt><expr><name>flags_str</name> <operator>=</operator> <call><name>retrieve_field_access_string</name><argument_list>(<argument><expr><operator>(</operator><name>ut16</name><operator>)</operator> <name>flag_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> <expr_stmt><expr><name>flags_str</name> <operator>=</operator> <call><name>retrieve_class_method_access_string</name><argument_list>(<argument><expr><operator>(</operator><name>ut16</name><operator>)</operator> <name>flag_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>flags_str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags_str</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>f_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> <expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Method Access Flags String: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> <expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Field Access Flags String: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> <expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Class Access Flags String: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name>flags_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>flags_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[-] r_cmd_java: incorrect syntax for the flags calculation.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cmd_java_print_cmd_help</name> <argument_list>(<argument><expr><name>JAVA_CMDS</name><operator>+</operator><name>FLAGS_STR_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name></type> <name>r_cmd_java_is_valid_java_mcf</name> <parameter_list>(<parameter><decl><type><name>char</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_set_flags</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type> <name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>r_cmd_java_consumetok</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><ternary><condition><expr><name>p</name> <operator>&amp;&amp;</operator> <call><name>r_cmd_java_is_valid_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><call><name>r_cmd_java_get_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_cmd_java_strtok</name> <argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cmd_java_print_cmd_help</name> <argument_list>(<argument><expr><name>JAVA_CMDS</name><operator>+</operator><name>SET_ACC_FLAGS_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>f_type</name> <init>= <expr><ternary><condition><expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr> ?</condition><then> <expr><call><name>r_cmd_java_is_valid_java_mcf</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>++</operator><name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="char">'?'</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flag_value</name> <init>= <expr><ternary><condition><expr><call><name>r_cmd_java_is_valid_input_num_value</name><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>r_cmd_java_get_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flag_value</name> <operator>==</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>f_type</name> <operator>==</operator> <literal type="char">'f'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flag_value</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Converting %s to flags\n"</literal></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flag_value</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flag_value</name> <operator>=</operator> <ternary><condition><expr><call><name>r_cmd_java_is_valid_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>r_cmd_java_get_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[-] r_cmd_java: no address provided .\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>addr</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[-] r_cmd_java: no address provided .\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>f_type</name> <operator>==</operator> <literal type="char">'?'</literal> <operator>&amp;&amp;</operator> <name>flag_value</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[-] r_cmd_java: no flag type provided .\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cmd_java_print_cmd_help</name> <argument_list>(<argument><expr><name>JAVA_CMDS</name> <operator>+</operator> <name>SET_ACC_FLAGS_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Writing ftype '%c' to 0x%"</literal><name>PFMT64x</name><literal type="string">", %s.\n"</literal></expr></argument>, <argument><expr><name>f_type</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Converting %s to flags\n"</literal></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>f_type</name> <operator>&amp;&amp;</operator> <name>flag_value</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>f_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> <expr_stmt><expr><name>flag_value</name> <operator>=</operator> <call><name>r_bin_java_calculate_field_access_value</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> <expr_stmt><expr><name>flag_value</name> <operator>=</operator> <call><name>r_bin_java_calculate_method_access_value</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> <expr_stmt><expr><name>flag_value</name> <operator>=</operator> <call><name>r_bin_java_calculate_class_access_value</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>flag_value</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Current args: (flag_value: 0x%04x addr: 0x%"</literal><name>PFMT64x</name><literal type="string">")\n."</literal></expr></argument>, <argument><expr><name>flag_value</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flag_value</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_cmd_java_set_acc_flags</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>ut16</name><operator>)</operator> <name>flag_value</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Writing 0x%04x to 0x%"</literal><name>PFMT64x</name><literal type="string">": %d."</literal></expr></argument>, <argument><expr><name>flag_value</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[-] r_cmd_java: invalid flag value or type provided .\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cmd_java_print_cmd_help</name> <argument_list>(<argument><expr><name>JAVA_CMDS</name> <operator>+</operator> <name>SET_ACC_FLAGS_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_call</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"java"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_cmd_java_handle_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>END_CMDS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Checking cmd: %s %d\n"</literal></expr></argument>, <argument><expr><name><name>JAVA_CMDS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,

<argument><expr><call><name>strncmp</name> <argument_list>(<argument><expr><name>input</name><operator>+</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>JAVA_CMDS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>JAVA_CMDS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name><name>JAVA_CMDS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>JAVA_CMDS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name>input</name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name><name>JAVA_CMDS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name_len</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cmd</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>JAVA_CMDS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>handler</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>r_cmd_java_handle_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_method_definitions</name> <parameter_list>( <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type> <name>the_list</name> <init>= <expr><call><name>r_bin_java_get_method_definitions</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type> <name>off_list</name> <init>= <expr><call><name>r_bin_java_get_method_offsets</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>off_list</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name><argument_list>(<argument><expr><literal type="string">"%s; // @0x%04"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>*</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>off_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_field_definitions</name> <parameter_list>( <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type> <name>the_list</name> <init>= <expr><call><name>r_bin_java_get_field_definitions</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type> <name>off_list</name> <init>= <expr><call><name>r_bin_java_get_field_offsets</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>off_list</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name><argument_list>(<argument><expr><literal type="string">"%s; // @0x%04"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>*</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>off_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_import_definitions</name> <parameter_list>( <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type> <name>the_list</name> <init>= <expr><call><name>r_bin_java_get_import_definitions</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>the_list</argument>, <argument>iter</argument>, <argument>str</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name><argument_list>(<argument><expr><literal type="string">"import %s;\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_all_definitions</name><parameter_list>( <parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter> )</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type> <name>obj_list</name> <init>= <expr><call><name>r_cmd_java_get_bin_obj_list</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj_list</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>obj_list</argument>, <argument>iter</argument>, <argument>obj</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_cmd_java_print_class_definitions</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_json_definitions</name><parameter_list>( <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>DsoJsonObj</name> <modifier>*</modifier></type><name>json_obj</name> <init>= <expr><call><name>r_bin_java_get_bin_obj_json</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>dso_json_obj_to_str</name> <argument_list>(<argument><expr><name>json_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dso_json_obj_del</name> <argument_list>(<argument><expr><name>json_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_class_definitions</name><parameter_list>( <parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type> <name>the_fields</name> <init>= <expr><call><name>r_bin_java_get_field_definitions</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type> <name>the_methods</name> <init>= <expr><call><name>r_bin_java_get_method_definitions</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type> <name>the_imports</name> <init>= <expr><call><name>r_bin_java_get_import_definitions</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type> <name>the_moffsets</name> <init>= <expr><call><name>r_bin_java_get_method_offsets</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type> <name>the_foffsets</name> <init>= <expr><call><name>r_bin_java_get_field_offsets</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>class_name</name> <init>= <expr><call><name>r_bin_java_get_this_class_name</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cmd_java_print_import_definitions</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"\nclass %s { // @0x%04"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>loadaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>the_fields</name> <operator>&amp;&amp;</operator> <name>the_foffsets</name> <operator>&amp;&amp;</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name>the_fields</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"\n // Fields defined in the class\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>the_fields</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>the_foffsets</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>the_fields</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name><argument_list>(<argument><expr><literal type="string">" %s; // @0x%04"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>*</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>the_methods</name> <operator>&amp;&amp;</operator> <name>the_moffsets</name> <operator>&amp;&amp;</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name>the_methods</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"\n // Methods defined in the class\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>the_methods</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>the_moffsets</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>r_list_get_n</name> <argument_list>(<argument><expr><name>the_methods</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" %s; // @0x%04"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>*</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>the_imports</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>the_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>the_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>the_foffsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>the_moffsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RList</name> <modifier>*</modifier></type> <name>r_cmd_java_get_bin_obj_list</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin_obj</name> <init>= <expr><operator>(</operator><name>RBinJavaObj</name> <operator>*</operator> <operator>)</operator> <call><name>r_cmd_java_get_bin_obj</name><argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>r_bin_java_get_bin_obj_list_thru_obj</name> <argument_list>(<argument><expr><name>bin_obj</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBinJavaObj</name> <modifier>*</modifier></type> <name>r_cmd_java_get_bin_obj</name><parameter_list>(<parameter><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBin</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_java</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinPlugin</name> <modifier>*</modifier></type><name>plugin</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>anal</name> <operator>||</operator> <operator>!</operator><name><name>anal</name><operator>-&gt;</operator><name>binb</name><operator>.</operator><name>bin</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>anal</name><operator>-&gt;</operator><name>binb</name><operator>.</operator><name>bin</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>cur</name></name> <operator>||</operator> <operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>o</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>plugin</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>plugin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_java</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>plugin</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>plugin</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"java"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>is_java</name></expr> ?</condition><then> <expr><name><name>b</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>bin_obj</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_resolve_cp_idx</name> <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <name>idx</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>str</name> <init>= <expr><call><name>r_bin_java_resolve_without_space</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_resolve_cp_type</name> <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <name>idx</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>str</name> <init>= <expr><call><name>r_bin_java_resolve_cp_idx_type</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_resolve_cp_idx_b64</name> <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <name>idx</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>str</name> <init>= <expr><call><name>r_bin_java_resolve_b64_encode</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_resolve_cp_address</name> <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <name>idx</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><call><name>r_bin_java_resolve_cp_idx_address</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Unable to resolve CP Object @ index: 0x%04x\n"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_resolve_cp_to_key</name> <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <name>idx</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>str</name> <init>= <expr><call><name>r_bin_java_resolve_cp_idx_to_string</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_resolve_cp_summary</name> <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <name>idx</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>r_bin_java_resolve_cp_idx_print_summary</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_is_valid_input_num_value</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_value</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>value</name> <init>= <expr><ternary><condition><expr><name>input_value</name></expr> ?</condition><then> <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>input_value</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>!</operator><operator>(</operator><name>value</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>input_value</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>input_value</name> <operator>==</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ut64</name></type> <name>r_cmd_java_get_input_num_value</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_value</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>value</name> <init>= <expr><ternary><condition><expr><name>input_value</name></expr> ?</condition><then> <expr><call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>input_value</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<return>return <expr><name>value</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_class_access_flags_value</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>flags</name></decl></parameter> )</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>result</name> <init>= <expr><call><name>r_bin_java_calculate_class_access_value</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Access Value for %s = 0x%04x\n"</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_field_access_flags_value</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>flags</name></decl></parameter> )</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>result</name> <init>= <expr><call><name>r_bin_java_calculate_field_access_value</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Access Value for %s = 0x%04x\n"</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_method_access_flags_value</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>flags</name></decl></parameter> )</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>ut16</name></type> <name>result</name> <init>= <expr><call><name>r_bin_java_calculate_method_access_value</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Access Value for %s = 0x%04x\n"</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_set_acc_flags</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>num_acc_flag</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>cmd_buf</name> <index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>num_acc_flag</name> <operator>=</operator> <call><name>R_BIN_JAVA_USHORT</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>num_acc_flag</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_core_write_at</name><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>num_acc_flag</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"[X] r_cmd_java_set_acc_flags: Failed to write.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>IFDBG</name></type> <name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Executed cmd: %s == %d\n"</literal></expr></argument>, <argument><expr><name>cmd_buf</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_field_num_name</name> <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type> <name>the_list</name> <init>= <expr><call><name>r_bin_java_get_field_num_name</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>the_list</argument>, <argument>iter</argument>, <argument>str</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_method_num_name</name> <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type> <name>the_list</name> <init>= <expr><call><name>r_bin_java_get_method_num_name</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>the_list</argument>, <argument>iter</argument>, <argument>str</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>the_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_field_summary</name> <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>r_bin_java_print_field_idx_summary</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: Field or Method @ index (%d) not found in the RBinJavaObj.\n"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>UNUSED_FUNCTION</name></type>(<name>r_cmd_java_print_field_count</name>) <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>res</name> <init>= <expr><call><name>r_bin_java_get_field_count</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_field_name</name> <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>res</name> <init>= <expr><call><name>r_bin_java_get_field_name</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: Field or Method @ index (%d) not found in the RBinJavaObj.\n"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_method_summary</name> <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>r_bin_java_print_method_idx_summary</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: Field or Method @ index (%d) not found in the RBinJavaObj.\n"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>_</name></type>(<name>r_cmd_java_print_method_count</name>)<parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ut32</name></type> <name>res</name> <init>= <expr><call><name>r_bin_java_get_method_count</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_print_method_name</name> <parameter_list>(<parameter><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ut16</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>res</name> <init>= <expr><call><name>r_bin_java_get_method_name</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_println</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: Field or Method @ index (%d) not found in the RBinJavaObj.\n"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_yara_code_extraction_refs</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>get_anal</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><ternary><condition><expr><name>anal</name></expr> ?</condition><then> <expr><operator>(</operator><name>RBinJavaObj</name> <operator>*</operator><operator>)</operator> <call><name>r_cmd_java_get_bin_obj</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><ternary><condition><expr><name>input</name></expr>?</condition><then> <expr><call><name>r_cmd_java_consumetok</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>n</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>anal</name> <operator>||</operator> <operator>!</operator><name><name>anal</name><operator>-&gt;</operator><name>fcns</name></name> <operator>||</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unable to access the current analysis, perform 'af' for function analysis.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>p</name></expr> ?</condition><then> <expr><call><name>r_cmd_java_strtok</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <ternary><condition><expr><name>n</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>!=</operator> <name>n</name></expr> ?</condition><then> <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>n</name> <operator>-</operator> <name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name><operator>-</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name><operator>-</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_cmd_java_strtok</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <ternary><condition><expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <call><name>r_cmd_java_is_valid_input_num_value</name><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>r_cmd_java_get_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>r_cmd_java_strtok</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <ternary><condition><expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <call><name>r_cmd_java_is_valid_input_num_value</name><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>r_cmd_java_get_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>!=</operator> <operator>(</operator><name>ut64</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>addr</name> <operator>!=</operator> <operator>(</operator><name>ut64</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_insert_method_ref</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>get_anal</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><ternary><condition><expr><name>anal</name></expr> ?</condition><then> <expr><operator>(</operator><name>RBinJavaObj</name> <operator>*</operator><operator>)</operator> <call><name>r_cmd_java_get_bin_obj</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><ternary><condition><expr><name>input</name></expr>?</condition><then> <expr><call><name>r_cmd_java_consumetok</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>n</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>classname</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>descriptor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut32</name></type> <name>cn_sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n_sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>d_sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>anal</name> <operator>||</operator> <operator>!</operator><name><name>anal</name><operator>-&gt;</operator><name>fcns</name></name> <operator>||</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>anal</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Unable to access the current analysis, perform 'af' for function analysis.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr> ?</condition><then> <expr><call><name>r_cmd_java_strtok</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>classname</name> <operator>=</operator> <ternary><condition><expr><name>n</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>!=</operator> <name>n</name></expr> ?</condition><then> <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>n</name><operator>-</operator><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>cn_sz</name> <operator>=</operator> <ternary><condition><expr><name>n</name> <operator>&amp;&amp;</operator> <name>p</name></expr> ?</condition><then> <expr><name>n</name><operator>-</operator><name>p</name> <operator>+</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>classname</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>classname</name></expr></argument>, <argument><expr><name>cn_sz</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr> ?</condition><then> <expr><call><name>r_cmd_java_strtok</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <ternary><condition><expr><name>n</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>!=</operator> <name>n</name></expr> ?</condition><then> <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>n</name><operator>-</operator><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>n_sz</name> <operator>=</operator> <ternary><condition><expr><name>n</name> <operator>&amp;&amp;</operator> <name>p</name></expr> ?</condition><then> <expr><name>n</name><operator>-</operator><name>p</name> <operator>+</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>n_sz</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr> ?</condition><then> <expr><call><name>r_cmd_java_strtok</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>descriptor</name> <operator>=</operator> <ternary><condition><expr><name>n</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>!=</operator> <name>n</name></expr> ?</condition><then> <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>n</name><operator>-</operator><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>d_sz</name> <operator>=</operator> <name>n</name><operator>-</operator><name>p</name> <operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d_sz</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>descriptor</name> <operator>=</operator> <ternary><condition><expr><name>d_sz</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>d_sz</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>descriptor</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>d_sz</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"Would be adding class name:%s, name: %s, descriptor: %s\n"</literal></expr></argument>, <argument><expr><name>classname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_cmd_java_handle_print_exceptions</name> <parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAnal</name> <modifier>*</modifier></type><name>anal</name> <init>= <expr><call><name>get_anal</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinJavaObj</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><operator>(</operator><name>RBinJavaObj</name> <operator>*</operator><operator>)</operator> <call><name>r_cmd_java_get_bin_obj</name> <argument_list>(<argument><expr><name>anal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>exc_iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>methods_iter</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinJavaField</name> <modifier>*</modifier></type><name>method</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>func_addr</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinJavaExceptionEntry</name> <modifier>*</modifier></type><name>exc_entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><ternary><condition><expr><name>input</name></expr>?</condition><then> <expr><call><name>r_cmd_java_consumetok</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>func_addr</name> <operator>=</operator> <ternary><condition><expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <call><name>r_cmd_java_is_valid_input_num_value</name><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>r_cmd_java_get_input_num_value</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>bin-&gt;methods_list</argument>, <argument>methods_iter</argument>, <argument>method</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>start</name> <init>= <expr><call><name>r_bin_java_get_method_start</name><argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><type ref="prev"/><name>end</name> <init>= <expr><call><name>r_bin_java_get_method_end</name><argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut8</name></type> <name>do_this_one</name> <init>= <expr><name>start</name> <operator>&lt;=</operator> <name>func_addr</name> <operator>&amp;&amp;</operator> <name>func_addr</name> <operator>&lt;=</operator> <name>end</name></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type> <name>exc_table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>do_this_one</name> <operator>=</operator> <ternary><condition><expr><name>func_addr</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>do_this_one</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_this_one</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>exc_table</name> <operator>=</operator> <call><name>r_bin_java_get_method_exception_table_with_addr</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>exc_table</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" Exception table for %s @ 0x%"</literal><name>PFMT64x</name><literal type="string">":\n"</literal></expr></argument>, <argument><expr><name><name>method</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" [ NONE ]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" Exception table for %s (%d entries) @ 0x%"</literal><name>PFMT64x</name><literal type="string">":\n"</literal></expr></argument>, <argument><expr><name><name>method</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name>exc_table</name></expr></argument>)</argument_list></call></expr></argument> , <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>exc_table</argument>, <argument>exc_iter</argument>, <argument>exc_entry</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_info</name> <init>= <expr><call><name>r_bin_java_resolve_without_space</name> <argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><name><name>exc_entry</name><operator>-&gt;</operator><name>catch_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" Catch Type: %d, %s @ 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>exc_entry</name><operator>-&gt;</operator><name>catch_type</name></name></expr></argument>,

<argument><expr><name>class_info</name></expr></argument>, <argument><expr><name><name>exc_entry</name><operator>-&gt;</operator><name>file_offset</name></name><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" Start PC: (0x%"</literal><name>PFMT64x</name><literal type="string">") 0x%"</literal><name>PFMT64x</name><literal type="string">" @ 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name><name>exc_entry</name><operator>-&gt;</operator><name>start_pc</name></name></expr></argument>, <argument><expr><name><name>exc_entry</name><operator>-&gt;</operator><name>start_pc</name></name><operator>+</operator><name>start</name></expr></argument>, <argument><expr><name><name>exc_entry</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" End PC: (0x%"</literal><name>PFMT64x</name><literal type="string">") 0x%"</literal><name>PFMT64x</name><literal type="string">" 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name><name>exc_entry</name><operator>-&gt;</operator><name>end_pc</name></name></expr></argument>, <argument><expr><name><name>exc_entry</name><operator>-&gt;</operator><name>end_pc</name></name><operator>+</operator><name>start</name></expr></argument>, <argument><expr><name><name>exc_entry</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">" Handler PC: (0x%"</literal><name>PFMT64x</name><literal type="string">") 0x%"</literal><name>PFMT64x</name><literal type="string">" 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name><name>exc_entry</name><operator>-&gt;</operator><name>handler_pc</name></name></expr></argument>, <argument><expr><name><name>exc_entry</name><operator>-&gt;</operator><name>handler_pc</name></name><operator>+</operator><name>start</name></expr></argument>, <argument><expr><name><name>exc_entry</name><operator>-&gt;</operator><name>file_offset</name></name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>class_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RCorePlugin</name></type> <name>r_core_plugin_java</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"java"</literal></expr>,

<expr><operator>.</operator><name>desc</name> <operator>=</operator> <literal type="string">"Suite of java commands, java help for more info"</literal></expr>,

<expr><operator>.</operator><name>license</name> <operator>=</operator> <literal type="string">"Apache"</literal></expr>,

<expr><operator>.</operator><name>call</name> <operator>=</operator> <name>r_cmd_java_call</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>R2_PLUGIN_INCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>R_API</name> <name>RLibStruct</name></type> <name>radare_plugin</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>R_LIB_TYPE_CORE</name></expr>,

<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>r_core_plugin_java</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>R2_VERSION</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
