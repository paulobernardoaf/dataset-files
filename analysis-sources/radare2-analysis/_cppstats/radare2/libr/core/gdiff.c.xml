<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\core\gdiff.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_anal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_list.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;r_core.h&gt;</cpp:file></cpp:include>

<function><type><name>R_API</name> <name>int</name></type> <name>r_core_gdiff_fcn</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr2</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>la</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fa</name> <init>= <expr><call><name>r_anal_get_function_at</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fb</name> <init>= <expr><call><name>r_anal_get_function_at</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>addr2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fa</name> <operator>||</operator> <operator>!</operator><name>fb</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fa-&gt;bbs</argument>, <argument>iter</argument>, <argument>bb</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_anal_diff_fingerprint_bb</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fb-&gt;bbs</argument>, <argument>iter</argument>, <argument>bb</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_anal_diff_fingerprint_bb</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name>la</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>la</name></expr></argument>, <argument><expr><name>fa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lb</name> <operator>=</operator> <call><name>r_list_new</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_append</name> <argument_list>(<argument><expr><name>lb</name></expr></argument>, <argument><expr><name>fb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_anal_diff_fcn</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name>la</name></expr></argument>, <argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>la</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>int</name></type> <name>r_core_gdiff</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>c2</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name><name>cores</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>c</name></expr>, <expr><name>c2</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>fcn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalBlock</name> <modifier>*</modifier></type><name>bb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name> <operator>||</operator> <operator>!</operator><name>c2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<macro><name>r_list_foreach_safe</name> <argument_list>(<argument>cores[i]-&gt;anal-&gt;fcns</argument>, <argument>iter</argument>, <argument>iter2</argument>, <argument>fcn</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name><name>fcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"str."</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_anal_function_delete</name> <argument_list>(<argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<macro><name>r_list_foreach</name> <argument_list>(<argument>cores[i]-&gt;anal-&gt;fcns</argument>, <argument>iter</argument>, <argument>fcn</argument>)</argument_list></macro> <block>{<block_content>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fcn-&gt;bbs</argument>, <argument>iter2</argument>, <argument>bb</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_anal_diff_fingerprint_bb</name> <argument_list>(<argument><expr><name><name>cores</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>anal</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block>

<macro><name>r_list_foreach</name> <argument_list>(<argument>cores[i]-&gt;anal-&gt;fcns</argument>, <argument>iter</argument>, <argument>fcn</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_anal_diff_fingerprint_fcn</name> <argument_list>(<argument><expr><name><name>cores</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>anal</name></expr></argument>, <argument><expr><name>fcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></for>

<expr_stmt><expr><call><name>r_anal_diff_fcn</name> <argument_list>(<argument><expr><name><name>cores</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>anal</name></expr></argument>, <argument><expr><name><name>cores</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>anal</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>, <argument><expr><name><name>cores</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>anal</name><operator>-&gt;</operator><name>fcns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>diffrow</name><parameter_list>(<parameter><decl><type><name>ut64</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxnamelen</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>digits</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>addr2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name2</name></decl></parameter>, <parameter><decl><type><name>ut32</name></type> <name>size2</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>match</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>dist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bare</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bare</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>addr2</name> <operator>==</operator> <name>UT64_MAX</name> <operator>||</operator> <operator>!</operator><name>name2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"0x%016"</literal><name>PFMT64x</name><literal type="string">" |%8s (%f)\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>match</name></expr></argument>, <argument><expr><name>dist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"0x%016"</literal><name>PFMT64x</name><literal type="string">" |%8s (%f) | 0x%016"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>match</name></expr></argument>, <argument><expr><name>dist</name></expr></argument>, <argument><expr><name>addr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>addr2</name> <operator>==</operator> <name>UT64_MAX</name> <operator>||</operator> <operator>!</operator><name>name2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%*s %*d 0x%"</literal><name>PFMT64x</name><literal type="string">" |%8s (%f)\n"</literal></expr></argument>,

<argument><expr><name>maxnamelen</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>digits</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>match</name></expr></argument>, <argument><expr><name>dist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%*s %*d 0x%"</literal><name>PFMT64x</name><literal type="string">" |%8s (%f) | 0x%"</literal><name>PFMT64x</name><literal type="string">" %*d %s\n"</literal></expr></argument>,

<argument><expr><name>maxnamelen</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>digits</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>match</name></expr></argument>, <argument><expr><name>dist</name></expr></argument>, <argument><expr><name>addr2</name></expr></argument>,

<argument><expr><name>digits</name></expr></argument>, <argument><expr><name>size2</name></expr></argument>, <argument><expr><name>name2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>R_API</name> <name>void</name></type> <name>r_core_diff_show</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>c2</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>bare</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"diff.bare"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>c2</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"diff.bare"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>fcns</name> <init>= <expr><call><name>r_anal_get_fcns</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>match</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalFunction</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxnamelen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>maxsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>digits</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fcns</argument>, <argument>iter</argument>, <argument>f</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>maxnamelen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>maxnamelen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_anal_function_linear_size</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>maxsize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>maxsize</name> <operator>=</operator> <call><name>r_anal_function_linear_size</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><name>fcns</name> <operator>=</operator> <call><name>r_anal_get_fcns</name> <argument_list>(<argument><expr><name><name>c2</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fcns</argument>, <argument>iter</argument>, <argument>f</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>maxnamelen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>maxnamelen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_anal_function_linear_size</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>maxsize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>maxsize</name> <operator>=</operator> <call><name>r_anal_function_linear_size</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<while>while <condition>(<expr><name>maxsize</name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>maxsize</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>digits</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>fcns</name> <operator>=</operator> <call><name>r_anal_get_fcns</name> <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_list_empty</name> <argument_list>(<argument><expr><name>fcns</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No functions found, try running with -A or load a project\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_list_sort</name> <argument_list>(<argument><expr><name>fcns</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>columnSort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fcns</argument>, <argument>iter</argument>, <argument>f</argument>)</argument_list></macro> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_FCN_TYPE_FCN</name></expr>:</case>

<case>case <expr><name>R_ANAL_FCN_TYPE_SYM</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_DIFF_TYPE_MATCH</name></expr>:</case>

<expr_stmt><expr><name>match</name> <operator>=</operator> <literal type="string">"MATCH"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>R_ANAL_DIFF_TYPE_UNMATCH</name></expr>:</case>

<expr_stmt><expr><name>match</name> <operator>=</operator> <literal type="string">"UNMATCH"</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>match</name> <operator>=</operator> <literal type="string">"NEW"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>dist</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>diffrow</name> <argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>r_anal_function_linear_size</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>maxnamelen</name></expr></argument>, <argument><expr><name>digits</name></expr></argument>,

<argument><expr><name><name>f</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><name>match</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>dist</name></name></expr></argument>, <argument><expr><name>bare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block>

<expr_stmt><expr><name>fcns</name> <operator>=</operator> <call><name>r_anal_get_fcns</name> <argument_list>(<argument><expr><name><name>c2</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_sort</name> <argument_list>(<argument><expr><name>fcns</name></expr></argument>, <argument><expr><name><name>c2</name><operator>-&gt;</operator><name>anal</name><operator>-&gt;</operator><name>columnSort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>fcns</argument>, <argument>iter</argument>, <argument>f</argument>)</argument_list></macro> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_ANAL_FCN_TYPE_FCN</name></expr>:</case>

<case>case <expr><name>R_ANAL_FCN_TYPE_SYM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>R_ANAL_DIFF_TYPE_NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>diffrow</name> <argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>r_anal_function_linear_size</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>maxnamelen</name></expr></argument>,

<argument><expr><name>digits</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><literal type="string">"NEW"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block>

</block_content>}</block></function>

</unit>
