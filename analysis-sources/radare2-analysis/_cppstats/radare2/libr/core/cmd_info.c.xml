<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\core\cmd_info.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_bin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_cons.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"r_core.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../bin/pdb/pdb_downloader.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help_msg_i</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Usage: i"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Get info from opened file (see rabin2's manpage)"</literal></expr>,

<expr><literal type="string">"Output mode:"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,

<expr><literal type="string">"'*'"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Output in radare commands"</literal></expr>,

<expr><literal type="string">"'j'"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Output in json"</literal></expr>,

<expr><literal type="string">"'q'"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Simple quiet output"</literal></expr>,

<expr><literal type="string">"Actions:"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,

<expr><literal type="string">"i|ij"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Show info of current file (in JSON)"</literal></expr>,

<expr><literal type="string">"iA"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"List archs"</literal></expr>,

<expr><literal type="string">"ia"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Show all info (imports, exports, sections..)"</literal></expr>,

<expr><literal type="string">"ib"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Reload the current buffer for setting of the bin (use once only)"</literal></expr>,

<expr><literal type="string">"ic"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"List classes, methods and fields"</literal></expr>,

<expr><literal type="string">"icc"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"List classes, methods and fields in Header Format"</literal></expr>,

<expr><literal type="string">"icg"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"List classes as agn/age commands to create class hirearchy graphs"</literal></expr>,

<expr><literal type="string">"icq"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"List classes, in quiet mode (just the classname)"</literal></expr>,

<expr><literal type="string">"icqq"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"List classes, in quieter mode (only show non-system classnames)"</literal></expr>,

<expr><literal type="string">"iC"</literal></expr>, <expr><literal type="string">"[j]"</literal></expr>, <expr><literal type="string">"Show signature info (entitlements, ...)"</literal></expr>,

<expr><literal type="string">"id"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Show DWARF source lines information"</literal></expr>,

<expr><literal type="string">"idp"</literal></expr>, <expr><literal type="string">" [file.pdb]"</literal></expr>, <expr><literal type="string">"Load pdb file information"</literal></expr>,

<expr><literal type="string">"idpi"</literal></expr>, <expr><literal type="string">" [file.pdb]"</literal></expr>, <expr><literal type="string">"Show pdb file information"</literal></expr>,

<expr><literal type="string">"idpi*"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Show symbols from pdb as flags (prefix with dot to import)"</literal></expr>,

<expr><literal type="string">"idpd"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Download pdb file on remote server"</literal></expr>,

<expr><literal type="string">"iD"</literal></expr>, <expr><literal type="string">" lang sym"</literal></expr>, <expr><literal type="string">"demangle symbolname for given language"</literal></expr>,

<expr><literal type="string">"ie"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Entrypoint"</literal></expr>,

<expr><literal type="string">"iee"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Show Entry and Exit (preinit, init and fini)"</literal></expr>,

<expr><literal type="string">"iE"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Exports (global symbols)"</literal></expr>,

<expr><literal type="string">"iE."</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Current export"</literal></expr>,

<expr><literal type="string">"ih"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Headers (alias for iH)"</literal></expr>,

<expr><literal type="string">"iHH"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Verbose Headers in raw text"</literal></expr>,

<expr><literal type="string">"ii"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Imports"</literal></expr>,

<expr><literal type="string">"iI"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Binary info"</literal></expr>,

<expr><literal type="string">"ik"</literal></expr>, <expr><literal type="string">" [query]"</literal></expr>, <expr><literal type="string">"Key-value database from RBinObject"</literal></expr>,

<expr><literal type="string">"il"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Libraries"</literal></expr>,

<expr><literal type="string">"iL "</literal></expr>, <expr><literal type="string">"[plugin]"</literal></expr>, <expr><literal type="string">"List all RBin plugins loaded or plugin details"</literal></expr>,

<expr><literal type="string">"im"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Show info about predefined memory allocation"</literal></expr>,

<expr><literal type="string">"iM"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Show main address"</literal></expr>,

<expr><literal type="string">"io"</literal></expr>, <expr><literal type="string">" [file]"</literal></expr>, <expr><literal type="string">"Load info from file (or last opened) use bin.baddr"</literal></expr>,

<expr><literal type="string">"iO"</literal></expr>, <expr><literal type="string">"[?]"</literal></expr>, <expr><literal type="string">"Perform binary operation (dump, resize, change sections, ...)"</literal></expr>,

<expr><literal type="string">"ir"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"List the Relocations"</literal></expr>,

<expr><literal type="string">"iR"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"List the Resources"</literal></expr>,

<expr><literal type="string">"is"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"List the Symbols"</literal></expr>,

<expr><literal type="string">"is."</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Current symbol"</literal></expr>,

<expr><literal type="string">"iS "</literal></expr>, <expr><literal type="string">"[entropy,sha1]"</literal></expr>, <expr><literal type="string">"Sections (choose which hash algorithm to use)"</literal></expr>,

<expr><literal type="string">"iS."</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Current section"</literal></expr>,

<expr><literal type="string">"iS="</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Show ascii-art color bars with the section ranges"</literal></expr>,

<expr><literal type="string">"iSS"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"List memory segments (maps with om)"</literal></expr>,

<expr><literal type="string">"it"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"File hashes"</literal></expr>,

<expr><literal type="string">"iT"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"File signature"</literal></expr>,

<expr><literal type="string">"iV"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Display file version info"</literal></expr>,

<expr><literal type="string">"iw"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"try/catch blocks"</literal></expr>,

<expr><literal type="string">"iX"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Display source files used (via dwarf)"</literal></expr>,

<expr><literal type="string">"iz|izj"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Strings in data sections (in JSON/Base64)"</literal></expr>,

<expr><literal type="string">"izz"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Search for Strings in the whole binary"</literal></expr>,

<expr><literal type="string">"izzz"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Dump Strings from whole binary to r2 shell (for huge files)"</literal></expr>,

<expr><literal type="string">"iz-"</literal></expr>, <expr><literal type="string">" [addr]"</literal></expr>, <expr><literal type="string">"Purge string via bin.str.purge"</literal></expr>,

<expr><literal type="string">"iZ"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Guess size of binary program"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help_msg_id</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Usage: idp"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Debug information"</literal></expr>,

<expr><literal type="string">"id"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Show DWARF source lines information"</literal></expr>,

<expr><literal type="string">"idp"</literal></expr>, <expr><literal type="string">" [file.pdb]"</literal></expr>, <expr><literal type="string">"Load pdb file information"</literal></expr>,

<expr><literal type="string">"idpi"</literal></expr>, <expr><literal type="string">" [file.pdb]"</literal></expr>, <expr><literal type="string">"Show pdb file information"</literal></expr>,

<expr><literal type="string">"idpi*"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Show symbols from pdb as flags (prefix with dot to import)"</literal></expr>,

<expr><literal type="string">"idpd"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Download pdb file on remote server"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cmd_info_init</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>DEFINE_CMD_DESCRIPTOR</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_CMD_DESCRIPTOR</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAIR_WIDTH</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pair</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>ws</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>al</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ws</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>al</name> <operator>=</operator> <name>PAIR_WIDTH</name> <operator>-</operator> <name>al</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>al</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>al</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ws</name><index>[<expr><name>al</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s%s%s\n"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>ws</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>demangle_internal</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>r_bin_demangle_type</name> <argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_BIN_NM_CXX</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_bin_demangle_cxx</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>R_BIN_NM_JAVA</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_bin_demangle_java</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>R_BIN_NM_OBJC</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_bin_demangle_objc</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>R_BIN_NM_SWIFT</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_bin_demangle_swift</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>demanglercmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>R_BIN_NM_DLANG</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_bin_demangle_plugin</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>, <argument><expr><literal type="string">"dlang"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>R_BIN_NM_MSVC</name></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>r_bin_demangle_msvc</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>r_bin_demangle_list</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>demangle</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>core</name> <operator>&amp;&amp;</operator> <name>s</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ss</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lang</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.lang"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>demangle_internal</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>lang</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name>p</name> <operator>+</operator> <operator>(</operator><name>ss</name> <operator>-</operator> <name>s</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>demangle_internal</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cmd_info_here</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCoreItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>r_core_item_at</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name> <init>= <expr><call><name>pj_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"perm"</literal></expr></argument>, <argument><expr><call><name>r_str_rwx_i</name> <argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>perm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"addr"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"next"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"prev"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>fcnname</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"fcnname"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>fcnname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>sectname</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"sectname"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>sectname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>comment</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"comment"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RAnalRef</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>refs</name> <init>= <expr><call><name>r_anal_refs_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>refs</name> <operator>&amp;&amp;</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name>refs</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"refs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>refs</argument>, <argument>iter</argument>, <argument>ref</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><call><name>r_anal_ref_type_tostring</name> <argument_list>(<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"addr"</literal></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<block>{<block_content>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>refs</name> <init>= <expr><call><name>r_anal_xrefs_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>anal</name></name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>refs</name> <operator>&amp;&amp;</operator> <call><name>r_list_length</name> <argument_list>(<argument><expr><name>refs</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pj_k</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"xrefs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_a</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>refs</argument>, <argument>iter</argument>, <argument>ref</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><call><name>r_anal_ref_type_tostring</name> <argument_list>(<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_kn</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><literal type="string">"addr"</literal></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>pj_drain</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_item_free</name> <argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)? (x): ""</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>r_core_file_info</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dbg</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.debug"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>io_cache</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"io.cache"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>r_bin_get_info</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>binfile</name> <init>= <expr><call><name>r_bin_cur</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>r_io_fd_get_current</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinPlugin</name> <modifier>*</modifier></type><name>plugin</name> <init>= <expr><call><name>r_bin_file_cur_plugin</name> <argument_list>(<argument><expr><name>binfile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>R_MODE_JSON</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>R_MODE_RADARE</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>R_MODE_SIMPLE</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comma</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fn</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>file</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>R_MODE_JSON</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>comma</name> <operator>=</operator> <literal type="string">","</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"\"type\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>STR</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>fn</name> <operator>=</operator> <ternary><condition><expr><name>desc</name></expr> ?</condition><then> <expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>R_MODE_JSON</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name> <init>= <expr><name>fn</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>uri</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>uri</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>desc</name><operator>-&gt;</operator><name>uri</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>uri</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>uri</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>uri</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>escapedFile</name> <init>= <expr><call><name>r_str_escape_utf8_for_json</name> <argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s\"file\":\"%s\""</literal></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr><name>escapedFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comma</name> <operator>=</operator> <literal type="string">","</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>escapedFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>dbg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <name>R_PERM_WX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>fsz</name> <init>= <expr><call><name>r_io_desc_size</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s\"fd\":%d"</literal></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comma</name> <operator>=</operator> <literal type="string">","</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fsz</name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>humansz</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">",\"size\":%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><name>fsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_num_units</name> <argument_list>(<argument><expr><name>humansz</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>humansz</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">",\"humansz\":\"%s\""</literal></expr></argument>, <argument><expr><name>humansz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">",\"iorw\":%s"</literal></expr></argument>, <argument><expr><call><name>r_str_bool</name> <argument_list>( <argument><expr><name>io_cache</name> <operator>||</operator> <name><name>desc</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <name>R_PERM_W</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">",\"mode\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>r_str_rwx_i</name> <argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <name>R_PERM_RWX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">",\"obsz\":%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>obsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>referer</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>desc</name><operator>-&gt;</operator><name>referer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">",\"referer\":\"%s\""</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>referer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s\"block\":%d"</literal></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>binfile</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>binfile</name><operator>-&gt;</operator><name>curxtr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">",\"packet\":\"%s\""</literal></expr></argument>,

<argument><expr><name><name>binfile</name><operator>-&gt;</operator><name>curxtr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>plugin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">",\"format\":\"%s\""</literal></expr></argument>,

<argument><expr><name><name>plugin</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>desc</name> <operator>&amp;&amp;</operator> <name>mode</name> <operator>!=</operator> <name>R_MODE_SIMPLE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dbg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <name>R_PERM_WX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pair</name> <argument_list>(<argument><expr><literal type="string">"fd"</literal></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fn</name> <operator>||</operator> <operator>(</operator><name>desc</name> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>uri</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>escaped</name> <init>= <expr><call><name>r_str_escape_utf8_keep_printable</name> <argument_list>(<argument><expr><ternary><condition><expr><name>fn</name></expr>?</condition><then> <expr><name>fn</name></expr></then><else>: <expr><name><name>desc</name><operator>-&gt;</operator><name>uri</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>escaped</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pair</name> <argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>fsz</name> <init>= <expr><call><name>r_io_desc_size</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fsz</name> <operator>!=</operator> <name>UT64_MAX</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>humansz</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pair</name> <argument_list>(<argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><call><name>sdb_itoca</name> <argument_list>(<argument><expr><name>fsz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_num_units</name> <argument_list>(<argument><expr><name>humansz</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>humansz</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pair</name> <argument_list>(<argument><expr><literal type="string">"humansz"</literal></expr></argument>, <argument><expr><name>humansz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pair</name> <argument_list>(<argument><expr><literal type="string">"mode"</literal></expr></argument>, <argument><expr><call><name>r_str_rwx_i</name> <argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <name>R_PERM_RWX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>plugin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pair</name> <argument_list>(<argument><expr><literal type="string">"format"</literal></expr></argument>, <argument><expr><name><name>plugin</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pair</name> <argument_list>(<argument><expr><literal type="string">"iorw"</literal></expr></argument>, <argument><expr><call><name>r_str_bool</name> <argument_list>(<argument><expr><name>io_cache</name> <operator>||</operator> <name><name>desc</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <name>R_PERM_W</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pair</name> <argument_list>(<argument><expr><literal type="string">"blksz"</literal></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>obsz</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pair</name> <argument_list>(<argument><expr><literal type="string">"block"</literal></expr></argument>, <argument><expr><call><name>sdb_fmt</name> <argument_list>(<argument><expr><literal type="string">"0x%x"</literal></expr></argument>, <argument><expr><name><name>core</name><operator>-&gt;</operator><name>blocksize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>binfile</name> <operator>&amp;&amp;</operator> <name><name>binfile</name><operator>-&gt;</operator><name>curxtr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pair</name> <argument_list>(<argument><expr><literal type="string">"packet"</literal></expr></argument>, <argument><expr><name><name>binfile</name><operator>-&gt;</operator><name>curxtr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>referer</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>desc</name><operator>-&gt;</operator><name>referer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pair</name> <argument_list>(<argument><expr><literal type="string">"referer"</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>referer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pair</name> <argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bin_is_executable</name><parameter_list>(<parameter><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinSection</name> <modifier>*</modifier></type><name>sec</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>info</name></name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>arch</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;sections</argument>, <argument>it</argument>, <argument>sec</argument>)</argument_list></macro><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sec</name><operator>-&gt;</operator><name>perm</name></name> <operator>&amp;</operator> <name>R_PERM_X</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cmd_info_bin</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>va</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>r_bin_cur_object</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>array</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>R_MODE_JSON</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>R_MODE_ARRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_MODE_JSON</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><literal type="string">"{\"core\":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>R_MODE_JSON</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>R_MODE_ARRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_MODE_JSON</name></expr>;</expr_stmt>

<expr_stmt><expr><name>array</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><literal type="string">",\"core\":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_core_file_info</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bin_is_executable</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>R_MODE_JSON</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><literal type="string">",\"bin\":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_core_bin_info</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_INFO</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>va</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>R_MODE_JSON</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>array</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_strcat</name> <argument_list>(<argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No file selected\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>playMsg</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.tts"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%d %s"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_sys_tts</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"there are no %s"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_sys_tts</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_equal_file_hashes</name><parameter_list>(<parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>lfile_hashes</name></decl></parameter>, <parameter><decl><type><name>RList</name> <modifier>*</modifier></type><name>rfile_hashes</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>equal</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>lfile_hashes</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>rfile_hashes</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_return_val_if_fail</name> <argument_list>(<argument><expr><name>equal</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>equal</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RBinFileHash</name> <modifier>*</modifier></type><name>fh_l</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fh_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>hiter_l</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hiter_r</name></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>lfile_hashes</argument>, <argument>hiter_l</argument>, <argument>fh_l</argument>)</argument_list></macro> <block>{<block_content>

<macro><name>r_list_foreach</name> <argument_list>(<argument>rfile_hashes</argument>, <argument>hiter_r</argument>, <argument>fh_r</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>fh_l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>fh_r</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>fh_l</name><operator>-&gt;</operator><name>hex</name></name></expr></argument>, <argument><expr><name><name>fh_r</name><operator>-&gt;</operator><name>hex</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>equal</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__r_core_bin_reload</name><parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>ut64</name></type> <name>baseaddr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCoreFile</name> <modifier>*</modifier></type><name>cf</name> <init>= <expr><call><name>r_core_file_cur</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cf</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name> <init>= <expr><call><name>r_bin_file_find_by_fd</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>, <argument><expr><name><name>cf</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>r_bin_reload</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>, <argument><expr><name><name>bf</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>baseaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_core_bin_set_env</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>r_bin_cur</name> <argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isKnownPackage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cn</name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>cn</name></expr></argument>, <argument><expr><literal type="string">"Lkotlin"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>cn</name></expr></argument>, <argument><expr><literal type="string">"Lcom/google"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>cn</name></expr></argument>, <argument><expr><literal type="string">"Lcom/facebook"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>cn</name></expr></argument>, <argument><expr><literal type="string">"Lokhttp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>cn</name></expr></argument>, <argument><expr><literal type="string">"Landroid"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_str_startswith</name> <argument_list>(<argument><expr><name>cn</name></expr></argument>, <argument><expr><literal type="string">"Lokio"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_info</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name> <init>= <expr><operator>(</operator><name>RCore</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>newline</name> <init>= <expr><call><name>r_cons_is_interactive</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>r_io_fd_get_current</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RIODesc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>r_io_desc_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>va</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>va</name></name> <operator>||</operator> <name><name>core</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>debug</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>rdump</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_array</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_izzzj</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sdb</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>input</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'*'</literal></expr>:</case> <expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_MODE_RADARE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case> <expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_MODE_JSON</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'q'</literal></expr>:</case> <expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_MODE_SIMPLE</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>R_MODE_JSON</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>suffix_shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"SS"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"ee"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"zz"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>suffix_shift</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>suffix_shift</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_array</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"zzz"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_izzzj</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_array</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_izzzj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>input</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cmd_info_bin</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>va</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input</name> <operator>=</operator> <literal type="string">"I*"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>question</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>space</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>space</name> <operator>&amp;&amp;</operator> <name>question</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>space</name> <operator>=</operator> <name>question</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>question</name> <argument_list type="generic">&lt; <argument><expr><name>space</name> <operator>&amp;&amp;</operator> <name>question</name></expr></argument> &gt;</argument_list></name> <name>input</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>question</name><operator>--</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>tmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"i?~&amp; i%s"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>table_query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>space</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>space</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>table_query</name></name> <operator>=</operator> <call><name>r_str_trim_dup</name> <argument_list>(<argument><expr><name>space</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>input</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>input</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>baddr</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.baddr"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>baddr</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>__r_core_bin_reload</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>baddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_block_read</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newline</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'k'</literal></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>r_bin_cur_object</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>db</name> <operator>=</operator> <ternary><condition><expr><name>o</name></expr>?</condition><then> <expr><name><name>o</name><operator>-&gt;</operator><name>kv</name></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'v'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>db</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>sdb_querys</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>o</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>o</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_core_bin_export_info_rad</name> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'.'</literal></expr>:</case>

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>db</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>sdb_querys</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>o</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>o</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'\0'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>db</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>sdb_querys</name> <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>o</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>o</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_print</name> <argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'?'</literal></expr>:</case>

<default>default:</default>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Usage: ik [sdb-query]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Usage: ik* #load all header information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<goto>goto <name>done</name>;</goto>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'o'</literal></expr>:</case> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Core file not open\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fn</name> <init>= <expr><ternary><condition><expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>?</condition><then> <expr><name>input</name> <operator>+</operator> <literal type="number">2</literal></expr></then><else>: <expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>baddr</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.baddr"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_core_bin_load</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>baddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBININFO</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>if (is_array) {if (is_array == 1) { is_array++;} else { r_cons_printf (",");}r_cons_printf ("\"%s\":",n);}if (z) { playMsg (core, n, z);}r_core_bin_info (core, x, mode, va, NULL, y);</cpp:value></cpp:define>

<case>case <expr><literal type="char">'A'</literal></expr>:</case> 

<expr_stmt><expr><name>newline</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'j'</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="char">'j'</literal></expr></then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_bin_list_archs</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'E'</literal></expr>:</case> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'j'</literal> <operator>&amp;&amp;</operator> <name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_MODE_JSON</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"exports"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_EXPORTS</name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"exports"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_EXPORTS</name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><operator>*</operator><operator>(</operator><operator>++</operator><name>input</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></while>

<expr_stmt><expr><name>input</name><operator>--</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>ut64</name></type> <name>limit</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.hashlimit"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>r_bin_get_info</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"r_bin_get_info: Cannot get bin info\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>new_hashes</name> <init>= <expr><call><name>r_bin_file_compute_hashes</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RList</name> <modifier>*</modifier></type><name>old_hashes</name> <init>= <expr><call><name>r_bin_file_set_hashes</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>, <argument><expr><name>new_hashes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>equal</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_empty</name> <argument_list>(<argument><expr><name>new_hashes</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>r_list_empty</name> <argument_list>(<argument><expr><name>old_hashes</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_equal_file_hashes</name> <argument_list>(<argument><expr><name>new_hashes</name></expr></argument>, <argument><expr><name>old_hashes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>equal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"is_equal_file_hashes: Cannot compare file hashes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>old_hashes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBinFileHash</name> <modifier>*</modifier></type><name>fh_old</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fh_new</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>hiter_old</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hiter_new</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_json</name> <init>= <expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'j'</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>is_json</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>PJ</name> <modifier>*</modifier></type><name>pj</name> <init>= <expr><call><name>pj_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"JSON mode failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>old_hashes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pj_o</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>new_hashes</argument>, <argument>hiter_new</argument>, <argument>fh_new</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><name><name>fh_new</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>fh_new</name><operator>-&gt;</operator><name>hex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>equal</name></expr>)</condition> <block>{<block_content>

<macro><name>r_list_foreach</name> <argument_list>(<argument>old_hashes</argument>, <argument>hiter_old</argument>, <argument>fh_old</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"o%s"</literal></expr></argument>, <argument><expr><name><name>fh_old</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pj_ks</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>fh_old</name><operator>-&gt;</operator><name>hex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pj_end</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>pj_string</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pj_free</name> <argument_list>(<argument><expr><name>pj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>equal</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"File has been modified.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hiter_new</name> <operator>=</operator> <call><name>r_list_iterator</name> <argument_list>(<argument><expr><name>new_hashes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hiter_old</name> <operator>=</operator> <call><name>r_list_iterator</name> <argument_list>(<argument><expr><name>old_hashes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>r_list_iter_next</name> <argument_list>(<argument><expr><name>hiter_new</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>r_list_iter_next</name> <argument_list>(<argument><expr><name>hiter_old</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fh_new</name> <operator>=</operator> <operator>(</operator><name>RBinFileHash</name> <operator>*</operator><operator>)</operator><call><name>r_list_iter_get</name> <argument_list>(<argument><expr><name>hiter_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fh_old</name> <operator>=</operator> <operator>(</operator><name>RBinFileHash</name> <operator>*</operator><operator>)</operator><call><name>r_list_iter_get</name> <argument_list>(<argument><expr><name>hiter_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>fh_new</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>fh_old</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Wrong file hashes structure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>fh_new</name><operator>-&gt;</operator><name>hex</name></name></expr></argument>, <argument><expr><name><name>fh_old</name><operator>-&gt;</operator><name>hex</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"= %s %s\n"</literal></expr></argument>, <argument><expr><name><name>fh_new</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>fh_new</name><operator>-&gt;</operator><name>hex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"- %s %s\n+ %s %s\n"</literal></expr></argument>,

<argument><expr><name><name>fh_old</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>fh_old</name><operator>-&gt;</operator><name>hex</name></name></expr></argument>,

<argument><expr><name><name>fh_new</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>fh_new</name><operator>-&gt;</operator><name>hex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content> 

<macro><name>r_list_foreach</name> <argument_list>(<argument>new_hashes</argument>, <argument>hiter_new</argument>, <argument>fh_new</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s %s\n"</literal></expr></argument>, <argument><expr><name><name>fh_new</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>fh_new</name><operator>-&gt;</operator><name>hex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>newline</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_list_free</name> <argument_list>(<argument><expr><name>old_hashes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'Z'</literal></expr>:</case> 

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_SIZE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'O'</literal></expr>:</case> 

<switch>switch <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<expr_stmt><expr><call><name>r_sys_cmdf</name> <argument_list>(<argument><expr><literal type="string">"rabin2 -O \"%s\" \"%s\""</literal></expr></argument>, <argument><expr><call><name>r_str_trim_head_ro</name> <argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>r_sys_cmdf</name> <argument_list>(<argument><expr><literal type="string">"rabin2 -O help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><literal type="char">'S'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>&amp;&amp;</operator> <name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"sections"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_SECTIONS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"segments"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_SEGMENTS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><literal type="string">"sections"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>action</name> <init>= <expr><name>R_CORE_BIN_ACC_SECTIONS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>param_shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"segments"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>action</name> <operator>=</operator> <name>R_CORE_BIN_ACC_SEGMENTS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_MODE_EQUAL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_MODE_RADARE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'q'</literal> <operator>&amp;&amp;</operator> <name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_MODE_SIMPLE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'j'</literal> <operator>&amp;&amp;</operator> <name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_MODE_JSON</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>r_bin_cur_object</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>R_MODE_RADARE</name> <operator>||</operator> <name>mode</name> <operator>==</operator> <name>R_MODE_JSON</name> <operator>||</operator> <name>mode</name> <operator>==</operator> <name>R_MODE_SIMPLE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><name>param_shift</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>param_shift</name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>param_shift</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>obj</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>sections</name></name><operator>)</operator></expr>?</condition><then> <expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>sections</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><operator>*</operator><operator>(</operator><operator>++</operator><name>input</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></while>

<expr_stmt><expr><name>input</name><operator>--</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'H'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'H'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"header"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_HEADER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<case>case <expr><literal type="char">'h'</literal></expr>:</case> 

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"fields"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_FIELDS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'l'</literal></expr>:</case> <block>{<block_content> 

<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>r_bin_cur_object</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"libs"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_LIBS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>obj</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>libs</name></name><operator>)</operator></expr>?</condition><then> <expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>libs</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'L'</literal></expr>:</case> <block>{<block_content> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>json</name> <init>= <expr><ternary><condition><expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'j'</literal></expr>?</condition><then> <expr><literal type="char">'j'</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>plugin_name</name> <init>= <expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_array</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"\"plugin\": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_bin_list_plugin</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>, <argument><expr><name>plugin_name</name></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_bin_list</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>newline</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> <block>{<block_content> 

<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>r_bin_cur_object</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'j'</literal> <operator>&amp;&amp;</operator> <name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_MODE_JSON</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"symbols"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_SYMBOLS</name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>obj</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>symbols</name></name><operator>)</operator></expr>?</condition><then> <expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>symbols</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'q'</literal> <operator>&amp;&amp;</operator> <name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_MODE_SIMPLEST</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"symbols"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_SYMBOLS</name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>obj</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>symbols</name></name><operator>)</operator></expr>?</condition><then> <expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>symbols</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'q'</literal> <operator>&amp;&amp;</operator> <name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_MODE_SIMPLE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"symbols"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_SYMBOLS</name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"symbols"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_SYMBOLS</name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>obj</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>symbols</name></name><operator>)</operator></expr>?</condition><then> <expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>symbols</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><operator>*</operator><operator>(</operator><operator>++</operator><name>input</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></while>

<expr_stmt><expr><name>input</name><operator>--</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'R'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_MODE_RADARE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_MODE_JSON</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"resources"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_RESOURCES</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case> 

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"relocs"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_RELOCS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'X'</literal></expr>:</case> 

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"source"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_SOURCE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>SPDBOptions</name></type> <name>pdbopts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinInfo</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>file_found</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">".idpi* %s"</literal></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<break>break;</break>

<case>case <expr><literal type="char">'\0'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_core_cmd0</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">".idpi*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<expr_stmt><expr><name><name>pdbopts</name><operator>.</operator><name>user_agent</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"pdb.useragent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdbopts</name><operator>.</operator><name>symbol_server</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"pdb.server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdbopts</name><operator>.</operator><name>extract</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"pdb.extract"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pdbopts</name><operator>.</operator><name>symbol_store_path</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"pdb.symstore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>r_bin_pdb_download</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pdbopts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error while downloading pdb file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>r_bin_get_info</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>filename</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>filename</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>file_found</name> <operator>=</operator> <call><name>r_file_exists</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name> <operator>||</operator> <operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>debug_file_name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Cannot get file's debug information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>file_found</name> <operator>=</operator> <call><name>r_file_exists</name> <argument_list>(<argument><expr><call><name>r_file_basename</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>debug_file_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>file_found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><call><name>r_file_basename</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>debug_file_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>basename</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>r_file_basename</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>debug_file_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>file_found</name> <operator>=</operator> <call><name>r_file_exists</name> <argument_list>(<argument><expr><name>basename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file_found</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>dir</name> <init>= <expr><call><name>r_file_dirname</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>basename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>file_found</name> <operator>=</operator> <call><name>r_file_exists</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>basename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file_found</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>symstore_path</name> <init>= <expr><call><name>r_config_get</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"pdb.symstore"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pdb_path</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal> <name>R_SYS_DIR</name> <literal type="string">"%s"</literal> <name>R_SYS_DIR</name> <literal type="string">"%s"</literal> <name>R_SYS_DIR</name> <literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name>symstore_path</name></expr></argument>, <argument><expr><call><name>r_file_basename</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>debug_file_name</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>info</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>, <argument><expr><call><name>r_file_basename</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>debug_file_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>file_found</name> <operator>=</operator> <call><name>r_file_exists</name> <argument_list>(<argument><expr><name>pdb_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>file_found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <name>pdb_path</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>R_FREE</name><argument_list>(<argument><expr><name>pdb_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file_found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"File '%s' not found in file directory or symbol store\n"</literal></expr></argument>, <argument><expr><call><name>r_file_basename</name> <argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>debug_file_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>baddr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>o</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>baddr</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>baddr</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Cannot find base address, flags will probably be misplaced\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>r_core_pdb_info</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>baddr</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'?'</literal></expr>:</case>

<default>default:</default>

<expr_stmt><expr><call><name>r_core_cmd_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>help_msg_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>r_core_cmd_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>help_msg_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"dwarf"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_DWARF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case> <block>{<block_content> 

<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>r_bin_cur_object</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"imports"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_IMPORTS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>obj</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>imports</name></name><operator>)</operator></expr>?</condition><then> <expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>imports</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'I'</literal></expr>:</case> 

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"info"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_INFO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"initfini"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_INITFINI</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"entries"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_ENTRIES</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'M'</literal></expr>:</case> 

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_MAIN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> 

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"memory"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_MEM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'w'</literal></expr>:</case> 

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"trycatch"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_TRYCATCH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'V'</literal></expr>:</case> 

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"versioninfo"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_VERSIONINFO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'T'</literal></expr>:</case> 

<case>case <expr><literal type="char">'C'</literal></expr>:</case> 

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"signature"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_SIGNATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'z'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>strpurge</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>bin</name><operator>-&gt;</operator><name>strpurge</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>addr</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>old_tmpseek</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>tmpseek</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argstr</name> <init>= <expr><call><name>r_str_trim_head_ro</name> <argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>arg</name> <init>= <expr><call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>argstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>argstr</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>tmpseek</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_core_cmdf</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"e bin.str.purge=%s%s0x%"</literal> <name>PFMT64x</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>strpurge</name></expr> ?</condition><then> <expr><name>strpurge</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>strpurge</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>strpurge</name></expr> ?</condition><then> <expr><literal type="string">","</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>tmpseek</name></name> <operator>=</operator> <name>old_tmpseek</name></expr>;</expr_stmt>

<expr_stmt><expr><name>newline</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'z'</literal></expr>)</condition> <block>{<block_content> 

<switch>switch <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'z'</literal></expr>:</case>

<expr_stmt><expr><name>rdump</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_MODE_RADARE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_MODE_JSON</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'q'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_MODE_SIMPLEST</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_MODE_SIMPLE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_MODE_PRINT</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rdump</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RBinFile</name> <modifier>*</modifier></type><name>bf</name> <init>= <expr><call><name>r_bin_cur</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"bin.minstr"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bf</name><operator>-&gt;</operator><name>strmode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_bin_dump_strings</name> <argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"strings"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_RAW_STRINGS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>r_bin_cur_object</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'q'</literal><operator>)</operator></expr>

?</condition><then> <expr><name>R_MODE_SIMPLEST</name></expr>

</then><else>: <expr><name>R_MODE_SIMPLE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"strings"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_STRINGS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>obj</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>strings</name></name><operator>)</operator></expr>?</condition><then> <expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>strings</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Usage: ic[gljqc**] [class-index or name]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>cls</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>r_bin_cur_object</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>fullGraph</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fullGraph</name></expr>)</condition> <block>{<block_content>

<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;classes</argument>, <argument>iter</argument>, <argument>cls</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cls</name><operator>-&gt;</operator><name>super</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"agn %s\n"</literal></expr></argument>, <argument><expr><name><name>cls</name><operator>-&gt;</operator><name>super</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"agn %s\n"</literal></expr></argument>, <argument><expr><name><name>cls</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"age %s %s\n"</literal></expr></argument>, <argument><expr><name><name>cls</name><operator>-&gt;</operator><name>super</name></name></expr></argument>, <argument><expr><name><name>cls</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"agn %s\n"</literal></expr></argument>, <argument><expr><name><name>cls</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

</block_content>}</block></if> <else>else <block>{<block_content>

<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;classes</argument>, <argument>iter</argument>, <argument>cls</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cls</name><operator>-&gt;</operator><name>super</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strstr</name> <argument_list>(<argument><expr><name><name>cls</name><operator>-&gt;</operator><name>super</name></name></expr></argument>, <argument><expr><literal type="string">"NSObject"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"agn %s\n"</literal></expr></argument>, <argument><expr><name><name>cls</name><operator>-&gt;</operator><name>super</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"agn %s\n"</literal></expr></argument>, <argument><expr><name><name>cls</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"age %s %s\n"</literal></expr></argument>, <argument><expr><name><name>cls</name><operator>-&gt;</operator><name>super</name></name></expr></argument>, <argument><expr><name><name>cls</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></else></if_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'q'</literal> <operator>||</operator> <name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'j'</literal> <operator>||</operator> <name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal> <operator>||</operator> <name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'c'</literal> <operator>||</operator> <name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RBinClass</name> <modifier>*</modifier></type><name>cls</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinSymbol</name> <modifier>*</modifier></type><name>sym</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>r_bin_cur_object</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'j'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strstr</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"qq"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>radare2</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"**"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>cls_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>radare2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input</name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_num_is_valid_input</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>r_num_math</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>first_char</name> <init>= <expr><name>input</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>not_space</name> <init>= <expr><call><name>strspn</name> <argument_list>(<argument><expr><name>first_char</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>first_char</name><index>[<expr><name>not_space</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cls_name</name> <operator>=</operator> <name>first_char</name> <operator>+</operator> <name>not_space</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>radare2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;classes</argument>, <argument>iter</argument>, <argument>cls</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>radare2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"ac %s\n"</literal></expr></argument>, <argument><expr><name><name>cls</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>cls-&gt;methods</argument>, <argument>iter2</argument>, <argument>sym</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"ac %s %s 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>cls</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>!=</operator> <name>count</name><operator>++</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>cls_name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cls_name</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>cls_name</name></expr></argument>, <argument><expr><name><name>cls</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>

<macro><name>r_list_foreach</name> <argument_list>(<argument>cls-&gt;methods</argument>, <argument>iter2</argument>, <argument>sym</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"f sym.%s @ 0x%"</literal><name>PFMT64x</name> <literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<macro><name>r_list_foreach</name> <argument_list>(<argument>cls-&gt;methods</argument>, <argument>iter2</argument>, <argument>sym</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comma</name> <init>= <expr><ternary><condition><expr><name><name>iter2</name><operator>-&gt;</operator><name>p</name></name></expr>?</condition><then> <expr><literal type="string">" "</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s0x%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"\"class\":\"%s\""</literal></expr></argument>, <argument><expr><name><name>cls</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">",\"methods\":["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>cls-&gt;methods</argument>, <argument>iter2</argument>, <argument>sym</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comma</name> <init>= <expr><ternary><condition><expr><name><name>iter2</name><operator>-&gt;</operator><name>p</name></name></expr>?</condition><then> <expr><literal type="string">","</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sym</name><operator>-&gt;</operator><name>method_flags</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>flags</name> <init>= <expr><call><name>r_core_bin_method_flags_str</name> <argument_list>(<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>method_flags</name></name></expr></argument>, <argument><expr><name>R_MODE_JSON</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s{\"name\":\"%s\",\"flags\":%s,\"vaddr\":%"</literal><name>PFMT64d</name> <literal type="string">"}"</literal></expr></argument>,

<argument><expr><name>comma</name></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s{\"name\":\"%s\",\"vaddr\":%"</literal><name>PFMT64d</name> <literal type="string">"}"</literal></expr></argument>,

<argument><expr><name>comma</name></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"class %s\n"</literal></expr></argument>, <argument><expr><name><name>cls</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>cls-&gt;methods</argument>, <argument>iter2</argument>, <argument>sym</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>flags</name> <init>= <expr><call><name>r_core_bin_method_flags_str</name> <argument_list>(<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>method_flags</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"0x%08"</literal><name>PFMT64x</name> <literal type="string">" method %s %s %s\n"</literal></expr></argument>,

<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>, <argument><expr><name><name>cls</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>R_FREE</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

</block_content>}</block></switch>

<goto>goto <name>done</name>;</goto>

</block_content>}</block>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>classes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>playMsg</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"classes"</literal></expr></argument>, <argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>classes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"qq"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;classes</argument>, <argument>iter</argument>, <argument>cls</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isKnownPackage</name> <argument_list>(<argument><expr><name><name>cls</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>cls</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content> 

<macro><name>r_list_foreach</name> <argument_list>(<argument>obj-&gt;classes</argument>, <argument>iter</argument>, <argument>cls</argument>)</argument_list></macro> <block>{<block_content>

<macro><name>r_list_foreach</name> <argument_list>(<argument>cls-&gt;methods</argument>, <argument>iter2</argument>, <argument>sym</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comma</name> <init>= <expr><ternary><condition><expr><name><name>iter2</name><operator>-&gt;</operator><name>p</name></name></expr>?</condition><then> <expr><literal type="string">" "</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s0x%"</literal><name>PFMT64d</name></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>r_list_empty</name> <argument_list>(<argument><expr><name><name>cls</name><operator>-&gt;</operator><name>methods</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_MODE_CLASSDUMP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>R_MODE_RADARE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"classes"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_CLASSES</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>classes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>=</operator> <literal type="string">" "</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>R_MODE_JSON</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"classes"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_CLASSES</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>classes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<decl_stmt><decl><type><name>RBinObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>r_bin_cur_object</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>bin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>classes</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>r_list_length</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>classes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RBININFO</name> <argument_list>(<argument><expr><literal type="string">"classes"</literal></expr></argument>, <argument><expr><name>R_CORE_BIN_ACC_CLASSES</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'D'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>!</operator><call><name>demangle</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"|Usage: iD lang symbolname\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> 

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>R_MODE_RADARE</name></expr>:</case> <expr_stmt><expr><call><name>cmd_info</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"IieEcsSmz*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>R_MODE_JSON</name></expr>:</case> <expr_stmt><expr><call><name>cmd_info</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"IieEcsSmzj"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>R_MODE_SIMPLE</name></expr>:</case> <expr_stmt><expr><call><name>cmd_info</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"IieEcsSmzq"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>cmd_info</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><literal type="string">"IiEecsSmz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'?'</literal></expr>:</case> 

<expr_stmt><expr><call><name>r_core_cmd_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>help_msg_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>redone</name>;</goto>

<case>case <expr><literal type="char">'*'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>R_MODE_RADARE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_MODE_RADARE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_MODE_RADARE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<goto>goto <name>done</name>;</goto>

<case>case <expr><literal type="char">'q'</literal></expr>:</case> 

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_MODE_SIMPLE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cmd_info_bin</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>va</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

<case>case <expr><literal type="char">'j'</literal></expr>:</case> 

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>R_MODE_JSON</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_array</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>R_MODE_ARRAY</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cmd_info_bin</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>va</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

<case>case <expr><literal type="char">'.'</literal></expr>:</case> 

<expr_stmt><expr><call><name>cmd_info_here</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

<default>default:</default>

<expr_stmt><expr><call><name>cmd_info_bin</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>va</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'j'</literal> <operator>||</operator> <operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'q'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<label><name>done</name>:</label>

<if_stmt><if>if <condition>(<expr><name>is_array</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_izzzj</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>newline</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>redone</name>:</label>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
