<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\radare2-analysis\_cppstats\radare2\libr\core\linux_heap_glibc.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_HEAP_GLIBC_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCLUDE_HEAP_GLIBC_C</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEAP32</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"linux_heap_glibc.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEAP32</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GH</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GHT</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GHT_MAX</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HEAP32</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x##_32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GHT</name></cpp:macro> <cpp:value>ut32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GHT_MAX</name></cpp:macro> <cpp:value>UT32_MAX</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x##_64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GHT</name></cpp:macro> <cpp:value>ut64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GHT_MAX</name></cpp:macro> <cpp:value>UT64_MAX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name> <name>GH</name></type>(<name>is_tcache</name>)<parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.debug"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_debug_map_sync</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>core-&gt;dbg-&gt;maps</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"libc-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tcv</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dbg.glibc.tcache"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"dbg.glibc.tcache = %i\n"</literal></expr></argument>, <argument><expr><name>tcv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tcv</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>r_num_get_float</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fp</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>v</name> <operator>&gt;</operator> <literal type="number">2.25</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GHT</name> <name>GH</name></type>(<name>tcache_chunk_size</name>)<parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>GHT</name></type> <name>brk_start</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>GHT</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call> <operator>*</operator><name>cnk</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cnk</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>sz</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>brk_start</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>cnk</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <operator>(</operator><name><name>cnk</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt> 

<return>return <expr><name>sz</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>GH</name></type><argument_list>(<argument><expr><name>update_arena_with_tc</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeap_MallocState_tcache</name></expr></argument>)</argument_list></call> <operator>*</operator><name>cmain_arena</name></expr></argument>, <argument><expr><name>MallocState</name> <operator>*</operator><name>main_arena</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>main_arena</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <name><name>cmain_arena</name><operator>-&gt;</operator><name>mutex</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>main_arena</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>cmain_arena</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BINMAPSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>main_arena</name><operator>-&gt;</operator><name>binmap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cmain_arena</name><operator>-&gt;</operator><name>binmap</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>main_arena</name><operator>-&gt;</operator><name>have_fast_chunks</name></name> <operator>=</operator> <name><name>cmain_arena</name><operator>-&gt;</operator><name>have_fast_chunks</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>main_arena</name><operator>-&gt;</operator><name>attached_threads</name></name> <operator>=</operator> <name><name>cmain_arena</name><operator>-&gt;</operator><name>attached_threads</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NFASTBINS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>fastbinsY</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name><name>cmain_arena</name><operator>-&gt;</operator><name>fastbinsY</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>cmain_arena</name><operator>-&gt;</operator><name>top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>last_remainder</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>cmain_arena</name><operator>-&gt;</operator><name>last_remainder</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NBINS</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>bins</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name><name>cmain_arena</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>cmain_arena</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next_free</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>cmain_arena</name><operator>-&gt;</operator><name>next_free</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>system_mem</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>cmain_arena</name><operator>-&gt;</operator><name>system_mem</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>max_system_mem</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>cmain_arena</name><operator>-&gt;</operator><name>max_system_mem</name></name></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>GH</name></type><argument_list>(<argument><expr><name>update_arena_without_tc</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeap_MallocState</name></expr></argument>)</argument_list></call> <operator>*</operator><name>cmain_arena</name></expr></argument>, <argument><expr><name>MallocState</name> <operator>*</operator><name>main_arena</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>main_arena</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <name><name>cmain_arena</name><operator>-&gt;</operator><name>mutex</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>main_arena</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>cmain_arena</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BINMAPSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>main_arena</name><operator>-&gt;</operator><name>binmap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cmain_arena</name><operator>-&gt;</operator><name>binmap</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>main_arena</name><operator>-&gt;</operator><name>attached_threads</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NFASTBINS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>fastbinsY</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name><name>cmain_arena</name><operator>-&gt;</operator><name>fastbinsY</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>cmain_arena</name><operator>-&gt;</operator><name>top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>last_remainder</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>cmain_arena</name><operator>-&gt;</operator><name>last_remainder</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NBINS</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>bins</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name><name>cmain_arena</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>cmain_arena</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next_free</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>cmain_arena</name><operator>-&gt;</operator><name>next_free</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>system_mem</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>cmain_arena</name><operator>-&gt;</operator><name>system_mem</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>max_system_mem</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>cmain_arena</name><operator>-&gt;</operator><name>max_system_mem</name></name></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name> <name>GH</name></type>(<name>update_main_arena</name>)<parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>GHT</name></type> <name>m_arena</name></decl></parameter>, <parameter><decl><type><name>MallocState</name> <modifier>*</modifier></type><name>main_arena</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tcache</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dbg.glibc.tcache"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tcache</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeap_MallocState_tcache</name></expr></argument>)</argument_list></call> <operator>*</operator><name>cmain_arena</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeap_MallocState_tcache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmain_arena</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>m_arena</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>cmain_arena</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeap_MallocState_tcache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>GH</name></type>(<name>update_arena_with_tc</name>)<parameter_list>(<parameter><decl><type><name>cmain_arena</name></type></decl></parameter>,<parameter><decl><type><name>main_arena</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeap_MallocState</name></expr></argument>)</argument_list></call> <operator>*</operator><name>cmain_arena</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeap_MallocState</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmain_arena</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>m_arena</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>cmain_arena</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeap_MallocState</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>GH</name></type>(<name>update_arena_without_tc</name>)<parameter_list>(<parameter><decl><type><name>cmain_arena</name></type></decl></parameter>,<parameter><decl><type><name>main_arena</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>GH</name></type>(<name>get_brks</name>)<parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>GHT</name> <modifier>*</modifier></type><name>brk_start</name></decl></parameter>, <parameter><decl><type><name>GHT</name> <modifier>*</modifier></type><name>brk_end</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.debug"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_debug_map_sync</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>core-&gt;dbg-&gt;maps</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"[heap]"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>brk_start</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>brk_end</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>addr_end</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>core-&gt;io-&gt;maps</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"[heap]"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>brk_start</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>brk_end</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>GH</name></type>(<name>print_arena_stats</name>)<parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>GHT</name></type> <name>m_arena</name></decl></parameter>, <parameter><decl><type><name>MallocState</name> <modifier>*</modifier></type><name>main_arena</name></decl></parameter>, <parameter><decl><type><name>GHT</name></type> <name>global_max_fast</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>align</name> <init>= <expr><literal type="number">12</literal> <operator>*</operator> <name>SZ</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tcache</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dbg.glibc.tcache"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConsPrintablePalette</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><operator>&amp;</operator><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>context</name><operator>-&gt;</operator><name>pal</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tcache</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>align</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name><name>apart</name><index>[<expr><name>NSMALLBINS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0LL</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NBINS</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>GHT</name></type> <name>addr</name> <init>= <expr><name>m_arena</name> <operator>+</operator> <name>align</name> <operator>+</operator> <name>SZ</name> <operator>*</operator> <name>i</name> <operator>-</operator> <name>SZ</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>bina</name> <init>= <expr><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>bins</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"f chunk.%d.bin = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"f chunk.%d.fd = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>bina</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bina</name> <operator>=</operator> <call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>bins</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"f chunk.%d.bk = 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>bina</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BINMAPSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"f binmap.%d = 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>main_arena</name><operator>-&gt;</operator><name>binmap</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<block>{<block_content> 

<decl_stmt><decl><type><name>char</name></type> <name><name>units</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_num_units</name> <argument_list>(<argument><expr><name>units</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>units</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>max_system_mem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"f heap.maxmem = %s\n"</literal></expr></argument>, <argument><expr><name>units</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_num_units</name> <argument_list>(<argument><expr><name>units</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>units</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>system_mem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"f heap.sysmem = %s\n"</literal></expr></argument>, <argument><expr><name>units</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_num_units</name> <argument_list>(<argument><expr><name>units</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>units</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next_free</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"f heap.nextfree = %s\n"</literal></expr></argument>, <argument><expr><name>units</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_num_units</name> <argument_list>(<argument><expr><name>units</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>units</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"f heap.next= %s\n"</literal></expr></argument>, <argument><expr><name>units</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">"malloc_state @ "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">"\n\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>m_arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">"struct malloc_state main_arena {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" mutex = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%08x\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name><name>main_arena</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" flags = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%08x\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name><name>main_arena</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" fastbinsY = {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <name>SZ</name> <operator>*</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NFASTBINS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name> <operator>+=</operator> <name>SZ</name> <operator>*</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FASTBIN_IDX_TO_SIZE</name> <argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>global_max_fast</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINTF_YA</name> <argument_list>(<argument><expr><literal type="string">" Fastbin %02d\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>PRINTF_RA</name> <argument_list>(<argument><expr><literal type="string">" Fastbin %02d\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" chunksize:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" == %04d "</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_GA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>fastbinsY</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">",\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" top = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">",\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" last_remainder = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>last_remainder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">",\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" bins {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>SZ</name> <operator>*</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>NBINS</name> <operator>-</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">64</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>largebin_index</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>k</name> <operator>+</operator> <name>NSMALLBINS</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>apart</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <name>SZ</name> <operator>*</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NBINS</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>PRINTF_YA</name> <argument_list>(<argument><expr><literal type="string">" Bin %03d: "</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">"Unsorted Bin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" ["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" chunksize:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_BA</name> <argument_list>(<argument><expr><literal type="string">" undefined "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;=</operator> <name>NSMALLBINS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" â"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>j</name> <operator>==</operator> <operator>(</operator><name>NSMALLBINS</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" Small Bins â"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>j</name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>!=</operator> <operator>(</operator><name>NSMALLBINS</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>j</name> <operator>!=</operator> <name>NSMALLBINS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" â"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" â"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" chunksize:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" == %06d "</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>NSMALLBINS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <name>SZ</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>NSMALLBINS</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" â"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>j</name> <operator>==</operator> <operator>(</operator><name>NSMALLBINS</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" Large Bins â"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>j</name> <operator>!=</operator> <name>NSMALLBINS</name> <operator>+</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>!=</operator> <operator>(</operator><name>NSMALLBINS</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>!=</operator> <name>NBINS</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" â"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" â"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" chunksize:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>NBINS</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" &gt;= %06d "</literal></expr></argument>, <argument><expr><name><name>apart</name><index>[<expr><name>j</name> <operator>-</operator> <name>NSMALLBINS</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_BA</name> <argument_list>(<argument><expr><literal type="string">" remaining "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>bin</name> <init>= <expr><name>m_arena</name> <operator>+</operator> <name>align</name> <operator>+</operator> <name>SZ</name> <operator>*</operator> <name>i</name> <operator>-</operator> <name>SZ</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PRINTF_GA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">"-&gt;fd = "</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>bins</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_GA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">"-&gt;bk = "</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>bins</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_newline</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" }\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" binmap = {"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BINMAPSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut32</name><operator>)</operator><name><name>main_arena</name><operator>-&gt;</operator><name>binmap</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" next = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">",\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" next_free = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next_free</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">",\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" system_mem = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>system_mem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">",\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" max_system_mem = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>max_system_mem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">",\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">"}\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name> <name>GH</name></type>(<name>r_resolve_main_arena</name>)<parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>GHT</name> <modifier>*</modifier></type><name>m_arena</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core</name> <operator>||</operator> <operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name> <operator>||</operator> <operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>maps</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>brk_start</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>brk_end</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>libc_addr_sta</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>libc_addr_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>addr_srch</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>heap_sz</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.debug"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RDebugMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_debug_map_sync</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>r_list_foreach</name> <argument_list>(<argument>core-&gt;dbg-&gt;maps</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"/libc-"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>perm</name></name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>libc_addr_sta</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>libc_addr_end</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>addr_end</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>RIOMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SdbListIter</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<macro><name>ls_foreach</name> <argument_list>(<argument>core-&gt;io-&gt;maps</argument>, <argument>iter</argument>, <argument>map</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"arena"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>libc_addr_sta</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>libc_addr_end</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>addr</name></name> <operator>+</operator> <name><name>map</name><operator>-&gt;</operator><name>itv</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>libc_addr_sta</name> <operator>==</operator> <name>GHT_MAX</name> <operator>||</operator> <name>libc_addr_end</name> <operator>==</operator> <name>GHT_MAX</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"cfg.debug"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Can't find glibc mapped in memory (see dm)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Can't find arena mapped in memory (see om)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><call><name>GH</name><argument_list>(<argument><expr><name>get_brks</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>brk_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>brk_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>brk_start</name> <operator>==</operator> <name>GHT_MAX</name> <operator>||</operator> <name>brk_end</name> <operator>==</operator> <name>GHT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No Heap section\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>addr_srch</name> <operator>=</operator> <name>libc_addr_sta</name></expr>;</expr_stmt>

<expr_stmt><expr><name>heap_sz</name> <operator>=</operator> <name>brk_end</name> <operator>-</operator> <name>brk_start</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MallocState</name> <modifier>*</modifier></type><name>ta</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>MallocState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ta</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>addr_srch</name> <operator>&lt;</operator> <name>libc_addr_end</name></expr>)</condition> <block>{<block_content>

<function_decl><type><name>GH</name></type> (<name>update_main_arena</name>) <parameter_list>(<parameter><decl><type><name>core</name></type></decl></parameter>, <parameter><decl><type><name>addr_srch</name></type></decl></parameter>, <parameter><decl><type><name>ta</name></type></decl></parameter>)</parameter_list>;</function_decl>

<if_stmt><if>if <condition>( <expr><call><name><name>ta</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>brk_start</name> <operator>&amp;&amp;</operator> <call><name><name>ta</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>brk_end</name> <operator>&amp;&amp;</operator>

<call><name><name>ta</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>system_mem</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>heap_sz</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>m_arena</name> <operator>=</operator> <name>addr_srch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>addr_srch</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GHT</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Warning: Can't find main_arena in mapped memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <name>GH</name></type>(<name>print_heap_chunk</name>)<parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call> <operator>*</operator><name>cnk</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>chunk</name> <init>= <expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConsPrintablePalette</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><operator>&amp;</operator><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>context</name><operator>-&gt;</operator><name>pal</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cnk</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>cnk</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>cnk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">"struct malloc_chunk @ "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" {\n prev_size = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>cnk</name><operator>-&gt;</operator><name>prev_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">",\n size = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>cnk</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>NON_MAIN_ARENA</name> <operator>|</operator> <name>IS_MMAPPED</name> <operator>|</operator> <name>PREV_INUSE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name><argument_list>(<argument><expr><literal type="string">",\n flags: |N:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name><argument_list>(<argument><expr><literal type="string">"%1d"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>cnk</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;</operator> <name>NON_MAIN_ARENA</name> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name><argument_list>(<argument><expr><literal type="string">" |M:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name><argument_list>(<argument><expr><literal type="string">"%1d"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>cnk</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;</operator> <name>IS_MMAPPED</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name><argument_list>(<argument><expr><literal type="string">" |P:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name><argument_list>(<argument><expr><literal type="string">"%1d"</literal></expr></argument>, <argument><expr><name><name>cnk</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;</operator> <name>PREV_INUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">",\n fd = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>cnk</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">",\n bk = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>cnk</name><operator>-&gt;</operator><name>bk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cnk</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>SZ</name> <operator>*</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">",\n fd-nextsize = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>cnk</name><operator>-&gt;</operator><name>fd_nextsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">",\n bk-nextsize = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>cnk</name><operator>-&gt;</operator><name>bk_nextsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">",\n}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>size</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>cnk</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <name>SZ</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>SZ</name> <operator>*</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">"chunk too big to be displayed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>SZ</name> <operator>*</operator> <literal type="number">128</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>chunk</name> <operator>+</operator> <name>SZ</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">"chunk data = \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_print_hexdump</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>print</name></name></expr></argument>, <argument><expr><name>chunk</name> <operator>+</operator> <name>SZ</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>SZ</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>SZ</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name> <name>GH</name></type>(<name>is_arena</name>)<parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>GHT</name></type> <name>m_arena</name></decl></parameter>, <parameter><decl><type><name>GHT</name></type> <name>m_state</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>m_arena</name> <operator>==</operator> <name>m_state</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>MallocState</name> <modifier>*</modifier></type><name>ta</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>MallocState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ta</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><call><name>GH</name><argument_list>(<argument><expr><name>update_main_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>m_arena</name></expr></argument>, <argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>ta</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>m_state</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name><name>ta</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GHT_MAX</name> <operator>&amp;&amp;</operator> <call><name><name>ta</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>m_arena</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><call><name>GH</name><argument_list>(<argument><expr><name>update_main_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><call><name><name>ta</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>ta</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>m_state</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>GH</name></type>(<name>print_double_linked_list_bin_simple</name>)<parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>GHT</name></type> <name>bin</name></decl></parameter>, <parameter><decl><type><name>MallocState</name> <modifier>*</modifier></type><name>main_arena</name></decl></parameter>, <parameter><decl><type><name>GHT</name></type> <name>brk_start</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>GHT</name></type> <name>next</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call> <operator>*</operator><name>cnk</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RConsPrintablePalette</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><operator>&amp;</operator><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>context</name><operator>-&gt;</operator><name>pal</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cnk</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>cnk</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_GA</name> <argument_list>(<argument><expr><literal type="string">" 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cnk</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <name>bin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>cnk</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <name>bin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"-&gt;fd = 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>cnk</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>cnk</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>next</name> <argument_list type="generic">&lt; <argument><expr><name>brk_start</name> <operator>||</operator> <name>next</name></expr></argument> &gt;</argument_list></name> <call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_RA</name> <argument_list>(<argument><expr><literal type="string">"Double linked list corrupted\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>cnk</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>PRINTF_GA</name> <argument_list>(<argument><expr><literal type="string">"-&gt;fd = 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>cnk</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>cnk</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>!=</operator> <name>bin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_RA</name> <argument_list>(<argument><expr><literal type="string">"Double linked list corrupted\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>cnk</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_GA</name> <argument_list>(<argument><expr><literal type="string">"\n 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>cnk</name><operator>-&gt;</operator><name>bk</name></name> <operator>!=</operator> <name>bin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"-&gt;bk = 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator> <name><name>cnk</name><operator>-&gt;</operator><name>bk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>cnk</name><operator>-&gt;</operator><name>bk</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>next</name> <argument_list type="generic">&lt; <argument><expr><name>brk_start</name> <operator>||</operator> <name>next</name></expr></argument> &gt;</argument_list></name> <call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_RA</name> <argument_list>(<argument><expr><literal type="string">"Double linked list corrupted.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>cnk</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>PRINTF_GA</name> <argument_list>(<argument><expr><literal type="string">"-&gt;bk = 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>cnk</name><operator>-&gt;</operator><name>bk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>GH</name></type>(<name>print_double_linked_list_bin_graph</name>)<parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>GHT</name></type> <name>bin</name></decl></parameter>, <parameter><decl><type><name>MallocState</name> <modifier>*</modifier></type><name>main_arena</name></decl></parameter>, <parameter><decl><type><name>GHT</name></type> <name>brk_start</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>RAGraph</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>r_agraph_new</name> <argument_list>(<argument><expr><call><name>r_cons_canvas_new</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>next</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>title</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>chunk</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RANode</name> <modifier>*</modifier></type><name>bin_node</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev_node</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call> <operator>*</operator><name>cnk</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RConsPrintablePalette</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><operator>&amp;</operator><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>context</name><operator>-&gt;</operator><name>pal</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cnk</name> <operator>||</operator> <operator>!</operator><name>g</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_agraph_free</name> <argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>can</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.color"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>cnk</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"bin @ 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"fd: 0x%"</literal><name>PFMT64x</name><literal type="string">"\nbk: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>cnk</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>cnk</name><operator>-&gt;</operator><name>bk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bin_node</name> <operator>=</operator> <call><name>r_agraph_add_node</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_node</name> <operator>=</operator> <name>bin_node</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>cnk</name><operator>-&gt;</operator><name>bk</name></name> <operator>!=</operator> <name>bin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>cnk</name><operator>-&gt;</operator><name>bk</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>next</name> <argument_list type="generic">&lt; <argument><expr><name>brk_start</name> <operator>||</operator> <name>next</name></expr></argument> &gt;</argument_list></name> <call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_RA</name> <argument_list>(<argument><expr><literal type="string">"Double linked list corrupted\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>cnk</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Chunk @ 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"fd: 0x%"</literal><name>PFMT64x</name><literal type="string">"\nbk: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>cnk</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>cnk</name><operator>-&gt;</operator><name>bk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next_node</name> <operator>=</operator> <call><name>r_agraph_add_node</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_agraph_add_edge</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>prev_node</name></expr></argument>, <argument><expr><name>next_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_agraph_add_edge</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>next_node</name></expr></argument>, <argument><expr><name>prev_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_node</name> <operator>=</operator> <name>next_node</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>r_agraph_add_edge</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>prev_node</name></expr></argument>, <argument><expr><name>bin_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_agraph_add_edge</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>bin_node</name></expr></argument>, <argument><expr><name>prev_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_agraph_print</name> <argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_agraph_free</name> <argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>GH</name></type>(<name>print_double_linked_list_bin</name>)<parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>MallocState</name> <modifier>*</modifier></type><name>main_arena</name></decl></parameter>, <parameter><decl><type><name>GHT</name></type> <name>m_arena</name></decl></parameter>, <parameter><decl><type><name>GHT</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GHT</name></type> <name>num_bin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>graph</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core</name> <operator>||</operator> <operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name> <operator>||</operator> <operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>maps</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>brk_start</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>brk_end</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>initial_brk</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConsPrintablePalette</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><operator>&amp;</operator><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>context</name><operator>-&gt;</operator><name>pal</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num_bin</name> <operator>&gt;</operator> <literal type="number">126</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>bin</name> <init>= <expr><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>bins</name></expr></argument>)</argument_list></call><index>[<expr><name>num_bin</name></expr>]</index></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><call><name>GH</name><argument_list>(<argument><expr><name>get_brks</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>brk_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>brk_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>brk_start</name> <operator>==</operator> <name>GHT_MAX</name> <operator>||</operator> <name>brk_end</name> <operator>==</operator> <name>GHT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No Heap section\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tcache</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dbg.glibc.tcache"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tcache</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fc_offset</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dbg.glibc.fc_offset"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bin</name> <operator>=</operator> <name>m_arena</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name>SZ</name> <operator>*</operator> <name>num_bin</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <name>SZ</name></expr>;</expr_stmt>

<expr_stmt><expr><name>initial_brk</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name>brk_start</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal> <operator>)</operator> <operator>+</operator> <name>fc_offset</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>bin</name> <operator>=</operator> <name>m_arena</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name>SZ</name> <operator>*</operator> <name>num_bin</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <name>SZ</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>initial_brk</name> <operator>=</operator> <operator>(</operator><name>brk_start</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name>num_bin</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" double linked list unsorted bin {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal> <operator>...</operator> <name>NSMALLBINS</name> <operator>-</operator> <literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" double linked list small bin {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>NSMALLBINS</name> <operator>...</operator> <name>NBINS</name> <operator>-</operator> <literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" double linked list large bin {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>graph</name> <operator>||</operator> <name>graph</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><call><name>GH</name><argument_list>(<argument><expr><name>print_double_linked_list_bin_simple</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>bin</name></expr></argument>, <argument><expr><name>main_arena</name></expr></argument>, <argument><expr><name>initial_brk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><call><name>GH</name><argument_list>(<argument><expr><name>print_double_linked_list_bin_graph</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>bin</name></expr></argument>, <argument><expr><name>main_arena</name></expr></argument>, <argument><expr><name>initial_brk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">"\n }\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>GH</name></type>(<name>print_heap_bin</name>)<parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>GHT</name></type> <name>m_arena</name></decl></parameter>, <parameter><decl><type><name>MallocState</name> <modifier>*</modifier></type><name>main_arena</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>num_bin</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConsPrintablePalette</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><operator>&amp;</operator><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>context</name><operator>-&gt;</operator><name>pal</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tcache</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dbg.glibc.tcache"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tcache</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">12</literal> <operator>*</operator> <name>SZ</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\0'</literal></expr>:</case> 

<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">"Bins {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NBINS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>PRINTF_YA</name> <argument_list>(<argument><expr><literal type="string">" Bin %03d:\n"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>GH</name><argument_list>(<argument><expr><name>print_double_linked_list_bin</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>main_arena</name></expr></argument>, <argument><expr><name>m_arena</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">"\n}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">' '</literal></expr>:</case> 

<expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt> 

<case>case <expr><literal type="char">'g'</literal></expr>:</case> 

<expr_stmt><expr><name>num_bin</name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_bin</name> <operator>&gt;</operator> <name>NBINS</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: 0 &lt; bin &lt;= %d\n"</literal></expr></argument>, <argument><expr><name>NBINS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PRINTF_YA</name> <argument_list>(<argument><expr><literal type="string">" Bin %03d:\n"</literal></expr></argument>, <argument><expr><name>num_bin</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>GH</name></type>(<name>print_double_linked_list_bin</name>) <parameter_list>(<parameter><decl><type><name>core</name></type></decl></parameter>, <parameter><decl><type><name>main_arena</name></type></decl></parameter>, <parameter><decl><type><name>m_arena</name></type></decl></parameter>, <parameter><decl><type><name>offset</name></type></decl></parameter>, <parameter><decl><type><name>num_bin</name></type></decl></parameter>, <parameter><decl><type><name>j</name></type></decl></parameter>)</parameter_list>;</function_decl>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>GH</name></type>(<name>print_single_linked_list_bin</name>)<parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>MallocState</name> <modifier>*</modifier></type><name>main_arena</name></decl></parameter>, <parameter><decl><type><name>GHT</name></type> <name>m_arena</name></decl></parameter>, <parameter><decl><type><name>GHT</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GHT</name></type> <name>bin_num</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core</name> <operator>||</operator> <operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name> <operator>||</operator> <operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>maps</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>next</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>brk_start</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>brk_end</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConsPrintablePalette</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><operator>&amp;</operator><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>context</name><operator>-&gt;</operator><name>pal</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call> <operator>*</operator><name>cnk</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cnk</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><call><name>GH</name><argument_list>(<argument><expr><name>update_main_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>m_arena</name></expr></argument>, <argument><expr><name>main_arena</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>bin</name> <init>= <expr><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>fastbinsY</name></expr></argument>)</argument_list></call><index>[<expr><name>bin_num</name></expr>]</index></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bin</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bin</name> <operator>=</operator> <name>m_arena</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name>SZ</name> <operator>*</operator> <name>bin_num</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>next</name></expr></argument>, <argument><expr><name>SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>GH</name><argument_list>(<argument><expr><name>get_brks</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>brk_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>brk_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>brk_start</name> <operator>==</operator> <name>GHT_MAX</name> <operator>||</operator> <name>brk_end</name> <operator>==</operator> <name>GHT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No Heap section\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PRINTF_GA</name> <argument_list>(<argument><expr><literal type="string">" fastbin %d @ "</literal></expr></argument>, <argument><expr><name>bin_num</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_GA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">" {\n "</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>size</name> <init>= <expr><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>brk_start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>next_root</name> <init>= <expr><name>next</name></expr></init></decl>, <decl><type ref="prev"/><name>next_tmp</name> <init>= <expr><name>next</name></expr></init></decl>, <decl><type ref="prev"/><name>double_free</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>next</name> <operator>&amp;&amp;</operator> <name>next</name> <operator>&gt;=</operator> <name>brk_start</name> <operator>&amp;&amp;</operator> <name>next</name> <operator>&lt;</operator> <call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>double_free</name> <operator>==</operator> <name>GHT_MAX</name> <operator>&amp;&amp;</operator> <name>next_tmp</name> <operator>&amp;&amp;</operator> <name>next_tmp</name> <operator>&gt;=</operator> <name>brk_start</name> <operator>&amp;&amp;</operator> <name>next_tmp</name> <operator>&lt;=</operator> <call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>next_tmp</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>cnk</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next_tmp</name> <operator>=</operator> <name><name>cnk</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cnk</name><operator>-&gt;</operator><name>prev_size</name></name> <operator>&gt;</operator> <name>size</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>cnk</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>next_root</name> <operator>==</operator> <name>next_tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>double_free</name> <operator>=</operator> <name>next_root</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>cnk</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>cnk</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>next</name></expr> ?</condition><then> <expr><literal type="string">"-&gt;fd = "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cnk</name><operator>-&gt;</operator><name>prev_size</name></name> <operator>&gt;</operator> <name>size</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>cnk</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINTF_RA</name> <argument_list>(<argument><expr><literal type="string">" 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_RA</name> <argument_list>(<argument><expr><literal type="string">" Linked list corrupted\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">"\n }\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>next_root</name> <operator>=</operator> <name>next_tmp</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>double_free</name> <operator>==</operator> <name>next</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINTF_RA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_RA</name> <argument_list>(<argument><expr><literal type="string">" Double free detected\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">"\n }\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>next</name> <operator>&lt;</operator> <name>brk_start</name> <operator>||</operator> <name>next</name> <operator>&gt;=</operator> <call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINTF_RA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_RA</name> <argument_list>(<argument><expr><literal type="string">" Linked list corrupted\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">"\n }\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">"\n }\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <name>GH</name></type>(<name>print_heap_fastbin</name>)<parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>GHT</name></type> <name>m_arena</name></decl></parameter>, <parameter><decl><type><name>MallocState</name> <modifier>*</modifier></type><name>main_arena</name></decl></parameter>, <parameter><decl><type><name>GHT</name></type> <name>global_max_fast</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>num_bin</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>offset</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tcache</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dbg.glibc.tcache"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConsPrintablePalette</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><operator>&amp;</operator><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>context</name><operator>-&gt;</operator><name>pal</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tcache</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\0'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>!=</operator> <name><name>core</name><operator>-&gt;</operator><name>prompt_offset</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m_arena</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">"fastbinY {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>NFASTBINS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FASTBIN_IDX_TO_SIZE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>global_max_fast</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINTF_YA</name> <argument_list>(<argument><expr><literal type="string">" Fastbin %02d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>PRINTF_RA</name> <argument_list>(<argument><expr><literal type="string">" Fastbin %02d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><call><name>GH</name><argument_list>(<argument><expr><name>print_single_linked_list_bin</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>main_arena</name></expr></argument>, <argument><expr><name>m_arena</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" Empty bin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_BA</name> <argument_list>(<argument><expr><literal type="string">" 0x0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">' '</literal></expr>:</case> 

<expr_stmt><expr><name>num_bin</name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_bin</name> <operator>&gt;=</operator> <name>NFASTBINS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"Error: 0 &lt; bin &lt;= %d\n"</literal></expr></argument>, <argument><expr><name>NFASTBINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><call><name>GH</name><argument_list>(<argument><expr><name>print_single_linked_list_bin</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>main_arena</name></expr></argument>, <argument><expr><name>m_arena</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>num_bin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" Empty bin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_BA</name> <argument_list>(<argument><expr><literal type="string">" 0x0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>GH</name></type>(<name>print_tcache_instance</name>)<parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>GHT</name></type> <name>m_arena</name></decl></parameter>, <parameter><decl><type><name>MallocState</name> <modifier>*</modifier></type><name>main_arena</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core</name> <operator>||</operator> <operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name> <operator>||</operator> <operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>maps</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tcache</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dbg.glibc.tcache"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tcache</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>brk_start</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>brk_end</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>tcache_fd</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>initial_brk</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl> ;</decl_stmt>

<expr_stmt><expr><call><call><name>GH</name><argument_list>(<argument><expr><name>get_brks</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>brk_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>brk_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>tcache_tmp</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>tcache_start</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConsPrintablePalette</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><operator>&amp;</operator><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>context</name><operator>-&gt;</operator><name>pal</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tcache_start</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>brk_start</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>+</operator> <call><name>GH</name><argument_list>(<argument><expr><name>HDR_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>fc_offset</name> <init>= <expr><call><call><name>GH</name><argument_list>(<argument><expr><name>tcache_chunk_size</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>brk_start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>initial_brk</name> <operator>=</operator> <name>brk_start</name> <operator>+</operator> <name>fc_offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>brk_start</name> <operator>==</operator> <name>GHT_MAX</name> <operator>||</operator> <name>brk_end</name> <operator>==</operator> <name>GHT_MAX</name> <operator>||</operator> <name>initial_brk</name> <operator>==</operator> <name>GHT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No heap section\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapTcache</name></expr></argument>)</argument_list></call> <operator>*</operator><name>tcache_heap</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapTcache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tcache_heap</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>tcache_start</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>tcache_heap</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapTcache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name><argument_list>(<argument><expr><literal type="string">"Tcache main arena @"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>m_arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TCACHE_MAX_BINS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tcache_heap</name><operator>-&gt;</operator><name>counts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_GA</name><argument_list>(<argument><expr><literal type="string">"bin :"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name><argument_list>(<argument><expr><literal type="string">"%2d"</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name><argument_list>(<argument><expr><literal type="string">", items :"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name><argument_list>(<argument><expr><literal type="string">"%2d"</literal></expr></argument>,<argument><expr><name><name>tcache_heap</name><operator>-&gt;</operator><name>counts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name><argument_list>(<argument><expr><literal type="string">", fd :"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>GHT</name><operator>)</operator><operator>(</operator><name><name>tcache_heap</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>GH</name><argument_list>(<argument><expr><name>HDR_SZ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tcache_heap</name><operator>-&gt;</operator><name>counts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tcache_fd</name> <operator>=</operator> <operator>(</operator><name>GHT</name><operator>)</operator><name><name>tcache_heap</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>n</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>tcache_heap</name><operator>-&gt;</operator><name>counts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>tcache_fd</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tcache_tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ut64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name><argument_list>(<argument><expr><literal type="string">"-&gt;0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>tcache_tmp</name> <operator>-</operator> <name>TC_HDR_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tcache_fd</name> <operator>=</operator> <name>tcache_tmp</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PRINT_BA</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>m_arena</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>GHT</name></type> <name>mmap_start</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>tcache_start</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MallocState</name> <modifier>*</modifier></type><name>ta</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>MallocState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ta</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tcache_heap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>ta</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><call><name>GH</name><argument_list>(<argument><expr><name>is_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>m_arena</name></expr></argument>, <argument><expr><call><name><name>ta</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>ta</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>m_arena</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">"Tcache thread arena @ "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">" 0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name><name>ta</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mmap_start</name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name><name>ta</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tcache_start</name> <operator>=</operator> <name>mmap_start</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeap_MallocState_tcache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>GH</name><argument_list>(<argument><expr><name>MMAP_ALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><call><name>GH</name><argument_list>(<argument><expr><name>update_main_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><call><name><name>ta</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tcache_heap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ta</name><operator>-&gt;</operator><name>attached_threads</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_BA</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>tcache_start</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>tcache_heap</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapTcache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TCACHE_MAX_BINS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tcache_heap</name><operator>-&gt;</operator><name>counts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">"bin :"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"%2d"</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">", items :"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"%2d"</literal></expr></argument>,<argument><expr><name><name>tcache_heap</name><operator>-&gt;</operator><name>counts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">", fd :"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>GHT</name><operator>)</operator><name><name>tcache_heap</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <call><name>GH</name><argument_list>(<argument><expr><name>HDR_SZ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tcache_heap</name><operator>-&gt;</operator><name>counts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tcache_fd</name> <operator>=</operator> <operator>(</operator><name>GHT</name><operator>)</operator><name><name>tcache_heap</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>tcache_heap</name><operator>-&gt;</operator><name>counts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>tcache_fd</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tcache_tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GHT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"-&gt;0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>tcache_tmp</name> <operator>-</operator> <call><name>GH</name><argument_list>(<argument><expr><name>HDR_SZ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tcache_fd</name> <operator>=</operator> <name>tcache_tmp</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PRINT_BA</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" free\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tcache_heap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>GH</name></type>(<name>print_heap_segment</name>)<parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>MallocState</name> <modifier>*</modifier></type><name>main_arena</name></decl></parameter>,

<parameter><decl><type><name>GHT</name></type> <name>m_arena</name></decl></parameter>, <parameter><decl><type><name>GHT</name></type> <name>m_state</name></decl></parameter>, <parameter><decl><type><name>GHT</name></type> <name>global_max_fast</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format_out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core</name> <operator>||</operator> <operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>dbg</name></name> <operator>||</operator> <operator>!</operator><name><name>core</name><operator>-&gt;</operator><name>dbg</name><operator>-&gt;</operator><name>maps</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>brk_start</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>brk_end</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>size_tmp</name></decl>, <decl><type ref="prev"/><name>min_size</name> <init>= <expr><name>SZ</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>tcache_fd</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>tcache_tmp</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>initial_brk</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>tcache_initial_brk</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tcache</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dbg.glibc.tcache"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>offset</name> <init>= <expr><call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dbg.glibc.fc_offset"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConsPrintablePalette</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><operator>&amp;</operator><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>context</name><operator>-&gt;</operator><name>pal</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>m_arena</name> <operator>==</operator> <name>m_state</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><call><name>GH</name><argument_list>(<argument><expr><name>get_brks</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>brk_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>brk_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tcache</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>GHT</name></type> <name>fc_offset</name> <init>= <expr><call><call><name>GH</name><argument_list>(<argument><expr><name>tcache_chunk_size</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>brk_start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>initial_brk</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>brk_start</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>+</operator> <name>fc_offset</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>initial_brk</name> <operator>=</operator> <operator>(</operator><name>brk_start</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>brk_start</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>m_state</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr> ;</expr_stmt>

<expr_stmt><expr><name>brk_end</name> <operator>=</operator> <name>brk_start</name> <operator>+</operator> <call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>system_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tcache</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tcache_initial_brk</name> <operator>=</operator> <name>brk_start</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeap_MallocState_tcache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>GH</name><argument_list>(<argument><expr><name>MMAP_ALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>initial_brk</name> <operator>=</operator> <name>tcache_initial_brk</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>initial_brk</name> <operator>=</operator> <name>brk_start</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeap_MallocState</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>MMAP_OFFSET</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>brk_start</name> <operator>==</operator> <name>GHT_MAX</name> <operator>||</operator> <name>brk_end</name> <operator>==</operator> <name>GHT_MAX</name> <operator>||</operator> <name>initial_brk</name> <operator>==</operator> <name>GHT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eprintf</name> <argument_list>(<argument><expr><literal type="string">"No Heap section\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>next_chunk</name> <init>= <expr><name>initial_brk</name></expr></init></decl>, <decl><type ref="prev"/><name>prev_chunk</name> <init>= <expr><name>next_chunk</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call> <operator>*</operator><name>cnk</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cnk</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call> <operator>*</operator><name>cnk_next</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cnk_next</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RConfigHold</name> <modifier>*</modifier></type><name>hc</name> <init>= <expr><call><name>r_config_hold_new</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cnk_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>r_cons_get_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RConsCanvas</name> <modifier>*</modifier></type><name>can</name> <init>= <expr><call><name>r_cons_canvas_new</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>can</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cnk_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_hold_free</name> <argument_list>(<argument><expr><name>hc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RAGraph</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>r_agraph_new</name> <argument_list>(<argument><expr><name>can</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cnk_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_canvas_free</name> <argument_list>(<argument><expr><name>can</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_hold_restore</name> <argument_list>(<argument><expr><name>hc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_hold_free</name> <argument_list>(<argument><expr><name>hc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RANode</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><name>R_EMPTY</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>chunk_node</name> <init>= <expr><name>R_EMPTY</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev_node</name> <init>= <expr><name>R_EMPTY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>top_title</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>top_data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>node_title</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>node_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>first_node</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>top_data</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>top_title</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>next_chunk</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>cnk</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size_tmp</name> <operator>=</operator> <operator>(</operator><name><name>cnk</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>prev_chunk_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ut64</name></type> <name>prev_chunk_size</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>format_out</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"{\"chunks\":["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"fs+heap.allocated\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>

<expr_stmt><expr><name><name>can</name><operator>-&gt;</operator><name>linemode</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"graph.linemode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>can</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.color"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>core</name><operator>-&gt;</operator><name>cons</name><operator>-&gt;</operator><name>use_utf8</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"scr.utf8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>layout</name></name> <operator>=</operator> <call><name>r_config_get_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"graph.layout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_agraph_set_title</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="string">"Heap Layout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>top_title</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"Top chunk @ 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comma</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>next_chunk</name> <operator>&amp;&amp;</operator> <name>next_chunk</name> <operator>&gt;=</operator> <name>brk_start</name> <operator>&amp;&amp;</operator> <name>next_chunk</name> <operator>&lt;</operator> <call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>size_tmp</name> <argument_list type="generic">&lt; <argument><expr><name>min_size</name> <operator>||</operator> <name>next_chunk</name> <operator>+</operator> <name>size_tmp</name></expr></argument> &gt;</argument_list></name> <call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>status</name> <init>= <expr><literal type="string">"corrupted"</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>format_out</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">"\n Malloc chunk @ "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">" "</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>next_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_RA</name> <argument_list>(<argument><expr><literal type="string">"[%s]\n"</literal></expr></argument>,<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_RA</name> <argument_list>(<argument><expr><literal type="string">" size: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n fd: 0x%"</literal><name>PFMT64x</name><literal type="string">", bk: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>cnk</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>cnk</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>cnk</name><operator>-&gt;</operator><name>bk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s{\"addr\":%"</literal><name>PFMT64d</name><literal type="string">",\"size\":%"</literal><name>PFMT64d</name><literal type="string">",\"status\":\"%s\",\"fd\":"</literal><name>PFMT64d</name><literal type="string">",\"bk\":"</literal><name>PFMT64d</name><literal type="string">"}"</literal></expr></argument>,

<argument><expr><name>comma</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>next_chunk</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>cnk</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>cnk</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>cnk</name><operator>-&gt;</operator><name>bk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comma</name> <operator>=</operator> <literal type="string">","</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"fs heap.corrupted\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"chunk.corrupted.%06x"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>prev_chunk</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"f %s %d 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cnk</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>prev_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>

<expr_stmt><expr><name>node_title</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">" Malloc chunk @ 0x%"</literal><name>PFMT64x</name><literal type="string">" "</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>prev_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>node_data</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"[corrupted] size: 0x%"</literal><name>PFMT64x</name><literal type="string">"\n fd: 0x%"</literal><name>PFMT64x</name><literal type="string">", bk: 0x%"</literal><name>PFMT64x</name>

<literal type="string">"\nHeap graph could not be recovered\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>cnk</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>cnk</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>cnk</name><operator>-&gt;</operator><name>bk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_agraph_add_node</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>node_title</name></expr></argument>, <argument><expr><name>node_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first_node</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>first_node</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev_chunk_addr</name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><name>prev_chunk</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_chunk_size</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ut64</name><operator>)</operator><name><name>cnk</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>fastbin</name> <init>= <expr><name>size_tmp</name> <operator>&gt;=</operator> <name>SZ</name> <operator>*</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>size_tmp</name> <operator>&lt;=</operator> <name>global_max_fast</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_free</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>double_free</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fastbin</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>size_tmp</name> <operator>/</operator> <operator>(</operator><name>SZ</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>idx</name> <init>= <expr><operator>(</operator><name>GHT</name><operator>)</operator><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>fastbinsY</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>cnk</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>next</name> <init>= <expr><name><name>cnk</name><operator>-&gt;</operator><name>fd</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_chunk</name> <operator>==</operator> <name>idx</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>next</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_free</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>next</name> <operator>&amp;&amp;</operator> <name>next</name> <operator>&gt;=</operator> <name>brk_start</name> <operator>&amp;&amp;</operator> <name>next</name> <operator>&lt;</operator> <call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prev_chunk</name> <operator>==</operator> <name>idx</name> <operator>||</operator> <name>prev_chunk</name> <operator>==</operator> <name>next</name> <operator>||</operator> <name>idx</name> <operator>==</operator> <name>next</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_free</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>next</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>double_free</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>cnk_next</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>next_node</name> <init>= <expr><name><name>cnk_next</name><operator>-&gt;</operator><name>fd</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>next_node</name> <operator>&amp;&amp;</operator> <name>next_node</name> <operator>&gt;=</operator> <name>brk_start</name> <operator>&amp;&amp;</operator> <name>next_node</name> <operator>&lt;</operator> <call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prev_chunk</name> <operator>==</operator> <name>next_node</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>double_free</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>next_node</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>cnk_next</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next_node</name> <operator>=</operator> <name><name>cnk_next</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>double_free</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>cnk</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>cnk</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>double_free</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_RA</name> <argument_list>(<argument><expr><literal type="string">" Double free in simple-linked list detected "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev_chunk_size</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <call><name>GH</name><argument_list>(<argument><expr><name>HDR_SZ</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <call><name>GH</name><argument_list>(<argument><expr><name>HDR_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tcache</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapTcache</name></expr></argument>)</argument_list></call> <operator>*</operator><name>tcache_heap</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapTcache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tcache_heap</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_cons_canvas_free</name> <argument_list>(<argument><expr><name>can</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_hold_restore</name> <argument_list>(<argument><expr><name>hc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_hold_free</name> <argument_list>(<argument><expr><name>hc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cnk_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>tcache_initial_brk</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>tcache_heap</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapTcache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TCACHE_MAX_BINS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tcache_heap</name><operator>-&gt;</operator><name>counts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>GHT</name><operator>)</operator><name><name>tcache_heap</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>SZ</name> <operator>*</operator> <literal type="number">2</literal> <operator>==</operator> <name>prev_chunk</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_free</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_chunk_size</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>TC_HDR_SZ</name> <operator>+</operator> <call><name>GH</name><argument_list>(<argument><expr><name>TC_SZ</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tcache_heap</name><operator>-&gt;</operator><name>counts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tcache_fd</name> <operator>=</operator> <operator>(</operator><name>GHT</name><operator>)</operator><name><name>tcache_heap</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>tcache_heap</name><operator>-&gt;</operator><name>counts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>tcache_fd</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tcache_tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GHT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tcache_tmp</name> <operator>-</operator> <name>SZ</name> <operator>*</operator> <literal type="number">2</literal> <operator>==</operator> <name>prev_chunk</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_free</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_chunk_size</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>TC_HDR_SZ</name> <operator>+</operator> <call><name>GH</name><argument_list>(<argument><expr><name>TC_SZ</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tcache_fd</name> <operator>=</operator> <operator>(</operator><name>ut64</name><operator>)</operator><name>tcache_tmp</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>tcache_heap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>next_chunk</name> <operator>+=</operator> <name>size_tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_chunk</name> <operator>=</operator> <name>next_chunk</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>next_chunk</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name> <operator>*</operator><operator>)</operator><name>cnk</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapChunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size_tmp</name> <operator>=</operator> <operator>(</operator><name><name>cnk</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>status</name> <init>= <expr><literal type="string">"allocated"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fastbin</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_free</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="string">"free"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cnk</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="string">"free"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tcache</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_free</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="string">"free"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>format_out</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">"\n Malloc chunk @ "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">" "</literal></expr></argument>, <argument><expr><name>prev_chunk_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">"[size: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><name>prev_chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_GA</name> <argument_list>(<argument><expr><literal type="string">"][%s]"</literal></expr></argument>,<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"%s{\"addr\":0x%"</literal><name>PFMT64x</name><literal type="string">",\"size\":0x%"</literal><name>PFMT64x</name><literal type="string">",\"status\":\"%s\"}"</literal></expr></argument>,

<argument><expr><name>comma</name></expr></argument>, <argument><expr><name>prev_chunk_addr</name></expr></argument>, <argument><expr><name>prev_chunk_size</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comma</name> <operator>=</operator> <literal type="string">","</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"fs heap.%s\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"chunk.%06x"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>prev_chunk_addr</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"f %s %d 0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>prev_chunk_size</name></expr></argument>, <argument><expr><name>prev_chunk_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>

<expr_stmt><expr><name>node_title</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">" Malloc chunk @ 0x%"</literal><name>PFMT64x</name><literal type="string">" "</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>prev_chunk_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>node_data</name> <operator>=</operator> <call><name>r_str_newf</name> <argument_list>(<argument><expr><literal type="string">"size: 0x%"</literal><name>PFMT64x</name><literal type="string">" status: %s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>prev_chunk_size</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk_node</name> <operator>=</operator> <call><name>r_agraph_add_node</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>node_title</name></expr></argument>, <argument><expr><name>node_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first_node</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>first_node</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>r_agraph_add_edge</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>prev_node</name></expr></argument>, <argument><expr><name>chunk_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>prev_node</name> <operator>=</operator> <name>chunk_node</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

<switch>switch <condition>(<expr><name>format_out</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">"\n Top chunk @ "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" - [brk_start: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>brk_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">", brk_end: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>brk_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">"]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"],"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"\"top\":0x%"</literal><name>PFMT64x</name><literal type="string">","</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"\"brk\":0x%"</literal><name>PFMT64x</name><literal type="string">","</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>brk_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"\"end\":0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>brk_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"fs-\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"f heap.top = 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"f heap.brk = 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>brk_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"f heap.end = 0x%08"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>brk_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>

<expr_stmt><expr><name>top</name> <operator>=</operator> <call><name>r_agraph_add_node</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>top_title</name></expr></argument>, <argument><expr><name>top_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first_node</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>r_agraph_add_edge</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>prev_node</name></expr></argument>, <argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>node_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>node_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_agraph_print</name> <argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_cons_canvas_free</name> <argument_list>(<argument><expr><name>can</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_hold_restore</name> <argument_list>(<argument><expr><name>hc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_config_hold_free</name> <argument_list>(<argument><expr><name>hc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>r_cons_printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>top_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>top_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cnk_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <name>GH</name></type>(<name>print_malloc_states</name>)<parameter_list>( <parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>GHT</name></type> <name>m_arena</name></decl></parameter>, <parameter><decl><type><name>MallocState</name> <modifier>*</modifier></type><name>main_arena</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>MallocState</name> <modifier>*</modifier></type><name>ta</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>MallocState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConsPrintablePalette</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><operator>&amp;</operator><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>context</name><operator>-&gt;</operator><name>pal</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ta</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">"main_arena @ "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>m_arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>m_arena</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>ta</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>main_arena</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><call><name>GH</name><argument_list>(<argument><expr><name>is_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>m_arena</name></expr></argument>, <argument><expr><call><name><name>ta</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>ta</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>m_arena</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">"thread arena @ "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><call><name><name>ta</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><call><name>GH</name><argument_list>(<argument><expr><name>update_main_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><call><name><name>ta</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ta</name><operator>-&gt;</operator><name>attached_threads</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_BA</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_GA</name> <argument_list>(<argument><expr><literal type="string">" free\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name> <name>GH</name></type><argument_list>(<argument><expr><name>print_inst_minfo</name></expr></argument>)</argument_list><argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapInfo</name></expr></argument>)</argument_list></call> <operator>*</operator><name>heap_info</name></expr></argument>, <argument><expr><name>GHT</name> <name>hinfo</name></expr></argument>)</argument_list> <block>{<block_content>

<decl_stmt><decl><type><name>RConsPrintablePalette</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><operator>&amp;</operator><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>context</name><operator>-&gt;</operator><name>pal</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">"malloc_info @ "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name>hinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">" {\n ar_ptr = "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>heap_info</name><operator>-&gt;</operator><name>ar_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">" prev = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>heap_info</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">" size = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>heap_info</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">" mprotect_size = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_BA</name> <argument_list>(<argument><expr><literal type="string">"0x%"</literal><name>PFMT64x</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ut64</name><operator>)</operator><name><name>heap_info</name><operator>-&gt;</operator><name>mprotect_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_YA</name> <argument_list>(<argument><expr><literal type="string">"}\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name> <name>GH</name></type>(<name>print_malloc_info</name>)<parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>GHT</name></type> <name>m_state</name></decl></parameter>, <parameter><decl><type><name>GHT</name></type> <name>malloc_state</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>GHT</name></type> <name>h_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConsPrintablePalette</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><operator>&amp;</operator><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>context</name><operator>-&gt;</operator><name>pal</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>malloc_state</name> <operator>==</operator> <name>m_state</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_RA</name> <argument_list>(<argument><expr><literal type="string">"main_arena does not have an instance of malloc_info\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><call><name>GH</name><argument_list>(<argument><expr><name>is_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>malloc_state</name></expr></argument>, <argument><expr><name>m_state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>h_info</name> <operator>=</operator> <operator>(</operator><name>malloc_state</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapInfo</name></expr></argument>)</argument_list></call> <operator>*</operator><name>heap_info</name> <operator>=</operator> <call><name>R_NEW0</name> <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>heap_info</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>h_info</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>heap_info</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>GH</name></type>(<name>print_inst_minfo</name>) <parameter_list>(<parameter><decl><type><name>heap_info</name></type></decl></parameter>, <parameter><decl><type><name>h_info</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>MallocState</name> <modifier>*</modifier></type><name>ms</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>MallocState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ms</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>heap_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>heap_info</name><operator>-&gt;</operator><name>prev</name></name> <operator>!=</operator> <literal type="number">0x0</literal> <operator>&amp;&amp;</operator> <name><name>heap_info</name><operator>-&gt;</operator><name>prev</name></name> <operator>!=</operator> <name>GHT_MAX</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><call><name>GH</name><argument_list>(<argument><expr><name>update_main_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>malloc_state</name></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>heap_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>ms</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>!=</operator> <name>h_info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>h_info</name> <operator>=</operator> <operator>(</operator><call><name><name>ms</name><operator>-&gt;</operator><name>GH</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>r_io_read_at</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>h_info</name></expr></argument>, <argument><expr><operator>(</operator><name>ut8</name><operator>*</operator><operator>)</operator><name>heap_info</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>RHeapInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>GH</name></type>(<name>print_inst_minfo</name>) <parameter_list>(<parameter><decl><type><name>heap_info</name></type></decl></parameter>, <parameter><decl><type><name>h_info</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>heap_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_RA</name> <argument_list>(<argument><expr><literal type="string">"This address is not part of the arenas\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>GH</name><argument_list>(<argument><expr><name>help_msg</name></expr></argument>)</argument_list>[] <init>= <expr><block>{

<expr><literal type="string">"Usage:"</literal></expr>, <expr><literal type="string">" dmh"</literal></expr>, <expr><literal type="string">" #Memory map heap"</literal></expr>,

<expr><literal type="string">"dmh"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"List chunks in heap segment"</literal></expr>,

<expr><literal type="string">"dmh"</literal></expr>, <expr><literal type="string">" @[malloc_state]"</literal></expr>, <expr><literal type="string">"List heap chunks of a particular arena"</literal></expr>,

<expr><literal type="string">"dmha"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"List all malloc_state instances in application"</literal></expr>,

<expr><literal type="string">"dmhb"</literal></expr>, <expr><literal type="string">" @[malloc_state]"</literal></expr>, <expr><literal type="string">"Display all parsed Double linked list of main_arena's or a particular arena bins instance"</literal></expr>,

<expr><literal type="string">"dmhb"</literal></expr>, <expr><literal type="string">" [bin_num|bin_num:malloc_state]"</literal></expr>, <expr><literal type="string">"Display parsed double linked list of bins instance from a particular arena"</literal></expr>,

<expr><literal type="string">"dmhbg"</literal></expr>,<expr><literal type="string">" [bin_num]"</literal></expr>, <expr><literal type="string">"Display double linked list graph of main_arena's bin [Under developemnt]"</literal></expr>,

<expr><literal type="string">"dmhc"</literal></expr>, <expr><literal type="string">" @[chunk_addr]"</literal></expr>, <expr><literal type="string">"Display malloc_chunk struct for a given malloc chunk"</literal></expr>,

<expr><literal type="string">"dmhf"</literal></expr>, <expr><literal type="string">" @[malloc_state]"</literal></expr>, <expr><literal type="string">"Display all parsed fastbins of main_arena's or a particular arena fastbinY instance"</literal></expr>,

<expr><literal type="string">"dmhf"</literal></expr>, <expr><literal type="string">" [fastbin_num|fastbin_num:malloc_state]"</literal></expr>, <expr><literal type="string">"Display parsed single linked list in fastbinY instance from a particular arena"</literal></expr>,

<expr><literal type="string">"dmhg"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Display heap graph of heap segment"</literal></expr>,

<expr><literal type="string">"dmhg"</literal></expr>, <expr><literal type="string">" [malloc_state]"</literal></expr>, <expr><literal type="string">"Display heap graph of a particular arena"</literal></expr>,

<expr><literal type="string">"dmhi"</literal></expr>, <expr><literal type="string">" @[malloc_state]"</literal></expr>, <expr><literal type="string">"Display heap_info structure/structures for a given arena"</literal></expr>,

<expr><literal type="string">"dmhm"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"List all elements of struct malloc_state of main thread (main_arena)"</literal></expr>,

<expr><literal type="string">"dmhm"</literal></expr>, <expr><literal type="string">" @[malloc_state]"</literal></expr>, <expr><literal type="string">"List all malloc_state instance of a particular arena"</literal></expr>,

<expr><literal type="string">"dmht"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Display all parsed thread cache bins of all arena's tcache instance"</literal></expr>,

<expr><literal type="string">"dmh?"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Show map heap help"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name> <name>GH</name></type>(<name>cmd_dbg_map_heap_glibc</name>)<parameter_list>(<parameter><decl><type><name>RCore</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>GHT</name></type> <name>m_arena</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>m_state</name> <init>= <expr><name>GHT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RConsPrintablePalette</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><operator>&amp;</operator><call><name>r_cons_singleton</name> <argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>context</name><operator>-&gt;</operator><name>pal</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GHT</name></type> <name>global_max_fast</name> <init>= <expr><operator>(</operator><literal type="number">64</literal> <operator>*</operator> <name>SZ</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MallocState</name> <modifier>*</modifier></type><name>main_arena</name> <init>= <expr><call><name>R_NEW0</name> <argument_list>(<argument><expr><name>MallocState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>main_arena</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>r_config_set_i</name> <argument_list>(<argument><expr><name><name>core</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"dbg.glibc.tcache"</literal></expr></argument>, <argument><expr><call><call><name>GH</name><argument_list>(<argument><expr><name>is_tcache</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>format</name> <init>= <expr><literal type="char">'c'</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>get_state</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">' '</literal></expr> :</case> 

<expr_stmt><expr><name>m_state</name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>get_state</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<case>case <expr><literal type="char">'\0'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><call><call><name>GH</name><argument_list>(<argument><expr><name>r_resolve_main_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_arena</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>!=</operator> <name><name>core</name><operator>-&gt;</operator><name>prompt_offset</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m_state</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>get_state</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m_state</name> <operator>=</operator> <name>m_arena</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><call><name>GH</name><argument_list>(<argument><expr><name>is_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>m_arena</name></expr></argument>, <argument><expr><name>m_state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><call><name>GH</name><argument_list>(<argument><expr><name>update_main_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>m_state</name></expr></argument>, <argument><expr><name>main_arena</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<function_decl><type><name>GH</name></type>(<name>print_heap_segment</name>) <parameter_list>(<parameter><decl><type><name>core</name></type></decl></parameter>, <parameter><decl><type><name>main_arena</name></type></decl></parameter>, <parameter><decl><type><name>m_arena</name></type></decl></parameter>, <parameter><decl><type><name>m_state</name></type></decl></parameter>, <parameter><decl><type><name>global_max_fast</name></type></decl></parameter>, <parameter><decl><type><name>format</name></type></decl></parameter>)</parameter_list>;</function_decl>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_RA</name> <argument_list>(<argument><expr><literal type="string">"This address is not part of the arenas\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><call><call><name>GH</name><argument_list>(<argument><expr><name>r_resolve_main_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_arena</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><call><name>GH</name><argument_list>(<argument><expr><name>update_main_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>m_arena</name></expr></argument>, <argument><expr><name>main_arena</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<function_decl><type><name>GH</name></type>(<name>print_malloc_states</name>) <parameter_list>(<parameter><decl><type><name>core</name></type></decl></parameter>, <parameter><decl><type><name>m_arena</name></type></decl></parameter>, <parameter><decl><type><name>main_arena</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><call><call><name>GH</name><argument_list>(<argument><expr><name>r_resolve_main_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_arena</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><call><name>GH</name><argument_list>(<argument><expr><name>update_main_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>m_arena</name></expr></argument>, <argument><expr><name>main_arena</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"\0"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>!=</operator> <name><name>core</name><operator>-&gt;</operator><name>prompt_offset</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m_state</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>m_state</name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<function_decl><type><name>GH</name></type>(<name>print_malloc_info</name>) <parameter_list>(<parameter><decl><type><name>core</name></type></decl></parameter>, <parameter><decl><type><name>m_arena</name></type></decl></parameter>, <parameter><decl><type><name>m_state</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><call><call><name>GH</name><argument_list>(<argument><expr><name>r_resolve_main_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_arena</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>

<expr_stmt><expr><name>format</name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><name>format</name> <operator>=</operator> <literal type="char">'j'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"\0"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>!=</operator> <name><name>core</name><operator>-&gt;</operator><name>prompt_offset</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m_arena</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><call><name>GH</name><argument_list>(<argument><expr><name>update_main_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>m_arena</name></expr></argument>, <argument><expr><name>main_arena</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><call><name>GH</name><argument_list>(<argument><expr><name>update_main_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>m_arena</name></expr></argument>, <argument><expr><name>main_arena</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>m_arena</name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><call><name>GH</name><argument_list>(<argument><expr><name>update_main_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>m_arena</name></expr></argument>, <argument><expr><name>main_arena</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<function_decl><type><name>GH</name></type>(<name>print_arena_stats</name>) <parameter_list>(<parameter><decl><type><name>core</name></type></decl></parameter>, <parameter><decl><type><name>m_arena</name></type></decl></parameter>, <parameter><decl><type><name>main_arena</name></type></decl></parameter>, <parameter><decl><type><name>global_max_fast</name></type></decl></parameter>, <parameter><decl><type><name>format</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><call><call><name>GH</name><argument_list>(<argument><expr><name>r_resolve_main_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_arena</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>m_state_str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dup</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dup</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strtok</name> <argument_list>(<argument><expr><name>dup</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m_state_str</name> <operator>=</operator> <call><name>strtok</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m_state</name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m_state_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m_state</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m_state</name> <operator>=</operator> <name>m_arena</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>!=</operator> <name><name>core</name><operator>-&gt;</operator><name>prompt_offset</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m_state</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>m_state</name> <operator>=</operator> <name>m_arena</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><call><name>GH</name><argument_list>(<argument><expr><name>is_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>m_arena</name></expr></argument>, <argument><expr><name>m_state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><call><name>GH</name><argument_list>(<argument><expr><name>update_main_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>m_state</name></expr></argument>, <argument><expr><name>main_arena</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<function_decl><type><name>GH</name></type>(<name>print_heap_bin</name>) <parameter_list>(<parameter><decl><type><name>core</name></type></decl></parameter>, <parameter><decl><type><name>m_state</name></type></decl></parameter>, <parameter><decl><type><name>main_arena</name></type></decl></parameter>, <parameter><decl><type><name>dup</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_RA</name> <argument_list>(<argument><expr><literal type="string">"This address is not part of the arenas\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><call><call><name>GH</name><argument_list>(<argument><expr><name>r_resolve_main_arena</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_arena</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<function_decl><type><name>GH</name></type>(<name>print_heap_chunk</name>) <parameter_list>(<parameter><decl><type><name>core</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><call><call><name>GH</name><argument_list>(<argument><expr><name>r_resolve_main_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_arena</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>m_state_str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dup</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dup</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strtok</name> <argument_list>(<argument><expr><name>dup</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m_state_str</name> <operator>=</operator> <call><name>strtok</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m_state</name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m_state_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m_state</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m_state</name> <operator>=</operator> <name>m_arena</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>!=</operator> <name><name>core</name><operator>-&gt;</operator><name>prompt_offset</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m_state</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>m_state</name> <operator>=</operator> <name>m_arena</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><call><name>GH</name><argument_list>(<argument><expr><name>is_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>m_arena</name></expr></argument>, <argument><expr><name>m_state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><call><name>GH</name><argument_list>(<argument><expr><name>update_main_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>m_state</name></expr></argument>, <argument><expr><name>main_arena</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<function_decl><type><name>GH</name></type>(<name>print_heap_fastbin</name>) <parameter_list>(<parameter><decl><type><name>core</name></type></decl></parameter>, <parameter><decl><type><name>m_state</name></type></decl></parameter>, <parameter><decl><type><name>main_arena</name></type></decl></parameter>, <parameter><decl><type><name>global_max_fast</name></type></decl></parameter>, <parameter><decl><type><name>dup</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_RA</name> <argument_list>(<argument><expr><literal type="string">"This address is not part of the arenas\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'g'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <literal type="char">'g'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<case>case <expr><literal type="char">'*'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<case>case <expr><literal type="char">'j'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <literal type="char">'j'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><call><name>GH</name><argument_list>(<argument><expr><name>r_resolve_main_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_arena</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"\0"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>offset</name></name> <operator>!=</operator> <name><name>core</name><operator>-&gt;</operator><name>prompt_offset</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m_state</name> <operator>=</operator> <name><name>core</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>get_state</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>m_state</name> <operator>=</operator> <call><name>r_num_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>get_state</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>get_state</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m_state</name> <operator>=</operator> <name>m_arena</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><call><name>GH</name><argument_list>(<argument><expr><name>is_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>m_arena</name></expr></argument>, <argument><expr><name>m_state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><call><name>GH</name><argument_list>(<argument><expr><name>update_main_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>m_state</name></expr></argument>, <argument><expr><name>main_arena</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<function_decl><type><name>GH</name></type>(<name>print_heap_segment</name>) <parameter_list>(<parameter><decl><type><name>core</name></type></decl></parameter>, <parameter><decl><type><name>main_arena</name></type></decl></parameter>, <parameter><decl><type><name>m_arena</name></type></decl></parameter>, <parameter><decl><type><name>m_state</name></type></decl></parameter>, <parameter><decl><type><name>global_max_fast</name></type></decl></parameter>, <parameter><decl><type><name>format</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>PRINT_RA</name> <argument_list>(<argument><expr><literal type="string">"This address is not part of the arenas\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><call><name>GH</name><argument_list>(<argument><expr><name>r_resolve_main_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_arena</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><call><name>GH</name><argument_list>(<argument><expr><name>update_main_arena</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><name>m_arena</name></expr></argument>, <argument><expr><name>main_arena</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<function_decl><type><name>GH</name></type>(<name>print_tcache_instance</name>) <parameter_list>(<parameter><decl><type><name>core</name></type></decl></parameter>, <parameter><decl><type><name>m_arena</name></type></decl></parameter>, <parameter><decl><type><name>main_arena</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'?'</literal></expr>:</case>

<expr_stmt><expr><call><name>r_core_cmd_help</name> <argument_list>(<argument><expr><name>core</name></expr></argument>, <argument><expr><call><name>GH</name><argument_list>(<argument><expr><name>help_msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>main_arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

</unit>
